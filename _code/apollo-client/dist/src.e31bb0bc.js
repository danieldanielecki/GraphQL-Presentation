// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__addDisposableResource = __addDisposableResource;
exports.__assign = void 0;
exports.__asyncDelegator = __asyncDelegator;
exports.__asyncGenerator = __asyncGenerator;
exports.__asyncValues = __asyncValues;
exports.__await = __await;
exports.__awaiter = __awaiter;
exports.__classPrivateFieldGet = __classPrivateFieldGet;
exports.__classPrivateFieldIn = __classPrivateFieldIn;
exports.__classPrivateFieldSet = __classPrivateFieldSet;
exports.__createBinding = void 0;
exports.__decorate = __decorate;
exports.__disposeResources = __disposeResources;
exports.__esDecorate = __esDecorate;
exports.__exportStar = __exportStar;
exports.__extends = __extends;
exports.__generator = __generator;
exports.__importDefault = __importDefault;
exports.__importStar = __importStar;
exports.__makeTemplateObject = __makeTemplateObject;
exports.__metadata = __metadata;
exports.__param = __param;
exports.__propKey = __propKey;
exports.__read = __read;
exports.__rest = __rest;
exports.__runInitializers = __runInitializers;
exports.__setFunctionName = __setFunctionName;
exports.__spread = __spread;
exports.__spreadArray = __spreadArray;
exports.__spreadArrays = __spreadArrays;
exports.__values = __values;
exports.default = void 0;
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */

var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function () {
  exports.__assign = __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
exports.__assign = __assign;
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
    return f;
  }
  var kind = contextIn.kind,
    key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _,
    done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access) context.access[p] = contextIn.access[p];
    context.addInitializer = function (f) {
      if (done) throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? {
      get: descriptor.get,
      set: descriptor.set
    } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0) continue;
      if (result === null || typeof result !== "object") throw new TypeError("Object expected");
      if (_ = accept(result.get)) descriptor.get = _;
      if (_ = accept(result.set)) descriptor.set = _;
      if (_ = accept(result.init)) initializers.unshift(_);
    } else if (_ = accept(result)) {
      if (kind === "field") initializers.unshift(_);else descriptor[key] = _;
    }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
;
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
;
function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
}
;
function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", {
    configurable: true,
    value: prefix ? "".concat(prefix, " ", name) : name
  });
}
;
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
    f,
    y,
    t,
    g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;
  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}
var __createBinding = exports.__createBinding = Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function () {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
};
function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
    m = s && o[s],
    i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
    r,
    ar = [],
    e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
}

/** @deprecated */
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
  return ar;
}

/** @deprecated */
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
    i,
    q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;
  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: false
      } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
    i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
;
var __setModuleDefault = Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
};
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    default: mod
  };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose;
    if (async) {
      if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    env.stack.push({
      value: value,
      dispose: dispose,
      async: async
    });
  } else if (async) {
    env.stack.push({
      async: true
    });
  }
  return value;
}
var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};
function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  function next() {
    while (env.stack.length) {
      var rec = env.stack.pop();
      try {
        var result = rec.dispose && rec.dispose.call(rec.value);
        if (rec.async) return Promise.resolve(result).then(next, function (e) {
          fail(e);
          return next();
        });
      } catch (e) {
        fail(e);
      }
    }
    if (env.hasError) throw env.error;
  }
  return next();
}
var _default = exports.default = {
  __extends: __extends,
  __assign: __assign,
  __rest: __rest,
  __decorate: __decorate,
  __param: __param,
  __metadata: __metadata,
  __awaiter: __awaiter,
  __generator: __generator,
  __createBinding: __createBinding,
  __exportStar: __exportStar,
  __values: __values,
  __read: __read,
  __spread: __spread,
  __spreadArrays: __spreadArrays,
  __spreadArray: __spreadArray,
  __await: __await,
  __asyncGenerator: __asyncGenerator,
  __asyncDelegator: __asyncDelegator,
  __asyncValues: __asyncValues,
  __makeTemplateObject: __makeTemplateObject,
  __importStar: __importStar,
  __importDefault: __importDefault,
  __classPrivateFieldGet: __classPrivateFieldGet,
  __classPrivateFieldSet: __classPrivateFieldSet,
  __classPrivateFieldIn: __classPrivateFieldIn,
  __addDisposableResource: __addDisposableResource,
  __disposeResources: __disposeResources
};
},{}],"../node_modules/@apollo/client/node_modules/ts-invariant/lib/invariant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.InvariantError = void 0;
exports.invariant = invariant;
exports.setVerbosity = setVerbosity;
var _tslib = require("tslib");
var genericMessage = "Invariant Violation";
var _a = Object.setPrototypeOf,
  setPrototypeOf = _a === void 0 ? function (obj, proto) {
    obj.__proto__ = proto;
    return obj;
  } : _a;
var InvariantError = exports.InvariantError = /** @class */function (_super) {
  (0, _tslib.__extends)(InvariantError, _super);
  function InvariantError(message) {
    if (message === void 0) {
      message = genericMessage;
    }
    var _this = _super.call(this, typeof message === "number" ? genericMessage + ": " + message + " (see https://github.com/apollographql/invariant-packages)" : message) || this;
    _this.framesToPop = 1;
    _this.name = genericMessage;
    setPrototypeOf(_this, InvariantError.prototype);
    return _this;
  }
  return InvariantError;
}(Error);
function invariant(condition, message) {
  if (!condition) {
    throw new InvariantError(message);
  }
}
var verbosityLevels = ["debug", "log", "warn", "error", "silent"];
var verbosityLevel = verbosityLevels.indexOf("log");
function wrapConsoleMethod(name) {
  return function () {
    if (verbosityLevels.indexOf(name) >= verbosityLevel) {
      // Default to console.log if this host environment happens not to provide
      // all the console.* methods we need.
      var method = console[name] || console.log;
      return method.apply(console, arguments);
    }
  };
}
(function (invariant) {
  invariant.debug = wrapConsoleMethod("debug");
  invariant.log = wrapConsoleMethod("log");
  invariant.warn = wrapConsoleMethod("warn");
  invariant.error = wrapConsoleMethod("error");
})(invariant || (exports.invariant = invariant = {}));
function setVerbosity(level) {
  var old = verbosityLevels[verbosityLevel];
  verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));
  return old;
}
var _default = exports.default = invariant;
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js"}],"../node_modules/@apollo/client/version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
var version = exports.version = "3.8.8";
},{}],"../node_modules/@apollo/client/utilities/globals/maybe.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maybe = maybe;
function maybe(thunk) {
  try {
    return thunk();
  } catch (_a) {}
}
},{}],"../node_modules/@apollo/client/utilities/globals/global.js":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _maybe = require("./maybe.js");
var _default = exports.default = (0, _maybe.maybe)(function () {
  return globalThis;
}) || (0, _maybe.maybe)(function () {
  return window;
}) || (0, _maybe.maybe)(function () {
  return self;
}) || (0, _maybe.maybe)(function () {
  return global;
}) ||
// We don't expect the Function constructor ever to be invoked at runtime, as
// long as at least one of globalThis, window, self, or global is defined, so
// we are under no obligation to make it easy for static analysis tools to
// detect syntactic usage of the Function constructor. If you think you can
// improve your static analysis to detect this obfuscation, think again. This
// is an arms race you cannot win, at least not in JavaScript.
(0, _maybe.maybe)(function () {
  return _maybe.maybe.constructor("return this")();
});
},{"./maybe.js":"../node_modules/@apollo/client/utilities/globals/maybe.js"}],"../node_modules/@apollo/client/utilities/common/makeUniqueId.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeUniqueId = makeUniqueId;
var prefixCounts = new Map();
// These IDs won't be globally unique, but they will be unique within this
// process, thanks to the counter, and unguessable thanks to the random suffix.
function makeUniqueId(prefix) {
  var count = prefixCounts.get(prefix) || 1;
  prefixCounts.set(prefix, count + 1);
  return "".concat(prefix, ":").concat(count, ":").concat(Math.random().toString(36).slice(2));
}
},{}],"../node_modules/@apollo/client/utilities/common/stringifyForDisplay.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringifyForDisplay = stringifyForDisplay;
var _makeUniqueId = require("./makeUniqueId.js");
function stringifyForDisplay(value, space) {
  if (space === void 0) {
    space = 0;
  }
  var undefId = (0, _makeUniqueId.makeUniqueId)("stringifyForDisplay");
  return JSON.stringify(value, function (key, value) {
    return value === void 0 ? undefId : value;
  }, space).split(JSON.stringify(undefId)).join("<undefined>");
}
},{"./makeUniqueId.js":"../node_modules/@apollo/client/utilities/common/makeUniqueId.js"}],"../node_modules/@apollo/client/utilities/globals/invariantWrappers.js":[function(require,module,exports) {

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApolloErrorMessageHandler = void 0;
Object.defineProperty(exports, "InvariantError", {
  enumerable: true,
  get: function () {
    return _tsInvariant.InvariantError;
  }
});
exports.invariant = void 0;
exports.newInvariantError = newInvariantError;
var _tsInvariant = require("ts-invariant");
var _version = require("../../version.js");
var _global = _interopRequireDefault(require("./global.js"));
var _stringifyForDisplay = require("../common/stringifyForDisplay.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function wrap(fn) {
  return function (message) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    if (typeof message === "number") {
      var arg0 = message;
      message = getHandledErrorMsg(arg0);
      if (!message) {
        message = getFallbackErrorMsg(arg0, args);
        args = [];
      }
    }
    fn.apply(void 0, [message].concat(args));
  };
}
var invariant = exports.invariant = Object.assign(function invariant(condition, message) {
  var args = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    args[_i - 2] = arguments[_i];
  }
  if (!condition) {
    (0, _tsInvariant.invariant)(condition, getHandledErrorMsg(message, args) || getFallbackErrorMsg(message, args));
  }
}, {
  debug: wrap(_tsInvariant.invariant.debug),
  log: wrap(_tsInvariant.invariant.log),
  warn: wrap(_tsInvariant.invariant.warn),
  error: wrap(_tsInvariant.invariant.error)
});
/**
 * Returns an InvariantError.
 *
 * `message` can only be a string, a concatenation of strings, or a ternary statement
 * that results in a string. This will be enforced on build, where the message will
 * be replaced with a message number.
 * String substitutions with %s are supported and will also return
 * pretty-stringified objects.
 * Excess `optionalParams` will be swallowed.
 */
function newInvariantError(message) {
  var optionalParams = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    optionalParams[_i - 1] = arguments[_i];
  }
  return new _tsInvariant.InvariantError(getHandledErrorMsg(message, optionalParams) || getFallbackErrorMsg(message, optionalParams));
}
var ApolloErrorMessageHandler = exports.ApolloErrorMessageHandler = Symbol.for("ApolloErrorMessageHandler_" + _version.version);
function stringify(arg) {
  return typeof arg == "string" ? arg : (0, _stringifyForDisplay.stringifyForDisplay)(arg, 2).slice(0, 1000);
}
function getHandledErrorMsg(message, messageArgs) {
  if (messageArgs === void 0) {
    messageArgs = [];
  }
  if (!message) return;
  return _global.default[ApolloErrorMessageHandler] && _global.default[ApolloErrorMessageHandler](message, messageArgs.map(stringify));
}
function getFallbackErrorMsg(message, messageArgs) {
  if (messageArgs === void 0) {
    messageArgs = [];
  }
  if (!message) return;
  return "An error occurred! For more details, see the full error text at https://go.apollo.dev/c/err#".concat(encodeURIComponent(JSON.stringify({
    version: _version.version,
    message: message,
    args: messageArgs.map(stringify)
  })));
}
},{"ts-invariant":"../node_modules/@apollo/client/node_modules/ts-invariant/lib/invariant.js","../../version.js":"../node_modules/@apollo/client/version.js","./global.js":"../node_modules/@apollo/client/utilities/globals/global.js","../common/stringifyForDisplay.js":"../node_modules/@apollo/client/utilities/common/stringifyForDisplay.js"}],"../node_modules/@apollo/client/utilities/globals/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEV = void 0;
Object.defineProperty(exports, "InvariantError", {
  enumerable: true,
  get: function () {
    return _invariantWrappers.InvariantError;
  }
});
exports.__DEV__ = void 0;
Object.defineProperty(exports, "global", {
  enumerable: true,
  get: function () {
    return _global.default;
  }
});
Object.defineProperty(exports, "invariant", {
  enumerable: true,
  get: function () {
    return _invariantWrappers.invariant;
  }
});
Object.defineProperty(exports, "maybe", {
  enumerable: true,
  get: function () {
    return _maybe.maybe;
  }
});
Object.defineProperty(exports, "newInvariantError", {
  enumerable: true,
  get: function () {
    return _invariantWrappers.newInvariantError;
  }
});
var _invariantWrappers = require("./invariantWrappers.js");
var _maybe = require("./maybe.js");
var _global = _interopRequireDefault(require("./global.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * @deprecated we do not use this internally anymore,
 * it is just exported for backwards compatibility
 */
// this file is extempt from automatic `__DEV__` replacement
// so we have to write it out here
// @ts-ignore
var DEV = exports.__DEV__ = exports.DEV = globalThis.__DEV__ !== false;
},{"./invariantWrappers.js":"../node_modules/@apollo/client/utilities/globals/invariantWrappers.js","./maybe.js":"../node_modules/@apollo/client/utilities/globals/maybe.js","./global.js":"../node_modules/@apollo/client/utilities/globals/global.js"}],"../node_modules/graphql/version.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.versionInfo = exports.version = void 0;
// Note: This file is autogenerated using "resources/gen-version.js" script and
// automatically updated by "npm version" command.

/**
 * A string containing the version of the GraphQL.js library
 */
var version = exports.version = '16.8.1';
/**
 * An object containing the components of the GraphQL.js version string
 */

var versionInfo = exports.versionInfo = Object.freeze({
  major: 16,
  minor: 8,
  patch: 1,
  preReleaseTag: null
});
},{}],"../node_modules/graphql/jsutils/devAssert.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.devAssert = devAssert;
function devAssert(condition, message) {
  var booleanCondition = Boolean(condition);
  if (!booleanCondition) {
    throw new Error(message);
  }
}
},{}],"../node_modules/graphql/jsutils/isPromise.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPromise = isPromise;
/**
 * Returns true if the value acts like a Promise, i.e. has a "then" function,
 * otherwise returns false.
 */
function isPromise(value) {
  return typeof (value === null || value === void 0 ? void 0 : value.then) === 'function';
}
},{}],"../node_modules/graphql/jsutils/isObjectLike.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isObjectLike = isObjectLike;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
/**
 * Return true if `value` is object-like. A value is object-like if it's not
 * `null` and has a `typeof` result of "object".
 */
function isObjectLike(value) {
  return _typeof(value) == 'object' && value !== null;
}
},{}],"../node_modules/graphql/jsutils/invariant.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.invariant = invariant;
function invariant(condition, message) {
  var booleanCondition = Boolean(condition);
  if (!booleanCondition) {
    throw new Error(message != null ? message : 'Unexpected invariant triggered.');
  }
}
},{}],"../node_modules/graphql/language/location.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLocation = getLocation;
var _invariant = require("../jsutils/invariant.mjs");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var LineRegExp = /\r\n|[\n\r]/g;
/**
 * Represents a location in a Source.
 */

/**
 * Takes a Source and a UTF-8 character offset, and returns the corresponding
 * line and column as a SourceLocation.
 */
function getLocation(source, position) {
  var lastLineStart = 0;
  var line = 1;
  var _iterator = _createForOfIteratorHelper(source.body.matchAll(LineRegExp)),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var match = _step.value;
      typeof match.index === 'number' || (0, _invariant.invariant)(false);
      if (match.index >= position) {
        break;
      }
      lastLineStart = match.index + match[0].length;
      line += 1;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return {
    line: line,
    column: position + 1 - lastLineStart
  };
}
},{"../jsutils/invariant.mjs":"../node_modules/graphql/jsutils/invariant.mjs"}],"../node_modules/graphql/language/printLocation.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.printLocation = printLocation;
exports.printSourceLocation = printSourceLocation;
var _location = require("./location.mjs");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Render a helpful description of the location in the GraphQL Source document.
 */
function printLocation(location) {
  return printSourceLocation(location.source, (0, _location.getLocation)(location.source, location.start));
}
/**
 * Render a helpful description of the location in the GraphQL Source document.
 */

function printSourceLocation(source, sourceLocation) {
  var firstLineColumnOffset = source.locationOffset.column - 1;
  var body = ''.padStart(firstLineColumnOffset) + source.body;
  var lineIndex = sourceLocation.line - 1;
  var lineOffset = source.locationOffset.line - 1;
  var lineNum = sourceLocation.line + lineOffset;
  var columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;
  var columnNum = sourceLocation.column + columnOffset;
  var locationStr = "".concat(source.name, ":").concat(lineNum, ":").concat(columnNum, "\n");
  var lines = body.split(/\r\n|[\n\r]/g);
  var locationLine = lines[lineIndex]; // Special case for minified documents

  if (locationLine.length > 120) {
    var subLineIndex = Math.floor(columnNum / 80);
    var subLineColumnNum = columnNum % 80;
    var subLines = [];
    for (var i = 0; i < locationLine.length; i += 80) {
      subLines.push(locationLine.slice(i, i + 80));
    }
    return locationStr + printPrefixedLines([["".concat(lineNum, " |"), subLines[0]]].concat(_toConsumableArray(subLines.slice(1, subLineIndex + 1).map(function (subLine) {
      return ['|', subLine];
    })), [['|', '^'.padStart(subLineColumnNum)], ['|', subLines[subLineIndex + 1]]]));
  }
  return locationStr + printPrefixedLines([
  // Lines specified like this: ["prefix", "string"],
  ["".concat(lineNum - 1, " |"), lines[lineIndex - 1]], ["".concat(lineNum, " |"), locationLine], ['|', '^'.padStart(columnNum)], ["".concat(lineNum + 1, " |"), lines[lineIndex + 1]]]);
}
function printPrefixedLines(lines) {
  var existingLines = lines.filter(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
      _ = _ref2[0],
      line = _ref2[1];
    return line !== undefined;
  });
  var padLen = Math.max.apply(Math, _toConsumableArray(existingLines.map(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 1),
      prefix = _ref4[0];
    return prefix.length;
  })));
  return existingLines.map(function (_ref5) {
    var _ref6 = _slicedToArray(_ref5, 2),
      prefix = _ref6[0],
      line = _ref6[1];
    return prefix.padStart(padLen) + (line ? ' ' + line : '');
  }).join('\n');
}
},{"./location.mjs":"../node_modules/graphql/language/location.mjs"}],"../node_modules/graphql/error/GraphQLError.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphQLError = void 0;
exports.formatError = formatError;
exports.printError = printError;
var _isObjectLike = require("../jsutils/isObjectLike.mjs");
var _location = require("../language/location.mjs");
var _printLocation = require("../language/printLocation.mjs");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }
function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _isNativeFunction(fn) { try { return Function.toString.call(fn).indexOf("[native code]") !== -1; } catch (e) { return typeof fn === "function"; } }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function toNormalizedOptions(args) {
  var firstArg = args[0];
  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {
    return {
      nodes: firstArg,
      source: args[1],
      positions: args[2],
      path: args[3],
      originalError: args[4],
      extensions: args[5]
    };
  }
  return firstArg;
}
/**
 * A GraphQLError describes an Error found during the parse, validate, or
 * execute phases of performing a GraphQL operation. In addition to a message
 * and stack trace, it also includes information about the locations in a
 * GraphQL document and/or execution result that correspond to the Error.
 */
var GraphQLError = exports.GraphQLError = /*#__PURE__*/function (_Error, _Symbol$toStringTag) {
  _inherits(GraphQLError, _Error);
  var _super = _createSuper(GraphQLError);
  /**
   * An array of `{ line, column }` locations within the source GraphQL document
   * which correspond to this error.
   *
   * Errors during validation often contain multiple locations, for example to
   * point out two things with the same name. Errors during execution include a
   * single location, the field which produced the error.
   *
   * Enumerable, and appears in the result of JSON.stringify().
   */

  /**
   * An array describing the JSON-path into the execution response which
   * corresponds to this error. Only included for errors during execution.
   *
   * Enumerable, and appears in the result of JSON.stringify().
   */

  /**
   * An array of GraphQL AST Nodes corresponding to this error.
   */

  /**
   * The source GraphQL document for the first location of this error.
   *
   * Note that if this Error represents more than one node, the source may not
   * represent nodes after the first node.
   */

  /**
   * An array of character offsets within the source GraphQL document
   * which correspond to this error.
   */

  /**
   * The original error thrown from a field resolver during execution.
   */

  /**
   * Extension fields to add to the formatted error.
   */

  /**
   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.
   */
  function GraphQLError(message) {
    var _this;
    _classCallCheck(this, GraphQLError);
    var _this$nodes, _nodeLocations$, _ref;
    for (var _len = arguments.length, rawArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      rawArgs[_key - 1] = arguments[_key];
    }
    var _toNormalizedOptions = toNormalizedOptions(rawArgs),
      nodes = _toNormalizedOptions.nodes,
      source = _toNormalizedOptions.source,
      positions = _toNormalizedOptions.positions,
      path = _toNormalizedOptions.path,
      originalError = _toNormalizedOptions.originalError,
      extensions = _toNormalizedOptions.extensions;
    _this = _super.call(this, message);
    _this.name = 'GraphQLError';
    _this.path = path !== null && path !== void 0 ? path : undefined;
    _this.originalError = originalError !== null && originalError !== void 0 ? originalError : undefined; // Compute list of blame nodes.

    _this.nodes = undefinedIfEmpty(Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined);
    var nodeLocations = undefinedIfEmpty((_this$nodes = _this.nodes) === null || _this$nodes === void 0 ? void 0 : _this$nodes.map(function (node) {
      return node.loc;
    }).filter(function (loc) {
      return loc != null;
    })); // Compute locations in the source for the given nodes/positions.

    _this.source = source !== null && source !== void 0 ? source : nodeLocations === null || nodeLocations === void 0 ? void 0 : (_nodeLocations$ = nodeLocations[0]) === null || _nodeLocations$ === void 0 ? void 0 : _nodeLocations$.source;
    _this.positions = positions !== null && positions !== void 0 ? positions : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map(function (loc) {
      return loc.start;
    });
    _this.locations = positions && source ? positions.map(function (pos) {
      return (0, _location.getLocation)(source, pos);
    }) : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map(function (loc) {
      return (0, _location.getLocation)(loc.source, loc.start);
    });
    var originalExtensions = (0, _isObjectLike.isObjectLike)(originalError === null || originalError === void 0 ? void 0 : originalError.extensions) ? originalError === null || originalError === void 0 ? void 0 : originalError.extensions : undefined;
    _this.extensions = (_ref = extensions !== null && extensions !== void 0 ? extensions : originalExtensions) !== null && _ref !== void 0 ? _ref : Object.create(null); // Only properties prescribed by the spec should be enumerable.
    // Keep the rest as non-enumerable.

    Object.defineProperties(_assertThisInitialized(_this), {
      message: {
        writable: true,
        enumerable: true
      },
      name: {
        enumerable: false
      },
      nodes: {
        enumerable: false
      },
      source: {
        enumerable: false
      },
      positions: {
        enumerable: false
      },
      originalError: {
        enumerable: false
      }
    }); // Include (non-enumerable) stack trace.

    /* c8 ignore start */
    // FIXME: https://github.com/graphql/graphql-js/issues/2317

    if (originalError !== null && originalError !== void 0 && originalError.stack) {
      Object.defineProperty(_assertThisInitialized(_this), 'stack', {
        value: originalError.stack,
        writable: true,
        configurable: true
      });
    } else if (Error.captureStackTrace) {
      Error.captureStackTrace(_assertThisInitialized(_this), GraphQLError);
    } else {
      Object.defineProperty(_assertThisInitialized(_this), 'stack', {
        value: Error().stack,
        writable: true,
        configurable: true
      });
    }
    /* c8 ignore stop */
    return _this;
  }
  _createClass(GraphQLError, [{
    key: _Symbol$toStringTag,
    get: function get() {
      return 'GraphQLError';
    }
  }, {
    key: "toString",
    value: function toString() {
      var output = this.message;
      if (this.nodes) {
        var _iterator = _createForOfIteratorHelper(this.nodes),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var node = _step.value;
            if (node.loc) {
              output += '\n\n' + (0, _printLocation.printLocation)(node.loc);
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      } else if (this.source && this.locations) {
        var _iterator2 = _createForOfIteratorHelper(this.locations),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var location = _step2.value;
            output += '\n\n' + (0, _printLocation.printSourceLocation)(this.source, location);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      return output;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var formattedError = {
        message: this.message
      };
      if (this.locations != null) {
        formattedError.locations = this.locations;
      }
      if (this.path != null) {
        formattedError.path = this.path;
      }
      if (this.extensions != null && Object.keys(this.extensions).length > 0) {
        formattedError.extensions = this.extensions;
      }
      return formattedError;
    }
  }]);
  return GraphQLError;
}( /*#__PURE__*/_wrapNativeSuper(Error), Symbol.toStringTag);
function undefinedIfEmpty(array) {
  return array === undefined || array.length === 0 ? undefined : array;
}
/**
 * See: https://spec.graphql.org/draft/#sec-Errors
 */

/**
 * Prints a GraphQLError to a string, representing useful location information
 * about the error's position in the source.
 *
 * @deprecated Please use `error.toString` instead. Will be removed in v17
 */
function printError(error) {
  return error.toString();
}
/**
 * Given a GraphQLError, format it according to the rules described by the
 * Response Format, Errors section of the GraphQL Specification.
 *
 * @deprecated Please use `error.toJSON` instead. Will be removed in v17
 */

function formatError(error) {
  return error.toJSON();
}
},{"../jsutils/isObjectLike.mjs":"../node_modules/graphql/jsutils/isObjectLike.mjs","../language/location.mjs":"../node_modules/graphql/language/location.mjs","../language/printLocation.mjs":"../node_modules/graphql/language/printLocation.mjs"}],"../node_modules/graphql/error/syntaxError.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.syntaxError = syntaxError;
var _GraphQLError = require("./GraphQLError.mjs");
/**
 * Produces a GraphQLError representing a syntax error, containing useful
 * descriptive information about the syntax error's position in the source.
 */

function syntaxError(source, position, description) {
  return new _GraphQLError.GraphQLError("Syntax Error: ".concat(description), {
    source: source,
    positions: [position]
  });
}
},{"./GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs"}],"../node_modules/graphql/language/ast.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Token = exports.QueryDocumentKeys = exports.OperationTypeNode = exports.Location = void 0;
exports.isNode = isNode;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Contains a range of UTF-8 character offsets and token references that
 * identify the region of the source from which the AST derived.
 */
var Location = exports.Location = /*#__PURE__*/function (_Symbol$toStringTag) {
  /**
   * The character offset at which this Node begins.
   */

  /**
   * The character offset at which this Node ends.
   */

  /**
   * The Token at which this Node begins.
   */

  /**
   * The Token at which this Node ends.
   */

  /**
   * The Source document the AST represents.
   */
  function Location(startToken, endToken, source) {
    _classCallCheck(this, Location);
    this.start = startToken.start;
    this.end = endToken.end;
    this.startToken = startToken;
    this.endToken = endToken;
    this.source = source;
  }
  _createClass(Location, [{
    key: _Symbol$toStringTag,
    get: function get() {
      return 'Location';
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        start: this.start,
        end: this.end
      };
    }
  }]);
  return Location;
}(Symbol.toStringTag);
/**
 * Represents a range of characters represented by a lexical token
 * within a Source.
 */
var Token = exports.Token = /*#__PURE__*/function (_Symbol$toStringTag2) {
  /**
   * The kind of Token.
   */

  /**
   * The character offset at which this Node begins.
   */

  /**
   * The character offset at which this Node ends.
   */

  /**
   * The 1-indexed line number on which this Token appears.
   */

  /**
   * The 1-indexed column number at which this Token begins.
   */

  /**
   * For non-punctuation tokens, represents the interpreted value of the token.
   *
   * Note: is undefined for punctuation tokens, but typed as string for
   * convenience in the parser.
   */

  /**
   * Tokens exist as nodes in a double-linked-list amongst all tokens
   * including ignored tokens. <SOF> is always the first node and <EOF>
   * the last.
   */
  function Token(kind, start, end, line, column, value) {
    _classCallCheck(this, Token);
    this.kind = kind;
    this.start = start;
    this.end = end;
    this.line = line;
    this.column = column; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

    this.value = value;
    this.prev = null;
    this.next = null;
  }
  _createClass(Token, [{
    key: _Symbol$toStringTag2,
    get: function get() {
      return 'Token';
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        kind: this.kind,
        value: this.value,
        line: this.line,
        column: this.column
      };
    }
  }]);
  return Token;
}(Symbol.toStringTag);
/**
 * The list of all possible AST node types.
 */
/**
 * @internal
 */
var QueryDocumentKeys = exports.QueryDocumentKeys = {
  Name: [],
  Document: ['definitions'],
  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],
  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],
  Variable: ['name'],
  SelectionSet: ['selections'],
  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],
  Argument: ['name', 'value'],
  FragmentSpread: ['name', 'directives'],
  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],
  FragmentDefinition: ['name',
  // Note: fragment variable definitions are deprecated and will removed in v17.0.0
  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],
  IntValue: [],
  FloatValue: [],
  StringValue: [],
  BooleanValue: [],
  NullValue: [],
  EnumValue: [],
  ListValue: ['values'],
  ObjectValue: ['fields'],
  ObjectField: ['name', 'value'],
  Directive: ['name', 'arguments'],
  NamedType: ['name'],
  ListType: ['type'],
  NonNullType: ['type'],
  SchemaDefinition: ['description', 'directives', 'operationTypes'],
  OperationTypeDefinition: ['type'],
  ScalarTypeDefinition: ['description', 'name', 'directives'],
  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],
  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],
  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],
  InterfaceTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],
  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],
  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],
  EnumValueDefinition: ['description', 'name', 'directives'],
  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],
  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],
  SchemaExtension: ['directives', 'operationTypes'],
  ScalarTypeExtension: ['name', 'directives'],
  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
  UnionTypeExtension: ['name', 'directives', 'types'],
  EnumTypeExtension: ['name', 'directives', 'values'],
  InputObjectTypeExtension: ['name', 'directives', 'fields']
};
var kindValues = new Set(Object.keys(QueryDocumentKeys));
/**
 * @internal
 */

function isNode(maybeNode) {
  var maybeKind = maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;
  return typeof maybeKind === 'string' && kindValues.has(maybeKind);
}
/** Name */

var OperationTypeNode;
(function (OperationTypeNode) {
  OperationTypeNode['QUERY'] = 'query';
  OperationTypeNode['MUTATION'] = 'mutation';
  OperationTypeNode['SUBSCRIPTION'] = 'subscription';
})(OperationTypeNode || (exports.OperationTypeNode = OperationTypeNode = {}));
},{}],"../node_modules/graphql/language/directiveLocation.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DirectiveLocation = void 0;
/**
 * The set of allowed directive location values.
 */
var DirectiveLocation;
(function (DirectiveLocation) {
  DirectiveLocation['QUERY'] = 'QUERY';
  DirectiveLocation['MUTATION'] = 'MUTATION';
  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';
  DirectiveLocation['FIELD'] = 'FIELD';
  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';
  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';
  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';
  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';
  DirectiveLocation['SCHEMA'] = 'SCHEMA';
  DirectiveLocation['SCALAR'] = 'SCALAR';
  DirectiveLocation['OBJECT'] = 'OBJECT';
  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';
  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';
  DirectiveLocation['INTERFACE'] = 'INTERFACE';
  DirectiveLocation['UNION'] = 'UNION';
  DirectiveLocation['ENUM'] = 'ENUM';
  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';
  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';
  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';
})(DirectiveLocation || (exports.DirectiveLocation = DirectiveLocation = {}));

/**
 * The enum type representing the directive location values.
 *
 * @deprecated Please use `DirectiveLocation`. Will be remove in v17.
 */
},{}],"../node_modules/graphql/language/kinds.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Kind = void 0;
/**
 * The set of allowed kind values for AST nodes.
 */
var Kind;
(function (Kind) {
  Kind['NAME'] = 'Name';
  Kind['DOCUMENT'] = 'Document';
  Kind['OPERATION_DEFINITION'] = 'OperationDefinition';
  Kind['VARIABLE_DEFINITION'] = 'VariableDefinition';
  Kind['SELECTION_SET'] = 'SelectionSet';
  Kind['FIELD'] = 'Field';
  Kind['ARGUMENT'] = 'Argument';
  Kind['FRAGMENT_SPREAD'] = 'FragmentSpread';
  Kind['INLINE_FRAGMENT'] = 'InlineFragment';
  Kind['FRAGMENT_DEFINITION'] = 'FragmentDefinition';
  Kind['VARIABLE'] = 'Variable';
  Kind['INT'] = 'IntValue';
  Kind['FLOAT'] = 'FloatValue';
  Kind['STRING'] = 'StringValue';
  Kind['BOOLEAN'] = 'BooleanValue';
  Kind['NULL'] = 'NullValue';
  Kind['ENUM'] = 'EnumValue';
  Kind['LIST'] = 'ListValue';
  Kind['OBJECT'] = 'ObjectValue';
  Kind['OBJECT_FIELD'] = 'ObjectField';
  Kind['DIRECTIVE'] = 'Directive';
  Kind['NAMED_TYPE'] = 'NamedType';
  Kind['LIST_TYPE'] = 'ListType';
  Kind['NON_NULL_TYPE'] = 'NonNullType';
  Kind['SCHEMA_DEFINITION'] = 'SchemaDefinition';
  Kind['OPERATION_TYPE_DEFINITION'] = 'OperationTypeDefinition';
  Kind['SCALAR_TYPE_DEFINITION'] = 'ScalarTypeDefinition';
  Kind['OBJECT_TYPE_DEFINITION'] = 'ObjectTypeDefinition';
  Kind['FIELD_DEFINITION'] = 'FieldDefinition';
  Kind['INPUT_VALUE_DEFINITION'] = 'InputValueDefinition';
  Kind['INTERFACE_TYPE_DEFINITION'] = 'InterfaceTypeDefinition';
  Kind['UNION_TYPE_DEFINITION'] = 'UnionTypeDefinition';
  Kind['ENUM_TYPE_DEFINITION'] = 'EnumTypeDefinition';
  Kind['ENUM_VALUE_DEFINITION'] = 'EnumValueDefinition';
  Kind['INPUT_OBJECT_TYPE_DEFINITION'] = 'InputObjectTypeDefinition';
  Kind['DIRECTIVE_DEFINITION'] = 'DirectiveDefinition';
  Kind['SCHEMA_EXTENSION'] = 'SchemaExtension';
  Kind['SCALAR_TYPE_EXTENSION'] = 'ScalarTypeExtension';
  Kind['OBJECT_TYPE_EXTENSION'] = 'ObjectTypeExtension';
  Kind['INTERFACE_TYPE_EXTENSION'] = 'InterfaceTypeExtension';
  Kind['UNION_TYPE_EXTENSION'] = 'UnionTypeExtension';
  Kind['ENUM_TYPE_EXTENSION'] = 'EnumTypeExtension';
  Kind['INPUT_OBJECT_TYPE_EXTENSION'] = 'InputObjectTypeExtension';
})(Kind || (exports.Kind = Kind = {}));

/**
 * The enum type representing the possible kind values of AST nodes.
 *
 * @deprecated Please use `Kind`. Will be remove in v17.
 */
},{}],"../node_modules/graphql/language/characterClasses.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isDigit = isDigit;
exports.isLetter = isLetter;
exports.isNameContinue = isNameContinue;
exports.isNameStart = isNameStart;
exports.isWhiteSpace = isWhiteSpace;
/**
 * ```
 * WhiteSpace ::
 *   - "Horizontal Tab (U+0009)"
 *   - "Space (U+0020)"
 * ```
 * @internal
 */
function isWhiteSpace(code) {
  return code === 0x0009 || code === 0x0020;
}
/**
 * ```
 * Digit :: one of
 *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`
 * ```
 * @internal
 */

function isDigit(code) {
  return code >= 0x0030 && code <= 0x0039;
}
/**
 * ```
 * Letter :: one of
 *   - `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M`
 *   - `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`
 *   - `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m`
 *   - `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`
 * ```
 * @internal
 */

function isLetter(code) {
  return code >= 0x0061 && code <= 0x007a ||
  // A-Z
  code >= 0x0041 && code <= 0x005a // a-z
  ;
}
/**
 * ```
 * NameStart ::
 *   - Letter
 *   - `_`
 * ```
 * @internal
 */

function isNameStart(code) {
  return isLetter(code) || code === 0x005f;
}
/**
 * ```
 * NameContinue ::
 *   - Letter
 *   - Digit
 *   - `_`
 * ```
 * @internal
 */

function isNameContinue(code) {
  return isLetter(code) || isDigit(code) || code === 0x005f;
}
},{}],"../node_modules/graphql/language/blockString.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dedentBlockStringLines = dedentBlockStringLines;
exports.isPrintableAsBlockString = isPrintableAsBlockString;
exports.printBlockString = printBlockString;
var _characterClasses = require("./characterClasses.mjs");
/**
 * Produces the value of a block string from its parsed raw value, similar to
 * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.
 *
 * This implements the GraphQL spec's BlockStringValue() static algorithm.
 *
 * @internal
 */

function dedentBlockStringLines(lines) {
  var _firstNonEmptyLine2;
  var commonIndent = Number.MAX_SAFE_INTEGER;
  var firstNonEmptyLine = null;
  var lastNonEmptyLine = -1;
  for (var i = 0; i < lines.length; ++i) {
    var _firstNonEmptyLine;
    var line = lines[i];
    var indent = leadingWhitespace(line);
    if (indent === line.length) {
      continue; // skip empty lines
    }
    firstNonEmptyLine = (_firstNonEmptyLine = firstNonEmptyLine) !== null && _firstNonEmptyLine !== void 0 ? _firstNonEmptyLine : i;
    lastNonEmptyLine = i;
    if (i !== 0 && indent < commonIndent) {
      commonIndent = indent;
    }
  }
  return lines // Remove common indentation from all lines but first.
  .map(function (line, i) {
    return i === 0 ? line : line.slice(commonIndent);
  }) // Remove leading and trailing blank lines.
  .slice((_firstNonEmptyLine2 = firstNonEmptyLine) !== null && _firstNonEmptyLine2 !== void 0 ? _firstNonEmptyLine2 : 0, lastNonEmptyLine + 1);
}
function leadingWhitespace(str) {
  var i = 0;
  while (i < str.length && (0, _characterClasses.isWhiteSpace)(str.charCodeAt(i))) {
    ++i;
  }
  return i;
}
/**
 * @internal
 */

function isPrintableAsBlockString(value) {
  if (value === '') {
    return true; // empty string is printable
  }
  var isEmptyLine = true;
  var hasIndent = false;
  var hasCommonIndent = true;
  var seenNonEmptyLine = false;
  for (var i = 0; i < value.length; ++i) {
    switch (value.codePointAt(i)) {
      case 0x0000:
      case 0x0001:
      case 0x0002:
      case 0x0003:
      case 0x0004:
      case 0x0005:
      case 0x0006:
      case 0x0007:
      case 0x0008:
      case 0x000b:
      case 0x000c:
      case 0x000e:
      case 0x000f:
        return false;
      // Has non-printable characters

      case 0x000d:
        //  \r
        return false;
      // Has \r or \r\n which will be replaced as \n

      case 10:
        //  \n
        if (isEmptyLine && !seenNonEmptyLine) {
          return false; // Has leading new line
        }
        seenNonEmptyLine = true;
        isEmptyLine = true;
        hasIndent = false;
        break;
      case 9: //   \t

      case 32:
        //  <space>
        hasIndent || (hasIndent = isEmptyLine);
        break;
      default:
        hasCommonIndent && (hasCommonIndent = hasIndent);
        isEmptyLine = false;
    }
  }
  if (isEmptyLine) {
    return false; // Has trailing empty lines
  }
  if (hasCommonIndent && seenNonEmptyLine) {
    return false; // Has internal indent
  }
  return true;
}
/**
 * Print a block string in the indented block form by adding a leading and
 * trailing blank line. However, if a block string starts with whitespace and is
 * a single-line, adding a leading blank line would strip that whitespace.
 *
 * @internal
 */

function printBlockString(value, options) {
  var escapedValue = value.replace(/"""/g, '\\"""'); // Expand a block string's raw value into independent lines.

  var lines = escapedValue.split(/\r\n|[\n\r]/g);
  var isSingleLine = lines.length === 1; // If common indentation is found we can fix some of those cases by adding leading new line

  var forceLeadingNewLine = lines.length > 1 && lines.slice(1).every(function (line) {
    return line.length === 0 || (0, _characterClasses.isWhiteSpace)(line.charCodeAt(0));
  }); // Trailing triple quotes just looks confusing but doesn't force trailing new line

  var hasTrailingTripleQuotes = escapedValue.endsWith('\\"""'); // Trailing quote (single or double) or slash forces trailing new line

  var hasTrailingQuote = value.endsWith('"') && !hasTrailingTripleQuotes;
  var hasTrailingSlash = value.endsWith('\\');
  var forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;
  var printAsMultipleLines = !(options !== null && options !== void 0 && options.minimize) && (
  // add leading and trailing new lines only if it improves readability
  !isSingleLine || value.length > 70 || forceTrailingNewline || forceLeadingNewLine || hasTrailingTripleQuotes);
  var result = ''; // Format a multi-line block quote to account for leading space.

  var skipLeadingNewLine = isSingleLine && (0, _characterClasses.isWhiteSpace)(value.charCodeAt(0));
  if (printAsMultipleLines && !skipLeadingNewLine || forceLeadingNewLine) {
    result += '\n';
  }
  result += escapedValue;
  if (printAsMultipleLines || forceTrailingNewline) {
    result += '\n';
  }
  return '"""' + result + '"""';
}
},{"./characterClasses.mjs":"../node_modules/graphql/language/characterClasses.mjs"}],"../node_modules/graphql/language/tokenKind.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TokenKind = void 0;
/**
 * An exported enum describing the different kinds of tokens that the
 * lexer emits.
 */
var TokenKind;
(function (TokenKind) {
  TokenKind['SOF'] = '<SOF>';
  TokenKind['EOF'] = '<EOF>';
  TokenKind['BANG'] = '!';
  TokenKind['DOLLAR'] = '$';
  TokenKind['AMP'] = '&';
  TokenKind['PAREN_L'] = '(';
  TokenKind['PAREN_R'] = ')';
  TokenKind['SPREAD'] = '...';
  TokenKind['COLON'] = ':';
  TokenKind['EQUALS'] = '=';
  TokenKind['AT'] = '@';
  TokenKind['BRACKET_L'] = '[';
  TokenKind['BRACKET_R'] = ']';
  TokenKind['BRACE_L'] = '{';
  TokenKind['PIPE'] = '|';
  TokenKind['BRACE_R'] = '}';
  TokenKind['NAME'] = 'Name';
  TokenKind['INT'] = 'Int';
  TokenKind['FLOAT'] = 'Float';
  TokenKind['STRING'] = 'String';
  TokenKind['BLOCK_STRING'] = 'BlockString';
  TokenKind['COMMENT'] = 'Comment';
})(TokenKind || (exports.TokenKind = TokenKind = {}));

/**
 * The enum type representing the token kinds values.
 *
 * @deprecated Please use `TokenKind`. Will be remove in v17.
 */
},{}],"../node_modules/graphql/language/lexer.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Lexer = void 0;
exports.isPunctuatorTokenKind = isPunctuatorTokenKind;
var _syntaxError = require("../error/syntaxError.mjs");
var _ast = require("./ast.mjs");
var _blockString = require("./blockString.mjs");
var _characterClasses = require("./characterClasses.mjs");
var _tokenKind = require("./tokenKind.mjs");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Given a Source object, creates a Lexer for that source.
 * A Lexer is a stateful stream generator in that every time
 * it is advanced, it returns the next token in the Source. Assuming the
 * source lexes, the final Token emitted by the lexer will be of kind
 * EOF, after which the lexer will repeatedly return the same EOF token
 * whenever called.
 */
var Lexer = exports.Lexer = /*#__PURE__*/function (_Symbol$toStringTag) {
  /**
   * The previously focused non-ignored token.
   */

  /**
   * The currently focused non-ignored token.
   */

  /**
   * The (1-indexed) line containing the current token.
   */

  /**
   * The character offset at which the current line begins.
   */
  function Lexer(source) {
    _classCallCheck(this, Lexer);
    var startOfFileToken = new _ast.Token(_tokenKind.TokenKind.SOF, 0, 0, 0, 0);
    this.source = source;
    this.lastToken = startOfFileToken;
    this.token = startOfFileToken;
    this.line = 1;
    this.lineStart = 0;
  }
  _createClass(Lexer, [{
    key: _Symbol$toStringTag,
    get: function get() {
      return 'Lexer';
    }
    /**
     * Advances the token stream to the next non-ignored token.
     */
  }, {
    key: "advance",
    value: function advance() {
      this.lastToken = this.token;
      var token = this.token = this.lookahead();
      return token;
    }
    /**
     * Looks ahead and returns the next non-ignored token, but does not change
     * the state of Lexer.
     */
  }, {
    key: "lookahead",
    value: function lookahead() {
      var token = this.token;
      if (token.kind !== _tokenKind.TokenKind.EOF) {
        do {
          if (token.next) {
            token = token.next;
          } else {
            // Read the next token and form a link in the token linked-list.
            var nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.

            token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.

            nextToken.prev = token;
            token = nextToken;
          }
        } while (token.kind === _tokenKind.TokenKind.COMMENT);
      }
      return token;
    }
  }]);
  return Lexer;
}(Symbol.toStringTag);
/**
 * @internal
 */
function isPunctuatorTokenKind(kind) {
  return kind === _tokenKind.TokenKind.BANG || kind === _tokenKind.TokenKind.DOLLAR || kind === _tokenKind.TokenKind.AMP || kind === _tokenKind.TokenKind.PAREN_L || kind === _tokenKind.TokenKind.PAREN_R || kind === _tokenKind.TokenKind.SPREAD || kind === _tokenKind.TokenKind.COLON || kind === _tokenKind.TokenKind.EQUALS || kind === _tokenKind.TokenKind.AT || kind === _tokenKind.TokenKind.BRACKET_L || kind === _tokenKind.TokenKind.BRACKET_R || kind === _tokenKind.TokenKind.BRACE_L || kind === _tokenKind.TokenKind.PIPE || kind === _tokenKind.TokenKind.BRACE_R;
}
/**
 * A Unicode scalar value is any Unicode code point except surrogate code
 * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and
 * 0xE000 to 0x10FFFF.
 *
 * SourceCharacter ::
 *   - "Any Unicode scalar value"
 */

function isUnicodeScalarValue(code) {
  return code >= 0x0000 && code <= 0xd7ff || code >= 0xe000 && code <= 0x10ffff;
}
/**
 * The GraphQL specification defines source text as a sequence of unicode scalar
 * values (which Unicode defines to exclude surrogate code points). However
 * JavaScript defines strings as a sequence of UTF-16 code units which may
 * include surrogates. A surrogate pair is a valid source character as it
 * encodes a supplementary code point (above U+FFFF), but unpaired surrogate
 * code points are not valid source characters.
 */

function isSupplementaryCodePoint(body, location) {
  return isLeadingSurrogate(body.charCodeAt(location)) && isTrailingSurrogate(body.charCodeAt(location + 1));
}
function isLeadingSurrogate(code) {
  return code >= 0xd800 && code <= 0xdbff;
}
function isTrailingSurrogate(code) {
  return code >= 0xdc00 && code <= 0xdfff;
}
/**
 * Prints the code point (or end of file reference) at a given location in a
 * source for use in error messages.
 *
 * Printable ASCII is printed quoted, while other points are printed in Unicode
 * code point form (ie. U+1234).
 */

function printCodePointAt(lexer, location) {
  var code = lexer.source.body.codePointAt(location);
  if (code === undefined) {
    return _tokenKind.TokenKind.EOF;
  } else if (code >= 0x0020 && code <= 0x007e) {
    // Printable ASCII
    var char = String.fromCodePoint(code);
    return char === '"' ? "'\"'" : "\"".concat(char, "\"");
  } // Unicode code point

  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');
}
/**
 * Create a token with line and column location information.
 */

function createToken(lexer, kind, start, end, value) {
  var line = lexer.line;
  var col = 1 + start - lexer.lineStart;
  return new _ast.Token(kind, start, end, line, col, value);
}
/**
 * Gets the next token from the source starting at the given position.
 *
 * This skips over whitespace until it finds the next lexable token, then lexes
 * punctuators immediately or calls the appropriate helper function for more
 * complicated tokens.
 */

function readNextToken(lexer, start) {
  var body = lexer.source.body;
  var bodyLength = body.length;
  var position = start;
  while (position < bodyLength) {
    var code = body.charCodeAt(position); // SourceCharacter

    switch (code) {
      // Ignored ::
      //   - UnicodeBOM
      //   - WhiteSpace
      //   - LineTerminator
      //   - Comment
      //   - Comma
      //
      // UnicodeBOM :: "Byte Order Mark (U+FEFF)"
      //
      // WhiteSpace ::
      //   - "Horizontal Tab (U+0009)"
      //   - "Space (U+0020)"
      //
      // Comma :: ,
      case 0xfeff: // <BOM>

      case 0x0009: // \t

      case 0x0020: // <space>

      case 0x002c:
        // ,
        ++position;
        continue;
      // LineTerminator ::
      //   - "New Line (U+000A)"
      //   - "Carriage Return (U+000D)" [lookahead != "New Line (U+000A)"]
      //   - "Carriage Return (U+000D)" "New Line (U+000A)"

      case 0x000a:
        // \n
        ++position;
        ++lexer.line;
        lexer.lineStart = position;
        continue;
      case 0x000d:
        // \r
        if (body.charCodeAt(position + 1) === 0x000a) {
          position += 2;
        } else {
          ++position;
        }
        ++lexer.line;
        lexer.lineStart = position;
        continue;
      // Comment

      case 0x0023:
        // #
        return readComment(lexer, position);
      // Token ::
      //   - Punctuator
      //   - Name
      //   - IntValue
      //   - FloatValue
      //   - StringValue
      //
      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }

      case 0x0021:
        // !
        return createToken(lexer, _tokenKind.TokenKind.BANG, position, position + 1);
      case 0x0024:
        // $
        return createToken(lexer, _tokenKind.TokenKind.DOLLAR, position, position + 1);
      case 0x0026:
        // &
        return createToken(lexer, _tokenKind.TokenKind.AMP, position, position + 1);
      case 0x0028:
        // (
        return createToken(lexer, _tokenKind.TokenKind.PAREN_L, position, position + 1);
      case 0x0029:
        // )
        return createToken(lexer, _tokenKind.TokenKind.PAREN_R, position, position + 1);
      case 0x002e:
        // .
        if (body.charCodeAt(position + 1) === 0x002e && body.charCodeAt(position + 2) === 0x002e) {
          return createToken(lexer, _tokenKind.TokenKind.SPREAD, position, position + 3);
        }
        break;
      case 0x003a:
        // :
        return createToken(lexer, _tokenKind.TokenKind.COLON, position, position + 1);
      case 0x003d:
        // =
        return createToken(lexer, _tokenKind.TokenKind.EQUALS, position, position + 1);
      case 0x0040:
        // @
        return createToken(lexer, _tokenKind.TokenKind.AT, position, position + 1);
      case 0x005b:
        // [
        return createToken(lexer, _tokenKind.TokenKind.BRACKET_L, position, position + 1);
      case 0x005d:
        // ]
        return createToken(lexer, _tokenKind.TokenKind.BRACKET_R, position, position + 1);
      case 0x007b:
        // {
        return createToken(lexer, _tokenKind.TokenKind.BRACE_L, position, position + 1);
      case 0x007c:
        // |
        return createToken(lexer, _tokenKind.TokenKind.PIPE, position, position + 1);
      case 0x007d:
        // }
        return createToken(lexer, _tokenKind.TokenKind.BRACE_R, position, position + 1);
      // StringValue

      case 0x0022:
        // "
        if (body.charCodeAt(position + 1) === 0x0022 && body.charCodeAt(position + 2) === 0x0022) {
          return readBlockString(lexer, position);
        }
        return readString(lexer, position);
    } // IntValue | FloatValue (Digit | -)

    if ((0, _characterClasses.isDigit)(code) || code === 0x002d) {
      return readNumber(lexer, position, code);
    } // Name

    if ((0, _characterClasses.isNameStart)(code)) {
      return readName(lexer, position);
    }
    throw (0, _syntaxError.syntaxError)(lexer.source, position, code === 0x0027 ? 'Unexpected single quote character (\'), did you mean to use a double quote (")?' : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position) ? "Unexpected character: ".concat(printCodePointAt(lexer, position), ".") : "Invalid character: ".concat(printCodePointAt(lexer, position), "."));
  }
  return createToken(lexer, _tokenKind.TokenKind.EOF, bodyLength, bodyLength);
}
/**
 * Reads a comment token from the source file.
 *
 * ```
 * Comment :: # CommentChar* [lookahead != CommentChar]
 *
 * CommentChar :: SourceCharacter but not LineTerminator
 * ```
 */

function readComment(lexer, start) {
  var body = lexer.source.body;
  var bodyLength = body.length;
  var position = start + 1;
  while (position < bodyLength) {
    var code = body.charCodeAt(position); // LineTerminator (\n | \r)

    if (code === 0x000a || code === 0x000d) {
      break;
    } // SourceCharacter

    if (isUnicodeScalarValue(code)) {
      ++position;
    } else if (isSupplementaryCodePoint(body, position)) {
      position += 2;
    } else {
      break;
    }
  }
  return createToken(lexer, _tokenKind.TokenKind.COMMENT, start, position, body.slice(start + 1, position));
}
/**
 * Reads a number token from the source file, either a FloatValue or an IntValue
 * depending on whether a FractionalPart or ExponentPart is encountered.
 *
 * ```
 * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]
 *
 * IntegerPart ::
 *   - NegativeSign? 0
 *   - NegativeSign? NonZeroDigit Digit*
 *
 * NegativeSign :: -
 *
 * NonZeroDigit :: Digit but not `0`
 *
 * FloatValue ::
 *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]
 *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]
 *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]
 *
 * FractionalPart :: . Digit+
 *
 * ExponentPart :: ExponentIndicator Sign? Digit+
 *
 * ExponentIndicator :: one of `e` `E`
 *
 * Sign :: one of + -
 * ```
 */

function readNumber(lexer, start, firstCode) {
  var body = lexer.source.body;
  var position = start;
  var code = firstCode;
  var isFloat = false; // NegativeSign (-)

  if (code === 0x002d) {
    code = body.charCodeAt(++position);
  } // Zero (0)

  if (code === 0x0030) {
    code = body.charCodeAt(++position);
    if ((0, _characterClasses.isDigit)(code)) {
      throw (0, _syntaxError.syntaxError)(lexer.source, position, "Invalid number, unexpected digit after 0: ".concat(printCodePointAt(lexer, position), "."));
    }
  } else {
    position = readDigits(lexer, position, code);
    code = body.charCodeAt(position);
  } // Full stop (.)

  if (code === 0x002e) {
    isFloat = true;
    code = body.charCodeAt(++position);
    position = readDigits(lexer, position, code);
    code = body.charCodeAt(position);
  } // E e

  if (code === 0x0045 || code === 0x0065) {
    isFloat = true;
    code = body.charCodeAt(++position); // + -

    if (code === 0x002b || code === 0x002d) {
      code = body.charCodeAt(++position);
    }
    position = readDigits(lexer, position, code);
    code = body.charCodeAt(position);
  } // Numbers cannot be followed by . or NameStart

  if (code === 0x002e || (0, _characterClasses.isNameStart)(code)) {
    throw (0, _syntaxError.syntaxError)(lexer.source, position, "Invalid number, expected digit but got: ".concat(printCodePointAt(lexer, position), "."));
  }
  return createToken(lexer, isFloat ? _tokenKind.TokenKind.FLOAT : _tokenKind.TokenKind.INT, start, position, body.slice(start, position));
}
/**
 * Returns the new position in the source after reading one or more digits.
 */

function readDigits(lexer, start, firstCode) {
  if (!(0, _characterClasses.isDigit)(firstCode)) {
    throw (0, _syntaxError.syntaxError)(lexer.source, start, "Invalid number, expected digit but got: ".concat(printCodePointAt(lexer, start), "."));
  }
  var body = lexer.source.body;
  var position = start + 1; // +1 to skip first firstCode

  while ((0, _characterClasses.isDigit)(body.charCodeAt(position))) {
    ++position;
  }
  return position;
}
/**
 * Reads a single-quote string token from the source file.
 *
 * ```
 * StringValue ::
 *   - `""` [lookahead != `"`]
 *   - `"` StringCharacter+ `"`
 *
 * StringCharacter ::
 *   - SourceCharacter but not `"` or `\` or LineTerminator
 *   - `\u` EscapedUnicode
 *   - `\` EscapedCharacter
 *
 * EscapedUnicode ::
 *   - `{` HexDigit+ `}`
 *   - HexDigit HexDigit HexDigit HexDigit
 *
 * EscapedCharacter :: one of `"` `\` `/` `b` `f` `n` `r` `t`
 * ```
 */

function readString(lexer, start) {
  var body = lexer.source.body;
  var bodyLength = body.length;
  var position = start + 1;
  var chunkStart = position;
  var value = '';
  while (position < bodyLength) {
    var code = body.charCodeAt(position); // Closing Quote (")

    if (code === 0x0022) {
      value += body.slice(chunkStart, position);
      return createToken(lexer, _tokenKind.TokenKind.STRING, start, position + 1, value);
    } // Escape Sequence (\)

    if (code === 0x005c) {
      value += body.slice(chunkStart, position);
      var _escape = body.charCodeAt(position + 1) === 0x0075 // u
      ? body.charCodeAt(position + 2) === 0x007b // {
      ? readEscapedUnicodeVariableWidth(lexer, position) : readEscapedUnicodeFixedWidth(lexer, position) : readEscapedCharacter(lexer, position);
      value += _escape.value;
      position += _escape.size;
      chunkStart = position;
      continue;
    } // LineTerminator (\n | \r)

    if (code === 0x000a || code === 0x000d) {
      break;
    } // SourceCharacter

    if (isUnicodeScalarValue(code)) {
      ++position;
    } else if (isSupplementaryCodePoint(body, position)) {
      position += 2;
    } else {
      throw (0, _syntaxError.syntaxError)(lexer.source, position, "Invalid character within String: ".concat(printCodePointAt(lexer, position), "."));
    }
  }
  throw (0, _syntaxError.syntaxError)(lexer.source, position, 'Unterminated string.');
} // The string value and lexed size of an escape sequence.

function readEscapedUnicodeVariableWidth(lexer, position) {
  var body = lexer.source.body;
  var point = 0;
  var size = 3; // Cannot be larger than 12 chars (\u{00000000}).

  while (size < 12) {
    var code = body.charCodeAt(position + size++); // Closing Brace (})

    if (code === 0x007d) {
      // Must be at least 5 chars (\u{0}) and encode a Unicode scalar value.
      if (size < 5 || !isUnicodeScalarValue(point)) {
        break;
      }
      return {
        value: String.fromCodePoint(point),
        size: size
      };
    } // Append this hex digit to the code point.

    point = point << 4 | readHexDigit(code);
    if (point < 0) {
      break;
    }
  }
  throw (0, _syntaxError.syntaxError)(lexer.source, position, "Invalid Unicode escape sequence: \"".concat(body.slice(position, position + size), "\"."));
}
function readEscapedUnicodeFixedWidth(lexer, position) {
  var body = lexer.source.body;
  var code = read16BitHexCode(body, position + 2);
  if (isUnicodeScalarValue(code)) {
    return {
      value: String.fromCodePoint(code),
      size: 6
    };
  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when
  // a valid pair is formed.

  if (isLeadingSurrogate(code)) {
    // \u
    if (body.charCodeAt(position + 6) === 0x005c && body.charCodeAt(position + 7) === 0x0075) {
      var trailingCode = read16BitHexCode(body, position + 8);
      if (isTrailingSurrogate(trailingCode)) {
        // JavaScript defines strings as a sequence of UTF-16 code units and
        // encodes Unicode code points above U+FFFF using a surrogate pair of
        // code units. Since this is a surrogate pair escape sequence, just
        // include both codes into the JavaScript string value. Had JavaScript
        // not been internally based on UTF-16, then this surrogate pair would
        // be decoded to retrieve the supplementary code point.
        return {
          value: String.fromCodePoint(code, trailingCode),
          size: 12
        };
      }
    }
  }
  throw (0, _syntaxError.syntaxError)(lexer.source, position, "Invalid Unicode escape sequence: \"".concat(body.slice(position, position + 6), "\"."));
}
/**
 * Reads four hexadecimal characters and returns the positive integer that 16bit
 * hexadecimal string represents. For example, "000f" will return 15, and "dead"
 * will return 57005.
 *
 * Returns a negative number if any char was not a valid hexadecimal digit.
 */

function read16BitHexCode(body, position) {
  // readHexDigit() returns -1 on error. ORing a negative value with any other
  // value always produces a negative value.
  return readHexDigit(body.charCodeAt(position)) << 12 | readHexDigit(body.charCodeAt(position + 1)) << 8 | readHexDigit(body.charCodeAt(position + 2)) << 4 | readHexDigit(body.charCodeAt(position + 3));
}
/**
 * Reads a hexadecimal character and returns its positive integer value (0-15).
 *
 * '0' becomes 0, '9' becomes 9
 * 'A' becomes 10, 'F' becomes 15
 * 'a' becomes 10, 'f' becomes 15
 *
 * Returns -1 if the provided character code was not a valid hexadecimal digit.
 *
 * HexDigit :: one of
 *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`
 *   - `A` `B` `C` `D` `E` `F`
 *   - `a` `b` `c` `d` `e` `f`
 */

function readHexDigit(code) {
  return code >= 0x0030 && code <= 0x0039 // 0-9
  ? code - 0x0030 : code >= 0x0041 && code <= 0x0046 // A-F
  ? code - 0x0037 : code >= 0x0061 && code <= 0x0066 // a-f
  ? code - 0x0057 : -1;
}
/**
 * | Escaped Character | Code Point | Character Name               |
 * | ----------------- | ---------- | ---------------------------- |
 * | `"`               | U+0022     | double quote                 |
 * | `\`               | U+005C     | reverse solidus (back slash) |
 * | `/`               | U+002F     | solidus (forward slash)      |
 * | `b`               | U+0008     | backspace                    |
 * | `f`               | U+000C     | form feed                    |
 * | `n`               | U+000A     | line feed (new line)         |
 * | `r`               | U+000D     | carriage return              |
 * | `t`               | U+0009     | horizontal tab               |
 */

function readEscapedCharacter(lexer, position) {
  var body = lexer.source.body;
  var code = body.charCodeAt(position + 1);
  switch (code) {
    case 0x0022:
      // "
      return {
        value: "\"",
        size: 2
      };
    case 0x005c:
      // \
      return {
        value: "\\",
        size: 2
      };
    case 0x002f:
      // /
      return {
        value: "/",
        size: 2
      };
    case 0x0062:
      // b
      return {
        value: "\b",
        size: 2
      };
    case 0x0066:
      // f
      return {
        value: "\f",
        size: 2
      };
    case 0x006e:
      // n
      return {
        value: "\n",
        size: 2
      };
    case 0x0072:
      // r
      return {
        value: "\r",
        size: 2
      };
    case 0x0074:
      // t
      return {
        value: "\t",
        size: 2
      };
  }
  throw (0, _syntaxError.syntaxError)(lexer.source, position, "Invalid character escape sequence: \"".concat(body.slice(position, position + 2), "\"."));
}
/**
 * Reads a block string token from the source file.
 *
 * ```
 * StringValue ::
 *   - `"""` BlockStringCharacter* `"""`
 *
 * BlockStringCharacter ::
 *   - SourceCharacter but not `"""` or `\"""`
 *   - `\"""`
 * ```
 */

function readBlockString(lexer, start) {
  var body = lexer.source.body;
  var bodyLength = body.length;
  var lineStart = lexer.lineStart;
  var position = start + 3;
  var chunkStart = position;
  var currentLine = '';
  var blockLines = [];
  while (position < bodyLength) {
    var code = body.charCodeAt(position); // Closing Triple-Quote (""")

    if (code === 0x0022 && body.charCodeAt(position + 1) === 0x0022 && body.charCodeAt(position + 2) === 0x0022) {
      currentLine += body.slice(chunkStart, position);
      blockLines.push(currentLine);
      var token = createToken(lexer, _tokenKind.TokenKind.BLOCK_STRING, start, position + 3,
      // Return a string of the lines joined with U+000A.
      (0, _blockString.dedentBlockStringLines)(blockLines).join('\n'));
      lexer.line += blockLines.length - 1;
      lexer.lineStart = lineStart;
      return token;
    } // Escaped Triple-Quote (\""")

    if (code === 0x005c && body.charCodeAt(position + 1) === 0x0022 && body.charCodeAt(position + 2) === 0x0022 && body.charCodeAt(position + 3) === 0x0022) {
      currentLine += body.slice(chunkStart, position);
      chunkStart = position + 1; // skip only slash

      position += 4;
      continue;
    } // LineTerminator

    if (code === 0x000a || code === 0x000d) {
      currentLine += body.slice(chunkStart, position);
      blockLines.push(currentLine);
      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {
        position += 2;
      } else {
        ++position;
      }
      currentLine = '';
      chunkStart = position;
      lineStart = position;
      continue;
    } // SourceCharacter

    if (isUnicodeScalarValue(code)) {
      ++position;
    } else if (isSupplementaryCodePoint(body, position)) {
      position += 2;
    } else {
      throw (0, _syntaxError.syntaxError)(lexer.source, position, "Invalid character within String: ".concat(printCodePointAt(lexer, position), "."));
    }
  }
  throw (0, _syntaxError.syntaxError)(lexer.source, position, 'Unterminated string.');
}
/**
 * Reads an alphanumeric + underscore name from the source.
 *
 * ```
 * Name ::
 *   - NameStart NameContinue* [lookahead != NameContinue]
 * ```
 */

function readName(lexer, start) {
  var body = lexer.source.body;
  var bodyLength = body.length;
  var position = start + 1;
  while (position < bodyLength) {
    var code = body.charCodeAt(position);
    if ((0, _characterClasses.isNameContinue)(code)) {
      ++position;
    } else {
      break;
    }
  }
  return createToken(lexer, _tokenKind.TokenKind.NAME, start, position, body.slice(start, position));
}
},{"../error/syntaxError.mjs":"../node_modules/graphql/error/syntaxError.mjs","./ast.mjs":"../node_modules/graphql/language/ast.mjs","./blockString.mjs":"../node_modules/graphql/language/blockString.mjs","./characterClasses.mjs":"../node_modules/graphql/language/characterClasses.mjs","./tokenKind.mjs":"../node_modules/graphql/language/tokenKind.mjs"}],"../node_modules/graphql/jsutils/inspect.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inspect = inspect;
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var MAX_ARRAY_LENGTH = 10;
var MAX_RECURSIVE_DEPTH = 2;
/**
 * Used to print values in error messages.
 */

function inspect(value) {
  return formatValue(value, []);
}
function formatValue(value, seenValues) {
  switch (_typeof(value)) {
    case 'string':
      return JSON.stringify(value);
    case 'function':
      return value.name ? "[function ".concat(value.name, "]") : '[function]';
    case 'object':
      return formatObjectValue(value, seenValues);
    default:
      return String(value);
  }
}
function formatObjectValue(value, previouslySeenValues) {
  if (value === null) {
    return 'null';
  }
  if (previouslySeenValues.includes(value)) {
    return '[Circular]';
  }
  var seenValues = [].concat(_toConsumableArray(previouslySeenValues), [value]);
  if (isJSONable(value)) {
    var jsonValue = value.toJSON(); // check for infinite recursion

    if (jsonValue !== value) {
      return typeof jsonValue === 'string' ? jsonValue : formatValue(jsonValue, seenValues);
    }
  } else if (Array.isArray(value)) {
    return formatArray(value, seenValues);
  }
  return formatObject(value, seenValues);
}
function isJSONable(value) {
  return typeof value.toJSON === 'function';
}
function formatObject(object, seenValues) {
  var entries = Object.entries(object);
  if (entries.length === 0) {
    return '{}';
  }
  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return '[' + getObjectTag(object) + ']';
  }
  var properties = entries.map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
      key = _ref2[0],
      value = _ref2[1];
    return key + ': ' + formatValue(value, seenValues);
  });
  return '{ ' + properties.join(', ') + ' }';
}
function formatArray(array, seenValues) {
  if (array.length === 0) {
    return '[]';
  }
  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return '[Array]';
  }
  var len = Math.min(MAX_ARRAY_LENGTH, array.length);
  var remaining = array.length - len;
  var items = [];
  for (var i = 0; i < len; ++i) {
    items.push(formatValue(array[i], seenValues));
  }
  if (remaining === 1) {
    items.push('... 1 more item');
  } else if (remaining > 1) {
    items.push("... ".concat(remaining, " more items"));
  }
  return '[' + items.join(', ') + ']';
}
function getObjectTag(object) {
  var tag = Object.prototype.toString.call(object).replace(/^\[object /, '').replace(/]$/, '');
  if (tag === 'Object' && typeof object.constructor === 'function') {
    var name = object.constructor.name;
    if (typeof name === 'string' && name !== '') {
      return name;
    }
  }
  return tag;
}
},{}],"../node_modules/graphql/jsutils/instanceOf.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.instanceOf = void 0;
var _inspect = require("./inspect.mjs");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
/**
 * A replacement for instanceof which includes an error warning when multi-realm
 * constructors are detected.
 * See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production
 * See: https://webpack.js.org/guides/production/
 */

var instanceOf = exports.instanceOf = /* c8 ignore next 6 */
// FIXME: https://github.com/graphql/graphql-js/issues/2317
globalThis.process && globalThis.process.env.NODE_ENV === 'production' ? function instanceOf(value, constructor) {
  return value instanceof constructor;
} : function instanceOf(value, constructor) {
  if (value instanceof constructor) {
    return true;
  }
  if (_typeof(value) === 'object' && value !== null) {
    var _value$constructor;

    // Prefer Symbol.toStringTag since it is immune to minification.
    var className = constructor.prototype[Symbol.toStringTag];
    var valueClassName =
    // We still need to support constructor's name to detect conflicts with older versions of this library.
    Symbol.toStringTag in value // @ts-expect-error TS bug see, https://github.com/microsoft/TypeScript/issues/38009
    ? value[Symbol.toStringTag] : (_value$constructor = value.constructor) === null || _value$constructor === void 0 ? void 0 : _value$constructor.name;
    if (className === valueClassName) {
      var stringifiedValue = (0, _inspect.inspect)(value);
      throw new Error("Cannot use ".concat(className, " \"").concat(stringifiedValue, "\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results."));
    }
  }
  return false;
};
},{"./inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs"}],"../node_modules/graphql/language/source.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Source = void 0;
exports.isSource = isSource;
var _devAssert = require("../jsutils/devAssert.mjs");
var _inspect = require("../jsutils/inspect.mjs");
var _instanceOf = require("../jsutils/instanceOf.mjs");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are
 * optional, but they are useful for clients who store GraphQL documents in source files.
 * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might
 * be useful for `name` to be `"Foo.graphql"` and location to be `{ line: 40, column: 1 }`.
 * The `line` and `column` properties in `locationOffset` are 1-indexed.
 */
var Source = exports.Source = /*#__PURE__*/function (_Symbol$toStringTag) {
  function Source(body) {
    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GraphQL request';
    var locationOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
      line: 1,
      column: 1
    };
    _classCallCheck(this, Source);
    typeof body === 'string' || (0, _devAssert.devAssert)(false, "Body must be a string. Received: ".concat((0, _inspect.inspect)(body), "."));
    this.body = body;
    this.name = name;
    this.locationOffset = locationOffset;
    this.locationOffset.line > 0 || (0, _devAssert.devAssert)(false, 'line in locationOffset is 1-indexed and must be positive.');
    this.locationOffset.column > 0 || (0, _devAssert.devAssert)(false, 'column in locationOffset is 1-indexed and must be positive.');
  }
  _createClass(Source, [{
    key: _Symbol$toStringTag,
    get: function get() {
      return 'Source';
    }
  }]);
  return Source;
}(Symbol.toStringTag);
/**
 * Test if the given value is a Source object.
 *
 * @internal
 */
function isSource(source) {
  return (0, _instanceOf.instanceOf)(source, Source);
}
},{"../jsutils/devAssert.mjs":"../node_modules/graphql/jsutils/devAssert.mjs","../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","../jsutils/instanceOf.mjs":"../node_modules/graphql/jsutils/instanceOf.mjs"}],"../node_modules/graphql/language/parser.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Parser = void 0;
exports.parse = parse;
exports.parseConstValue = parseConstValue;
exports.parseType = parseType;
exports.parseValue = parseValue;
var _syntaxError = require("../error/syntaxError.mjs");
var _ast = require("./ast.mjs");
var _directiveLocation = require("./directiveLocation.mjs");
var _kinds = require("./kinds.mjs");
var _lexer = require("./lexer.mjs");
var _source = require("./source.mjs");
var _tokenKind = require("./tokenKind.mjs");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Configuration options to control parser behavior
 */

/**
 * Given a GraphQL source, parses it into a Document.
 * Throws GraphQLError if a syntax error is encountered.
 */
function parse(source, options) {
  var parser = new Parser(source, options);
  return parser.parseDocument();
}
/**
 * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for
 * that value.
 * Throws GraphQLError if a syntax error is encountered.
 *
 * This is useful within tools that operate upon GraphQL Values directly and
 * in isolation of complete GraphQL documents.
 *
 * Consider providing the results to the utility function: valueFromAST().
 */

function parseValue(source, options) {
  var parser = new Parser(source, options);
  parser.expectToken(_tokenKind.TokenKind.SOF);
  var value = parser.parseValueLiteral(false);
  parser.expectToken(_tokenKind.TokenKind.EOF);
  return value;
}
/**
 * Similar to parseValue(), but raises a parse error if it encounters a
 * variable. The return type will be a constant value.
 */

function parseConstValue(source, options) {
  var parser = new Parser(source, options);
  parser.expectToken(_tokenKind.TokenKind.SOF);
  var value = parser.parseConstValueLiteral();
  parser.expectToken(_tokenKind.TokenKind.EOF);
  return value;
}
/**
 * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for
 * that type.
 * Throws GraphQLError if a syntax error is encountered.
 *
 * This is useful within tools that operate upon GraphQL Types directly and
 * in isolation of complete GraphQL documents.
 *
 * Consider providing the results to the utility function: typeFromAST().
 */

function parseType(source, options) {
  var parser = new Parser(source, options);
  parser.expectToken(_tokenKind.TokenKind.SOF);
  var type = parser.parseTypeReference();
  parser.expectToken(_tokenKind.TokenKind.EOF);
  return type;
}
/**
 * This class is exported only to assist people in implementing their own parsers
 * without duplicating too much code and should be used only as last resort for cases
 * such as experimental syntax or if certain features could not be contributed upstream.
 *
 * It is still part of the internal API and is versioned, so any changes to it are never
 * considered breaking changes. If you still need to support multiple versions of the
 * library, please use the `versionInfo` variable for version detection.
 *
 * @internal
 */
var Parser = exports.Parser = /*#__PURE__*/function () {
  function Parser(source) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, Parser);
    var sourceObj = (0, _source.isSource)(source) ? source : new _source.Source(source);
    this._lexer = new _lexer.Lexer(sourceObj);
    this._options = options;
    this._tokenCounter = 0;
  }
  /**
   * Converts a name lex token into a name parse node.
   */
  _createClass(Parser, [{
    key: "parseName",
    value: function parseName() {
      var token = this.expectToken(_tokenKind.TokenKind.NAME);
      return this.node(token, {
        kind: _kinds.Kind.NAME,
        value: token.value
      });
    } // Implements the parsing rules in the Document section.

    /**
     * Document : Definition+
     */
  }, {
    key: "parseDocument",
    value: function parseDocument() {
      return this.node(this._lexer.token, {
        kind: _kinds.Kind.DOCUMENT,
        definitions: this.many(_tokenKind.TokenKind.SOF, this.parseDefinition, _tokenKind.TokenKind.EOF)
      });
    }
    /**
     * Definition :
     *   - ExecutableDefinition
     *   - TypeSystemDefinition
     *   - TypeSystemExtension
     *
     * ExecutableDefinition :
     *   - OperationDefinition
     *   - FragmentDefinition
     *
     * TypeSystemDefinition :
     *   - SchemaDefinition
     *   - TypeDefinition
     *   - DirectiveDefinition
     *
     * TypeDefinition :
     *   - ScalarTypeDefinition
     *   - ObjectTypeDefinition
     *   - InterfaceTypeDefinition
     *   - UnionTypeDefinition
     *   - EnumTypeDefinition
     *   - InputObjectTypeDefinition
     */
  }, {
    key: "parseDefinition",
    value: function parseDefinition() {
      if (this.peek(_tokenKind.TokenKind.BRACE_L)) {
        return this.parseOperationDefinition();
      } // Many definitions begin with a description and require a lookahead.

      var hasDescription = this.peekDescription();
      var keywordToken = hasDescription ? this._lexer.lookahead() : this._lexer.token;
      if (keywordToken.kind === _tokenKind.TokenKind.NAME) {
        switch (keywordToken.value) {
          case 'schema':
            return this.parseSchemaDefinition();
          case 'scalar':
            return this.parseScalarTypeDefinition();
          case 'type':
            return this.parseObjectTypeDefinition();
          case 'interface':
            return this.parseInterfaceTypeDefinition();
          case 'union':
            return this.parseUnionTypeDefinition();
          case 'enum':
            return this.parseEnumTypeDefinition();
          case 'input':
            return this.parseInputObjectTypeDefinition();
          case 'directive':
            return this.parseDirectiveDefinition();
        }
        if (hasDescription) {
          throw (0, _syntaxError.syntaxError)(this._lexer.source, this._lexer.token.start, 'Unexpected description, descriptions are supported only on type definitions.');
        }
        switch (keywordToken.value) {
          case 'query':
          case 'mutation':
          case 'subscription':
            return this.parseOperationDefinition();
          case 'fragment':
            return this.parseFragmentDefinition();
          case 'extend':
            return this.parseTypeSystemExtension();
        }
      }
      throw this.unexpected(keywordToken);
    } // Implements the parsing rules in the Operations section.

    /**
     * OperationDefinition :
     *  - SelectionSet
     *  - OperationType Name? VariableDefinitions? Directives? SelectionSet
     */
  }, {
    key: "parseOperationDefinition",
    value: function parseOperationDefinition() {
      var start = this._lexer.token;
      if (this.peek(_tokenKind.TokenKind.BRACE_L)) {
        return this.node(start, {
          kind: _kinds.Kind.OPERATION_DEFINITION,
          operation: _ast.OperationTypeNode.QUERY,
          name: undefined,
          variableDefinitions: [],
          directives: [],
          selectionSet: this.parseSelectionSet()
        });
      }
      var operation = this.parseOperationType();
      var name;
      if (this.peek(_tokenKind.TokenKind.NAME)) {
        name = this.parseName();
      }
      return this.node(start, {
        kind: _kinds.Kind.OPERATION_DEFINITION,
        operation: operation,
        name: name,
        variableDefinitions: this.parseVariableDefinitions(),
        directives: this.parseDirectives(false),
        selectionSet: this.parseSelectionSet()
      });
    }
    /**
     * OperationType : one of query mutation subscription
     */
  }, {
    key: "parseOperationType",
    value: function parseOperationType() {
      var operationToken = this.expectToken(_tokenKind.TokenKind.NAME);
      switch (operationToken.value) {
        case 'query':
          return _ast.OperationTypeNode.QUERY;
        case 'mutation':
          return _ast.OperationTypeNode.MUTATION;
        case 'subscription':
          return _ast.OperationTypeNode.SUBSCRIPTION;
      }
      throw this.unexpected(operationToken);
    }
    /**
     * VariableDefinitions : ( VariableDefinition+ )
     */
  }, {
    key: "parseVariableDefinitions",
    value: function parseVariableDefinitions() {
      return this.optionalMany(_tokenKind.TokenKind.PAREN_L, this.parseVariableDefinition, _tokenKind.TokenKind.PAREN_R);
    }
    /**
     * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?
     */
  }, {
    key: "parseVariableDefinition",
    value: function parseVariableDefinition() {
      return this.node(this._lexer.token, {
        kind: _kinds.Kind.VARIABLE_DEFINITION,
        variable: this.parseVariable(),
        type: (this.expectToken(_tokenKind.TokenKind.COLON), this.parseTypeReference()),
        defaultValue: this.expectOptionalToken(_tokenKind.TokenKind.EQUALS) ? this.parseConstValueLiteral() : undefined,
        directives: this.parseConstDirectives()
      });
    }
    /**
     * Variable : $ Name
     */
  }, {
    key: "parseVariable",
    value: function parseVariable() {
      var start = this._lexer.token;
      this.expectToken(_tokenKind.TokenKind.DOLLAR);
      return this.node(start, {
        kind: _kinds.Kind.VARIABLE,
        name: this.parseName()
      });
    }
    /**
     * ```
     * SelectionSet : { Selection+ }
     * ```
     */
  }, {
    key: "parseSelectionSet",
    value: function parseSelectionSet() {
      return this.node(this._lexer.token, {
        kind: _kinds.Kind.SELECTION_SET,
        selections: this.many(_tokenKind.TokenKind.BRACE_L, this.parseSelection, _tokenKind.TokenKind.BRACE_R)
      });
    }
    /**
     * Selection :
     *   - Field
     *   - FragmentSpread
     *   - InlineFragment
     */
  }, {
    key: "parseSelection",
    value: function parseSelection() {
      return this.peek(_tokenKind.TokenKind.SPREAD) ? this.parseFragment() : this.parseField();
    }
    /**
     * Field : Alias? Name Arguments? Directives? SelectionSet?
     *
     * Alias : Name :
     */
  }, {
    key: "parseField",
    value: function parseField() {
      var start = this._lexer.token;
      var nameOrAlias = this.parseName();
      var alias;
      var name;
      if (this.expectOptionalToken(_tokenKind.TokenKind.COLON)) {
        alias = nameOrAlias;
        name = this.parseName();
      } else {
        name = nameOrAlias;
      }
      return this.node(start, {
        kind: _kinds.Kind.FIELD,
        alias: alias,
        name: name,
        arguments: this.parseArguments(false),
        directives: this.parseDirectives(false),
        selectionSet: this.peek(_tokenKind.TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined
      });
    }
    /**
     * Arguments[Const] : ( Argument[?Const]+ )
     */
  }, {
    key: "parseArguments",
    value: function parseArguments(isConst) {
      var item = isConst ? this.parseConstArgument : this.parseArgument;
      return this.optionalMany(_tokenKind.TokenKind.PAREN_L, item, _tokenKind.TokenKind.PAREN_R);
    }
    /**
     * Argument[Const] : Name : Value[?Const]
     */
  }, {
    key: "parseArgument",
    value: function parseArgument() {
      var isConst = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var start = this._lexer.token;
      var name = this.parseName();
      this.expectToken(_tokenKind.TokenKind.COLON);
      return this.node(start, {
        kind: _kinds.Kind.ARGUMENT,
        name: name,
        value: this.parseValueLiteral(isConst)
      });
    }
  }, {
    key: "parseConstArgument",
    value: function parseConstArgument() {
      return this.parseArgument(true);
    } // Implements the parsing rules in the Fragments section.

    /**
     * Corresponds to both FragmentSpread and InlineFragment in the spec.
     *
     * FragmentSpread : ... FragmentName Directives?
     *
     * InlineFragment : ... TypeCondition? Directives? SelectionSet
     */
  }, {
    key: "parseFragment",
    value: function parseFragment() {
      var start = this._lexer.token;
      this.expectToken(_tokenKind.TokenKind.SPREAD);
      var hasTypeCondition = this.expectOptionalKeyword('on');
      if (!hasTypeCondition && this.peek(_tokenKind.TokenKind.NAME)) {
        return this.node(start, {
          kind: _kinds.Kind.FRAGMENT_SPREAD,
          name: this.parseFragmentName(),
          directives: this.parseDirectives(false)
        });
      }
      return this.node(start, {
        kind: _kinds.Kind.INLINE_FRAGMENT,
        typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,
        directives: this.parseDirectives(false),
        selectionSet: this.parseSelectionSet()
      });
    }
    /**
     * FragmentDefinition :
     *   - fragment FragmentName on TypeCondition Directives? SelectionSet
     *
     * TypeCondition : NamedType
     */
  }, {
    key: "parseFragmentDefinition",
    value: function parseFragmentDefinition() {
      var start = this._lexer.token;
      this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes
      // the grammar of FragmentDefinition:
      //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet

      if (this._options.allowLegacyFragmentVariables === true) {
        return this.node(start, {
          kind: _kinds.Kind.FRAGMENT_DEFINITION,
          name: this.parseFragmentName(),
          variableDefinitions: this.parseVariableDefinitions(),
          typeCondition: (this.expectKeyword('on'), this.parseNamedType()),
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet()
        });
      }
      return this.node(start, {
        kind: _kinds.Kind.FRAGMENT_DEFINITION,
        name: this.parseFragmentName(),
        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),
        directives: this.parseDirectives(false),
        selectionSet: this.parseSelectionSet()
      });
    }
    /**
     * FragmentName : Name but not `on`
     */
  }, {
    key: "parseFragmentName",
    value: function parseFragmentName() {
      if (this._lexer.token.value === 'on') {
        throw this.unexpected();
      }
      return this.parseName();
    } // Implements the parsing rules in the Values section.

    /**
     * Value[Const] :
     *   - [~Const] Variable
     *   - IntValue
     *   - FloatValue
     *   - StringValue
     *   - BooleanValue
     *   - NullValue
     *   - EnumValue
     *   - ListValue[?Const]
     *   - ObjectValue[?Const]
     *
     * BooleanValue : one of `true` `false`
     *
     * NullValue : `null`
     *
     * EnumValue : Name but not `true`, `false` or `null`
     */
  }, {
    key: "parseValueLiteral",
    value: function parseValueLiteral(isConst) {
      var token = this._lexer.token;
      switch (token.kind) {
        case _tokenKind.TokenKind.BRACKET_L:
          return this.parseList(isConst);
        case _tokenKind.TokenKind.BRACE_L:
          return this.parseObject(isConst);
        case _tokenKind.TokenKind.INT:
          this.advanceLexer();
          return this.node(token, {
            kind: _kinds.Kind.INT,
            value: token.value
          });
        case _tokenKind.TokenKind.FLOAT:
          this.advanceLexer();
          return this.node(token, {
            kind: _kinds.Kind.FLOAT,
            value: token.value
          });
        case _tokenKind.TokenKind.STRING:
        case _tokenKind.TokenKind.BLOCK_STRING:
          return this.parseStringLiteral();
        case _tokenKind.TokenKind.NAME:
          this.advanceLexer();
          switch (token.value) {
            case 'true':
              return this.node(token, {
                kind: _kinds.Kind.BOOLEAN,
                value: true
              });
            case 'false':
              return this.node(token, {
                kind: _kinds.Kind.BOOLEAN,
                value: false
              });
            case 'null':
              return this.node(token, {
                kind: _kinds.Kind.NULL
              });
            default:
              return this.node(token, {
                kind: _kinds.Kind.ENUM,
                value: token.value
              });
          }
        case _tokenKind.TokenKind.DOLLAR:
          if (isConst) {
            this.expectToken(_tokenKind.TokenKind.DOLLAR);
            if (this._lexer.token.kind === _tokenKind.TokenKind.NAME) {
              var varName = this._lexer.token.value;
              throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, "Unexpected variable \"$".concat(varName, "\" in constant value."));
            } else {
              throw this.unexpected(token);
            }
          }
          return this.parseVariable();
        default:
          throw this.unexpected();
      }
    }
  }, {
    key: "parseConstValueLiteral",
    value: function parseConstValueLiteral() {
      return this.parseValueLiteral(true);
    }
  }, {
    key: "parseStringLiteral",
    value: function parseStringLiteral() {
      var token = this._lexer.token;
      this.advanceLexer();
      return this.node(token, {
        kind: _kinds.Kind.STRING,
        value: token.value,
        block: token.kind === _tokenKind.TokenKind.BLOCK_STRING
      });
    }
    /**
     * ListValue[Const] :
     *   - [ ]
     *   - [ Value[?Const]+ ]
     */
  }, {
    key: "parseList",
    value: function parseList(isConst) {
      var _this = this;
      var item = function item() {
        return _this.parseValueLiteral(isConst);
      };
      return this.node(this._lexer.token, {
        kind: _kinds.Kind.LIST,
        values: this.any(_tokenKind.TokenKind.BRACKET_L, item, _tokenKind.TokenKind.BRACKET_R)
      });
    }
    /**
     * ```
     * ObjectValue[Const] :
     *   - { }
     *   - { ObjectField[?Const]+ }
     * ```
     */
  }, {
    key: "parseObject",
    value: function parseObject(isConst) {
      var _this2 = this;
      var item = function item() {
        return _this2.parseObjectField(isConst);
      };
      return this.node(this._lexer.token, {
        kind: _kinds.Kind.OBJECT,
        fields: this.any(_tokenKind.TokenKind.BRACE_L, item, _tokenKind.TokenKind.BRACE_R)
      });
    }
    /**
     * ObjectField[Const] : Name : Value[?Const]
     */
  }, {
    key: "parseObjectField",
    value: function parseObjectField(isConst) {
      var start = this._lexer.token;
      var name = this.parseName();
      this.expectToken(_tokenKind.TokenKind.COLON);
      return this.node(start, {
        kind: _kinds.Kind.OBJECT_FIELD,
        name: name,
        value: this.parseValueLiteral(isConst)
      });
    } // Implements the parsing rules in the Directives section.

    /**
     * Directives[Const] : Directive[?Const]+
     */
  }, {
    key: "parseDirectives",
    value: function parseDirectives(isConst) {
      var directives = [];
      while (this.peek(_tokenKind.TokenKind.AT)) {
        directives.push(this.parseDirective(isConst));
      }
      return directives;
    }
  }, {
    key: "parseConstDirectives",
    value: function parseConstDirectives() {
      return this.parseDirectives(true);
    }
    /**
     * ```
     * Directive[Const] : @ Name Arguments[?Const]?
     * ```
     */
  }, {
    key: "parseDirective",
    value: function parseDirective(isConst) {
      var start = this._lexer.token;
      this.expectToken(_tokenKind.TokenKind.AT);
      return this.node(start, {
        kind: _kinds.Kind.DIRECTIVE,
        name: this.parseName(),
        arguments: this.parseArguments(isConst)
      });
    } // Implements the parsing rules in the Types section.

    /**
     * Type :
     *   - NamedType
     *   - ListType
     *   - NonNullType
     */
  }, {
    key: "parseTypeReference",
    value: function parseTypeReference() {
      var start = this._lexer.token;
      var type;
      if (this.expectOptionalToken(_tokenKind.TokenKind.BRACKET_L)) {
        var innerType = this.parseTypeReference();
        this.expectToken(_tokenKind.TokenKind.BRACKET_R);
        type = this.node(start, {
          kind: _kinds.Kind.LIST_TYPE,
          type: innerType
        });
      } else {
        type = this.parseNamedType();
      }
      if (this.expectOptionalToken(_tokenKind.TokenKind.BANG)) {
        return this.node(start, {
          kind: _kinds.Kind.NON_NULL_TYPE,
          type: type
        });
      }
      return type;
    }
    /**
     * NamedType : Name
     */
  }, {
    key: "parseNamedType",
    value: function parseNamedType() {
      return this.node(this._lexer.token, {
        kind: _kinds.Kind.NAMED_TYPE,
        name: this.parseName()
      });
    } // Implements the parsing rules in the Type Definition section.
  }, {
    key: "peekDescription",
    value: function peekDescription() {
      return this.peek(_tokenKind.TokenKind.STRING) || this.peek(_tokenKind.TokenKind.BLOCK_STRING);
    }
    /**
     * Description : StringValue
     */
  }, {
    key: "parseDescription",
    value: function parseDescription() {
      if (this.peekDescription()) {
        return this.parseStringLiteral();
      }
    }
    /**
     * ```
     * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }
     * ```
     */
  }, {
    key: "parseSchemaDefinition",
    value: function parseSchemaDefinition() {
      var start = this._lexer.token;
      var description = this.parseDescription();
      this.expectKeyword('schema');
      var directives = this.parseConstDirectives();
      var operationTypes = this.many(_tokenKind.TokenKind.BRACE_L, this.parseOperationTypeDefinition, _tokenKind.TokenKind.BRACE_R);
      return this.node(start, {
        kind: _kinds.Kind.SCHEMA_DEFINITION,
        description: description,
        directives: directives,
        operationTypes: operationTypes
      });
    }
    /**
     * OperationTypeDefinition : OperationType : NamedType
     */
  }, {
    key: "parseOperationTypeDefinition",
    value: function parseOperationTypeDefinition() {
      var start = this._lexer.token;
      var operation = this.parseOperationType();
      this.expectToken(_tokenKind.TokenKind.COLON);
      var type = this.parseNamedType();
      return this.node(start, {
        kind: _kinds.Kind.OPERATION_TYPE_DEFINITION,
        operation: operation,
        type: type
      });
    }
    /**
     * ScalarTypeDefinition : Description? scalar Name Directives[Const]?
     */
  }, {
    key: "parseScalarTypeDefinition",
    value: function parseScalarTypeDefinition() {
      var start = this._lexer.token;
      var description = this.parseDescription();
      this.expectKeyword('scalar');
      var name = this.parseName();
      var directives = this.parseConstDirectives();
      return this.node(start, {
        kind: _kinds.Kind.SCALAR_TYPE_DEFINITION,
        description: description,
        name: name,
        directives: directives
      });
    }
    /**
     * ObjectTypeDefinition :
     *   Description?
     *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?
     */
  }, {
    key: "parseObjectTypeDefinition",
    value: function parseObjectTypeDefinition() {
      var start = this._lexer.token;
      var description = this.parseDescription();
      this.expectKeyword('type');
      var name = this.parseName();
      var interfaces = this.parseImplementsInterfaces();
      var directives = this.parseConstDirectives();
      var fields = this.parseFieldsDefinition();
      return this.node(start, {
        kind: _kinds.Kind.OBJECT_TYPE_DEFINITION,
        description: description,
        name: name,
        interfaces: interfaces,
        directives: directives,
        fields: fields
      });
    }
    /**
     * ImplementsInterfaces :
     *   - implements `&`? NamedType
     *   - ImplementsInterfaces & NamedType
     */
  }, {
    key: "parseImplementsInterfaces",
    value: function parseImplementsInterfaces() {
      return this.expectOptionalKeyword('implements') ? this.delimitedMany(_tokenKind.TokenKind.AMP, this.parseNamedType) : [];
    }
    /**
     * ```
     * FieldsDefinition : { FieldDefinition+ }
     * ```
     */
  }, {
    key: "parseFieldsDefinition",
    value: function parseFieldsDefinition() {
      return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseFieldDefinition, _tokenKind.TokenKind.BRACE_R);
    }
    /**
     * FieldDefinition :
     *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?
     */
  }, {
    key: "parseFieldDefinition",
    value: function parseFieldDefinition() {
      var start = this._lexer.token;
      var description = this.parseDescription();
      var name = this.parseName();
      var args = this.parseArgumentDefs();
      this.expectToken(_tokenKind.TokenKind.COLON);
      var type = this.parseTypeReference();
      var directives = this.parseConstDirectives();
      return this.node(start, {
        kind: _kinds.Kind.FIELD_DEFINITION,
        description: description,
        name: name,
        arguments: args,
        type: type,
        directives: directives
      });
    }
    /**
     * ArgumentsDefinition : ( InputValueDefinition+ )
     */
  }, {
    key: "parseArgumentDefs",
    value: function parseArgumentDefs() {
      return this.optionalMany(_tokenKind.TokenKind.PAREN_L, this.parseInputValueDef, _tokenKind.TokenKind.PAREN_R);
    }
    /**
     * InputValueDefinition :
     *   - Description? Name : Type DefaultValue? Directives[Const]?
     */
  }, {
    key: "parseInputValueDef",
    value: function parseInputValueDef() {
      var start = this._lexer.token;
      var description = this.parseDescription();
      var name = this.parseName();
      this.expectToken(_tokenKind.TokenKind.COLON);
      var type = this.parseTypeReference();
      var defaultValue;
      if (this.expectOptionalToken(_tokenKind.TokenKind.EQUALS)) {
        defaultValue = this.parseConstValueLiteral();
      }
      var directives = this.parseConstDirectives();
      return this.node(start, {
        kind: _kinds.Kind.INPUT_VALUE_DEFINITION,
        description: description,
        name: name,
        type: type,
        defaultValue: defaultValue,
        directives: directives
      });
    }
    /**
     * InterfaceTypeDefinition :
     *   - Description? interface Name Directives[Const]? FieldsDefinition?
     */
  }, {
    key: "parseInterfaceTypeDefinition",
    value: function parseInterfaceTypeDefinition() {
      var start = this._lexer.token;
      var description = this.parseDescription();
      this.expectKeyword('interface');
      var name = this.parseName();
      var interfaces = this.parseImplementsInterfaces();
      var directives = this.parseConstDirectives();
      var fields = this.parseFieldsDefinition();
      return this.node(start, {
        kind: _kinds.Kind.INTERFACE_TYPE_DEFINITION,
        description: description,
        name: name,
        interfaces: interfaces,
        directives: directives,
        fields: fields
      });
    }
    /**
     * UnionTypeDefinition :
     *   - Description? union Name Directives[Const]? UnionMemberTypes?
     */
  }, {
    key: "parseUnionTypeDefinition",
    value: function parseUnionTypeDefinition() {
      var start = this._lexer.token;
      var description = this.parseDescription();
      this.expectKeyword('union');
      var name = this.parseName();
      var directives = this.parseConstDirectives();
      var types = this.parseUnionMemberTypes();
      return this.node(start, {
        kind: _kinds.Kind.UNION_TYPE_DEFINITION,
        description: description,
        name: name,
        directives: directives,
        types: types
      });
    }
    /**
     * UnionMemberTypes :
     *   - = `|`? NamedType
     *   - UnionMemberTypes | NamedType
     */
  }, {
    key: "parseUnionMemberTypes",
    value: function parseUnionMemberTypes() {
      return this.expectOptionalToken(_tokenKind.TokenKind.EQUALS) ? this.delimitedMany(_tokenKind.TokenKind.PIPE, this.parseNamedType) : [];
    }
    /**
     * EnumTypeDefinition :
     *   - Description? enum Name Directives[Const]? EnumValuesDefinition?
     */
  }, {
    key: "parseEnumTypeDefinition",
    value: function parseEnumTypeDefinition() {
      var start = this._lexer.token;
      var description = this.parseDescription();
      this.expectKeyword('enum');
      var name = this.parseName();
      var directives = this.parseConstDirectives();
      var values = this.parseEnumValuesDefinition();
      return this.node(start, {
        kind: _kinds.Kind.ENUM_TYPE_DEFINITION,
        description: description,
        name: name,
        directives: directives,
        values: values
      });
    }
    /**
     * ```
     * EnumValuesDefinition : { EnumValueDefinition+ }
     * ```
     */
  }, {
    key: "parseEnumValuesDefinition",
    value: function parseEnumValuesDefinition() {
      return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseEnumValueDefinition, _tokenKind.TokenKind.BRACE_R);
    }
    /**
     * EnumValueDefinition : Description? EnumValue Directives[Const]?
     */
  }, {
    key: "parseEnumValueDefinition",
    value: function parseEnumValueDefinition() {
      var start = this._lexer.token;
      var description = this.parseDescription();
      var name = this.parseEnumValueName();
      var directives = this.parseConstDirectives();
      return this.node(start, {
        kind: _kinds.Kind.ENUM_VALUE_DEFINITION,
        description: description,
        name: name,
        directives: directives
      });
    }
    /**
     * EnumValue : Name but not `true`, `false` or `null`
     */
  }, {
    key: "parseEnumValueName",
    value: function parseEnumValueName() {
      if (this._lexer.token.value === 'true' || this._lexer.token.value === 'false' || this._lexer.token.value === 'null') {
        throw (0, _syntaxError.syntaxError)(this._lexer.source, this._lexer.token.start, "".concat(getTokenDesc(this._lexer.token), " is reserved and cannot be used for an enum value."));
      }
      return this.parseName();
    }
    /**
     * InputObjectTypeDefinition :
     *   - Description? input Name Directives[Const]? InputFieldsDefinition?
     */
  }, {
    key: "parseInputObjectTypeDefinition",
    value: function parseInputObjectTypeDefinition() {
      var start = this._lexer.token;
      var description = this.parseDescription();
      this.expectKeyword('input');
      var name = this.parseName();
      var directives = this.parseConstDirectives();
      var fields = this.parseInputFieldsDefinition();
      return this.node(start, {
        kind: _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION,
        description: description,
        name: name,
        directives: directives,
        fields: fields
      });
    }
    /**
     * ```
     * InputFieldsDefinition : { InputValueDefinition+ }
     * ```
     */
  }, {
    key: "parseInputFieldsDefinition",
    value: function parseInputFieldsDefinition() {
      return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseInputValueDef, _tokenKind.TokenKind.BRACE_R);
    }
    /**
     * TypeSystemExtension :
     *   - SchemaExtension
     *   - TypeExtension
     *
     * TypeExtension :
     *   - ScalarTypeExtension
     *   - ObjectTypeExtension
     *   - InterfaceTypeExtension
     *   - UnionTypeExtension
     *   - EnumTypeExtension
     *   - InputObjectTypeDefinition
     */
  }, {
    key: "parseTypeSystemExtension",
    value: function parseTypeSystemExtension() {
      var keywordToken = this._lexer.lookahead();
      if (keywordToken.kind === _tokenKind.TokenKind.NAME) {
        switch (keywordToken.value) {
          case 'schema':
            return this.parseSchemaExtension();
          case 'scalar':
            return this.parseScalarTypeExtension();
          case 'type':
            return this.parseObjectTypeExtension();
          case 'interface':
            return this.parseInterfaceTypeExtension();
          case 'union':
            return this.parseUnionTypeExtension();
          case 'enum':
            return this.parseEnumTypeExtension();
          case 'input':
            return this.parseInputObjectTypeExtension();
        }
      }
      throw this.unexpected(keywordToken);
    }
    /**
     * ```
     * SchemaExtension :
     *  - extend schema Directives[Const]? { OperationTypeDefinition+ }
     *  - extend schema Directives[Const]
     * ```
     */
  }, {
    key: "parseSchemaExtension",
    value: function parseSchemaExtension() {
      var start = this._lexer.token;
      this.expectKeyword('extend');
      this.expectKeyword('schema');
      var directives = this.parseConstDirectives();
      var operationTypes = this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseOperationTypeDefinition, _tokenKind.TokenKind.BRACE_R);
      if (directives.length === 0 && operationTypes.length === 0) {
        throw this.unexpected();
      }
      return this.node(start, {
        kind: _kinds.Kind.SCHEMA_EXTENSION,
        directives: directives,
        operationTypes: operationTypes
      });
    }
    /**
     * ScalarTypeExtension :
     *   - extend scalar Name Directives[Const]
     */
  }, {
    key: "parseScalarTypeExtension",
    value: function parseScalarTypeExtension() {
      var start = this._lexer.token;
      this.expectKeyword('extend');
      this.expectKeyword('scalar');
      var name = this.parseName();
      var directives = this.parseConstDirectives();
      if (directives.length === 0) {
        throw this.unexpected();
      }
      return this.node(start, {
        kind: _kinds.Kind.SCALAR_TYPE_EXTENSION,
        name: name,
        directives: directives
      });
    }
    /**
     * ObjectTypeExtension :
     *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
     *  - extend type Name ImplementsInterfaces? Directives[Const]
     *  - extend type Name ImplementsInterfaces
     */
  }, {
    key: "parseObjectTypeExtension",
    value: function parseObjectTypeExtension() {
      var start = this._lexer.token;
      this.expectKeyword('extend');
      this.expectKeyword('type');
      var name = this.parseName();
      var interfaces = this.parseImplementsInterfaces();
      var directives = this.parseConstDirectives();
      var fields = this.parseFieldsDefinition();
      if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
        throw this.unexpected();
      }
      return this.node(start, {
        kind: _kinds.Kind.OBJECT_TYPE_EXTENSION,
        name: name,
        interfaces: interfaces,
        directives: directives,
        fields: fields
      });
    }
    /**
     * InterfaceTypeExtension :
     *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
     *  - extend interface Name ImplementsInterfaces? Directives[Const]
     *  - extend interface Name ImplementsInterfaces
     */
  }, {
    key: "parseInterfaceTypeExtension",
    value: function parseInterfaceTypeExtension() {
      var start = this._lexer.token;
      this.expectKeyword('extend');
      this.expectKeyword('interface');
      var name = this.parseName();
      var interfaces = this.parseImplementsInterfaces();
      var directives = this.parseConstDirectives();
      var fields = this.parseFieldsDefinition();
      if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
        throw this.unexpected();
      }
      return this.node(start, {
        kind: _kinds.Kind.INTERFACE_TYPE_EXTENSION,
        name: name,
        interfaces: interfaces,
        directives: directives,
        fields: fields
      });
    }
    /**
     * UnionTypeExtension :
     *   - extend union Name Directives[Const]? UnionMemberTypes
     *   - extend union Name Directives[Const]
     */
  }, {
    key: "parseUnionTypeExtension",
    value: function parseUnionTypeExtension() {
      var start = this._lexer.token;
      this.expectKeyword('extend');
      this.expectKeyword('union');
      var name = this.parseName();
      var directives = this.parseConstDirectives();
      var types = this.parseUnionMemberTypes();
      if (directives.length === 0 && types.length === 0) {
        throw this.unexpected();
      }
      return this.node(start, {
        kind: _kinds.Kind.UNION_TYPE_EXTENSION,
        name: name,
        directives: directives,
        types: types
      });
    }
    /**
     * EnumTypeExtension :
     *   - extend enum Name Directives[Const]? EnumValuesDefinition
     *   - extend enum Name Directives[Const]
     */
  }, {
    key: "parseEnumTypeExtension",
    value: function parseEnumTypeExtension() {
      var start = this._lexer.token;
      this.expectKeyword('extend');
      this.expectKeyword('enum');
      var name = this.parseName();
      var directives = this.parseConstDirectives();
      var values = this.parseEnumValuesDefinition();
      if (directives.length === 0 && values.length === 0) {
        throw this.unexpected();
      }
      return this.node(start, {
        kind: _kinds.Kind.ENUM_TYPE_EXTENSION,
        name: name,
        directives: directives,
        values: values
      });
    }
    /**
     * InputObjectTypeExtension :
     *   - extend input Name Directives[Const]? InputFieldsDefinition
     *   - extend input Name Directives[Const]
     */
  }, {
    key: "parseInputObjectTypeExtension",
    value: function parseInputObjectTypeExtension() {
      var start = this._lexer.token;
      this.expectKeyword('extend');
      this.expectKeyword('input');
      var name = this.parseName();
      var directives = this.parseConstDirectives();
      var fields = this.parseInputFieldsDefinition();
      if (directives.length === 0 && fields.length === 0) {
        throw this.unexpected();
      }
      return this.node(start, {
        kind: _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION,
        name: name,
        directives: directives,
        fields: fields
      });
    }
    /**
     * ```
     * DirectiveDefinition :
     *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations
     * ```
     */
  }, {
    key: "parseDirectiveDefinition",
    value: function parseDirectiveDefinition() {
      var start = this._lexer.token;
      var description = this.parseDescription();
      this.expectKeyword('directive');
      this.expectToken(_tokenKind.TokenKind.AT);
      var name = this.parseName();
      var args = this.parseArgumentDefs();
      var repeatable = this.expectOptionalKeyword('repeatable');
      this.expectKeyword('on');
      var locations = this.parseDirectiveLocations();
      return this.node(start, {
        kind: _kinds.Kind.DIRECTIVE_DEFINITION,
        description: description,
        name: name,
        arguments: args,
        repeatable: repeatable,
        locations: locations
      });
    }
    /**
     * DirectiveLocations :
     *   - `|`? DirectiveLocation
     *   - DirectiveLocations | DirectiveLocation
     */
  }, {
    key: "parseDirectiveLocations",
    value: function parseDirectiveLocations() {
      return this.delimitedMany(_tokenKind.TokenKind.PIPE, this.parseDirectiveLocation);
    }
    /*
     * DirectiveLocation :
     *   - ExecutableDirectiveLocation
     *   - TypeSystemDirectiveLocation
     *
     * ExecutableDirectiveLocation : one of
     *   `QUERY`
     *   `MUTATION`
     *   `SUBSCRIPTION`
     *   `FIELD`
     *   `FRAGMENT_DEFINITION`
     *   `FRAGMENT_SPREAD`
     *   `INLINE_FRAGMENT`
     *
     * TypeSystemDirectiveLocation : one of
     *   `SCHEMA`
     *   `SCALAR`
     *   `OBJECT`
     *   `FIELD_DEFINITION`
     *   `ARGUMENT_DEFINITION`
     *   `INTERFACE`
     *   `UNION`
     *   `ENUM`
     *   `ENUM_VALUE`
     *   `INPUT_OBJECT`
     *   `INPUT_FIELD_DEFINITION`
     */
  }, {
    key: "parseDirectiveLocation",
    value: function parseDirectiveLocation() {
      var start = this._lexer.token;
      var name = this.parseName();
      if (Object.prototype.hasOwnProperty.call(_directiveLocation.DirectiveLocation, name.value)) {
        return name;
      }
      throw this.unexpected(start);
    } // Core parsing utility functions

    /**
     * Returns a node that, if configured to do so, sets a "loc" field as a
     * location object, used to identify the place in the source that created a
     * given parsed object.
     */
  }, {
    key: "node",
    value: function node(startToken, _node) {
      if (this._options.noLocation !== true) {
        _node.loc = new _ast.Location(startToken, this._lexer.lastToken, this._lexer.source);
      }
      return _node;
    }
    /**
     * Determines if the next token is of a given kind
     */
  }, {
    key: "peek",
    value: function peek(kind) {
      return this._lexer.token.kind === kind;
    }
    /**
     * If the next token is of the given kind, return that token after advancing the lexer.
     * Otherwise, do not change the parser state and throw an error.
     */
  }, {
    key: "expectToken",
    value: function expectToken(kind) {
      var token = this._lexer.token;
      if (token.kind === kind) {
        this.advanceLexer();
        return token;
      }
      throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, "Expected ".concat(getTokenKindDesc(kind), ", found ").concat(getTokenDesc(token), "."));
    }
    /**
     * If the next token is of the given kind, return "true" after advancing the lexer.
     * Otherwise, do not change the parser state and return "false".
     */
  }, {
    key: "expectOptionalToken",
    value: function expectOptionalToken(kind) {
      var token = this._lexer.token;
      if (token.kind === kind) {
        this.advanceLexer();
        return true;
      }
      return false;
    }
    /**
     * If the next token is a given keyword, advance the lexer.
     * Otherwise, do not change the parser state and throw an error.
     */
  }, {
    key: "expectKeyword",
    value: function expectKeyword(value) {
      var token = this._lexer.token;
      if (token.kind === _tokenKind.TokenKind.NAME && token.value === value) {
        this.advanceLexer();
      } else {
        throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, "Expected \"".concat(value, "\", found ").concat(getTokenDesc(token), "."));
      }
    }
    /**
     * If the next token is a given keyword, return "true" after advancing the lexer.
     * Otherwise, do not change the parser state and return "false".
     */
  }, {
    key: "expectOptionalKeyword",
    value: function expectOptionalKeyword(value) {
      var token = this._lexer.token;
      if (token.kind === _tokenKind.TokenKind.NAME && token.value === value) {
        this.advanceLexer();
        return true;
      }
      return false;
    }
    /**
     * Helper function for creating an error when an unexpected lexed token is encountered.
     */
  }, {
    key: "unexpected",
    value: function unexpected(atToken) {
      var token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;
      return (0, _syntaxError.syntaxError)(this._lexer.source, token.start, "Unexpected ".concat(getTokenDesc(token), "."));
    }
    /**
     * Returns a possibly empty list of parse nodes, determined by the parseFn.
     * This list begins with a lex token of openKind and ends with a lex token of closeKind.
     * Advances the parser to the next lex token after the closing token.
     */
  }, {
    key: "any",
    value: function any(openKind, parseFn, closeKind) {
      this.expectToken(openKind);
      var nodes = [];
      while (!this.expectOptionalToken(closeKind)) {
        nodes.push(parseFn.call(this));
      }
      return nodes;
    }
    /**
     * Returns a list of parse nodes, determined by the parseFn.
     * It can be empty only if open token is missing otherwise it will always return non-empty list
     * that begins with a lex token of openKind and ends with a lex token of closeKind.
     * Advances the parser to the next lex token after the closing token.
     */
  }, {
    key: "optionalMany",
    value: function optionalMany(openKind, parseFn, closeKind) {
      if (this.expectOptionalToken(openKind)) {
        var nodes = [];
        do {
          nodes.push(parseFn.call(this));
        } while (!this.expectOptionalToken(closeKind));
        return nodes;
      }
      return [];
    }
    /**
     * Returns a non-empty list of parse nodes, determined by the parseFn.
     * This list begins with a lex token of openKind and ends with a lex token of closeKind.
     * Advances the parser to the next lex token after the closing token.
     */
  }, {
    key: "many",
    value: function many(openKind, parseFn, closeKind) {
      this.expectToken(openKind);
      var nodes = [];
      do {
        nodes.push(parseFn.call(this));
      } while (!this.expectOptionalToken(closeKind));
      return nodes;
    }
    /**
     * Returns a non-empty list of parse nodes, determined by the parseFn.
     * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.
     * Advances the parser to the next lex token after last item in the list.
     */
  }, {
    key: "delimitedMany",
    value: function delimitedMany(delimiterKind, parseFn) {
      this.expectOptionalToken(delimiterKind);
      var nodes = [];
      do {
        nodes.push(parseFn.call(this));
      } while (this.expectOptionalToken(delimiterKind));
      return nodes;
    }
  }, {
    key: "advanceLexer",
    value: function advanceLexer() {
      var maxTokens = this._options.maxTokens;
      var token = this._lexer.advance();
      if (maxTokens !== undefined && token.kind !== _tokenKind.TokenKind.EOF) {
        ++this._tokenCounter;
        if (this._tokenCounter > maxTokens) {
          throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, "Document contains more that ".concat(maxTokens, " tokens. Parsing aborted."));
        }
      }
    }
  }]);
  return Parser;
}();
/**
 * A helper function to describe a token as a string for debugging.
 */
function getTokenDesc(token) {
  var value = token.value;
  return getTokenKindDesc(token.kind) + (value != null ? " \"".concat(value, "\"") : '');
}
/**
 * A helper function to describe a token kind as a string for debugging.
 */

function getTokenKindDesc(kind) {
  return (0, _lexer.isPunctuatorTokenKind)(kind) ? "\"".concat(kind, "\"") : kind;
}
},{"../error/syntaxError.mjs":"../node_modules/graphql/error/syntaxError.mjs","./ast.mjs":"../node_modules/graphql/language/ast.mjs","./directiveLocation.mjs":"../node_modules/graphql/language/directiveLocation.mjs","./kinds.mjs":"../node_modules/graphql/language/kinds.mjs","./lexer.mjs":"../node_modules/graphql/language/lexer.mjs","./source.mjs":"../node_modules/graphql/language/source.mjs","./tokenKind.mjs":"../node_modules/graphql/language/tokenKind.mjs"}],"../node_modules/graphql/jsutils/didYouMean.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.didYouMean = didYouMean;
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var MAX_SUGGESTIONS = 5;
/**
 * Given [ A, B, C ] return ' Did you mean A, B, or C?'.
 */

function didYouMean(firstArg, secondArg) {
  var _ref = secondArg ? [firstArg, secondArg] : [undefined, firstArg],
    _ref2 = _slicedToArray(_ref, 2),
    subMessage = _ref2[0],
    suggestionsArg = _ref2[1];
  var message = ' Did you mean ';
  if (subMessage) {
    message += subMessage + ' ';
  }
  var suggestions = suggestionsArg.map(function (x) {
    return "\"".concat(x, "\"");
  });
  switch (suggestions.length) {
    case 0:
      return '';
    case 1:
      return message + suggestions[0] + '?';
    case 2:
      return message + suggestions[0] + ' or ' + suggestions[1] + '?';
  }
  var selected = suggestions.slice(0, MAX_SUGGESTIONS);
  var lastItem = selected.pop();
  return message + selected.join(', ') + ', or ' + lastItem + '?';
}
},{}],"../node_modules/graphql/jsutils/identityFunc.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.identityFunc = identityFunc;
/**
 * Returns the first argument it receives.
 */
function identityFunc(x) {
  return x;
}
},{}],"../node_modules/graphql/jsutils/keyMap.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.keyMap = keyMap;
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Creates a keyed JS object from an array, given a function to produce the keys
 * for each value in the array.
 *
 * This provides a convenient lookup for the array items if the key function
 * produces unique results.
 * ```ts
 * const phoneBook = [
 *   { name: 'Jon', num: '555-1234' },
 *   { name: 'Jenny', num: '867-5309' }
 * ]
 *
 * const entriesByName = keyMap(
 *   phoneBook,
 *   entry => entry.name
 * )
 *
 * // {
 * //   Jon: { name: 'Jon', num: '555-1234' },
 * //   Jenny: { name: 'Jenny', num: '867-5309' }
 * // }
 *
 * const jennyEntry = entriesByName['Jenny']
 *
 * // { name: 'Jenny', num: '857-6309' }
 * ```
 */
function keyMap(list, keyFn) {
  var result = Object.create(null);
  var _iterator = _createForOfIteratorHelper(list),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var item = _step.value;
      result[keyFn(item)] = item;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return result;
}
},{}],"../node_modules/graphql/jsutils/keyValMap.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.keyValMap = keyValMap;
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Creates a keyed JS object from an array, given a function to produce the keys
 * and a function to produce the values from each item in the array.
 * ```ts
 * const phoneBook = [
 *   { name: 'Jon', num: '555-1234' },
 *   { name: 'Jenny', num: '867-5309' }
 * ]
 *
 * // { Jon: '555-1234', Jenny: '867-5309' }
 * const phonesByName = keyValMap(
 *   phoneBook,
 *   entry => entry.name,
 *   entry => entry.num
 * )
 * ```
 */
function keyValMap(list, keyFn, valFn) {
  var result = Object.create(null);
  var _iterator = _createForOfIteratorHelper(list),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var item = _step.value;
      result[keyFn(item)] = valFn(item);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return result;
}
},{}],"../node_modules/graphql/jsutils/mapValue.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapValue = mapValue;
/**
 * Creates an object map with the same keys as `map` and values generated by
 * running each value of `map` thru `fn`.
 */
function mapValue(map, fn) {
  var result = Object.create(null);
  for (var _i = 0, _Object$keys = Object.keys(map); _i < _Object$keys.length; _i++) {
    var key = _Object$keys[_i];
    result[key] = fn(map[key], key);
  }
  return result;
}
},{}],"../node_modules/graphql/jsutils/naturalCompare.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.naturalCompare = naturalCompare;
/**
 * Returns a number indicating whether a reference string comes before, or after,
 * or is the same as the given string in natural sort order.
 *
 * See: https://en.wikipedia.org/wiki/Natural_sort_order
 *
 */
function naturalCompare(aStr, bStr) {
  var aIndex = 0;
  var bIndex = 0;
  while (aIndex < aStr.length && bIndex < bStr.length) {
    var aChar = aStr.charCodeAt(aIndex);
    var bChar = bStr.charCodeAt(bIndex);
    if (isDigit(aChar) && isDigit(bChar)) {
      var aNum = 0;
      do {
        ++aIndex;
        aNum = aNum * 10 + aChar - DIGIT_0;
        aChar = aStr.charCodeAt(aIndex);
      } while (isDigit(aChar) && aNum > 0);
      var bNum = 0;
      do {
        ++bIndex;
        bNum = bNum * 10 + bChar - DIGIT_0;
        bChar = bStr.charCodeAt(bIndex);
      } while (isDigit(bChar) && bNum > 0);
      if (aNum < bNum) {
        return -1;
      }
      if (aNum > bNum) {
        return 1;
      }
    } else {
      if (aChar < bChar) {
        return -1;
      }
      if (aChar > bChar) {
        return 1;
      }
      ++aIndex;
      ++bIndex;
    }
  }
  return aStr.length - bStr.length;
}
var DIGIT_0 = 48;
var DIGIT_9 = 57;
function isDigit(code) {
  return !isNaN(code) && DIGIT_0 <= code && code <= DIGIT_9;
}
},{}],"../node_modules/graphql/jsutils/suggestionList.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.suggestionList = suggestionList;
var _naturalCompare = require("./naturalCompare.mjs");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Given an invalid input string and a list of valid options, returns a filtered
 * list of valid options sorted based on their similarity with the input.
 */

function suggestionList(input, options) {
  var optionsByDistance = Object.create(null);
  var lexicalDistance = new LexicalDistance(input);
  var threshold = Math.floor(input.length * 0.4) + 1;
  var _iterator = _createForOfIteratorHelper(options),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var option = _step.value;
      var distance = lexicalDistance.measure(option, threshold);
      if (distance !== undefined) {
        optionsByDistance[option] = distance;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return Object.keys(optionsByDistance).sort(function (a, b) {
    var distanceDiff = optionsByDistance[a] - optionsByDistance[b];
    return distanceDiff !== 0 ? distanceDiff : (0, _naturalCompare.naturalCompare)(a, b);
  });
}
/**
 * Computes the lexical distance between strings A and B.
 *
 * The "distance" between two strings is given by counting the minimum number
 * of edits needed to transform string A into string B. An edit can be an
 * insertion, deletion, or substitution of a single character, or a swap of two
 * adjacent characters.
 *
 * Includes a custom alteration from Damerau-Levenshtein to treat case changes
 * as a single edit which helps identify mis-cased values with an edit distance
 * of 1.
 *
 * This distance can be useful for detecting typos in input or sorting
 */
var LexicalDistance = /*#__PURE__*/function () {
  function LexicalDistance(input) {
    _classCallCheck(this, LexicalDistance);
    this._input = input;
    this._inputLowerCase = input.toLowerCase();
    this._inputArray = stringToArray(this._inputLowerCase);
    this._rows = [new Array(input.length + 1).fill(0), new Array(input.length + 1).fill(0), new Array(input.length + 1).fill(0)];
  }
  _createClass(LexicalDistance, [{
    key: "measure",
    value: function measure(option, threshold) {
      if (this._input === option) {
        return 0;
      }
      var optionLowerCase = option.toLowerCase(); // Any case change counts as a single edit

      if (this._inputLowerCase === optionLowerCase) {
        return 1;
      }
      var a = stringToArray(optionLowerCase);
      var b = this._inputArray;
      if (a.length < b.length) {
        var tmp = a;
        a = b;
        b = tmp;
      }
      var aLength = a.length;
      var bLength = b.length;
      if (aLength - bLength > threshold) {
        return undefined;
      }
      var rows = this._rows;
      for (var j = 0; j <= bLength; j++) {
        rows[0][j] = j;
      }
      for (var i = 1; i <= aLength; i++) {
        var upRow = rows[(i - 1) % 3];
        var currentRow = rows[i % 3];
        var smallestCell = currentRow[0] = i;
        for (var _j = 1; _j <= bLength; _j++) {
          var cost = a[i - 1] === b[_j - 1] ? 0 : 1;
          var currentCell = Math.min(upRow[_j] + 1,
          // delete
          currentRow[_j - 1] + 1,
          // insert
          upRow[_j - 1] + cost // substitute
          );
          if (i > 1 && _j > 1 && a[i - 1] === b[_j - 2] && a[i - 2] === b[_j - 1]) {
            // transposition
            var doubleDiagonalCell = rows[(i - 2) % 3][_j - 2];
            currentCell = Math.min(currentCell, doubleDiagonalCell + 1);
          }
          if (currentCell < smallestCell) {
            smallestCell = currentCell;
          }
          currentRow[_j] = currentCell;
        } // Early exit, since distance can't go smaller than smallest element of the previous row.

        if (smallestCell > threshold) {
          return undefined;
        }
      }
      var distance = rows[aLength % 3][bLength];
      return distance <= threshold ? distance : undefined;
    }
  }]);
  return LexicalDistance;
}();
function stringToArray(str) {
  var strLength = str.length;
  var array = new Array(strLength);
  for (var i = 0; i < strLength; ++i) {
    array[i] = str.charCodeAt(i);
  }
  return array;
}
},{"./naturalCompare.mjs":"../node_modules/graphql/jsutils/naturalCompare.mjs"}],"../node_modules/graphql/jsutils/toObjMap.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toObjMap = toObjMap;
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function toObjMap(obj) {
  if (obj == null) {
    return Object.create(null);
  }
  if (Object.getPrototypeOf(obj) === null) {
    return obj;
  }
  var map = Object.create(null);
  for (var _i = 0, _Object$entries = Object.entries(obj); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
      key = _Object$entries$_i[0],
      value = _Object$entries$_i[1];
    map[key] = value;
  }
  return map;
}
},{}],"../node_modules/graphql/language/printString.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.printString = printString;
/**
 * Prints a string as a GraphQL StringValue literal. Replaces control characters
 * and excluded characters (" U+0022 and \\ U+005C) with escape sequences.
 */
function printString(str) {
  return "\"".concat(str.replace(escapedRegExp, escapedReplacer), "\"");
} // eslint-disable-next-line no-control-regex

var escapedRegExp = /[\x00-\x1f\x22\x5c\x7f-\x9f]/g;
function escapedReplacer(str) {
  return escapeSequences[str.charCodeAt(0)];
} // prettier-ignore

var escapeSequences = ["\\u0000", "\\u0001", "\\u0002", "\\u0003", "\\u0004", "\\u0005", "\\u0006", "\\u0007", '\\b', '\\t', '\\n', "\\u000B", '\\f', '\\r', "\\u000E", "\\u000F", "\\u0010", "\\u0011", "\\u0012", "\\u0013", "\\u0014", "\\u0015", "\\u0016", "\\u0017", "\\u0018", "\\u0019", "\\u001A", "\\u001B", "\\u001C", "\\u001D", "\\u001E", "\\u001F", '', '', '\\"', '', '', '', '', '', '', '', '', '', '', '', '', '',
// 2F
'', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
// 3F
'', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
// 4F
'', '', '', '', '', '', '', '', '', '', '', '', '\\\\', '', '', '',
// 5F
'', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
// 6F
'', '', '', '', '', '', '', '', '', '', '', '', '', '', '', "\\u007F", "\\u0080", "\\u0081", "\\u0082", "\\u0083", "\\u0084", "\\u0085", "\\u0086", "\\u0087", "\\u0088", "\\u0089", "\\u008A", "\\u008B", "\\u008C", "\\u008D", "\\u008E", "\\u008F", "\\u0090", "\\u0091", "\\u0092", "\\u0093", "\\u0094", "\\u0095", "\\u0096", "\\u0097", "\\u0098", "\\u0099", "\\u009A", "\\u009B", "\\u009C", "\\u009D", "\\u009E", "\\u009F"];
},{}],"../node_modules/graphql/language/visitor.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BREAK = void 0;
exports.getEnterLeaveForKind = getEnterLeaveForKind;
exports.getVisitFn = getVisitFn;
exports.visit = visit;
exports.visitInParallel = visitInParallel;
var _devAssert = require("../jsutils/devAssert.mjs");
var _inspect = require("../jsutils/inspect.mjs");
var _ast = require("./ast.mjs");
var _kinds = require("./kinds.mjs");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * A visitor is provided to visit, it contains the collection of
 * relevant functions to be called during the visitor's traversal.
 */

var BREAK = exports.BREAK = Object.freeze({});
/**
 * visit() will walk through an AST using a depth-first traversal, calling
 * the visitor's enter function at each node in the traversal, and calling the
 * leave function after visiting that node and all of its child nodes.
 *
 * By returning different values from the enter and leave functions, the
 * behavior of the visitor can be altered, including skipping over a sub-tree of
 * the AST (by returning false), editing the AST by returning a value or null
 * to remove the value, or to stop the whole traversal by returning BREAK.
 *
 * When using visit() to edit an AST, the original AST will not be modified, and
 * a new version of the AST with the changes applied will be returned from the
 * visit function.
 *
 * ```ts
 * const editedAST = visit(ast, {
 *   enter(node, key, parent, path, ancestors) {
 *     // @return
 *     //   undefined: no action
 *     //   false: skip visiting this node
 *     //   visitor.BREAK: stop visiting altogether
 *     //   null: delete this node
 *     //   any value: replace this node with the returned value
 *   },
 *   leave(node, key, parent, path, ancestors) {
 *     // @return
 *     //   undefined: no action
 *     //   false: no action
 *     //   visitor.BREAK: stop visiting altogether
 *     //   null: delete this node
 *     //   any value: replace this node with the returned value
 *   }
 * });
 * ```
 *
 * Alternatively to providing enter() and leave() functions, a visitor can
 * instead provide functions named the same as the kinds of AST nodes, or
 * enter/leave visitors at a named key, leading to three permutations of the
 * visitor API:
 *
 * 1) Named visitors triggered when entering a node of a specific kind.
 *
 * ```ts
 * visit(ast, {
 *   Kind(node) {
 *     // enter the "Kind" node
 *   }
 * })
 * ```
 *
 * 2) Named visitors that trigger upon entering and leaving a node of a specific kind.
 *
 * ```ts
 * visit(ast, {
 *   Kind: {
 *     enter(node) {
 *       // enter the "Kind" node
 *     }
 *     leave(node) {
 *       // leave the "Kind" node
 *     }
 *   }
 * })
 * ```
 *
 * 3) Generic visitors that trigger upon entering and leaving any node.
 *
 * ```ts
 * visit(ast, {
 *   enter(node) {
 *     // enter any node
 *   },
 *   leave(node) {
 *     // leave any node
 *   }
 * })
 * ```
 */

function visit(root, visitor) {
  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _ast.QueryDocumentKeys;
  var enterLeaveMap = new Map();
  for (var _i = 0, _Object$values = Object.values(_kinds.Kind); _i < _Object$values.length; _i++) {
    var kind = _Object$values[_i];
    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));
  }
  /* eslint-disable no-undef-init */

  var stack = undefined;
  var inArray = Array.isArray(root);
  var keys = [root];
  var index = -1;
  var edits = [];
  var node = root;
  var key = undefined;
  var parent = undefined;
  var path = [];
  var ancestors = [];
  /* eslint-enable no-undef-init */

  do {
    index++;
    var isLeaving = index === keys.length;
    var isEdited = isLeaving && edits.length !== 0;
    if (isLeaving) {
      key = ancestors.length === 0 ? undefined : path[path.length - 1];
      node = parent;
      parent = ancestors.pop();
      if (isEdited) {
        if (inArray) {
          node = node.slice();
          var editOffset = 0;
          var _iterator = _createForOfIteratorHelper(edits),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var _step$value = _slicedToArray(_step.value, 2),
                editKey = _step$value[0],
                editValue = _step$value[1];
              var arrayKey = editKey - editOffset;
              if (editValue === null) {
                node.splice(arrayKey, 1);
                editOffset++;
              } else {
                node[arrayKey] = editValue;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        } else {
          node = Object.defineProperties({}, Object.getOwnPropertyDescriptors(node));
          var _iterator2 = _createForOfIteratorHelper(edits),
            _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var _step2$value = _slicedToArray(_step2.value, 2),
                _editKey = _step2$value[0],
                _editValue = _step2$value[1];
              node[_editKey] = _editValue;
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      }
      index = stack.index;
      keys = stack.keys;
      edits = stack.edits;
      inArray = stack.inArray;
      stack = stack.prev;
    } else if (parent) {
      key = inArray ? index : keys[index];
      node = parent[key];
      if (node === null || node === undefined) {
        continue;
      }
      path.push(key);
    }
    var result = void 0;
    if (!Array.isArray(node)) {
      var _enterLeaveMap$get, _enterLeaveMap$get2;
      (0, _ast.isNode)(node) || (0, _devAssert.devAssert)(false, "Invalid AST Node: ".concat((0, _inspect.inspect)(node), "."));
      var visitFn = isLeaving ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get === void 0 ? void 0 : _enterLeaveMap$get.leave : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get2 === void 0 ? void 0 : _enterLeaveMap$get2.enter;
      result = visitFn === null || visitFn === void 0 ? void 0 : visitFn.call(visitor, node, key, parent, path, ancestors);
      if (result === BREAK) {
        break;
      }
      if (result === false) {
        if (!isLeaving) {
          path.pop();
          continue;
        }
      } else if (result !== undefined) {
        edits.push([key, result]);
        if (!isLeaving) {
          if ((0, _ast.isNode)(result)) {
            node = result;
          } else {
            path.pop();
            continue;
          }
        }
      }
    }
    if (result === undefined && isEdited) {
      edits.push([key, node]);
    }
    if (isLeaving) {
      path.pop();
    } else {
      var _node$kind;
      stack = {
        inArray: inArray,
        index: index,
        keys: keys,
        edits: edits,
        prev: stack
      };
      inArray = Array.isArray(node);
      keys = inArray ? node : (_node$kind = visitorKeys[node.kind]) !== null && _node$kind !== void 0 ? _node$kind : [];
      index = -1;
      edits = [];
      if (parent) {
        ancestors.push(parent);
      }
      parent = node;
    }
  } while (stack !== undefined);
  if (edits.length !== 0) {
    // New root
    return edits[edits.length - 1][1];
  }
  return root;
}
/**
 * Creates a new visitor instance which delegates to many visitors to run in
 * parallel. Each visitor will be visited for each node before moving on.
 *
 * If a prior visitor edits a node, no following visitors will see that node.
 */

function visitInParallel(visitors) {
  var skipping = new Array(visitors.length).fill(null);
  var mergedVisitor = Object.create(null);
  var _loop = function _loop() {
    var kind = _Object$values2[_i2];
    var hasVisitor = false;
    var enterList = new Array(visitors.length).fill(undefined);
    var leaveList = new Array(visitors.length).fill(undefined);
    for (var i = 0; i < visitors.length; ++i) {
      var _getEnterLeaveForKind = getEnterLeaveForKind(visitors[i], kind),
        enter = _getEnterLeaveForKind.enter,
        leave = _getEnterLeaveForKind.leave;
      hasVisitor || (hasVisitor = enter != null || leave != null);
      enterList[i] = enter;
      leaveList[i] = leave;
    }
    if (!hasVisitor) {
      return 1; // continue
    }
    var mergedEnterLeave = {
      enter: function enter() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var node = args[0];
        for (var _i3 = 0; _i3 < visitors.length; _i3++) {
          if (skipping[_i3] === null) {
            var _enterList$i;
            var result = (_enterList$i = enterList[_i3]) === null || _enterList$i === void 0 ? void 0 : _enterList$i.apply(visitors[_i3], args);
            if (result === false) {
              skipping[_i3] = node;
            } else if (result === BREAK) {
              skipping[_i3] = BREAK;
            } else if (result !== undefined) {
              return result;
            }
          }
        }
      },
      leave: function leave() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        var node = args[0];
        for (var _i4 = 0; _i4 < visitors.length; _i4++) {
          if (skipping[_i4] === null) {
            var _leaveList$i;
            var result = (_leaveList$i = leaveList[_i4]) === null || _leaveList$i === void 0 ? void 0 : _leaveList$i.apply(visitors[_i4], args);
            if (result === BREAK) {
              skipping[_i4] = BREAK;
            } else if (result !== undefined && result !== false) {
              return result;
            }
          } else if (skipping[_i4] === node) {
            skipping[_i4] = null;
          }
        }
      }
    };
    mergedVisitor[kind] = mergedEnterLeave;
  };
  for (var _i2 = 0, _Object$values2 = Object.values(_kinds.Kind); _i2 < _Object$values2.length; _i2++) {
    if (_loop()) continue;
  }
  return mergedVisitor;
}
/**
 * Given a visitor instance and a node kind, return EnterLeaveVisitor for that kind.
 */

function getEnterLeaveForKind(visitor, kind) {
  var kindVisitor = visitor[kind];
  if (_typeof(kindVisitor) === 'object') {
    // { Kind: { enter() {}, leave() {} } }
    return kindVisitor;
  } else if (typeof kindVisitor === 'function') {
    // { Kind() {} }
    return {
      enter: kindVisitor,
      leave: undefined
    };
  } // { enter() {}, leave() {} }

  return {
    enter: visitor.enter,
    leave: visitor.leave
  };
}
/**
 * Given a visitor instance, if it is leaving or not, and a node kind, return
 * the function the visitor runtime should call.
 *
 * @deprecated Please use `getEnterLeaveForKind` instead. Will be removed in v17
 */

/* c8 ignore next 8 */

function getVisitFn(visitor, kind, isLeaving) {
  var _getEnterLeaveForKind2 = getEnterLeaveForKind(visitor, kind),
    enter = _getEnterLeaveForKind2.enter,
    leave = _getEnterLeaveForKind2.leave;
  return isLeaving ? leave : enter;
}
},{"../jsutils/devAssert.mjs":"../node_modules/graphql/jsutils/devAssert.mjs","../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","./ast.mjs":"../node_modules/graphql/language/ast.mjs","./kinds.mjs":"../node_modules/graphql/language/kinds.mjs"}],"../node_modules/graphql/language/printer.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.print = print;
var _blockString = require("./blockString.mjs");
var _printString = require("./printString.mjs");
var _visitor = require("./visitor.mjs");
/**
 * Converts an AST into a string, using one set of reasonable
 * formatting rules.
 */

function print(ast) {
  return (0, _visitor.visit)(ast, printDocASTReducer);
}
var MAX_LINE_LENGTH = 80;
var printDocASTReducer = {
  Name: {
    leave: function leave(node) {
      return node.value;
    }
  },
  Variable: {
    leave: function leave(node) {
      return '$' + node.name;
    }
  },
  // Document
  Document: {
    leave: function leave(node) {
      return join(node.definitions, '\n\n');
    }
  },
  OperationDefinition: {
    leave: function leave(node) {
      var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');
      var prefix = join([node.operation, join([node.name, varDefs]), join(node.directives, ' ')], ' '); // Anonymous queries with no directives or variable definitions can use
      // the query short form.

      return (prefix === 'query' ? '' : prefix + ' ') + node.selectionSet;
    }
  },
  VariableDefinition: {
    leave: function leave(_ref) {
      var variable = _ref.variable,
        type = _ref.type,
        defaultValue = _ref.defaultValue,
        directives = _ref.directives;
      return variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' '));
    }
  },
  SelectionSet: {
    leave: function leave(_ref2) {
      var selections = _ref2.selections;
      return block(selections);
    }
  },
  Field: {
    leave: function leave(_ref3) {
      var alias = _ref3.alias,
        name = _ref3.name,
        args = _ref3.arguments,
        directives = _ref3.directives,
        selectionSet = _ref3.selectionSet;
      var prefix = wrap('', alias, ': ') + name;
      var argsLine = prefix + wrap('(', join(args, ', '), ')');
      if (argsLine.length > MAX_LINE_LENGTH) {
        argsLine = prefix + wrap('(\n', indent(join(args, '\n')), '\n)');
      }
      return join([argsLine, join(directives, ' '), selectionSet], ' ');
    }
  },
  Argument: {
    leave: function leave(_ref4) {
      var name = _ref4.name,
        value = _ref4.value;
      return name + ': ' + value;
    }
  },
  // Fragments
  FragmentSpread: {
    leave: function leave(_ref5) {
      var name = _ref5.name,
        directives = _ref5.directives;
      return '...' + name + wrap(' ', join(directives, ' '));
    }
  },
  InlineFragment: {
    leave: function leave(_ref6) {
      var typeCondition = _ref6.typeCondition,
        directives = _ref6.directives,
        selectionSet = _ref6.selectionSet;
      return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');
    }
  },
  FragmentDefinition: {
    leave: function leave(_ref7 // Note: fragment variable definitions are experimental and may be changed
    ) {
      var name = _ref7.name,
        typeCondition = _ref7.typeCondition,
        variableDefinitions = _ref7.variableDefinitions,
        directives = _ref7.directives,
        selectionSet = _ref7.selectionSet;
      return (
        // or removed in the future.
        "fragment ".concat(name).concat(wrap('(', join(variableDefinitions, ', '), ')'), " ") + "on ".concat(typeCondition, " ").concat(wrap('', join(directives, ' '), ' ')) + selectionSet
      );
    }
  },
  // Value
  IntValue: {
    leave: function leave(_ref8) {
      var value = _ref8.value;
      return value;
    }
  },
  FloatValue: {
    leave: function leave(_ref9) {
      var value = _ref9.value;
      return value;
    }
  },
  StringValue: {
    leave: function leave(_ref10) {
      var value = _ref10.value,
        isBlockString = _ref10.block;
      return isBlockString ? (0, _blockString.printBlockString)(value) : (0, _printString.printString)(value);
    }
  },
  BooleanValue: {
    leave: function leave(_ref11) {
      var value = _ref11.value;
      return value ? 'true' : 'false';
    }
  },
  NullValue: {
    leave: function leave() {
      return 'null';
    }
  },
  EnumValue: {
    leave: function leave(_ref12) {
      var value = _ref12.value;
      return value;
    }
  },
  ListValue: {
    leave: function leave(_ref13) {
      var values = _ref13.values;
      return '[' + join(values, ', ') + ']';
    }
  },
  ObjectValue: {
    leave: function leave(_ref14) {
      var fields = _ref14.fields;
      return '{' + join(fields, ', ') + '}';
    }
  },
  ObjectField: {
    leave: function leave(_ref15) {
      var name = _ref15.name,
        value = _ref15.value;
      return name + ': ' + value;
    }
  },
  // Directive
  Directive: {
    leave: function leave(_ref16) {
      var name = _ref16.name,
        args = _ref16.arguments;
      return '@' + name + wrap('(', join(args, ', '), ')');
    }
  },
  // Type
  NamedType: {
    leave: function leave(_ref17) {
      var name = _ref17.name;
      return name;
    }
  },
  ListType: {
    leave: function leave(_ref18) {
      var type = _ref18.type;
      return '[' + type + ']';
    }
  },
  NonNullType: {
    leave: function leave(_ref19) {
      var type = _ref19.type;
      return type + '!';
    }
  },
  // Type System Definitions
  SchemaDefinition: {
    leave: function leave(_ref20) {
      var description = _ref20.description,
        directives = _ref20.directives,
        operationTypes = _ref20.operationTypes;
      return wrap('', description, '\n') + join(['schema', join(directives, ' '), block(operationTypes)], ' ');
    }
  },
  OperationTypeDefinition: {
    leave: function leave(_ref21) {
      var operation = _ref21.operation,
        type = _ref21.type;
      return operation + ': ' + type;
    }
  },
  ScalarTypeDefinition: {
    leave: function leave(_ref22) {
      var description = _ref22.description,
        name = _ref22.name,
        directives = _ref22.directives;
      return wrap('', description, '\n') + join(['scalar', name, join(directives, ' ')], ' ');
    }
  },
  ObjectTypeDefinition: {
    leave: function leave(_ref23) {
      var description = _ref23.description,
        name = _ref23.name,
        interfaces = _ref23.interfaces,
        directives = _ref23.directives,
        fields = _ref23.fields;
      return wrap('', description, '\n') + join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
    }
  },
  FieldDefinition: {
    leave: function leave(_ref24) {
      var description = _ref24.description,
        name = _ref24.name,
        args = _ref24.arguments,
        type = _ref24.type,
        directives = _ref24.directives;
      return wrap('', description, '\n') + name + (hasMultilineItems(args) ? wrap('(\n', indent(join(args, '\n')), '\n)') : wrap('(', join(args, ', '), ')')) + ': ' + type + wrap(' ', join(directives, ' '));
    }
  },
  InputValueDefinition: {
    leave: function leave(_ref25) {
      var description = _ref25.description,
        name = _ref25.name,
        type = _ref25.type,
        defaultValue = _ref25.defaultValue,
        directives = _ref25.directives;
      return wrap('', description, '\n') + join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');
    }
  },
  InterfaceTypeDefinition: {
    leave: function leave(_ref26) {
      var description = _ref26.description,
        name = _ref26.name,
        interfaces = _ref26.interfaces,
        directives = _ref26.directives,
        fields = _ref26.fields;
      return wrap('', description, '\n') + join(['interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
    }
  },
  UnionTypeDefinition: {
    leave: function leave(_ref27) {
      var description = _ref27.description,
        name = _ref27.name,
        directives = _ref27.directives,
        types = _ref27.types;
      return wrap('', description, '\n') + join(['union', name, join(directives, ' '), wrap('= ', join(types, ' | '))], ' ');
    }
  },
  EnumTypeDefinition: {
    leave: function leave(_ref28) {
      var description = _ref28.description,
        name = _ref28.name,
        directives = _ref28.directives,
        values = _ref28.values;
      return wrap('', description, '\n') + join(['enum', name, join(directives, ' '), block(values)], ' ');
    }
  },
  EnumValueDefinition: {
    leave: function leave(_ref29) {
      var description = _ref29.description,
        name = _ref29.name,
        directives = _ref29.directives;
      return wrap('', description, '\n') + join([name, join(directives, ' ')], ' ');
    }
  },
  InputObjectTypeDefinition: {
    leave: function leave(_ref30) {
      var description = _ref30.description,
        name = _ref30.name,
        directives = _ref30.directives,
        fields = _ref30.fields;
      return wrap('', description, '\n') + join(['input', name, join(directives, ' '), block(fields)], ' ');
    }
  },
  DirectiveDefinition: {
    leave: function leave(_ref31) {
      var description = _ref31.description,
        name = _ref31.name,
        args = _ref31.arguments,
        repeatable = _ref31.repeatable,
        locations = _ref31.locations;
      return wrap('', description, '\n') + 'directive @' + name + (hasMultilineItems(args) ? wrap('(\n', indent(join(args, '\n')), '\n)') : wrap('(', join(args, ', '), ')')) + (repeatable ? ' repeatable' : '') + ' on ' + join(locations, ' | ');
    }
  },
  SchemaExtension: {
    leave: function leave(_ref32) {
      var directives = _ref32.directives,
        operationTypes = _ref32.operationTypes;
      return join(['extend schema', join(directives, ' '), block(operationTypes)], ' ');
    }
  },
  ScalarTypeExtension: {
    leave: function leave(_ref33) {
      var name = _ref33.name,
        directives = _ref33.directives;
      return join(['extend scalar', name, join(directives, ' ')], ' ');
    }
  },
  ObjectTypeExtension: {
    leave: function leave(_ref34) {
      var name = _ref34.name,
        interfaces = _ref34.interfaces,
        directives = _ref34.directives,
        fields = _ref34.fields;
      return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
    }
  },
  InterfaceTypeExtension: {
    leave: function leave(_ref35) {
      var name = _ref35.name,
        interfaces = _ref35.interfaces,
        directives = _ref35.directives,
        fields = _ref35.fields;
      return join(['extend interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
    }
  },
  UnionTypeExtension: {
    leave: function leave(_ref36) {
      var name = _ref36.name,
        directives = _ref36.directives,
        types = _ref36.types;
      return join(['extend union', name, join(directives, ' '), wrap('= ', join(types, ' | '))], ' ');
    }
  },
  EnumTypeExtension: {
    leave: function leave(_ref37) {
      var name = _ref37.name,
        directives = _ref37.directives,
        values = _ref37.values;
      return join(['extend enum', name, join(directives, ' '), block(values)], ' ');
    }
  },
  InputObjectTypeExtension: {
    leave: function leave(_ref38) {
      var name = _ref38.name,
        directives = _ref38.directives,
        fields = _ref38.fields;
      return join(['extend input', name, join(directives, ' '), block(fields)], ' ');
    }
  }
};
/**
 * Given maybeArray, print an empty string if it is null or empty, otherwise
 * print all items together separated by separator if provided
 */

function join(maybeArray) {
  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var _maybeArray$filter$jo;
  return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter(function (x) {
    return x;
  }).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : '';
}
/**
 * Given array, print each item on its own line, wrapped in an indented `{ }` block.
 */

function block(array) {
  return wrap('{\n', indent(join(array, '\n')), '\n}');
}
/**
 * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.
 */

function wrap(start, maybeString) {
  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  return maybeString != null && maybeString !== '' ? start + maybeString + end : '';
}
function indent(str) {
  return wrap('  ', str.replace(/\n/g, '\n  '));
}
function hasMultilineItems(maybeArray) {
  var _maybeArray$some;

  // FIXME: https://github.com/graphql/graphql-js/issues/2203

  /* c8 ignore next */
  return (_maybeArray$some = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.some(function (str) {
    return str.includes('\n');
  })) !== null && _maybeArray$some !== void 0 ? _maybeArray$some : false;
}
},{"./blockString.mjs":"../node_modules/graphql/language/blockString.mjs","./printString.mjs":"../node_modules/graphql/language/printString.mjs","./visitor.mjs":"../node_modules/graphql/language/visitor.mjs"}],"../node_modules/graphql/utilities/valueFromASTUntyped.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.valueFromASTUntyped = valueFromASTUntyped;
var _keyValMap = require("../jsutils/keyValMap.mjs");
var _kinds = require("../language/kinds.mjs");
/**
 * Produces a JavaScript value given a GraphQL Value AST.
 *
 * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value
 * will reflect the provided GraphQL value AST.
 *
 * | GraphQL Value        | JavaScript Value |
 * | -------------------- | ---------------- |
 * | Input Object         | Object           |
 * | List                 | Array            |
 * | Boolean              | Boolean          |
 * | String / Enum        | String           |
 * | Int / Float          | Number           |
 * | Null                 | null             |
 *
 */

function valueFromASTUntyped(valueNode, variables) {
  switch (valueNode.kind) {
    case _kinds.Kind.NULL:
      return null;
    case _kinds.Kind.INT:
      return parseInt(valueNode.value, 10);
    case _kinds.Kind.FLOAT:
      return parseFloat(valueNode.value);
    case _kinds.Kind.STRING:
    case _kinds.Kind.ENUM:
    case _kinds.Kind.BOOLEAN:
      return valueNode.value;
    case _kinds.Kind.LIST:
      return valueNode.values.map(function (node) {
        return valueFromASTUntyped(node, variables);
      });
    case _kinds.Kind.OBJECT:
      return (0, _keyValMap.keyValMap)(valueNode.fields, function (field) {
        return field.name.value;
      }, function (field) {
        return valueFromASTUntyped(field.value, variables);
      });
    case _kinds.Kind.VARIABLE:
      return variables === null || variables === void 0 ? void 0 : variables[valueNode.name.value];
  }
}
},{"../jsutils/keyValMap.mjs":"../node_modules/graphql/jsutils/keyValMap.mjs","../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs"}],"../node_modules/graphql/type/assertName.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertEnumValueName = assertEnumValueName;
exports.assertName = assertName;
var _devAssert = require("../jsutils/devAssert.mjs");
var _GraphQLError = require("../error/GraphQLError.mjs");
var _characterClasses = require("../language/characterClasses.mjs");
/**
 * Upholds the spec rules about naming.
 */

function assertName(name) {
  name != null || (0, _devAssert.devAssert)(false, 'Must provide name.');
  typeof name === 'string' || (0, _devAssert.devAssert)(false, 'Expected name to be a string.');
  if (name.length === 0) {
    throw new _GraphQLError.GraphQLError('Expected name to be a non-empty string.');
  }
  for (var i = 1; i < name.length; ++i) {
    if (!(0, _characterClasses.isNameContinue)(name.charCodeAt(i))) {
      throw new _GraphQLError.GraphQLError("Names must only contain [_a-zA-Z0-9] but \"".concat(name, "\" does not."));
    }
  }
  if (!(0, _characterClasses.isNameStart)(name.charCodeAt(0))) {
    throw new _GraphQLError.GraphQLError("Names must start with [_a-zA-Z] but \"".concat(name, "\" does not."));
  }
  return name;
}
/**
 * Upholds the spec rules about naming enum values.
 *
 * @internal
 */

function assertEnumValueName(name) {
  if (name === 'true' || name === 'false' || name === 'null') {
    throw new _GraphQLError.GraphQLError("Enum values cannot be named: ".concat(name));
  }
  return assertName(name);
}
},{"../jsutils/devAssert.mjs":"../node_modules/graphql/jsutils/devAssert.mjs","../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../language/characterClasses.mjs":"../node_modules/graphql/language/characterClasses.mjs"}],"../node_modules/graphql/type/definition.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphQLUnionType = exports.GraphQLScalarType = exports.GraphQLObjectType = exports.GraphQLNonNull = exports.GraphQLList = exports.GraphQLInterfaceType = exports.GraphQLInputObjectType = exports.GraphQLEnumType = void 0;
exports.argsToArgsConfig = argsToArgsConfig;
exports.assertAbstractType = assertAbstractType;
exports.assertCompositeType = assertCompositeType;
exports.assertEnumType = assertEnumType;
exports.assertInputObjectType = assertInputObjectType;
exports.assertInputType = assertInputType;
exports.assertInterfaceType = assertInterfaceType;
exports.assertLeafType = assertLeafType;
exports.assertListType = assertListType;
exports.assertNamedType = assertNamedType;
exports.assertNonNullType = assertNonNullType;
exports.assertNullableType = assertNullableType;
exports.assertObjectType = assertObjectType;
exports.assertOutputType = assertOutputType;
exports.assertScalarType = assertScalarType;
exports.assertType = assertType;
exports.assertUnionType = assertUnionType;
exports.assertWrappingType = assertWrappingType;
exports.defineArguments = defineArguments;
exports.getNamedType = getNamedType;
exports.getNullableType = getNullableType;
exports.isAbstractType = isAbstractType;
exports.isCompositeType = isCompositeType;
exports.isEnumType = isEnumType;
exports.isInputObjectType = isInputObjectType;
exports.isInputType = isInputType;
exports.isInterfaceType = isInterfaceType;
exports.isLeafType = isLeafType;
exports.isListType = isListType;
exports.isNamedType = isNamedType;
exports.isNonNullType = isNonNullType;
exports.isNullableType = isNullableType;
exports.isObjectType = isObjectType;
exports.isOutputType = isOutputType;
exports.isRequiredArgument = isRequiredArgument;
exports.isRequiredInputField = isRequiredInputField;
exports.isScalarType = isScalarType;
exports.isType = isType;
exports.isUnionType = isUnionType;
exports.isWrappingType = isWrappingType;
exports.resolveObjMapThunk = resolveObjMapThunk;
exports.resolveReadonlyArrayThunk = resolveReadonlyArrayThunk;
var _devAssert = require("../jsutils/devAssert.mjs");
var _didYouMean = require("../jsutils/didYouMean.mjs");
var _identityFunc = require("../jsutils/identityFunc.mjs");
var _inspect = require("../jsutils/inspect.mjs");
var _instanceOf = require("../jsutils/instanceOf.mjs");
var _isObjectLike = require("../jsutils/isObjectLike.mjs");
var _keyMap = require("../jsutils/keyMap.mjs");
var _keyValMap = require("../jsutils/keyValMap.mjs");
var _mapValue = require("../jsutils/mapValue.mjs");
var _suggestionList = require("../jsutils/suggestionList.mjs");
var _toObjMap = require("../jsutils/toObjMap.mjs");
var _GraphQLError = require("../error/GraphQLError.mjs");
var _kinds = require("../language/kinds.mjs");
var _printer = require("../language/printer.mjs");
var _valueFromASTUntyped = require("../utilities/valueFromASTUntyped.mjs");
var _assertName = require("./assertName.mjs");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function isType(type) {
  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type) || isListType(type) || isNonNullType(type);
}
function assertType(type) {
  if (!isType(type)) {
    throw new Error("Expected ".concat((0, _inspect.inspect)(type), " to be a GraphQL type."));
  }
  return type;
}
/**
 * There are predicates for each kind of GraphQL type.
 */

function isScalarType(type) {
  return (0, _instanceOf.instanceOf)(type, GraphQLScalarType);
}
function assertScalarType(type) {
  if (!isScalarType(type)) {
    throw new Error("Expected ".concat((0, _inspect.inspect)(type), " to be a GraphQL Scalar type."));
  }
  return type;
}
function isObjectType(type) {
  return (0, _instanceOf.instanceOf)(type, GraphQLObjectType);
}
function assertObjectType(type) {
  if (!isObjectType(type)) {
    throw new Error("Expected ".concat((0, _inspect.inspect)(type), " to be a GraphQL Object type."));
  }
  return type;
}
function isInterfaceType(type) {
  return (0, _instanceOf.instanceOf)(type, GraphQLInterfaceType);
}
function assertInterfaceType(type) {
  if (!isInterfaceType(type)) {
    throw new Error("Expected ".concat((0, _inspect.inspect)(type), " to be a GraphQL Interface type."));
  }
  return type;
}
function isUnionType(type) {
  return (0, _instanceOf.instanceOf)(type, GraphQLUnionType);
}
function assertUnionType(type) {
  if (!isUnionType(type)) {
    throw new Error("Expected ".concat((0, _inspect.inspect)(type), " to be a GraphQL Union type."));
  }
  return type;
}
function isEnumType(type) {
  return (0, _instanceOf.instanceOf)(type, GraphQLEnumType);
}
function assertEnumType(type) {
  if (!isEnumType(type)) {
    throw new Error("Expected ".concat((0, _inspect.inspect)(type), " to be a GraphQL Enum type."));
  }
  return type;
}
function isInputObjectType(type) {
  return (0, _instanceOf.instanceOf)(type, GraphQLInputObjectType);
}
function assertInputObjectType(type) {
  if (!isInputObjectType(type)) {
    throw new Error("Expected ".concat((0, _inspect.inspect)(type), " to be a GraphQL Input Object type."));
  }
  return type;
}
function isListType(type) {
  return (0, _instanceOf.instanceOf)(type, GraphQLList);
}
function assertListType(type) {
  if (!isListType(type)) {
    throw new Error("Expected ".concat((0, _inspect.inspect)(type), " to be a GraphQL List type."));
  }
  return type;
}
function isNonNullType(type) {
  return (0, _instanceOf.instanceOf)(type, GraphQLNonNull);
}
function assertNonNullType(type) {
  if (!isNonNullType(type)) {
    throw new Error("Expected ".concat((0, _inspect.inspect)(type), " to be a GraphQL Non-Null type."));
  }
  return type;
}
/**
 * These types may be used as input types for arguments and directives.
 */

function isInputType(type) {
  return isScalarType(type) || isEnumType(type) || isInputObjectType(type) || isWrappingType(type) && isInputType(type.ofType);
}
function assertInputType(type) {
  if (!isInputType(type)) {
    throw new Error("Expected ".concat((0, _inspect.inspect)(type), " to be a GraphQL input type."));
  }
  return type;
}
/**
 * These types may be used as output types as the result of fields.
 */

function isOutputType(type) {
  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isWrappingType(type) && isOutputType(type.ofType);
}
function assertOutputType(type) {
  if (!isOutputType(type)) {
    throw new Error("Expected ".concat((0, _inspect.inspect)(type), " to be a GraphQL output type."));
  }
  return type;
}
/**
 * These types may describe types which may be leaf values.
 */

function isLeafType(type) {
  return isScalarType(type) || isEnumType(type);
}
function assertLeafType(type) {
  if (!isLeafType(type)) {
    throw new Error("Expected ".concat((0, _inspect.inspect)(type), " to be a GraphQL leaf type."));
  }
  return type;
}
/**
 * These types may describe the parent context of a selection set.
 */

function isCompositeType(type) {
  return isObjectType(type) || isInterfaceType(type) || isUnionType(type);
}
function assertCompositeType(type) {
  if (!isCompositeType(type)) {
    throw new Error("Expected ".concat((0, _inspect.inspect)(type), " to be a GraphQL composite type."));
  }
  return type;
}
/**
 * These types may describe the parent context of a selection set.
 */

function isAbstractType(type) {
  return isInterfaceType(type) || isUnionType(type);
}
function assertAbstractType(type) {
  if (!isAbstractType(type)) {
    throw new Error("Expected ".concat((0, _inspect.inspect)(type), " to be a GraphQL abstract type."));
  }
  return type;
}
/**
 * List Type Wrapper
 *
 * A list is a wrapping type which points to another type.
 * Lists are often created within the context of defining the fields of
 * an object type.
 *
 * Example:
 *
 * ```ts
 * const PersonType = new GraphQLObjectType({
 *   name: 'Person',
 *   fields: () => ({
 *     parents: { type: new GraphQLList(PersonType) },
 *     children: { type: new GraphQLList(PersonType) },
 *   })
 * })
 * ```
 */
var GraphQLList = exports.GraphQLList = /*#__PURE__*/function (_Symbol$toStringTag) {
  function GraphQLList(ofType) {
    _classCallCheck(this, GraphQLList);
    isType(ofType) || (0, _devAssert.devAssert)(false, "Expected ".concat((0, _inspect.inspect)(ofType), " to be a GraphQL type."));
    this.ofType = ofType;
  }
  _createClass(GraphQLList, [{
    key: _Symbol$toStringTag,
    get: function get() {
      return 'GraphQLList';
    }
  }, {
    key: "toString",
    value: function toString() {
      return '[' + String(this.ofType) + ']';
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.toString();
    }
  }]);
  return GraphQLList;
}(Symbol.toStringTag);
/**
 * Non-Null Type Wrapper
 *
 * A non-null is a wrapping type which points to another type.
 * Non-null types enforce that their values are never null and can ensure
 * an error is raised if this ever occurs during a request. It is useful for
 * fields which you can make a strong guarantee on non-nullability, for example
 * usually the id field of a database row will never be null.
 *
 * Example:
 *
 * ```ts
 * const RowType = new GraphQLObjectType({
 *   name: 'Row',
 *   fields: () => ({
 *     id: { type: new GraphQLNonNull(GraphQLString) },
 *   })
 * })
 * ```
 * Note: the enforcement of non-nullability occurs within the executor.
 */
var GraphQLNonNull = exports.GraphQLNonNull = /*#__PURE__*/function (_Symbol$toStringTag2) {
  function GraphQLNonNull(ofType) {
    _classCallCheck(this, GraphQLNonNull);
    isNullableType(ofType) || (0, _devAssert.devAssert)(false, "Expected ".concat((0, _inspect.inspect)(ofType), " to be a GraphQL nullable type."));
    this.ofType = ofType;
  }
  _createClass(GraphQLNonNull, [{
    key: _Symbol$toStringTag2,
    get: function get() {
      return 'GraphQLNonNull';
    }
  }, {
    key: "toString",
    value: function toString() {
      return String(this.ofType) + '!';
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.toString();
    }
  }]);
  return GraphQLNonNull;
}(Symbol.toStringTag);
/**
 * These types wrap and modify other types
 */
function isWrappingType(type) {
  return isListType(type) || isNonNullType(type);
}
function assertWrappingType(type) {
  if (!isWrappingType(type)) {
    throw new Error("Expected ".concat((0, _inspect.inspect)(type), " to be a GraphQL wrapping type."));
  }
  return type;
}
/**
 * These types can all accept null as a value.
 */

function isNullableType(type) {
  return isType(type) && !isNonNullType(type);
}
function assertNullableType(type) {
  if (!isNullableType(type)) {
    throw new Error("Expected ".concat((0, _inspect.inspect)(type), " to be a GraphQL nullable type."));
  }
  return type;
}
function getNullableType(type) {
  if (type) {
    return isNonNullType(type) ? type.ofType : type;
  }
}
/**
 * These named types do not include modifiers like List or NonNull.
 */

function isNamedType(type) {
  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type);
}
function assertNamedType(type) {
  if (!isNamedType(type)) {
    throw new Error("Expected ".concat((0, _inspect.inspect)(type), " to be a GraphQL named type."));
  }
  return type;
}
function getNamedType(type) {
  if (type) {
    var unwrappedType = type;
    while (isWrappingType(unwrappedType)) {
      unwrappedType = unwrappedType.ofType;
    }
    return unwrappedType;
  }
}
/**
 * Used while defining GraphQL types to allow for circular references in
 * otherwise immutable type definitions.
 */

function resolveReadonlyArrayThunk(thunk) {
  return typeof thunk === 'function' ? thunk() : thunk;
}
function resolveObjMapThunk(thunk) {
  return typeof thunk === 'function' ? thunk() : thunk;
}
/**
 * Custom extensions
 *
 * @remarks
 * Use a unique identifier name for your extension, for example the name of
 * your library or project. Do not use a shortened identifier as this increases
 * the risk of conflicts. We recommend you add at most one extension field,
 * an object which can contain all the values you need.
 */

/**
 * Scalar Type Definition
 *
 * The leaf values of any request and input values to arguments are
 * Scalars (or Enums) and are defined with a name and a series of functions
 * used to parse input from ast or variables and to ensure validity.
 *
 * If a type's serialize function returns `null` or does not return a value
 * (i.e. it returns `undefined`) then an error will be raised and a `null`
 * value will be returned in the response. It is always better to validate
 *
 * Example:
 *
 * ```ts
 * const OddType = new GraphQLScalarType({
 *   name: 'Odd',
 *   serialize(value) {
 *     if (!Number.isFinite(value)) {
 *       throw new Error(
 *         `Scalar "Odd" cannot represent "${value}" since it is not a finite number.`,
 *       );
 *     }
 *
 *     if (value % 2 === 0) {
 *       throw new Error(`Scalar "Odd" cannot represent "${value}" since it is even.`);
 *     }
 *     return value;
 *   }
 * });
 * ```
 */
var GraphQLScalarType = exports.GraphQLScalarType = /*#__PURE__*/function (_Symbol$toStringTag3) {
  function GraphQLScalarType(config) {
    _classCallCheck(this, GraphQLScalarType);
    var _config$parseValue, _config$serialize, _config$parseLiteral, _config$extensionASTN;
    var parseValue = (_config$parseValue = config.parseValue) !== null && _config$parseValue !== void 0 ? _config$parseValue : _identityFunc.identityFunc;
    this.name = (0, _assertName.assertName)(config.name);
    this.description = config.description;
    this.specifiedByURL = config.specifiedByURL;
    this.serialize = (_config$serialize = config.serialize) !== null && _config$serialize !== void 0 ? _config$serialize : _identityFunc.identityFunc;
    this.parseValue = parseValue;
    this.parseLiteral = (_config$parseLiteral = config.parseLiteral) !== null && _config$parseLiteral !== void 0 ? _config$parseLiteral : function (node, variables) {
      return parseValue((0, _valueFromASTUntyped.valueFromASTUntyped)(node, variables));
    };
    this.extensions = (0, _toObjMap.toObjMap)(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = (_config$extensionASTN = config.extensionASTNodes) !== null && _config$extensionASTN !== void 0 ? _config$extensionASTN : [];
    config.specifiedByURL == null || typeof config.specifiedByURL === 'string' || (0, _devAssert.devAssert)(false, "".concat(this.name, " must provide \"specifiedByURL\" as a string, ") + "but got: ".concat((0, _inspect.inspect)(config.specifiedByURL), "."));
    config.serialize == null || typeof config.serialize === 'function' || (0, _devAssert.devAssert)(false, "".concat(this.name, " must provide \"serialize\" function. If this custom Scalar is also used as an input type, ensure \"parseValue\" and \"parseLiteral\" functions are also provided."));
    if (config.parseLiteral) {
      typeof config.parseValue === 'function' && typeof config.parseLiteral === 'function' || (0, _devAssert.devAssert)(false, "".concat(this.name, " must provide both \"parseValue\" and \"parseLiteral\" functions."));
    }
  }
  _createClass(GraphQLScalarType, [{
    key: _Symbol$toStringTag3,
    get: function get() {
      return 'GraphQLScalarType';
    }
  }, {
    key: "toConfig",
    value: function toConfig() {
      return {
        name: this.name,
        description: this.description,
        specifiedByURL: this.specifiedByURL,
        serialize: this.serialize,
        parseValue: this.parseValue,
        parseLiteral: this.parseLiteral,
        extensions: this.extensions,
        astNode: this.astNode,
        extensionASTNodes: this.extensionASTNodes
      };
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.name;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.toString();
    }
  }]);
  return GraphQLScalarType;
}(Symbol.toStringTag);
/**
 * Object Type Definition
 *
 * Almost all of the GraphQL types you define will be object types. Object types
 * have a name, but most importantly describe their fields.
 *
 * Example:
 *
 * ```ts
 * const AddressType = new GraphQLObjectType({
 *   name: 'Address',
 *   fields: {
 *     street: { type: GraphQLString },
 *     number: { type: GraphQLInt },
 *     formatted: {
 *       type: GraphQLString,
 *       resolve(obj) {
 *         return obj.number + ' ' + obj.street
 *       }
 *     }
 *   }
 * });
 * ```
 *
 * When two types need to refer to each other, or a type needs to refer to
 * itself in a field, you can use a function expression (aka a closure or a
 * thunk) to supply the fields lazily.
 *
 * Example:
 *
 * ```ts
 * const PersonType = new GraphQLObjectType({
 *   name: 'Person',
 *   fields: () => ({
 *     name: { type: GraphQLString },
 *     bestFriend: { type: PersonType },
 *   })
 * });
 * ```
 */
var GraphQLObjectType = exports.GraphQLObjectType = /*#__PURE__*/function (_Symbol$toStringTag4) {
  function GraphQLObjectType(config) {
    _classCallCheck(this, GraphQLObjectType);
    var _config$extensionASTN2;
    this.name = (0, _assertName.assertName)(config.name);
    this.description = config.description;
    this.isTypeOf = config.isTypeOf;
    this.extensions = (0, _toObjMap.toObjMap)(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = (_config$extensionASTN2 = config.extensionASTNodes) !== null && _config$extensionASTN2 !== void 0 ? _config$extensionASTN2 : [];
    this._fields = function () {
      return defineFieldMap(config);
    };
    this._interfaces = function () {
      return defineInterfaces(config);
    };
    config.isTypeOf == null || typeof config.isTypeOf === 'function' || (0, _devAssert.devAssert)(false, "".concat(this.name, " must provide \"isTypeOf\" as a function, ") + "but got: ".concat((0, _inspect.inspect)(config.isTypeOf), "."));
  }
  _createClass(GraphQLObjectType, [{
    key: _Symbol$toStringTag4,
    get: function get() {
      return 'GraphQLObjectType';
    }
  }, {
    key: "getFields",
    value: function getFields() {
      if (typeof this._fields === 'function') {
        this._fields = this._fields();
      }
      return this._fields;
    }
  }, {
    key: "getInterfaces",
    value: function getInterfaces() {
      if (typeof this._interfaces === 'function') {
        this._interfaces = this._interfaces();
      }
      return this._interfaces;
    }
  }, {
    key: "toConfig",
    value: function toConfig() {
      return {
        name: this.name,
        description: this.description,
        interfaces: this.getInterfaces(),
        fields: fieldsToFieldsConfig(this.getFields()),
        isTypeOf: this.isTypeOf,
        extensions: this.extensions,
        astNode: this.astNode,
        extensionASTNodes: this.extensionASTNodes
      };
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.name;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.toString();
    }
  }]);
  return GraphQLObjectType;
}(Symbol.toStringTag);
function defineInterfaces(config) {
  var _config$interfaces;
  var interfaces = resolveReadonlyArrayThunk((_config$interfaces = config.interfaces) !== null && _config$interfaces !== void 0 ? _config$interfaces : []);
  Array.isArray(interfaces) || (0, _devAssert.devAssert)(false, "".concat(config.name, " interfaces must be an Array or a function which returns an Array."));
  return interfaces;
}
function defineFieldMap(config) {
  var fieldMap = resolveObjMapThunk(config.fields);
  isPlainObj(fieldMap) || (0, _devAssert.devAssert)(false, "".concat(config.name, " fields must be an object with field names as keys or a function which returns such an object."));
  return (0, _mapValue.mapValue)(fieldMap, function (fieldConfig, fieldName) {
    var _fieldConfig$args;
    isPlainObj(fieldConfig) || (0, _devAssert.devAssert)(false, "".concat(config.name, ".").concat(fieldName, " field config must be an object."));
    fieldConfig.resolve == null || typeof fieldConfig.resolve === 'function' || (0, _devAssert.devAssert)(false, "".concat(config.name, ".").concat(fieldName, " field resolver must be a function if ") + "provided, but got: ".concat((0, _inspect.inspect)(fieldConfig.resolve), "."));
    var argsConfig = (_fieldConfig$args = fieldConfig.args) !== null && _fieldConfig$args !== void 0 ? _fieldConfig$args : {};
    isPlainObj(argsConfig) || (0, _devAssert.devAssert)(false, "".concat(config.name, ".").concat(fieldName, " args must be an object with argument names as keys."));
    return {
      name: (0, _assertName.assertName)(fieldName),
      description: fieldConfig.description,
      type: fieldConfig.type,
      args: defineArguments(argsConfig),
      resolve: fieldConfig.resolve,
      subscribe: fieldConfig.subscribe,
      deprecationReason: fieldConfig.deprecationReason,
      extensions: (0, _toObjMap.toObjMap)(fieldConfig.extensions),
      astNode: fieldConfig.astNode
    };
  });
}
function defineArguments(config) {
  return Object.entries(config).map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
      argName = _ref2[0],
      argConfig = _ref2[1];
    return {
      name: (0, _assertName.assertName)(argName),
      description: argConfig.description,
      type: argConfig.type,
      defaultValue: argConfig.defaultValue,
      deprecationReason: argConfig.deprecationReason,
      extensions: (0, _toObjMap.toObjMap)(argConfig.extensions),
      astNode: argConfig.astNode
    };
  });
}
function isPlainObj(obj) {
  return (0, _isObjectLike.isObjectLike)(obj) && !Array.isArray(obj);
}
function fieldsToFieldsConfig(fields) {
  return (0, _mapValue.mapValue)(fields, function (field) {
    return {
      description: field.description,
      type: field.type,
      args: argsToArgsConfig(field.args),
      resolve: field.resolve,
      subscribe: field.subscribe,
      deprecationReason: field.deprecationReason,
      extensions: field.extensions,
      astNode: field.astNode
    };
  });
}
/**
 * @internal
 */

function argsToArgsConfig(args) {
  return (0, _keyValMap.keyValMap)(args, function (arg) {
    return arg.name;
  }, function (arg) {
    return {
      description: arg.description,
      type: arg.type,
      defaultValue: arg.defaultValue,
      deprecationReason: arg.deprecationReason,
      extensions: arg.extensions,
      astNode: arg.astNode
    };
  });
}
function isRequiredArgument(arg) {
  return isNonNullType(arg.type) && arg.defaultValue === undefined;
}

/**
 * Interface Type Definition
 *
 * When a field can return one of a heterogeneous set of types, a Interface type
 * is used to describe what types are possible, what fields are in common across
 * all types, as well as a function to determine which type is actually used
 * when the field is resolved.
 *
 * Example:
 *
 * ```ts
 * const EntityType = new GraphQLInterfaceType({
 *   name: 'Entity',
 *   fields: {
 *     name: { type: GraphQLString }
 *   }
 * });
 * ```
 */
var GraphQLInterfaceType = exports.GraphQLInterfaceType = /*#__PURE__*/function (_Symbol$toStringTag5) {
  function GraphQLInterfaceType(config) {
    _classCallCheck(this, GraphQLInterfaceType);
    var _config$extensionASTN3;
    this.name = (0, _assertName.assertName)(config.name);
    this.description = config.description;
    this.resolveType = config.resolveType;
    this.extensions = (0, _toObjMap.toObjMap)(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = (_config$extensionASTN3 = config.extensionASTNodes) !== null && _config$extensionASTN3 !== void 0 ? _config$extensionASTN3 : [];
    this._fields = defineFieldMap.bind(undefined, config);
    this._interfaces = defineInterfaces.bind(undefined, config);
    config.resolveType == null || typeof config.resolveType === 'function' || (0, _devAssert.devAssert)(false, "".concat(this.name, " must provide \"resolveType\" as a function, ") + "but got: ".concat((0, _inspect.inspect)(config.resolveType), "."));
  }
  _createClass(GraphQLInterfaceType, [{
    key: _Symbol$toStringTag5,
    get: function get() {
      return 'GraphQLInterfaceType';
    }
  }, {
    key: "getFields",
    value: function getFields() {
      if (typeof this._fields === 'function') {
        this._fields = this._fields();
      }
      return this._fields;
    }
  }, {
    key: "getInterfaces",
    value: function getInterfaces() {
      if (typeof this._interfaces === 'function') {
        this._interfaces = this._interfaces();
      }
      return this._interfaces;
    }
  }, {
    key: "toConfig",
    value: function toConfig() {
      return {
        name: this.name,
        description: this.description,
        interfaces: this.getInterfaces(),
        fields: fieldsToFieldsConfig(this.getFields()),
        resolveType: this.resolveType,
        extensions: this.extensions,
        astNode: this.astNode,
        extensionASTNodes: this.extensionASTNodes
      };
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.name;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.toString();
    }
  }]);
  return GraphQLInterfaceType;
}(Symbol.toStringTag);
/**
 * Union Type Definition
 *
 * When a field can return one of a heterogeneous set of types, a Union type
 * is used to describe what types are possible as well as providing a function
 * to determine which type is actually used when the field is resolved.
 *
 * Example:
 *
 * ```ts
 * const PetType = new GraphQLUnionType({
 *   name: 'Pet',
 *   types: [ DogType, CatType ],
 *   resolveType(value) {
 *     if (value instanceof Dog) {
 *       return DogType;
 *     }
 *     if (value instanceof Cat) {
 *       return CatType;
 *     }
 *   }
 * });
 * ```
 */
var GraphQLUnionType = exports.GraphQLUnionType = /*#__PURE__*/function (_Symbol$toStringTag6) {
  function GraphQLUnionType(config) {
    _classCallCheck(this, GraphQLUnionType);
    var _config$extensionASTN4;
    this.name = (0, _assertName.assertName)(config.name);
    this.description = config.description;
    this.resolveType = config.resolveType;
    this.extensions = (0, _toObjMap.toObjMap)(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = (_config$extensionASTN4 = config.extensionASTNodes) !== null && _config$extensionASTN4 !== void 0 ? _config$extensionASTN4 : [];
    this._types = defineTypes.bind(undefined, config);
    config.resolveType == null || typeof config.resolveType === 'function' || (0, _devAssert.devAssert)(false, "".concat(this.name, " must provide \"resolveType\" as a function, ") + "but got: ".concat((0, _inspect.inspect)(config.resolveType), "."));
  }
  _createClass(GraphQLUnionType, [{
    key: _Symbol$toStringTag6,
    get: function get() {
      return 'GraphQLUnionType';
    }
  }, {
    key: "getTypes",
    value: function getTypes() {
      if (typeof this._types === 'function') {
        this._types = this._types();
      }
      return this._types;
    }
  }, {
    key: "toConfig",
    value: function toConfig() {
      return {
        name: this.name,
        description: this.description,
        types: this.getTypes(),
        resolveType: this.resolveType,
        extensions: this.extensions,
        astNode: this.astNode,
        extensionASTNodes: this.extensionASTNodes
      };
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.name;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.toString();
    }
  }]);
  return GraphQLUnionType;
}(Symbol.toStringTag);
function defineTypes(config) {
  var types = resolveReadonlyArrayThunk(config.types);
  Array.isArray(types) || (0, _devAssert.devAssert)(false, "Must provide Array of types or a function which returns such an array for Union ".concat(config.name, "."));
  return types;
}

/**
 * Enum Type Definition
 *
 * Some leaf values of requests and input values are Enums. GraphQL serializes
 * Enum values as strings, however internally Enums can be represented by any
 * kind of type, often integers.
 *
 * Example:
 *
 * ```ts
 * const RGBType = new GraphQLEnumType({
 *   name: 'RGB',
 *   values: {
 *     RED: { value: 0 },
 *     GREEN: { value: 1 },
 *     BLUE: { value: 2 }
 *   }
 * });
 * ```
 *
 * Note: If a value is not provided in a definition, the name of the enum value
 * will be used as its internal value.
 */
var GraphQLEnumType = exports.GraphQLEnumType = /*#__PURE__*/function (_Symbol$toStringTag7) {
  /* <T> */
  function GraphQLEnumType(config) {
    _classCallCheck(this, GraphQLEnumType);
    var _config$extensionASTN5;
    this.name = (0, _assertName.assertName)(config.name);
    this.description = config.description;
    this.extensions = (0, _toObjMap.toObjMap)(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = (_config$extensionASTN5 = config.extensionASTNodes) !== null && _config$extensionASTN5 !== void 0 ? _config$extensionASTN5 : [];
    this._values = defineEnumValues(this.name, config.values);
    this._valueLookup = new Map(this._values.map(function (enumValue) {
      return [enumValue.value, enumValue];
    }));
    this._nameLookup = (0, _keyMap.keyMap)(this._values, function (value) {
      return value.name;
    });
  }
  _createClass(GraphQLEnumType, [{
    key: _Symbol$toStringTag7,
    get: function get() {
      return 'GraphQLEnumType';
    }
  }, {
    key: "getValues",
    value: function getValues() {
      return this._values;
    }
  }, {
    key: "getValue",
    value: function getValue(name) {
      return this._nameLookup[name];
    }
  }, {
    key: "serialize",
    value: function serialize(outputValue) {
      var enumValue = this._valueLookup.get(outputValue);
      if (enumValue === undefined) {
        throw new _GraphQLError.GraphQLError("Enum \"".concat(this.name, "\" cannot represent value: ").concat((0, _inspect.inspect)(outputValue)));
      }
      return enumValue.name;
    }
  }, {
    key: "parseValue",
    value: function parseValue(inputValue) /* T */
    {
      if (typeof inputValue !== 'string') {
        var valueStr = (0, _inspect.inspect)(inputValue);
        throw new _GraphQLError.GraphQLError("Enum \"".concat(this.name, "\" cannot represent non-string value: ").concat(valueStr, ".") + didYouMeanEnumValue(this, valueStr));
      }
      var enumValue = this.getValue(inputValue);
      if (enumValue == null) {
        throw new _GraphQLError.GraphQLError("Value \"".concat(inputValue, "\" does not exist in \"").concat(this.name, "\" enum.") + didYouMeanEnumValue(this, inputValue));
      }
      return enumValue.value;
    }
  }, {
    key: "parseLiteral",
    value: function parseLiteral(valueNode, _variables) /* T */
    {
      // Note: variables will be resolved to a value before calling this function.
      if (valueNode.kind !== _kinds.Kind.ENUM) {
        var valueStr = (0, _printer.print)(valueNode);
        throw new _GraphQLError.GraphQLError("Enum \"".concat(this.name, "\" cannot represent non-enum value: ").concat(valueStr, ".") + didYouMeanEnumValue(this, valueStr), {
          nodes: valueNode
        });
      }
      var enumValue = this.getValue(valueNode.value);
      if (enumValue == null) {
        var _valueStr = (0, _printer.print)(valueNode);
        throw new _GraphQLError.GraphQLError("Value \"".concat(_valueStr, "\" does not exist in \"").concat(this.name, "\" enum.") + didYouMeanEnumValue(this, _valueStr), {
          nodes: valueNode
        });
      }
      return enumValue.value;
    }
  }, {
    key: "toConfig",
    value: function toConfig() {
      var values = (0, _keyValMap.keyValMap)(this.getValues(), function (value) {
        return value.name;
      }, function (value) {
        return {
          description: value.description,
          value: value.value,
          deprecationReason: value.deprecationReason,
          extensions: value.extensions,
          astNode: value.astNode
        };
      });
      return {
        name: this.name,
        description: this.description,
        values: values,
        extensions: this.extensions,
        astNode: this.astNode,
        extensionASTNodes: this.extensionASTNodes
      };
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.name;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.toString();
    }
  }]);
  return GraphQLEnumType;
}(Symbol.toStringTag);
function didYouMeanEnumValue(enumType, unknownValueStr) {
  var allNames = enumType.getValues().map(function (value) {
    return value.name;
  });
  var suggestedValues = (0, _suggestionList.suggestionList)(unknownValueStr, allNames);
  return (0, _didYouMean.didYouMean)('the enum value', suggestedValues);
}
function defineEnumValues(typeName, valueMap) {
  isPlainObj(valueMap) || (0, _devAssert.devAssert)(false, "".concat(typeName, " values must be an object with value names as keys."));
  return Object.entries(valueMap).map(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
      valueName = _ref4[0],
      valueConfig = _ref4[1];
    isPlainObj(valueConfig) || (0, _devAssert.devAssert)(false, "".concat(typeName, ".").concat(valueName, " must refer to an object with a \"value\" key ") + "representing an internal value but got: ".concat((0, _inspect.inspect)(valueConfig), "."));
    return {
      name: (0, _assertName.assertEnumValueName)(valueName),
      description: valueConfig.description,
      value: valueConfig.value !== undefined ? valueConfig.value : valueName,
      deprecationReason: valueConfig.deprecationReason,
      extensions: (0, _toObjMap.toObjMap)(valueConfig.extensions),
      astNode: valueConfig.astNode
    };
  });
}

/**
 * Input Object Type Definition
 *
 * An input object defines a structured collection of fields which may be
 * supplied to a field argument.
 *
 * Using `NonNull` will ensure that a value must be provided by the query
 *
 * Example:
 *
 * ```ts
 * const GeoPoint = new GraphQLInputObjectType({
 *   name: 'GeoPoint',
 *   fields: {
 *     lat: { type: new GraphQLNonNull(GraphQLFloat) },
 *     lon: { type: new GraphQLNonNull(GraphQLFloat) },
 *     alt: { type: GraphQLFloat, defaultValue: 0 },
 *   }
 * });
 * ```
 */
var GraphQLInputObjectType = exports.GraphQLInputObjectType = /*#__PURE__*/function (_Symbol$toStringTag8) {
  function GraphQLInputObjectType(config) {
    _classCallCheck(this, GraphQLInputObjectType);
    var _config$extensionASTN6;
    this.name = (0, _assertName.assertName)(config.name);
    this.description = config.description;
    this.extensions = (0, _toObjMap.toObjMap)(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = (_config$extensionASTN6 = config.extensionASTNodes) !== null && _config$extensionASTN6 !== void 0 ? _config$extensionASTN6 : [];
    this._fields = defineInputFieldMap.bind(undefined, config);
  }
  _createClass(GraphQLInputObjectType, [{
    key: _Symbol$toStringTag8,
    get: function get() {
      return 'GraphQLInputObjectType';
    }
  }, {
    key: "getFields",
    value: function getFields() {
      if (typeof this._fields === 'function') {
        this._fields = this._fields();
      }
      return this._fields;
    }
  }, {
    key: "toConfig",
    value: function toConfig() {
      var fields = (0, _mapValue.mapValue)(this.getFields(), function (field) {
        return {
          description: field.description,
          type: field.type,
          defaultValue: field.defaultValue,
          deprecationReason: field.deprecationReason,
          extensions: field.extensions,
          astNode: field.astNode
        };
      });
      return {
        name: this.name,
        description: this.description,
        fields: fields,
        extensions: this.extensions,
        astNode: this.astNode,
        extensionASTNodes: this.extensionASTNodes
      };
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.name;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.toString();
    }
  }]);
  return GraphQLInputObjectType;
}(Symbol.toStringTag);
function defineInputFieldMap(config) {
  var fieldMap = resolveObjMapThunk(config.fields);
  isPlainObj(fieldMap) || (0, _devAssert.devAssert)(false, "".concat(config.name, " fields must be an object with field names as keys or a function which returns such an object."));
  return (0, _mapValue.mapValue)(fieldMap, function (fieldConfig, fieldName) {
    !('resolve' in fieldConfig) || (0, _devAssert.devAssert)(false, "".concat(config.name, ".").concat(fieldName, " field has a resolve property, but Input Types cannot define resolvers."));
    return {
      name: (0, _assertName.assertName)(fieldName),
      description: fieldConfig.description,
      type: fieldConfig.type,
      defaultValue: fieldConfig.defaultValue,
      deprecationReason: fieldConfig.deprecationReason,
      extensions: (0, _toObjMap.toObjMap)(fieldConfig.extensions),
      astNode: fieldConfig.astNode
    };
  });
}
function isRequiredInputField(field) {
  return isNonNullType(field.type) && field.defaultValue === undefined;
}
},{"../jsutils/devAssert.mjs":"../node_modules/graphql/jsutils/devAssert.mjs","../jsutils/didYouMean.mjs":"../node_modules/graphql/jsutils/didYouMean.mjs","../jsutils/identityFunc.mjs":"../node_modules/graphql/jsutils/identityFunc.mjs","../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","../jsutils/instanceOf.mjs":"../node_modules/graphql/jsutils/instanceOf.mjs","../jsutils/isObjectLike.mjs":"../node_modules/graphql/jsutils/isObjectLike.mjs","../jsutils/keyMap.mjs":"../node_modules/graphql/jsutils/keyMap.mjs","../jsutils/keyValMap.mjs":"../node_modules/graphql/jsutils/keyValMap.mjs","../jsutils/mapValue.mjs":"../node_modules/graphql/jsutils/mapValue.mjs","../jsutils/suggestionList.mjs":"../node_modules/graphql/jsutils/suggestionList.mjs","../jsutils/toObjMap.mjs":"../node_modules/graphql/jsutils/toObjMap.mjs","../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs","../language/printer.mjs":"../node_modules/graphql/language/printer.mjs","../utilities/valueFromASTUntyped.mjs":"../node_modules/graphql/utilities/valueFromASTUntyped.mjs","./assertName.mjs":"../node_modules/graphql/type/assertName.mjs"}],"../node_modules/graphql/utilities/typeComparators.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.doTypesOverlap = doTypesOverlap;
exports.isEqualType = isEqualType;
exports.isTypeSubTypeOf = isTypeSubTypeOf;
var _definition = require("../type/definition.mjs");
/**
 * Provided two types, return true if the types are equal (invariant).
 */
function isEqualType(typeA, typeB) {
  // Equivalent types are equal.
  if (typeA === typeB) {
    return true;
  } // If either type is non-null, the other must also be non-null.

  if ((0, _definition.isNonNullType)(typeA) && (0, _definition.isNonNullType)(typeB)) {
    return isEqualType(typeA.ofType, typeB.ofType);
  } // If either type is a list, the other must also be a list.

  if ((0, _definition.isListType)(typeA) && (0, _definition.isListType)(typeB)) {
    return isEqualType(typeA.ofType, typeB.ofType);
  } // Otherwise the types are not equal.

  return false;
}
/**
 * Provided a type and a super type, return true if the first type is either
 * equal or a subset of the second super type (covariant).
 */

function isTypeSubTypeOf(schema, maybeSubType, superType) {
  // Equivalent type is a valid subtype
  if (maybeSubType === superType) {
    return true;
  } // If superType is non-null, maybeSubType must also be non-null.

  if ((0, _definition.isNonNullType)(superType)) {
    if ((0, _definition.isNonNullType)(maybeSubType)) {
      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);
    }
    return false;
  }
  if ((0, _definition.isNonNullType)(maybeSubType)) {
    // If superType is nullable, maybeSubType may be non-null or nullable.
    return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);
  } // If superType type is a list, maybeSubType type must also be a list.

  if ((0, _definition.isListType)(superType)) {
    if ((0, _definition.isListType)(maybeSubType)) {
      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);
    }
    return false;
  }
  if ((0, _definition.isListType)(maybeSubType)) {
    // If superType is not a list, maybeSubType must also be not a list.
    return false;
  } // If superType type is an abstract type, check if it is super type of maybeSubType.
  // Otherwise, the child type is not a valid subtype of the parent type.

  return (0, _definition.isAbstractType)(superType) && ((0, _definition.isInterfaceType)(maybeSubType) || (0, _definition.isObjectType)(maybeSubType)) && schema.isSubType(superType, maybeSubType);
}
/**
 * Provided two composite types, determine if they "overlap". Two composite
 * types overlap when the Sets of possible concrete types for each intersect.
 *
 * This is often used to determine if a fragment of a given type could possibly
 * be visited in a context of another type.
 *
 * This function is commutative.
 */

function doTypesOverlap(schema, typeA, typeB) {
  // Equivalent types overlap
  if (typeA === typeB) {
    return true;
  }
  if ((0, _definition.isAbstractType)(typeA)) {
    if ((0, _definition.isAbstractType)(typeB)) {
      // If both types are abstract, then determine if there is any intersection
      // between possible concrete types of each.
      return schema.getPossibleTypes(typeA).some(function (type) {
        return schema.isSubType(typeB, type);
      });
    } // Determine if the latter type is a possible concrete type of the former.

    return schema.isSubType(typeA, typeB);
  }
  if ((0, _definition.isAbstractType)(typeB)) {
    // Determine if the former type is a possible concrete type of the latter.
    return schema.isSubType(typeB, typeA);
  } // Otherwise the types do not overlap.

  return false;
}
},{"../type/definition.mjs":"../node_modules/graphql/type/definition.mjs"}],"../node_modules/graphql/type/scalars.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphQLString = exports.GraphQLInt = exports.GraphQLID = exports.GraphQLFloat = exports.GraphQLBoolean = exports.GRAPHQL_MIN_INT = exports.GRAPHQL_MAX_INT = void 0;
exports.isSpecifiedScalarType = isSpecifiedScalarType;
exports.specifiedScalarTypes = void 0;
var _inspect = require("../jsutils/inspect.mjs");
var _isObjectLike = require("../jsutils/isObjectLike.mjs");
var _GraphQLError = require("../error/GraphQLError.mjs");
var _kinds = require("../language/kinds.mjs");
var _printer = require("../language/printer.mjs");
var _definition = require("./definition.mjs");
/**
 * Maximum possible Int value as per GraphQL Spec (32-bit signed integer).
 * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe up-to 2^53 - 1
 * */

var GRAPHQL_MAX_INT = exports.GRAPHQL_MAX_INT = 2147483647;
/**
 * Minimum possible Int value as per GraphQL Spec (32-bit signed integer).
 * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe starting at -(2^53 - 1)
 * */

var GRAPHQL_MIN_INT = exports.GRAPHQL_MIN_INT = -2147483648;
var GraphQLInt = exports.GraphQLInt = new _definition.GraphQLScalarType({
  name: 'Int',
  description: 'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',
  serialize: function serialize(outputValue) {
    var coercedValue = serializeObject(outputValue);
    if (typeof coercedValue === 'boolean') {
      return coercedValue ? 1 : 0;
    }
    var num = coercedValue;
    if (typeof coercedValue === 'string' && coercedValue !== '') {
      num = Number(coercedValue);
    }
    if (typeof num !== 'number' || !Number.isInteger(num)) {
      throw new _GraphQLError.GraphQLError("Int cannot represent non-integer value: ".concat((0, _inspect.inspect)(coercedValue)));
    }
    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {
      throw new _GraphQLError.GraphQLError('Int cannot represent non 32-bit signed integer value: ' + (0, _inspect.inspect)(coercedValue));
    }
    return num;
  },
  parseValue: function parseValue(inputValue) {
    if (typeof inputValue !== 'number' || !Number.isInteger(inputValue)) {
      throw new _GraphQLError.GraphQLError("Int cannot represent non-integer value: ".concat((0, _inspect.inspect)(inputValue)));
    }
    if (inputValue > GRAPHQL_MAX_INT || inputValue < GRAPHQL_MIN_INT) {
      throw new _GraphQLError.GraphQLError("Int cannot represent non 32-bit signed integer value: ".concat(inputValue));
    }
    return inputValue;
  },
  parseLiteral: function parseLiteral(valueNode) {
    if (valueNode.kind !== _kinds.Kind.INT) {
      throw new _GraphQLError.GraphQLError("Int cannot represent non-integer value: ".concat((0, _printer.print)(valueNode)), {
        nodes: valueNode
      });
    }
    var num = parseInt(valueNode.value, 10);
    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {
      throw new _GraphQLError.GraphQLError("Int cannot represent non 32-bit signed integer value: ".concat(valueNode.value), {
        nodes: valueNode
      });
    }
    return num;
  }
});
var GraphQLFloat = exports.GraphQLFloat = new _definition.GraphQLScalarType({
  name: 'Float',
  description: 'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',
  serialize: function serialize(outputValue) {
    var coercedValue = serializeObject(outputValue);
    if (typeof coercedValue === 'boolean') {
      return coercedValue ? 1 : 0;
    }
    var num = coercedValue;
    if (typeof coercedValue === 'string' && coercedValue !== '') {
      num = Number(coercedValue);
    }
    if (typeof num !== 'number' || !Number.isFinite(num)) {
      throw new _GraphQLError.GraphQLError("Float cannot represent non numeric value: ".concat((0, _inspect.inspect)(coercedValue)));
    }
    return num;
  },
  parseValue: function parseValue(inputValue) {
    if (typeof inputValue !== 'number' || !Number.isFinite(inputValue)) {
      throw new _GraphQLError.GraphQLError("Float cannot represent non numeric value: ".concat((0, _inspect.inspect)(inputValue)));
    }
    return inputValue;
  },
  parseLiteral: function parseLiteral(valueNode) {
    if (valueNode.kind !== _kinds.Kind.FLOAT && valueNode.kind !== _kinds.Kind.INT) {
      throw new _GraphQLError.GraphQLError("Float cannot represent non numeric value: ".concat((0, _printer.print)(valueNode)), valueNode);
    }
    return parseFloat(valueNode.value);
  }
});
var GraphQLString = exports.GraphQLString = new _definition.GraphQLScalarType({
  name: 'String',
  description: 'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',
  serialize: function serialize(outputValue) {
    var coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not
    // attempt to coerce object, function, symbol, or other types as strings.

    if (typeof coercedValue === 'string') {
      return coercedValue;
    }
    if (typeof coercedValue === 'boolean') {
      return coercedValue ? 'true' : 'false';
    }
    if (typeof coercedValue === 'number' && Number.isFinite(coercedValue)) {
      return coercedValue.toString();
    }
    throw new _GraphQLError.GraphQLError("String cannot represent value: ".concat((0, _inspect.inspect)(outputValue)));
  },
  parseValue: function parseValue(inputValue) {
    if (typeof inputValue !== 'string') {
      throw new _GraphQLError.GraphQLError("String cannot represent a non string value: ".concat((0, _inspect.inspect)(inputValue)));
    }
    return inputValue;
  },
  parseLiteral: function parseLiteral(valueNode) {
    if (valueNode.kind !== _kinds.Kind.STRING) {
      throw new _GraphQLError.GraphQLError("String cannot represent a non string value: ".concat((0, _printer.print)(valueNode)), {
        nodes: valueNode
      });
    }
    return valueNode.value;
  }
});
var GraphQLBoolean = exports.GraphQLBoolean = new _definition.GraphQLScalarType({
  name: 'Boolean',
  description: 'The `Boolean` scalar type represents `true` or `false`.',
  serialize: function serialize(outputValue) {
    var coercedValue = serializeObject(outputValue);
    if (typeof coercedValue === 'boolean') {
      return coercedValue;
    }
    if (Number.isFinite(coercedValue)) {
      return coercedValue !== 0;
    }
    throw new _GraphQLError.GraphQLError("Boolean cannot represent a non boolean value: ".concat((0, _inspect.inspect)(coercedValue)));
  },
  parseValue: function parseValue(inputValue) {
    if (typeof inputValue !== 'boolean') {
      throw new _GraphQLError.GraphQLError("Boolean cannot represent a non boolean value: ".concat((0, _inspect.inspect)(inputValue)));
    }
    return inputValue;
  },
  parseLiteral: function parseLiteral(valueNode) {
    if (valueNode.kind !== _kinds.Kind.BOOLEAN) {
      throw new _GraphQLError.GraphQLError("Boolean cannot represent a non boolean value: ".concat((0, _printer.print)(valueNode)), {
        nodes: valueNode
      });
    }
    return valueNode.value;
  }
});
var GraphQLID = exports.GraphQLID = new _definition.GraphQLScalarType({
  name: 'ID',
  description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',
  serialize: function serialize(outputValue) {
    var coercedValue = serializeObject(outputValue);
    if (typeof coercedValue === 'string') {
      return coercedValue;
    }
    if (Number.isInteger(coercedValue)) {
      return String(coercedValue);
    }
    throw new _GraphQLError.GraphQLError("ID cannot represent value: ".concat((0, _inspect.inspect)(outputValue)));
  },
  parseValue: function parseValue(inputValue) {
    if (typeof inputValue === 'string') {
      return inputValue;
    }
    if (typeof inputValue === 'number' && Number.isInteger(inputValue)) {
      return inputValue.toString();
    }
    throw new _GraphQLError.GraphQLError("ID cannot represent value: ".concat((0, _inspect.inspect)(inputValue)));
  },
  parseLiteral: function parseLiteral(valueNode) {
    if (valueNode.kind !== _kinds.Kind.STRING && valueNode.kind !== _kinds.Kind.INT) {
      throw new _GraphQLError.GraphQLError('ID cannot represent a non-string and non-integer value: ' + (0, _printer.print)(valueNode), {
        nodes: valueNode
      });
    }
    return valueNode.value;
  }
});
var specifiedScalarTypes = exports.specifiedScalarTypes = Object.freeze([GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID]);
function isSpecifiedScalarType(type) {
  return specifiedScalarTypes.some(function (_ref) {
    var name = _ref.name;
    return type.name === name;
  });
} // Support serializing objects with custom valueOf() or toJSON() functions -
// a common way to represent a complex value which can be represented as
// a string (ex: MongoDB id objects).

function serializeObject(outputValue) {
  if ((0, _isObjectLike.isObjectLike)(outputValue)) {
    if (typeof outputValue.valueOf === 'function') {
      var valueOfResult = outputValue.valueOf();
      if (!(0, _isObjectLike.isObjectLike)(valueOfResult)) {
        return valueOfResult;
      }
    }
    if (typeof outputValue.toJSON === 'function') {
      return outputValue.toJSON();
    }
  }
  return outputValue;
}
},{"../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","../jsutils/isObjectLike.mjs":"../node_modules/graphql/jsutils/isObjectLike.mjs","../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs","../language/printer.mjs":"../node_modules/graphql/language/printer.mjs","./definition.mjs":"../node_modules/graphql/type/definition.mjs"}],"../node_modules/graphql/type/directives.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphQLSpecifiedByDirective = exports.GraphQLSkipDirective = exports.GraphQLIncludeDirective = exports.GraphQLDirective = exports.GraphQLDeprecatedDirective = exports.DEFAULT_DEPRECATION_REASON = void 0;
exports.assertDirective = assertDirective;
exports.isDirective = isDirective;
exports.isSpecifiedDirective = isSpecifiedDirective;
exports.specifiedDirectives = void 0;
var _devAssert = require("../jsutils/devAssert.mjs");
var _inspect = require("../jsutils/inspect.mjs");
var _instanceOf = require("../jsutils/instanceOf.mjs");
var _isObjectLike = require("../jsutils/isObjectLike.mjs");
var _toObjMap = require("../jsutils/toObjMap.mjs");
var _directiveLocation = require("../language/directiveLocation.mjs");
var _assertName = require("./assertName.mjs");
var _definition = require("./definition.mjs");
var _scalars = require("./scalars.mjs");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Test if the given value is a GraphQL directive.
 */

function isDirective(directive) {
  return (0, _instanceOf.instanceOf)(directive, GraphQLDirective);
}
function assertDirective(directive) {
  if (!isDirective(directive)) {
    throw new Error("Expected ".concat((0, _inspect.inspect)(directive), " to be a GraphQL directive."));
  }
  return directive;
}
/**
 * Custom extensions
 *
 * @remarks
 * Use a unique identifier name for your extension, for example the name of
 * your library or project. Do not use a shortened identifier as this increases
 * the risk of conflicts. We recommend you add at most one extension field,
 * an object which can contain all the values you need.
 */

/**
 * Directives are used by the GraphQL runtime as a way of modifying execution
 * behavior. Type system creators will usually not create these directly.
 */
var GraphQLDirective = exports.GraphQLDirective = /*#__PURE__*/function (_Symbol$toStringTag) {
  function GraphQLDirective(config) {
    _classCallCheck(this, GraphQLDirective);
    var _config$isRepeatable, _config$args;
    this.name = (0, _assertName.assertName)(config.name);
    this.description = config.description;
    this.locations = config.locations;
    this.isRepeatable = (_config$isRepeatable = config.isRepeatable) !== null && _config$isRepeatable !== void 0 ? _config$isRepeatable : false;
    this.extensions = (0, _toObjMap.toObjMap)(config.extensions);
    this.astNode = config.astNode;
    Array.isArray(config.locations) || (0, _devAssert.devAssert)(false, "@".concat(config.name, " locations must be an Array."));
    var args = (_config$args = config.args) !== null && _config$args !== void 0 ? _config$args : {};
    (0, _isObjectLike.isObjectLike)(args) && !Array.isArray(args) || (0, _devAssert.devAssert)(false, "@".concat(config.name, " args must be an object with argument names as keys."));
    this.args = (0, _definition.defineArguments)(args);
  }
  _createClass(GraphQLDirective, [{
    key: _Symbol$toStringTag,
    get: function get() {
      return 'GraphQLDirective';
    }
  }, {
    key: "toConfig",
    value: function toConfig() {
      return {
        name: this.name,
        description: this.description,
        locations: this.locations,
        args: (0, _definition.argsToArgsConfig)(this.args),
        isRepeatable: this.isRepeatable,
        extensions: this.extensions,
        astNode: this.astNode
      };
    }
  }, {
    key: "toString",
    value: function toString() {
      return '@' + this.name;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.toString();
    }
  }]);
  return GraphQLDirective;
}(Symbol.toStringTag);
/**
 * Used to conditionally include fields or fragments.
 */
var GraphQLIncludeDirective = exports.GraphQLIncludeDirective = new GraphQLDirective({
  name: 'include',
  description: 'Directs the executor to include this field or fragment only when the `if` argument is true.',
  locations: [_directiveLocation.DirectiveLocation.FIELD, _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD, _directiveLocation.DirectiveLocation.INLINE_FRAGMENT],
  args: {
    if: {
      type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
      description: 'Included when true.'
    }
  }
});
/**
 * Used to conditionally skip (exclude) fields or fragments.
 */

var GraphQLSkipDirective = exports.GraphQLSkipDirective = new GraphQLDirective({
  name: 'skip',
  description: 'Directs the executor to skip this field or fragment when the `if` argument is true.',
  locations: [_directiveLocation.DirectiveLocation.FIELD, _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD, _directiveLocation.DirectiveLocation.INLINE_FRAGMENT],
  args: {
    if: {
      type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
      description: 'Skipped when true.'
    }
  }
});
/**
 * Constant string used for default reason for a deprecation.
 */

var DEFAULT_DEPRECATION_REASON = exports.DEFAULT_DEPRECATION_REASON = 'No longer supported';
/**
 * Used to declare element of a GraphQL schema as deprecated.
 */

var GraphQLDeprecatedDirective = exports.GraphQLDeprecatedDirective = new GraphQLDirective({
  name: 'deprecated',
  description: 'Marks an element of a GraphQL schema as no longer supported.',
  locations: [_directiveLocation.DirectiveLocation.FIELD_DEFINITION, _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION, _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION, _directiveLocation.DirectiveLocation.ENUM_VALUE],
  args: {
    reason: {
      type: _scalars.GraphQLString,
      description: 'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',
      defaultValue: DEFAULT_DEPRECATION_REASON
    }
  }
});
/**
 * Used to provide a URL for specifying the behavior of custom scalar definitions.
 */

var GraphQLSpecifiedByDirective = exports.GraphQLSpecifiedByDirective = new GraphQLDirective({
  name: 'specifiedBy',
  description: 'Exposes a URL that specifies the behavior of this scalar.',
  locations: [_directiveLocation.DirectiveLocation.SCALAR],
  args: {
    url: {
      type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
      description: 'The URL that specifies the behavior of this scalar.'
    }
  }
});
/**
 * The full list of specified directives.
 */

var specifiedDirectives = exports.specifiedDirectives = Object.freeze([GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, GraphQLSpecifiedByDirective]);
function isSpecifiedDirective(directive) {
  return specifiedDirectives.some(function (_ref) {
    var name = _ref.name;
    return name === directive.name;
  });
}
},{"../jsutils/devAssert.mjs":"../node_modules/graphql/jsutils/devAssert.mjs","../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","../jsutils/instanceOf.mjs":"../node_modules/graphql/jsutils/instanceOf.mjs","../jsutils/isObjectLike.mjs":"../node_modules/graphql/jsutils/isObjectLike.mjs","../jsutils/toObjMap.mjs":"../node_modules/graphql/jsutils/toObjMap.mjs","../language/directiveLocation.mjs":"../node_modules/graphql/language/directiveLocation.mjs","./assertName.mjs":"../node_modules/graphql/type/assertName.mjs","./definition.mjs":"../node_modules/graphql/type/definition.mjs","./scalars.mjs":"../node_modules/graphql/type/scalars.mjs"}],"../node_modules/graphql/jsutils/isIterableObject.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isIterableObject = isIterableObject;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
/**
 * Returns true if the provided object is an Object (i.e. not a string literal)
 * and implements the Iterator protocol.
 *
 * This may be used in place of [Array.isArray()][isArray] to determine if
 * an object should be iterated-over e.g. Array, Map, Set, Int8Array,
 * TypedArray, etc. but excludes string literals.
 *
 * @example
 * ```ts
 * isIterableObject([ 1, 2, 3 ]) // true
 * isIterableObject(new Map()) // true
 * isIterableObject('ABC') // false
 * isIterableObject({ key: 'value' }) // false
 * isIterableObject({ length: 1, 0: 'Alpha' }) // false
 * ```
 */
function isIterableObject(maybeIterable) {
  return _typeof(maybeIterable) === 'object' && typeof (maybeIterable === null || maybeIterable === void 0 ? void 0 : maybeIterable[Symbol.iterator]) === 'function';
}
},{}],"../node_modules/graphql/utilities/astFromValue.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.astFromValue = astFromValue;
var _inspect = require("../jsutils/inspect.mjs");
var _invariant = require("../jsutils/invariant.mjs");
var _isIterableObject = require("../jsutils/isIterableObject.mjs");
var _isObjectLike = require("../jsutils/isObjectLike.mjs");
var _kinds = require("../language/kinds.mjs");
var _definition = require("../type/definition.mjs");
var _scalars = require("../type/scalars.mjs");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Produces a GraphQL Value AST given a JavaScript object.
 * Function will match JavaScript/JSON values to GraphQL AST schema format
 * by using suggested GraphQLInputType. For example:
 *
 *     astFromValue("value", GraphQLString)
 *
 * A GraphQL type must be provided, which will be used to interpret different
 * JavaScript values.
 *
 * | JSON Value    | GraphQL Value        |
 * | ------------- | -------------------- |
 * | Object        | Input Object         |
 * | Array         | List                 |
 * | Boolean       | Boolean              |
 * | String        | String / Enum Value  |
 * | Number        | Int / Float          |
 * | Unknown       | Enum Value           |
 * | null          | NullValue            |
 *
 */

function astFromValue(value, type) {
  if ((0, _definition.isNonNullType)(type)) {
    var astValue = astFromValue(value, type.ofType);
    if ((astValue === null || astValue === void 0 ? void 0 : astValue.kind) === _kinds.Kind.NULL) {
      return null;
    }
    return astValue;
  } // only explicit null, not undefined, NaN

  if (value === null) {
    return {
      kind: _kinds.Kind.NULL
    };
  } // undefined

  if (value === undefined) {
    return null;
  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but
  // the value is not an array, convert the value using the list's item type.

  if ((0, _definition.isListType)(type)) {
    var itemType = type.ofType;
    if ((0, _isIterableObject.isIterableObject)(value)) {
      var valuesNodes = [];
      var _iterator = _createForOfIteratorHelper(value),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var item = _step.value;
          var itemNode = astFromValue(item, itemType);
          if (itemNode != null) {
            valuesNodes.push(itemNode);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return {
        kind: _kinds.Kind.LIST,
        values: valuesNodes
      };
    }
    return astFromValue(value, itemType);
  } // Populate the fields of the input object by creating ASTs from each value
  // in the JavaScript object according to the fields in the input type.

  if ((0, _definition.isInputObjectType)(type)) {
    if (!(0, _isObjectLike.isObjectLike)(value)) {
      return null;
    }
    var fieldNodes = [];
    for (var _i = 0, _Object$values = Object.values(type.getFields()); _i < _Object$values.length; _i++) {
      var field = _Object$values[_i];
      var fieldValue = astFromValue(value[field.name], field.type);
      if (fieldValue) {
        fieldNodes.push({
          kind: _kinds.Kind.OBJECT_FIELD,
          name: {
            kind: _kinds.Kind.NAME,
            value: field.name
          },
          value: fieldValue
        });
      }
    }
    return {
      kind: _kinds.Kind.OBJECT,
      fields: fieldNodes
    };
  }
  if ((0, _definition.isLeafType)(type)) {
    // Since value is an internally represented value, it must be serialized
    // to an externally represented value before converting into an AST.
    var serialized = type.serialize(value);
    if (serialized == null) {
      return null;
    } // Others serialize based on their corresponding JavaScript scalar types.

    if (typeof serialized === 'boolean') {
      return {
        kind: _kinds.Kind.BOOLEAN,
        value: serialized
      };
    } // JavaScript numbers can be Int or Float values.

    if (typeof serialized === 'number' && Number.isFinite(serialized)) {
      var stringNum = String(serialized);
      return integerStringRegExp.test(stringNum) ? {
        kind: _kinds.Kind.INT,
        value: stringNum
      } : {
        kind: _kinds.Kind.FLOAT,
        value: stringNum
      };
    }
    if (typeof serialized === 'string') {
      // Enum types use Enum literals.
      if ((0, _definition.isEnumType)(type)) {
        return {
          kind: _kinds.Kind.ENUM,
          value: serialized
        };
      } // ID types can use Int literals.

      if (type === _scalars.GraphQLID && integerStringRegExp.test(serialized)) {
        return {
          kind: _kinds.Kind.INT,
          value: serialized
        };
      }
      return {
        kind: _kinds.Kind.STRING,
        value: serialized
      };
    }
    throw new TypeError("Cannot convert value to AST: ".concat((0, _inspect.inspect)(serialized), "."));
  }
  /* c8 ignore next 3 */
  // Not reachable, all possible types have been considered.

  false || (0, _invariant.invariant)(false, 'Unexpected input type: ' + (0, _inspect.inspect)(type));
}
/**
 * IntValue:
 *   - NegativeSign? 0
 *   - NegativeSign? NonZeroDigit ( Digit+ )?
 */

var integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;
},{"../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","../jsutils/invariant.mjs":"../node_modules/graphql/jsutils/invariant.mjs","../jsutils/isIterableObject.mjs":"../node_modules/graphql/jsutils/isIterableObject.mjs","../jsutils/isObjectLike.mjs":"../node_modules/graphql/jsutils/isObjectLike.mjs","../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs","../type/definition.mjs":"../node_modules/graphql/type/definition.mjs","../type/scalars.mjs":"../node_modules/graphql/type/scalars.mjs"}],"../node_modules/graphql/type/introspection.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.introspectionTypes = exports.__TypeKind = exports.__Type = exports.__Schema = exports.__InputValue = exports.__Field = exports.__EnumValue = exports.__DirectiveLocation = exports.__Directive = exports.TypeNameMetaFieldDef = exports.TypeMetaFieldDef = exports.TypeKind = exports.SchemaMetaFieldDef = void 0;
exports.isIntrospectionType = isIntrospectionType;
var _inspect = require("../jsutils/inspect.mjs");
var _invariant = require("../jsutils/invariant.mjs");
var _directiveLocation = require("../language/directiveLocation.mjs");
var _printer = require("../language/printer.mjs");
var _astFromValue = require("../utilities/astFromValue.mjs");
var _definition = require("./definition.mjs");
var _scalars = require("./scalars.mjs");
var __Schema = exports.__Schema = new _definition.GraphQLObjectType({
  name: '__Schema',
  description: 'A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.',
  fields: function fields() {
    return {
      description: {
        type: _scalars.GraphQLString,
        resolve: function resolve(schema) {
          return schema.description;
        }
      },
      types: {
        description: 'A list of all types supported by this server.',
        type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type))),
        resolve: function resolve(schema) {
          return Object.values(schema.getTypeMap());
        }
      },
      queryType: {
        description: 'The type that query operations will be rooted at.',
        type: new _definition.GraphQLNonNull(__Type),
        resolve: function resolve(schema) {
          return schema.getQueryType();
        }
      },
      mutationType: {
        description: 'If this server supports mutation, the type that mutation operations will be rooted at.',
        type: __Type,
        resolve: function resolve(schema) {
          return schema.getMutationType();
        }
      },
      subscriptionType: {
        description: 'If this server support subscription, the type that subscription operations will be rooted at.',
        type: __Type,
        resolve: function resolve(schema) {
          return schema.getSubscriptionType();
        }
      },
      directives: {
        description: 'A list of all directives supported by this server.',
        type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__Directive))),
        resolve: function resolve(schema) {
          return schema.getDirectives();
        }
      }
    };
  }
});
var __Directive = exports.__Directive = new _definition.GraphQLObjectType({
  name: '__Directive',
  description: "A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",
  fields: function fields() {
    return {
      name: {
        type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
        resolve: function resolve(directive) {
          return directive.name;
        }
      },
      description: {
        type: _scalars.GraphQLString,
        resolve: function resolve(directive) {
          return directive.description;
        }
      },
      isRepeatable: {
        type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
        resolve: function resolve(directive) {
          return directive.isRepeatable;
        }
      },
      locations: {
        type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__DirectiveLocation))),
        resolve: function resolve(directive) {
          return directive.locations;
        }
      },
      args: {
        type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__InputValue))),
        args: {
          includeDeprecated: {
            type: _scalars.GraphQLBoolean,
            defaultValue: false
          }
        },
        resolve: function resolve(field, _ref) {
          var includeDeprecated = _ref.includeDeprecated;
          return includeDeprecated ? field.args : field.args.filter(function (arg) {
            return arg.deprecationReason == null;
          });
        }
      }
    };
  }
});
var __DirectiveLocation = exports.__DirectiveLocation = new _definition.GraphQLEnumType({
  name: '__DirectiveLocation',
  description: 'A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.',
  values: {
    QUERY: {
      value: _directiveLocation.DirectiveLocation.QUERY,
      description: 'Location adjacent to a query operation.'
    },
    MUTATION: {
      value: _directiveLocation.DirectiveLocation.MUTATION,
      description: 'Location adjacent to a mutation operation.'
    },
    SUBSCRIPTION: {
      value: _directiveLocation.DirectiveLocation.SUBSCRIPTION,
      description: 'Location adjacent to a subscription operation.'
    },
    FIELD: {
      value: _directiveLocation.DirectiveLocation.FIELD,
      description: 'Location adjacent to a field.'
    },
    FRAGMENT_DEFINITION: {
      value: _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION,
      description: 'Location adjacent to a fragment definition.'
    },
    FRAGMENT_SPREAD: {
      value: _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD,
      description: 'Location adjacent to a fragment spread.'
    },
    INLINE_FRAGMENT: {
      value: _directiveLocation.DirectiveLocation.INLINE_FRAGMENT,
      description: 'Location adjacent to an inline fragment.'
    },
    VARIABLE_DEFINITION: {
      value: _directiveLocation.DirectiveLocation.VARIABLE_DEFINITION,
      description: 'Location adjacent to a variable definition.'
    },
    SCHEMA: {
      value: _directiveLocation.DirectiveLocation.SCHEMA,
      description: 'Location adjacent to a schema definition.'
    },
    SCALAR: {
      value: _directiveLocation.DirectiveLocation.SCALAR,
      description: 'Location adjacent to a scalar definition.'
    },
    OBJECT: {
      value: _directiveLocation.DirectiveLocation.OBJECT,
      description: 'Location adjacent to an object type definition.'
    },
    FIELD_DEFINITION: {
      value: _directiveLocation.DirectiveLocation.FIELD_DEFINITION,
      description: 'Location adjacent to a field definition.'
    },
    ARGUMENT_DEFINITION: {
      value: _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION,
      description: 'Location adjacent to an argument definition.'
    },
    INTERFACE: {
      value: _directiveLocation.DirectiveLocation.INTERFACE,
      description: 'Location adjacent to an interface definition.'
    },
    UNION: {
      value: _directiveLocation.DirectiveLocation.UNION,
      description: 'Location adjacent to a union definition.'
    },
    ENUM: {
      value: _directiveLocation.DirectiveLocation.ENUM,
      description: 'Location adjacent to an enum definition.'
    },
    ENUM_VALUE: {
      value: _directiveLocation.DirectiveLocation.ENUM_VALUE,
      description: 'Location adjacent to an enum value definition.'
    },
    INPUT_OBJECT: {
      value: _directiveLocation.DirectiveLocation.INPUT_OBJECT,
      description: 'Location adjacent to an input object type definition.'
    },
    INPUT_FIELD_DEFINITION: {
      value: _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION,
      description: 'Location adjacent to an input object field definition.'
    }
  }
});
var __Type = exports.__Type = new _definition.GraphQLObjectType({
  name: '__Type',
  description: 'The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.',
  fields: function fields() {
    return {
      kind: {
        type: new _definition.GraphQLNonNull(__TypeKind),
        resolve: function resolve(type) {
          if ((0, _definition.isScalarType)(type)) {
            return TypeKind.SCALAR;
          }
          if ((0, _definition.isObjectType)(type)) {
            return TypeKind.OBJECT;
          }
          if ((0, _definition.isInterfaceType)(type)) {
            return TypeKind.INTERFACE;
          }
          if ((0, _definition.isUnionType)(type)) {
            return TypeKind.UNION;
          }
          if ((0, _definition.isEnumType)(type)) {
            return TypeKind.ENUM;
          }
          if ((0, _definition.isInputObjectType)(type)) {
            return TypeKind.INPUT_OBJECT;
          }
          if ((0, _definition.isListType)(type)) {
            return TypeKind.LIST;
          }
          if ((0, _definition.isNonNullType)(type)) {
            return TypeKind.NON_NULL;
          }
          /* c8 ignore next 3 */
          // Not reachable, all possible types have been considered)

          false || (0, _invariant.invariant)(false, "Unexpected type: \"".concat((0, _inspect.inspect)(type), "\"."));
        }
      },
      name: {
        type: _scalars.GraphQLString,
        resolve: function resolve(type) {
          return 'name' in type ? type.name : undefined;
        }
      },
      description: {
        type: _scalars.GraphQLString,
        resolve: function resolve(type // FIXME: add test case
        ) {
          return /* c8 ignore next */(
            'description' in type ? type.description : undefined
          );
        }
      },
      specifiedByURL: {
        type: _scalars.GraphQLString,
        resolve: function resolve(obj) {
          return 'specifiedByURL' in obj ? obj.specifiedByURL : undefined;
        }
      },
      fields: {
        type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Field)),
        args: {
          includeDeprecated: {
            type: _scalars.GraphQLBoolean,
            defaultValue: false
          }
        },
        resolve: function resolve(type, _ref2) {
          var includeDeprecated = _ref2.includeDeprecated;
          if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
            var fields = Object.values(type.getFields());
            return includeDeprecated ? fields : fields.filter(function (field) {
              return field.deprecationReason == null;
            });
          }
        }
      },
      interfaces: {
        type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type)),
        resolve: function resolve(type) {
          if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
            return type.getInterfaces();
          }
        }
      },
      possibleTypes: {
        type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type)),
        resolve: function resolve(type, _args, _context, _ref3) {
          var schema = _ref3.schema;
          if ((0, _definition.isAbstractType)(type)) {
            return schema.getPossibleTypes(type);
          }
        }
      },
      enumValues: {
        type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__EnumValue)),
        args: {
          includeDeprecated: {
            type: _scalars.GraphQLBoolean,
            defaultValue: false
          }
        },
        resolve: function resolve(type, _ref4) {
          var includeDeprecated = _ref4.includeDeprecated;
          if ((0, _definition.isEnumType)(type)) {
            var values = type.getValues();
            return includeDeprecated ? values : values.filter(function (field) {
              return field.deprecationReason == null;
            });
          }
        }
      },
      inputFields: {
        type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__InputValue)),
        args: {
          includeDeprecated: {
            type: _scalars.GraphQLBoolean,
            defaultValue: false
          }
        },
        resolve: function resolve(type, _ref5) {
          var includeDeprecated = _ref5.includeDeprecated;
          if ((0, _definition.isInputObjectType)(type)) {
            var values = Object.values(type.getFields());
            return includeDeprecated ? values : values.filter(function (field) {
              return field.deprecationReason == null;
            });
          }
        }
      },
      ofType: {
        type: __Type,
        resolve: function resolve(type) {
          return 'ofType' in type ? type.ofType : undefined;
        }
      }
    };
  }
});
var __Field = exports.__Field = new _definition.GraphQLObjectType({
  name: '__Field',
  description: 'Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.',
  fields: function fields() {
    return {
      name: {
        type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
        resolve: function resolve(field) {
          return field.name;
        }
      },
      description: {
        type: _scalars.GraphQLString,
        resolve: function resolve(field) {
          return field.description;
        }
      },
      args: {
        type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__InputValue))),
        args: {
          includeDeprecated: {
            type: _scalars.GraphQLBoolean,
            defaultValue: false
          }
        },
        resolve: function resolve(field, _ref6) {
          var includeDeprecated = _ref6.includeDeprecated;
          return includeDeprecated ? field.args : field.args.filter(function (arg) {
            return arg.deprecationReason == null;
          });
        }
      },
      type: {
        type: new _definition.GraphQLNonNull(__Type),
        resolve: function resolve(field) {
          return field.type;
        }
      },
      isDeprecated: {
        type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
        resolve: function resolve(field) {
          return field.deprecationReason != null;
        }
      },
      deprecationReason: {
        type: _scalars.GraphQLString,
        resolve: function resolve(field) {
          return field.deprecationReason;
        }
      }
    };
  }
});
var __InputValue = exports.__InputValue = new _definition.GraphQLObjectType({
  name: '__InputValue',
  description: 'Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.',
  fields: function fields() {
    return {
      name: {
        type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
        resolve: function resolve(inputValue) {
          return inputValue.name;
        }
      },
      description: {
        type: _scalars.GraphQLString,
        resolve: function resolve(inputValue) {
          return inputValue.description;
        }
      },
      type: {
        type: new _definition.GraphQLNonNull(__Type),
        resolve: function resolve(inputValue) {
          return inputValue.type;
        }
      },
      defaultValue: {
        type: _scalars.GraphQLString,
        description: 'A GraphQL-formatted string representing the default value for this input value.',
        resolve: function resolve(inputValue) {
          var type = inputValue.type,
            defaultValue = inputValue.defaultValue;
          var valueAST = (0, _astFromValue.astFromValue)(defaultValue, type);
          return valueAST ? (0, _printer.print)(valueAST) : null;
        }
      },
      isDeprecated: {
        type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
        resolve: function resolve(field) {
          return field.deprecationReason != null;
        }
      },
      deprecationReason: {
        type: _scalars.GraphQLString,
        resolve: function resolve(obj) {
          return obj.deprecationReason;
        }
      }
    };
  }
});
var __EnumValue = exports.__EnumValue = new _definition.GraphQLObjectType({
  name: '__EnumValue',
  description: 'One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.',
  fields: function fields() {
    return {
      name: {
        type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
        resolve: function resolve(enumValue) {
          return enumValue.name;
        }
      },
      description: {
        type: _scalars.GraphQLString,
        resolve: function resolve(enumValue) {
          return enumValue.description;
        }
      },
      isDeprecated: {
        type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),
        resolve: function resolve(enumValue) {
          return enumValue.deprecationReason != null;
        }
      },
      deprecationReason: {
        type: _scalars.GraphQLString,
        resolve: function resolve(enumValue) {
          return enumValue.deprecationReason;
        }
      }
    };
  }
});
var TypeKind;
(function (TypeKind) {
  TypeKind['SCALAR'] = 'SCALAR';
  TypeKind['OBJECT'] = 'OBJECT';
  TypeKind['INTERFACE'] = 'INTERFACE';
  TypeKind['UNION'] = 'UNION';
  TypeKind['ENUM'] = 'ENUM';
  TypeKind['INPUT_OBJECT'] = 'INPUT_OBJECT';
  TypeKind['LIST'] = 'LIST';
  TypeKind['NON_NULL'] = 'NON_NULL';
})(TypeKind || (exports.TypeKind = TypeKind = {}));
var __TypeKind = exports.__TypeKind = new _definition.GraphQLEnumType({
  name: '__TypeKind',
  description: 'An enum describing what kind of type a given `__Type` is.',
  values: {
    SCALAR: {
      value: TypeKind.SCALAR,
      description: 'Indicates this type is a scalar.'
    },
    OBJECT: {
      value: TypeKind.OBJECT,
      description: 'Indicates this type is an object. `fields` and `interfaces` are valid fields.'
    },
    INTERFACE: {
      value: TypeKind.INTERFACE,
      description: 'Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.'
    },
    UNION: {
      value: TypeKind.UNION,
      description: 'Indicates this type is a union. `possibleTypes` is a valid field.'
    },
    ENUM: {
      value: TypeKind.ENUM,
      description: 'Indicates this type is an enum. `enumValues` is a valid field.'
    },
    INPUT_OBJECT: {
      value: TypeKind.INPUT_OBJECT,
      description: 'Indicates this type is an input object. `inputFields` is a valid field.'
    },
    LIST: {
      value: TypeKind.LIST,
      description: 'Indicates this type is a list. `ofType` is a valid field.'
    },
    NON_NULL: {
      value: TypeKind.NON_NULL,
      description: 'Indicates this type is a non-null. `ofType` is a valid field.'
    }
  }
});
/**
 * Note that these are GraphQLField and not GraphQLFieldConfig,
 * so the format for args is different.
 */

var SchemaMetaFieldDef = exports.SchemaMetaFieldDef = {
  name: '__schema',
  type: new _definition.GraphQLNonNull(__Schema),
  description: 'Access the current type schema of this server.',
  args: [],
  resolve: function resolve(_source, _args, _context, _ref7) {
    var schema = _ref7.schema;
    return schema;
  },
  deprecationReason: undefined,
  extensions: Object.create(null),
  astNode: undefined
};
var TypeMetaFieldDef = exports.TypeMetaFieldDef = {
  name: '__type',
  type: __Type,
  description: 'Request the type information of a single type.',
  args: [{
    name: 'name',
    description: undefined,
    type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
    defaultValue: undefined,
    deprecationReason: undefined,
    extensions: Object.create(null),
    astNode: undefined
  }],
  resolve: function resolve(_source, _ref8, _context, _ref9) {
    var name = _ref8.name;
    var schema = _ref9.schema;
    return schema.getType(name);
  },
  deprecationReason: undefined,
  extensions: Object.create(null),
  astNode: undefined
};
var TypeNameMetaFieldDef = exports.TypeNameMetaFieldDef = {
  name: '__typename',
  type: new _definition.GraphQLNonNull(_scalars.GraphQLString),
  description: 'The name of the current Object type at runtime.',
  args: [],
  resolve: function resolve(_source, _args, _context, _ref10) {
    var parentType = _ref10.parentType;
    return parentType.name;
  },
  deprecationReason: undefined,
  extensions: Object.create(null),
  astNode: undefined
};
var introspectionTypes = exports.introspectionTypes = Object.freeze([__Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind]);
function isIntrospectionType(type) {
  return introspectionTypes.some(function (_ref11) {
    var name = _ref11.name;
    return type.name === name;
  });
}
},{"../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","../jsutils/invariant.mjs":"../node_modules/graphql/jsutils/invariant.mjs","../language/directiveLocation.mjs":"../node_modules/graphql/language/directiveLocation.mjs","../language/printer.mjs":"../node_modules/graphql/language/printer.mjs","../utilities/astFromValue.mjs":"../node_modules/graphql/utilities/astFromValue.mjs","./definition.mjs":"../node_modules/graphql/type/definition.mjs","./scalars.mjs":"../node_modules/graphql/type/scalars.mjs"}],"../node_modules/graphql/type/schema.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphQLSchema = void 0;
exports.assertSchema = assertSchema;
exports.isSchema = isSchema;
var _devAssert = require("../jsutils/devAssert.mjs");
var _inspect = require("../jsutils/inspect.mjs");
var _instanceOf = require("../jsutils/instanceOf.mjs");
var _isObjectLike = require("../jsutils/isObjectLike.mjs");
var _toObjMap = require("../jsutils/toObjMap.mjs");
var _ast = require("../language/ast.mjs");
var _definition = require("./definition.mjs");
var _directives = require("./directives.mjs");
var _introspection = require("./introspection.mjs");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Test if the given value is a GraphQL schema.
 */

function isSchema(schema) {
  return (0, _instanceOf.instanceOf)(schema, GraphQLSchema);
}
function assertSchema(schema) {
  if (!isSchema(schema)) {
    throw new Error("Expected ".concat((0, _inspect.inspect)(schema), " to be a GraphQL schema."));
  }
  return schema;
}
/**
 * Custom extensions
 *
 * @remarks
 * Use a unique identifier name for your extension, for example the name of
 * your library or project. Do not use a shortened identifier as this increases
 * the risk of conflicts. We recommend you add at most one extension field,
 * an object which can contain all the values you need.
 */

/**
 * Schema Definition
 *
 * A Schema is created by supplying the root types of each type of operation,
 * query and mutation (optional). A schema definition is then supplied to the
 * validator and executor.
 *
 * Example:
 *
 * ```ts
 * const MyAppSchema = new GraphQLSchema({
 *   query: MyAppQueryRootType,
 *   mutation: MyAppMutationRootType,
 * })
 * ```
 *
 * Note: When the schema is constructed, by default only the types that are
 * reachable by traversing the root types are included, other types must be
 * explicitly referenced.
 *
 * Example:
 *
 * ```ts
 * const characterInterface = new GraphQLInterfaceType({
 *   name: 'Character',
 *   ...
 * });
 *
 * const humanType = new GraphQLObjectType({
 *   name: 'Human',
 *   interfaces: [characterInterface],
 *   ...
 * });
 *
 * const droidType = new GraphQLObjectType({
 *   name: 'Droid',
 *   interfaces: [characterInterface],
 *   ...
 * });
 *
 * const schema = new GraphQLSchema({
 *   query: new GraphQLObjectType({
 *     name: 'Query',
 *     fields: {
 *       hero: { type: characterInterface, ... },
 *     }
 *   }),
 *   ...
 *   // Since this schema references only the `Character` interface it's
 *   // necessary to explicitly list the types that implement it if
 *   // you want them to be included in the final schema.
 *   types: [humanType, droidType],
 * })
 * ```
 *
 * Note: If an array of `directives` are provided to GraphQLSchema, that will be
 * the exact list of directives represented and allowed. If `directives` is not
 * provided then a default set of the specified directives (e.g. `@include` and
 * `@skip`) will be used. If you wish to provide *additional* directives to these
 * specified directives, you must explicitly declare them. Example:
 *
 * ```ts
 * const MyAppSchema = new GraphQLSchema({
 *   ...
 *   directives: specifiedDirectives.concat([ myCustomDirective ]),
 * })
 * ```
 */
var GraphQLSchema = exports.GraphQLSchema = /*#__PURE__*/function (_Symbol$toStringTag) {
  // Used as a cache for validateSchema().
  function GraphQLSchema(config) {
    _classCallCheck(this, GraphQLSchema);
    var _config$extensionASTN, _config$directives;

    // If this schema was built from a source known to be valid, then it may be
    // marked with assumeValid to avoid an additional type system validation.
    this.__validationErrors = config.assumeValid === true ? [] : undefined; // Check for common mistakes during construction to produce early errors.

    (0, _isObjectLike.isObjectLike)(config) || (0, _devAssert.devAssert)(false, 'Must provide configuration object.');
    !config.types || Array.isArray(config.types) || (0, _devAssert.devAssert)(false, "\"types\" must be Array if provided but got: ".concat((0, _inspect.inspect)(config.types), "."));
    !config.directives || Array.isArray(config.directives) || (0, _devAssert.devAssert)(false, '"directives" must be Array if provided but got: ' + "".concat((0, _inspect.inspect)(config.directives), "."));
    this.description = config.description;
    this.extensions = (0, _toObjMap.toObjMap)(config.extensions);
    this.astNode = config.astNode;
    this.extensionASTNodes = (_config$extensionASTN = config.extensionASTNodes) !== null && _config$extensionASTN !== void 0 ? _config$extensionASTN : [];
    this._queryType = config.query;
    this._mutationType = config.mutation;
    this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.

    this._directives = (_config$directives = config.directives) !== null && _config$directives !== void 0 ? _config$directives : _directives.specifiedDirectives; // To preserve order of user-provided types, we add first to add them to
    // the set of "collected" types, so `collectReferencedTypes` ignore them.

    var allReferencedTypes = new Set(config.types);
    if (config.types != null) {
      var _iterator = _createForOfIteratorHelper(config.types),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var type = _step.value;
          // When we ready to process this type, we remove it from "collected" types
          // and then add it together with all dependent types in the correct position.
          allReferencedTypes.delete(type);
          collectReferencedTypes(type, allReferencedTypes);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    if (this._queryType != null) {
      collectReferencedTypes(this._queryType, allReferencedTypes);
    }
    if (this._mutationType != null) {
      collectReferencedTypes(this._mutationType, allReferencedTypes);
    }
    if (this._subscriptionType != null) {
      collectReferencedTypes(this._subscriptionType, allReferencedTypes);
    }
    var _iterator2 = _createForOfIteratorHelper(this._directives),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var directive = _step2.value;
        // Directives are not validated until validateSchema() is called.
        if ((0, _directives.isDirective)(directive)) {
          var _iterator4 = _createForOfIteratorHelper(directive.args),
            _step4;
          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var arg = _step4.value;
              collectReferencedTypes(arg.type, allReferencedTypes);
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    collectReferencedTypes(_introspection.__Schema, allReferencedTypes); // Storing the resulting map for reference by the schema.

    this._typeMap = Object.create(null);
    this._subTypeMap = Object.create(null); // Keep track of all implementations by interface name.

    this._implementationsMap = Object.create(null);
    var _iterator3 = _createForOfIteratorHelper(allReferencedTypes),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var namedType = _step3.value;
        if (namedType == null) {
          continue;
        }
        var typeName = namedType.name;
        typeName || (0, _devAssert.devAssert)(false, 'One of the provided types for building the Schema is missing a name.');
        if (this._typeMap[typeName] !== undefined) {
          throw new Error("Schema must contain uniquely named types but contains multiple types named \"".concat(typeName, "\"."));
        }
        this._typeMap[typeName] = namedType;
        if ((0, _definition.isInterfaceType)(namedType)) {
          // Store implementations by interface.
          var _iterator5 = _createForOfIteratorHelper(namedType.getInterfaces()),
            _step5;
          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var iface = _step5.value;
              if ((0, _definition.isInterfaceType)(iface)) {
                var implementations = this._implementationsMap[iface.name];
                if (implementations === undefined) {
                  implementations = this._implementationsMap[iface.name] = {
                    objects: [],
                    interfaces: []
                  };
                }
                implementations.interfaces.push(namedType);
              }
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }
        } else if ((0, _definition.isObjectType)(namedType)) {
          // Store implementations by objects.
          var _iterator6 = _createForOfIteratorHelper(namedType.getInterfaces()),
            _step6;
          try {
            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
              var _iface = _step6.value;
              if ((0, _definition.isInterfaceType)(_iface)) {
                var _implementations = this._implementationsMap[_iface.name];
                if (_implementations === undefined) {
                  _implementations = this._implementationsMap[_iface.name] = {
                    objects: [],
                    interfaces: []
                  };
                }
                _implementations.objects.push(namedType);
              }
            }
          } catch (err) {
            _iterator6.e(err);
          } finally {
            _iterator6.f();
          }
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  }
  _createClass(GraphQLSchema, [{
    key: _Symbol$toStringTag,
    get: function get() {
      return 'GraphQLSchema';
    }
  }, {
    key: "getQueryType",
    value: function getQueryType() {
      return this._queryType;
    }
  }, {
    key: "getMutationType",
    value: function getMutationType() {
      return this._mutationType;
    }
  }, {
    key: "getSubscriptionType",
    value: function getSubscriptionType() {
      return this._subscriptionType;
    }
  }, {
    key: "getRootType",
    value: function getRootType(operation) {
      switch (operation) {
        case _ast.OperationTypeNode.QUERY:
          return this.getQueryType();
        case _ast.OperationTypeNode.MUTATION:
          return this.getMutationType();
        case _ast.OperationTypeNode.SUBSCRIPTION:
          return this.getSubscriptionType();
      }
    }
  }, {
    key: "getTypeMap",
    value: function getTypeMap() {
      return this._typeMap;
    }
  }, {
    key: "getType",
    value: function getType(name) {
      return this.getTypeMap()[name];
    }
  }, {
    key: "getPossibleTypes",
    value: function getPossibleTypes(abstractType) {
      return (0, _definition.isUnionType)(abstractType) ? abstractType.getTypes() : this.getImplementations(abstractType).objects;
    }
  }, {
    key: "getImplementations",
    value: function getImplementations(interfaceType) {
      var implementations = this._implementationsMap[interfaceType.name];
      return implementations !== null && implementations !== void 0 ? implementations : {
        objects: [],
        interfaces: []
      };
    }
  }, {
    key: "isSubType",
    value: function isSubType(abstractType, maybeSubType) {
      var map = this._subTypeMap[abstractType.name];
      if (map === undefined) {
        map = Object.create(null);
        if ((0, _definition.isUnionType)(abstractType)) {
          var _iterator7 = _createForOfIteratorHelper(abstractType.getTypes()),
            _step7;
          try {
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
              var type = _step7.value;
              map[type.name] = true;
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }
        } else {
          var implementations = this.getImplementations(abstractType);
          var _iterator8 = _createForOfIteratorHelper(implementations.objects),
            _step8;
          try {
            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
              var _type = _step8.value;
              map[_type.name] = true;
            }
          } catch (err) {
            _iterator8.e(err);
          } finally {
            _iterator8.f();
          }
          var _iterator9 = _createForOfIteratorHelper(implementations.interfaces),
            _step9;
          try {
            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
              var _type2 = _step9.value;
              map[_type2.name] = true;
            }
          } catch (err) {
            _iterator9.e(err);
          } finally {
            _iterator9.f();
          }
        }
        this._subTypeMap[abstractType.name] = map;
      }
      return map[maybeSubType.name] !== undefined;
    }
  }, {
    key: "getDirectives",
    value: function getDirectives() {
      return this._directives;
    }
  }, {
    key: "getDirective",
    value: function getDirective(name) {
      return this.getDirectives().find(function (directive) {
        return directive.name === name;
      });
    }
  }, {
    key: "toConfig",
    value: function toConfig() {
      return {
        description: this.description,
        query: this.getQueryType(),
        mutation: this.getMutationType(),
        subscription: this.getSubscriptionType(),
        types: Object.values(this.getTypeMap()),
        directives: this.getDirectives(),
        extensions: this.extensions,
        astNode: this.astNode,
        extensionASTNodes: this.extensionASTNodes,
        assumeValid: this.__validationErrors !== undefined
      };
    }
  }]);
  return GraphQLSchema;
}(Symbol.toStringTag);
function collectReferencedTypes(type, typeSet) {
  var namedType = (0, _definition.getNamedType)(type);
  if (!typeSet.has(namedType)) {
    typeSet.add(namedType);
    if ((0, _definition.isUnionType)(namedType)) {
      var _iterator10 = _createForOfIteratorHelper(namedType.getTypes()),
        _step10;
      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var memberType = _step10.value;
          collectReferencedTypes(memberType, typeSet);
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }
    } else if ((0, _definition.isObjectType)(namedType) || (0, _definition.isInterfaceType)(namedType)) {
      var _iterator11 = _createForOfIteratorHelper(namedType.getInterfaces()),
        _step11;
      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var interfaceType = _step11.value;
          collectReferencedTypes(interfaceType, typeSet);
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }
      for (var _i = 0, _Object$values = Object.values(namedType.getFields()); _i < _Object$values.length; _i++) {
        var field = _Object$values[_i];
        collectReferencedTypes(field.type, typeSet);
        var _iterator12 = _createForOfIteratorHelper(field.args),
          _step12;
        try {
          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
            var arg = _step12.value;
            collectReferencedTypes(arg.type, typeSet);
          }
        } catch (err) {
          _iterator12.e(err);
        } finally {
          _iterator12.f();
        }
      }
    } else if ((0, _definition.isInputObjectType)(namedType)) {
      for (var _i2 = 0, _Object$values2 = Object.values(namedType.getFields()); _i2 < _Object$values2.length; _i2++) {
        var _field = _Object$values2[_i2];
        collectReferencedTypes(_field.type, typeSet);
      }
    }
  }
  return typeSet;
}
},{"../jsutils/devAssert.mjs":"../node_modules/graphql/jsutils/devAssert.mjs","../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","../jsutils/instanceOf.mjs":"../node_modules/graphql/jsutils/instanceOf.mjs","../jsutils/isObjectLike.mjs":"../node_modules/graphql/jsutils/isObjectLike.mjs","../jsutils/toObjMap.mjs":"../node_modules/graphql/jsutils/toObjMap.mjs","../language/ast.mjs":"../node_modules/graphql/language/ast.mjs","./definition.mjs":"../node_modules/graphql/type/definition.mjs","./directives.mjs":"../node_modules/graphql/type/directives.mjs","./introspection.mjs":"../node_modules/graphql/type/introspection.mjs"}],"../node_modules/graphql/type/validate.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertValidSchema = assertValidSchema;
exports.validateSchema = validateSchema;
var _inspect = require("../jsutils/inspect.mjs");
var _GraphQLError = require("../error/GraphQLError.mjs");
var _ast = require("../language/ast.mjs");
var _typeComparators = require("../utilities/typeComparators.mjs");
var _definition = require("./definition.mjs");
var _directives = require("./directives.mjs");
var _introspection = require("./introspection.mjs");
var _schema = require("./schema.mjs");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Implements the "Type Validation" sub-sections of the specification's
 * "Type System" section.
 *
 * Validation runs synchronously, returning an array of encountered errors, or
 * an empty array if no errors were encountered and the Schema is valid.
 */

function validateSchema(schema) {
  // First check to ensure the provided value is in fact a GraphQLSchema.
  (0, _schema.assertSchema)(schema); // If this Schema has already been validated, return the previous results.

  if (schema.__validationErrors) {
    return schema.__validationErrors;
  } // Validate the schema, producing a list of errors.

  var context = new SchemaValidationContext(schema);
  validateRootTypes(context);
  validateDirectives(context);
  validateTypes(context); // Persist the results of validation before returning to ensure validation
  // does not run multiple times for this schema.

  var errors = context.getErrors();
  schema.__validationErrors = errors;
  return errors;
}
/**
 * Utility function which asserts a schema is valid by throwing an error if
 * it is invalid.
 */

function assertValidSchema(schema) {
  var errors = validateSchema(schema);
  if (errors.length !== 0) {
    throw new Error(errors.map(function (error) {
      return error.message;
    }).join('\n\n'));
  }
}
var SchemaValidationContext = /*#__PURE__*/function () {
  function SchemaValidationContext(schema) {
    _classCallCheck(this, SchemaValidationContext);
    this._errors = [];
    this.schema = schema;
  }
  _createClass(SchemaValidationContext, [{
    key: "reportError",
    value: function reportError(message, nodes) {
      var _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;
      this._errors.push(new _GraphQLError.GraphQLError(message, {
        nodes: _nodes
      }));
    }
  }, {
    key: "getErrors",
    value: function getErrors() {
      return this._errors;
    }
  }]);
  return SchemaValidationContext;
}();
function validateRootTypes(context) {
  var schema = context.schema;
  var queryType = schema.getQueryType();
  if (!queryType) {
    context.reportError('Query root type must be provided.', schema.astNode);
  } else if (!(0, _definition.isObjectType)(queryType)) {
    var _getOperationTypeNode;
    context.reportError("Query root type must be Object type, it cannot be ".concat((0, _inspect.inspect)(queryType), "."), (_getOperationTypeNode = getOperationTypeNode(schema, _ast.OperationTypeNode.QUERY)) !== null && _getOperationTypeNode !== void 0 ? _getOperationTypeNode : queryType.astNode);
  }
  var mutationType = schema.getMutationType();
  if (mutationType && !(0, _definition.isObjectType)(mutationType)) {
    var _getOperationTypeNode2;
    context.reportError('Mutation root type must be Object type if provided, it cannot be ' + "".concat((0, _inspect.inspect)(mutationType), "."), (_getOperationTypeNode2 = getOperationTypeNode(schema, _ast.OperationTypeNode.MUTATION)) !== null && _getOperationTypeNode2 !== void 0 ? _getOperationTypeNode2 : mutationType.astNode);
  }
  var subscriptionType = schema.getSubscriptionType();
  if (subscriptionType && !(0, _definition.isObjectType)(subscriptionType)) {
    var _getOperationTypeNode3;
    context.reportError('Subscription root type must be Object type if provided, it cannot be ' + "".concat((0, _inspect.inspect)(subscriptionType), "."), (_getOperationTypeNode3 = getOperationTypeNode(schema, _ast.OperationTypeNode.SUBSCRIPTION)) !== null && _getOperationTypeNode3 !== void 0 ? _getOperationTypeNode3 : subscriptionType.astNode);
  }
}
function getOperationTypeNode(schema, operation) {
  var _flatMap$find;
  return (_flatMap$find = [schema.astNode].concat(_toConsumableArray(schema.extensionASTNodes)).flatMap(
  // FIXME: https://github.com/graphql/graphql-js/issues/2203
  function (schemaNode) {
    var _schemaNode$operation;
    return /* c8 ignore next */(
      (_schemaNode$operation = schemaNode === null || schemaNode === void 0 ? void 0 : schemaNode.operationTypes) !== null && _schemaNode$operation !== void 0 ? _schemaNode$operation : []
    );
  }).find(function (operationNode) {
    return operationNode.operation === operation;
  })) === null || _flatMap$find === void 0 ? void 0 : _flatMap$find.type;
}
function validateDirectives(context) {
  var _iterator = _createForOfIteratorHelper(context.schema.getDirectives()),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var directive = _step.value;
      // Ensure all directives are in fact GraphQL directives.
      if (!(0, _directives.isDirective)(directive)) {
        context.reportError("Expected directive but got: ".concat((0, _inspect.inspect)(directive), "."), directive === null || directive === void 0 ? void 0 : directive.astNode);
        continue;
      } // Ensure they are named correctly.

      validateName(context, directive); // TODO: Ensure proper locations.
      // Ensure the arguments are valid.
      var _iterator2 = _createForOfIteratorHelper(directive.args),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var arg = _step2.value;
          // Ensure they are named correctly.
          validateName(context, arg); // Ensure the type is an input type.

          if (!(0, _definition.isInputType)(arg.type)) {
            context.reportError("The type of @".concat(directive.name, "(").concat(arg.name, ":) must be Input Type ") + "but got: ".concat((0, _inspect.inspect)(arg.type), "."), arg.astNode);
          }
          if ((0, _definition.isRequiredArgument)(arg) && arg.deprecationReason != null) {
            var _arg$astNode;
            context.reportError("Required argument @".concat(directive.name, "(").concat(arg.name, ":) cannot be deprecated."), [getDeprecatedDirectiveNode(arg.astNode), (_arg$astNode = arg.astNode) === null || _arg$astNode === void 0 ? void 0 : _arg$astNode.type]);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}
function validateName(context, node) {
  // Ensure names are valid, however introspection types opt out.
  if (node.name.startsWith('__')) {
    context.reportError("Name \"".concat(node.name, "\" must not begin with \"__\", which is reserved by GraphQL introspection."), node.astNode);
  }
}
function validateTypes(context) {
  var validateInputObjectCircularRefs = createInputObjectCircularRefsValidator(context);
  var typeMap = context.schema.getTypeMap();
  for (var _i = 0, _Object$values = Object.values(typeMap); _i < _Object$values.length; _i++) {
    var type = _Object$values[_i];
    // Ensure all provided types are in fact GraphQL type.
    if (!(0, _definition.isNamedType)(type)) {
      context.reportError("Expected GraphQL named type but got: ".concat((0, _inspect.inspect)(type), "."), type.astNode);
      continue;
    } // Ensure it is named correctly (excluding introspection types).

    if (!(0, _introspection.isIntrospectionType)(type)) {
      validateName(context, type);
    }
    if ((0, _definition.isObjectType)(type)) {
      // Ensure fields are valid
      validateFields(context, type); // Ensure objects implement the interfaces they claim to.

      validateInterfaces(context, type);
    } else if ((0, _definition.isInterfaceType)(type)) {
      // Ensure fields are valid.
      validateFields(context, type); // Ensure interfaces implement the interfaces they claim to.

      validateInterfaces(context, type);
    } else if ((0, _definition.isUnionType)(type)) {
      // Ensure Unions include valid member types.
      validateUnionMembers(context, type);
    } else if ((0, _definition.isEnumType)(type)) {
      // Ensure Enums have valid values.
      validateEnumValues(context, type);
    } else if ((0, _definition.isInputObjectType)(type)) {
      // Ensure Input Object fields are valid.
      validateInputFields(context, type); // Ensure Input Objects do not contain non-nullable circular references

      validateInputObjectCircularRefs(type);
    }
  }
}
function validateFields(context, type) {
  var fields = Object.values(type.getFields()); // Objects and Interfaces both must define one or more fields.

  if (fields.length === 0) {
    context.reportError("Type ".concat(type.name, " must define one or more fields."), [type.astNode].concat(_toConsumableArray(type.extensionASTNodes)));
  }
  for (var _i2 = 0, _fields = fields; _i2 < _fields.length; _i2++) {
    var field = _fields[_i2];
    // Ensure they are named correctly.
    validateName(context, field); // Ensure the type is an output type

    if (!(0, _definition.isOutputType)(field.type)) {
      var _field$astNode;
      context.reportError("The type of ".concat(type.name, ".").concat(field.name, " must be Output Type ") + "but got: ".concat((0, _inspect.inspect)(field.type), "."), (_field$astNode = field.astNode) === null || _field$astNode === void 0 ? void 0 : _field$astNode.type);
    } // Ensure the arguments are valid
    var _iterator3 = _createForOfIteratorHelper(field.args),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var arg = _step3.value;
        var argName = arg.name; // Ensure they are named correctly.

        validateName(context, arg); // Ensure the type is an input type

        if (!(0, _definition.isInputType)(arg.type)) {
          var _arg$astNode2;
          context.reportError("The type of ".concat(type.name, ".").concat(field.name, "(").concat(argName, ":) must be Input ") + "Type but got: ".concat((0, _inspect.inspect)(arg.type), "."), (_arg$astNode2 = arg.astNode) === null || _arg$astNode2 === void 0 ? void 0 : _arg$astNode2.type);
        }
        if ((0, _definition.isRequiredArgument)(arg) && arg.deprecationReason != null) {
          var _arg$astNode3;
          context.reportError("Required argument ".concat(type.name, ".").concat(field.name, "(").concat(argName, ":) cannot be deprecated."), [getDeprecatedDirectiveNode(arg.astNode), (_arg$astNode3 = arg.astNode) === null || _arg$astNode3 === void 0 ? void 0 : _arg$astNode3.type]);
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  }
}
function validateInterfaces(context, type) {
  var ifaceTypeNames = Object.create(null);
  var _iterator4 = _createForOfIteratorHelper(type.getInterfaces()),
    _step4;
  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var iface = _step4.value;
      if (!(0, _definition.isInterfaceType)(iface)) {
        context.reportError("Type ".concat((0, _inspect.inspect)(type), " must only implement Interface types, ") + "it cannot implement ".concat((0, _inspect.inspect)(iface), "."), getAllImplementsInterfaceNodes(type, iface));
        continue;
      }
      if (type === iface) {
        context.reportError("Type ".concat(type.name, " cannot implement itself because it would create a circular reference."), getAllImplementsInterfaceNodes(type, iface));
        continue;
      }
      if (ifaceTypeNames[iface.name]) {
        context.reportError("Type ".concat(type.name, " can only implement ").concat(iface.name, " once."), getAllImplementsInterfaceNodes(type, iface));
        continue;
      }
      ifaceTypeNames[iface.name] = true;
      validateTypeImplementsAncestors(context, type, iface);
      validateTypeImplementsInterface(context, type, iface);
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
}
function validateTypeImplementsInterface(context, type, iface) {
  var typeFieldMap = type.getFields(); // Assert each interface field is implemented.

  for (var _i3 = 0, _Object$values2 = Object.values(iface.getFields()); _i3 < _Object$values2.length; _i3++) {
    var ifaceField = _Object$values2[_i3];
    var fieldName = ifaceField.name;
    var typeField = typeFieldMap[fieldName]; // Assert interface field exists on type.

    if (!typeField) {
      context.reportError("Interface field ".concat(iface.name, ".").concat(fieldName, " expected but ").concat(type.name, " does not provide it."), [ifaceField.astNode, type.astNode].concat(_toConsumableArray(type.extensionASTNodes)));
      continue;
    } // Assert interface field type is satisfied by type field type, by being
    // a valid subtype. (covariant)

    if (!(0, _typeComparators.isTypeSubTypeOf)(context.schema, typeField.type, ifaceField.type)) {
      var _ifaceField$astNode, _typeField$astNode;
      context.reportError("Interface field ".concat(iface.name, ".").concat(fieldName, " expects type ") + "".concat((0, _inspect.inspect)(ifaceField.type), " but ").concat(type.name, ".").concat(fieldName, " ") + "is type ".concat((0, _inspect.inspect)(typeField.type), "."), [(_ifaceField$astNode = ifaceField.astNode) === null || _ifaceField$astNode === void 0 ? void 0 : _ifaceField$astNode.type, (_typeField$astNode = typeField.astNode) === null || _typeField$astNode === void 0 ? void 0 : _typeField$astNode.type]);
    } // Assert each interface field arg is implemented.
    var _iterator5 = _createForOfIteratorHelper(ifaceField.args),
      _step5;
    try {
      var _loop = function _loop() {
          var ifaceArg = _step5.value;
          var argName = ifaceArg.name;
          var typeArg = typeField.args.find(function (arg) {
            return arg.name === argName;
          }); // Assert interface field arg exists on object field.

          if (!typeArg) {
            context.reportError("Interface field argument ".concat(iface.name, ".").concat(fieldName, "(").concat(argName, ":) expected but ").concat(type.name, ".").concat(fieldName, " does not provide it."), [ifaceArg.astNode, typeField.astNode]);
            return 1; // continue
          } // Assert interface field arg type matches object field arg type.
          // (invariant)
          // TODO: change to contravariant?

          if (!(0, _typeComparators.isEqualType)(ifaceArg.type, typeArg.type)) {
            context.reportError("Interface field argument ".concat(iface.name, ".").concat(fieldName, "(").concat(argName, ":) ") + "expects type ".concat((0, _inspect.inspect)(ifaceArg.type), " but ") + "".concat(type.name, ".").concat(fieldName, "(").concat(argName, ":) is type ") + "".concat((0, _inspect.inspect)(typeArg.type), "."), [(_ifaceArg$astNode = ifaceArg.astNode) === null || _ifaceArg$astNode === void 0 ? void 0 : _ifaceArg$astNode.type, (_typeArg$astNode = typeArg.astNode) === null || _typeArg$astNode === void 0 ? void 0 : _typeArg$astNode.type]);
          } // TODO: validate default values?
        },
        _ifaceArg$astNode,
        _typeArg$astNode;
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        if (_loop()) continue;
      } // Assert additional arguments must not be required.
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
    var _iterator6 = _createForOfIteratorHelper(typeField.args),
      _step6;
    try {
      var _loop2 = function _loop2() {
        var typeArg = _step6.value;
        var argName = typeArg.name;
        var ifaceArg = ifaceField.args.find(function (arg) {
          return arg.name === argName;
        });
        if (!ifaceArg && (0, _definition.isRequiredArgument)(typeArg)) {
          context.reportError("Object field ".concat(type.name, ".").concat(fieldName, " includes required argument ").concat(argName, " that is missing from the Interface field ").concat(iface.name, ".").concat(fieldName, "."), [typeArg.astNode, ifaceField.astNode]);
        }
      };
      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
        _loop2();
      }
    } catch (err) {
      _iterator6.e(err);
    } finally {
      _iterator6.f();
    }
  }
}
function validateTypeImplementsAncestors(context, type, iface) {
  var ifaceInterfaces = type.getInterfaces();
  var _iterator7 = _createForOfIteratorHelper(iface.getInterfaces()),
    _step7;
  try {
    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
      var transitive = _step7.value;
      if (!ifaceInterfaces.includes(transitive)) {
        context.reportError(transitive === type ? "Type ".concat(type.name, " cannot implement ").concat(iface.name, " because it would create a circular reference.") : "Type ".concat(type.name, " must implement ").concat(transitive.name, " because it is implemented by ").concat(iface.name, "."), [].concat(_toConsumableArray(getAllImplementsInterfaceNodes(iface, transitive)), _toConsumableArray(getAllImplementsInterfaceNodes(type, iface))));
      }
    }
  } catch (err) {
    _iterator7.e(err);
  } finally {
    _iterator7.f();
  }
}
function validateUnionMembers(context, union) {
  var memberTypes = union.getTypes();
  if (memberTypes.length === 0) {
    context.reportError("Union type ".concat(union.name, " must define one or more member types."), [union.astNode].concat(_toConsumableArray(union.extensionASTNodes)));
  }
  var includedTypeNames = Object.create(null);
  var _iterator8 = _createForOfIteratorHelper(memberTypes),
    _step8;
  try {
    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
      var memberType = _step8.value;
      if (includedTypeNames[memberType.name]) {
        context.reportError("Union type ".concat(union.name, " can only include type ").concat(memberType.name, " once."), getUnionMemberTypeNodes(union, memberType.name));
        continue;
      }
      includedTypeNames[memberType.name] = true;
      if (!(0, _definition.isObjectType)(memberType)) {
        context.reportError("Union type ".concat(union.name, " can only include Object types, ") + "it cannot include ".concat((0, _inspect.inspect)(memberType), "."), getUnionMemberTypeNodes(union, String(memberType)));
      }
    }
  } catch (err) {
    _iterator8.e(err);
  } finally {
    _iterator8.f();
  }
}
function validateEnumValues(context, enumType) {
  var enumValues = enumType.getValues();
  if (enumValues.length === 0) {
    context.reportError("Enum type ".concat(enumType.name, " must define one or more values."), [enumType.astNode].concat(_toConsumableArray(enumType.extensionASTNodes)));
  }
  var _iterator9 = _createForOfIteratorHelper(enumValues),
    _step9;
  try {
    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
      var enumValue = _step9.value;
      // Ensure valid name.
      validateName(context, enumValue);
    }
  } catch (err) {
    _iterator9.e(err);
  } finally {
    _iterator9.f();
  }
}
function validateInputFields(context, inputObj) {
  var fields = Object.values(inputObj.getFields());
  if (fields.length === 0) {
    context.reportError("Input Object type ".concat(inputObj.name, " must define one or more fields."), [inputObj.astNode].concat(_toConsumableArray(inputObj.extensionASTNodes)));
  } // Ensure the arguments are valid

  for (var _i4 = 0, _fields2 = fields; _i4 < _fields2.length; _i4++) {
    var field = _fields2[_i4];
    // Ensure they are named correctly.
    validateName(context, field); // Ensure the type is an input type

    if (!(0, _definition.isInputType)(field.type)) {
      var _field$astNode2;
      context.reportError("The type of ".concat(inputObj.name, ".").concat(field.name, " must be Input Type ") + "but got: ".concat((0, _inspect.inspect)(field.type), "."), (_field$astNode2 = field.astNode) === null || _field$astNode2 === void 0 ? void 0 : _field$astNode2.type);
    }
    if ((0, _definition.isRequiredInputField)(field) && field.deprecationReason != null) {
      var _field$astNode3;
      context.reportError("Required input field ".concat(inputObj.name, ".").concat(field.name, " cannot be deprecated."), [getDeprecatedDirectiveNode(field.astNode), (_field$astNode3 = field.astNode) === null || _field$astNode3 === void 0 ? void 0 : _field$astNode3.type]);
    }
  }
}
function createInputObjectCircularRefsValidator(context) {
  // Modified copy of algorithm from 'src/validation/rules/NoFragmentCycles.js'.
  // Tracks already visited types to maintain O(N) and to ensure that cycles
  // are not redundantly reported.
  var visitedTypes = Object.create(null); // Array of types nodes used to produce meaningful errors

  var fieldPath = []; // Position in the type path

  var fieldPathIndexByTypeName = Object.create(null);
  return detectCycleRecursive; // This does a straight-forward DFS to find cycles.
  // It does not terminate when a cycle was found but continues to explore
  // the graph to find all possible cycles.

  function detectCycleRecursive(inputObj) {
    if (visitedTypes[inputObj.name]) {
      return;
    }
    visitedTypes[inputObj.name] = true;
    fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;
    var fields = Object.values(inputObj.getFields());
    for (var _i5 = 0, _fields3 = fields; _i5 < _fields3.length; _i5++) {
      var field = _fields3[_i5];
      if ((0, _definition.isNonNullType)(field.type) && (0, _definition.isInputObjectType)(field.type.ofType)) {
        var fieldType = field.type.ofType;
        var cycleIndex = fieldPathIndexByTypeName[fieldType.name];
        fieldPath.push(field);
        if (cycleIndex === undefined) {
          detectCycleRecursive(fieldType);
        } else {
          var cyclePath = fieldPath.slice(cycleIndex);
          var pathStr = cyclePath.map(function (fieldObj) {
            return fieldObj.name;
          }).join('.');
          context.reportError("Cannot reference Input Object \"".concat(fieldType.name, "\" within itself through a series of non-null fields: \"").concat(pathStr, "\"."), cyclePath.map(function (fieldObj) {
            return fieldObj.astNode;
          }));
        }
        fieldPath.pop();
      }
    }
    fieldPathIndexByTypeName[inputObj.name] = undefined;
  }
}
function getAllImplementsInterfaceNodes(type, iface) {
  var astNode = type.astNode,
    extensionASTNodes = type.extensionASTNodes;
  var nodes = astNode != null ? [astNode].concat(_toConsumableArray(extensionASTNodes)) : extensionASTNodes; // FIXME: https://github.com/graphql/graphql-js/issues/2203

  return nodes.flatMap(function (typeNode) {
    var _typeNode$interfaces;
    return /* c8 ignore next */(
      (_typeNode$interfaces = typeNode.interfaces) !== null && _typeNode$interfaces !== void 0 ? _typeNode$interfaces : []
    );
  }).filter(function (ifaceNode) {
    return ifaceNode.name.value === iface.name;
  });
}
function getUnionMemberTypeNodes(union, typeName) {
  var astNode = union.astNode,
    extensionASTNodes = union.extensionASTNodes;
  var nodes = astNode != null ? [astNode].concat(_toConsumableArray(extensionASTNodes)) : extensionASTNodes; // FIXME: https://github.com/graphql/graphql-js/issues/2203

  return nodes.flatMap(function (unionNode) {
    var _unionNode$types;
    return /* c8 ignore next */(
      (_unionNode$types = unionNode.types) !== null && _unionNode$types !== void 0 ? _unionNode$types : []
    );
  }).filter(function (typeNode) {
    return typeNode.name.value === typeName;
  });
}
function getDeprecatedDirectiveNode(definitionNode) {
  var _definitionNode$direc;
  return definitionNode === null || definitionNode === void 0 ? void 0 : (_definitionNode$direc = definitionNode.directives) === null || _definitionNode$direc === void 0 ? void 0 : _definitionNode$direc.find(function (node) {
    return node.name.value === _directives.GraphQLDeprecatedDirective.name;
  });
}
},{"../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../language/ast.mjs":"../node_modules/graphql/language/ast.mjs","../utilities/typeComparators.mjs":"../node_modules/graphql/utilities/typeComparators.mjs","./definition.mjs":"../node_modules/graphql/type/definition.mjs","./directives.mjs":"../node_modules/graphql/type/directives.mjs","./introspection.mjs":"../node_modules/graphql/type/introspection.mjs","./schema.mjs":"../node_modules/graphql/type/schema.mjs"}],"../node_modules/graphql/utilities/typeFromAST.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typeFromAST = typeFromAST;
var _kinds = require("../language/kinds.mjs");
var _definition = require("../type/definition.mjs");
function typeFromAST(schema, typeNode) {
  switch (typeNode.kind) {
    case _kinds.Kind.LIST_TYPE:
      {
        var innerType = typeFromAST(schema, typeNode.type);
        return innerType && new _definition.GraphQLList(innerType);
      }
    case _kinds.Kind.NON_NULL_TYPE:
      {
        var _innerType = typeFromAST(schema, typeNode.type);
        return _innerType && new _definition.GraphQLNonNull(_innerType);
      }
    case _kinds.Kind.NAMED_TYPE:
      return schema.getType(typeNode.name.value);
  }
}
},{"../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs","../type/definition.mjs":"../node_modules/graphql/type/definition.mjs"}],"../node_modules/graphql/utilities/TypeInfo.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TypeInfo = void 0;
exports.visitWithTypeInfo = visitWithTypeInfo;
var _ast = require("../language/ast.mjs");
var _kinds = require("../language/kinds.mjs");
var _visitor = require("../language/visitor.mjs");
var _definition = require("../type/definition.mjs");
var _introspection = require("../type/introspection.mjs");
var _typeFromAST = require("./typeFromAST.mjs");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * TypeInfo is a utility class which, given a GraphQL schema, can keep track
 * of the current field and type definitions at any point in a GraphQL document
 * AST during a recursive descent by calling `enter(node)` and `leave(node)`.
 */
var TypeInfo = exports.TypeInfo = /*#__PURE__*/function (_Symbol$toStringTag) {
  function TypeInfo(schema,
  /**
   * Initial type may be provided in rare cases to facilitate traversals
   *  beginning somewhere other than documents.
   */
  initialType, /** @deprecated will be removed in 17.0.0 */
  getFieldDefFn) {
    _classCallCheck(this, TypeInfo);
    this._schema = schema;
    this._typeStack = [];
    this._parentTypeStack = [];
    this._inputTypeStack = [];
    this._fieldDefStack = [];
    this._defaultValueStack = [];
    this._directive = null;
    this._argument = null;
    this._enumValue = null;
    this._getFieldDef = getFieldDefFn !== null && getFieldDefFn !== void 0 ? getFieldDefFn : getFieldDef;
    if (initialType) {
      if ((0, _definition.isInputType)(initialType)) {
        this._inputTypeStack.push(initialType);
      }
      if ((0, _definition.isCompositeType)(initialType)) {
        this._parentTypeStack.push(initialType);
      }
      if ((0, _definition.isOutputType)(initialType)) {
        this._typeStack.push(initialType);
      }
    }
  }
  _createClass(TypeInfo, [{
    key: _Symbol$toStringTag,
    get: function get() {
      return 'TypeInfo';
    }
  }, {
    key: "getType",
    value: function getType() {
      if (this._typeStack.length > 0) {
        return this._typeStack[this._typeStack.length - 1];
      }
    }
  }, {
    key: "getParentType",
    value: function getParentType() {
      if (this._parentTypeStack.length > 0) {
        return this._parentTypeStack[this._parentTypeStack.length - 1];
      }
    }
  }, {
    key: "getInputType",
    value: function getInputType() {
      if (this._inputTypeStack.length > 0) {
        return this._inputTypeStack[this._inputTypeStack.length - 1];
      }
    }
  }, {
    key: "getParentInputType",
    value: function getParentInputType() {
      if (this._inputTypeStack.length > 1) {
        return this._inputTypeStack[this._inputTypeStack.length - 2];
      }
    }
  }, {
    key: "getFieldDef",
    value: function getFieldDef() {
      if (this._fieldDefStack.length > 0) {
        return this._fieldDefStack[this._fieldDefStack.length - 1];
      }
    }
  }, {
    key: "getDefaultValue",
    value: function getDefaultValue() {
      if (this._defaultValueStack.length > 0) {
        return this._defaultValueStack[this._defaultValueStack.length - 1];
      }
    }
  }, {
    key: "getDirective",
    value: function getDirective() {
      return this._directive;
    }
  }, {
    key: "getArgument",
    value: function getArgument() {
      return this._argument;
    }
  }, {
    key: "getEnumValue",
    value: function getEnumValue() {
      return this._enumValue;
    }
  }, {
    key: "enter",
    value: function enter(node) {
      var schema = this._schema; // Note: many of the types below are explicitly typed as "unknown" to drop
      // any assumptions of a valid schema to ensure runtime types are properly
      // checked before continuing since TypeInfo is used as part of validation
      // which occurs before guarantees of schema and document validity.

      switch (node.kind) {
        case _kinds.Kind.SELECTION_SET:
          {
            var namedType = (0, _definition.getNamedType)(this.getType());
            this._parentTypeStack.push((0, _definition.isCompositeType)(namedType) ? namedType : undefined);
            break;
          }
        case _kinds.Kind.FIELD:
          {
            var parentType = this.getParentType();
            var fieldDef;
            var fieldType;
            if (parentType) {
              fieldDef = this._getFieldDef(schema, parentType, node);
              if (fieldDef) {
                fieldType = fieldDef.type;
              }
            }
            this._fieldDefStack.push(fieldDef);
            this._typeStack.push((0, _definition.isOutputType)(fieldType) ? fieldType : undefined);
            break;
          }
        case _kinds.Kind.DIRECTIVE:
          this._directive = schema.getDirective(node.name.value);
          break;
        case _kinds.Kind.OPERATION_DEFINITION:
          {
            var rootType = schema.getRootType(node.operation);
            this._typeStack.push((0, _definition.isObjectType)(rootType) ? rootType : undefined);
            break;
          }
        case _kinds.Kind.INLINE_FRAGMENT:
        case _kinds.Kind.FRAGMENT_DEFINITION:
          {
            var typeConditionAST = node.typeCondition;
            var outputType = typeConditionAST ? (0, _typeFromAST.typeFromAST)(schema, typeConditionAST) : (0, _definition.getNamedType)(this.getType());
            this._typeStack.push((0, _definition.isOutputType)(outputType) ? outputType : undefined);
            break;
          }
        case _kinds.Kind.VARIABLE_DEFINITION:
          {
            var inputType = (0, _typeFromAST.typeFromAST)(schema, node.type);
            this._inputTypeStack.push((0, _definition.isInputType)(inputType) ? inputType : undefined);
            break;
          }
        case _kinds.Kind.ARGUMENT:
          {
            var _this$getDirective;
            var argDef;
            var argType;
            var fieldOrDirective = (_this$getDirective = this.getDirective()) !== null && _this$getDirective !== void 0 ? _this$getDirective : this.getFieldDef();
            if (fieldOrDirective) {
              argDef = fieldOrDirective.args.find(function (arg) {
                return arg.name === node.name.value;
              });
              if (argDef) {
                argType = argDef.type;
              }
            }
            this._argument = argDef;
            this._defaultValueStack.push(argDef ? argDef.defaultValue : undefined);
            this._inputTypeStack.push((0, _definition.isInputType)(argType) ? argType : undefined);
            break;
          }
        case _kinds.Kind.LIST:
          {
            var listType = (0, _definition.getNullableType)(this.getInputType());
            var itemType = (0, _definition.isListType)(listType) ? listType.ofType : listType; // List positions never have a default value.

            this._defaultValueStack.push(undefined);
            this._inputTypeStack.push((0, _definition.isInputType)(itemType) ? itemType : undefined);
            break;
          }
        case _kinds.Kind.OBJECT_FIELD:
          {
            var objectType = (0, _definition.getNamedType)(this.getInputType());
            var inputFieldType;
            var inputField;
            if ((0, _definition.isInputObjectType)(objectType)) {
              inputField = objectType.getFields()[node.name.value];
              if (inputField) {
                inputFieldType = inputField.type;
              }
            }
            this._defaultValueStack.push(inputField ? inputField.defaultValue : undefined);
            this._inputTypeStack.push((0, _definition.isInputType)(inputFieldType) ? inputFieldType : undefined);
            break;
          }
        case _kinds.Kind.ENUM:
          {
            var enumType = (0, _definition.getNamedType)(this.getInputType());
            var enumValue;
            if ((0, _definition.isEnumType)(enumType)) {
              enumValue = enumType.getValue(node.value);
            }
            this._enumValue = enumValue;
            break;
          }
        default: // Ignore other nodes
      }
    }
  }, {
    key: "leave",
    value: function leave(node) {
      switch (node.kind) {
        case _kinds.Kind.SELECTION_SET:
          this._parentTypeStack.pop();
          break;
        case _kinds.Kind.FIELD:
          this._fieldDefStack.pop();
          this._typeStack.pop();
          break;
        case _kinds.Kind.DIRECTIVE:
          this._directive = null;
          break;
        case _kinds.Kind.OPERATION_DEFINITION:
        case _kinds.Kind.INLINE_FRAGMENT:
        case _kinds.Kind.FRAGMENT_DEFINITION:
          this._typeStack.pop();
          break;
        case _kinds.Kind.VARIABLE_DEFINITION:
          this._inputTypeStack.pop();
          break;
        case _kinds.Kind.ARGUMENT:
          this._argument = null;
          this._defaultValueStack.pop();
          this._inputTypeStack.pop();
          break;
        case _kinds.Kind.LIST:
        case _kinds.Kind.OBJECT_FIELD:
          this._defaultValueStack.pop();
          this._inputTypeStack.pop();
          break;
        case _kinds.Kind.ENUM:
          this._enumValue = null;
          break;
        default: // Ignore other nodes
      }
    }
  }]);
  return TypeInfo;
}(Symbol.toStringTag);
/**
 * Not exactly the same as the executor's definition of getFieldDef, in this
 * statically evaluated environment we do not always have an Object type,
 * and need to handle Interface and Union types.
 */
function getFieldDef(schema, parentType, fieldNode) {
  var name = fieldNode.name.value;
  if (name === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {
    return _introspection.SchemaMetaFieldDef;
  }
  if (name === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {
    return _introspection.TypeMetaFieldDef;
  }
  if (name === _introspection.TypeNameMetaFieldDef.name && (0, _definition.isCompositeType)(parentType)) {
    return _introspection.TypeNameMetaFieldDef;
  }
  if ((0, _definition.isObjectType)(parentType) || (0, _definition.isInterfaceType)(parentType)) {
    return parentType.getFields()[name];
  }
}
/**
 * Creates a new visitor instance which maintains a provided TypeInfo instance
 * along with visiting visitor.
 */

function visitWithTypeInfo(typeInfo, visitor) {
  return {
    enter: function enter() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var node = args[0];
      typeInfo.enter(node);
      var fn = (0, _visitor.getEnterLeaveForKind)(visitor, node.kind).enter;
      if (fn) {
        var result = fn.apply(visitor, args);
        if (result !== undefined) {
          typeInfo.leave(node);
          if ((0, _ast.isNode)(result)) {
            typeInfo.enter(result);
          }
        }
        return result;
      }
    },
    leave: function leave() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      var node = args[0];
      var fn = (0, _visitor.getEnterLeaveForKind)(visitor, node.kind).leave;
      var result;
      if (fn) {
        result = fn.apply(visitor, args);
      }
      typeInfo.leave(node);
      return result;
    }
  };
}
},{"../language/ast.mjs":"../node_modules/graphql/language/ast.mjs","../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs","../language/visitor.mjs":"../node_modules/graphql/language/visitor.mjs","../type/definition.mjs":"../node_modules/graphql/type/definition.mjs","../type/introspection.mjs":"../node_modules/graphql/type/introspection.mjs","./typeFromAST.mjs":"../node_modules/graphql/utilities/typeFromAST.mjs"}],"../node_modules/graphql/language/predicates.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isConstValueNode = isConstValueNode;
exports.isDefinitionNode = isDefinitionNode;
exports.isExecutableDefinitionNode = isExecutableDefinitionNode;
exports.isSelectionNode = isSelectionNode;
exports.isTypeDefinitionNode = isTypeDefinitionNode;
exports.isTypeExtensionNode = isTypeExtensionNode;
exports.isTypeNode = isTypeNode;
exports.isTypeSystemDefinitionNode = isTypeSystemDefinitionNode;
exports.isTypeSystemExtensionNode = isTypeSystemExtensionNode;
exports.isValueNode = isValueNode;
var _kinds = require("./kinds.mjs");
function isDefinitionNode(node) {
  return isExecutableDefinitionNode(node) || isTypeSystemDefinitionNode(node) || isTypeSystemExtensionNode(node);
}
function isExecutableDefinitionNode(node) {
  return node.kind === _kinds.Kind.OPERATION_DEFINITION || node.kind === _kinds.Kind.FRAGMENT_DEFINITION;
}
function isSelectionNode(node) {
  return node.kind === _kinds.Kind.FIELD || node.kind === _kinds.Kind.FRAGMENT_SPREAD || node.kind === _kinds.Kind.INLINE_FRAGMENT;
}
function isValueNode(node) {
  return node.kind === _kinds.Kind.VARIABLE || node.kind === _kinds.Kind.INT || node.kind === _kinds.Kind.FLOAT || node.kind === _kinds.Kind.STRING || node.kind === _kinds.Kind.BOOLEAN || node.kind === _kinds.Kind.NULL || node.kind === _kinds.Kind.ENUM || node.kind === _kinds.Kind.LIST || node.kind === _kinds.Kind.OBJECT;
}
function isConstValueNode(node) {
  return isValueNode(node) && (node.kind === _kinds.Kind.LIST ? node.values.some(isConstValueNode) : node.kind === _kinds.Kind.OBJECT ? node.fields.some(function (field) {
    return isConstValueNode(field.value);
  }) : node.kind !== _kinds.Kind.VARIABLE);
}
function isTypeNode(node) {
  return node.kind === _kinds.Kind.NAMED_TYPE || node.kind === _kinds.Kind.LIST_TYPE || node.kind === _kinds.Kind.NON_NULL_TYPE;
}
function isTypeSystemDefinitionNode(node) {
  return node.kind === _kinds.Kind.SCHEMA_DEFINITION || isTypeDefinitionNode(node) || node.kind === _kinds.Kind.DIRECTIVE_DEFINITION;
}
function isTypeDefinitionNode(node) {
  return node.kind === _kinds.Kind.SCALAR_TYPE_DEFINITION || node.kind === _kinds.Kind.OBJECT_TYPE_DEFINITION || node.kind === _kinds.Kind.INTERFACE_TYPE_DEFINITION || node.kind === _kinds.Kind.UNION_TYPE_DEFINITION || node.kind === _kinds.Kind.ENUM_TYPE_DEFINITION || node.kind === _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION;
}
function isTypeSystemExtensionNode(node) {
  return node.kind === _kinds.Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);
}
function isTypeExtensionNode(node) {
  return node.kind === _kinds.Kind.SCALAR_TYPE_EXTENSION || node.kind === _kinds.Kind.OBJECT_TYPE_EXTENSION || node.kind === _kinds.Kind.INTERFACE_TYPE_EXTENSION || node.kind === _kinds.Kind.UNION_TYPE_EXTENSION || node.kind === _kinds.Kind.ENUM_TYPE_EXTENSION || node.kind === _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION;
}
},{"./kinds.mjs":"../node_modules/graphql/language/kinds.mjs"}],"../node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExecutableDefinitionsRule = ExecutableDefinitionsRule;
var _GraphQLError = require("../../error/GraphQLError.mjs");
var _kinds = require("../../language/kinds.mjs");
var _predicates = require("../../language/predicates.mjs");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Executable definitions
 *
 * A GraphQL document is only valid for execution if all definitions are either
 * operation or fragment definitions.
 *
 * See https://spec.graphql.org/draft/#sec-Executable-Definitions
 */
function ExecutableDefinitionsRule(context) {
  return {
    Document: function Document(node) {
      var _iterator = _createForOfIteratorHelper(node.definitions),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var definition = _step.value;
          if (!(0, _predicates.isExecutableDefinitionNode)(definition)) {
            var defName = definition.kind === _kinds.Kind.SCHEMA_DEFINITION || definition.kind === _kinds.Kind.SCHEMA_EXTENSION ? 'schema' : '"' + definition.name.value + '"';
            context.reportError(new _GraphQLError.GraphQLError("The ".concat(defName, " definition is not executable."), {
              nodes: definition
            }));
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return false;
    }
  };
}
},{"../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs","../../language/predicates.mjs":"../node_modules/graphql/language/predicates.mjs"}],"../node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FieldsOnCorrectTypeRule = FieldsOnCorrectTypeRule;
var _didYouMean = require("../../jsutils/didYouMean.mjs");
var _naturalCompare = require("../../jsutils/naturalCompare.mjs");
var _suggestionList = require("../../jsutils/suggestionList.mjs");
var _GraphQLError = require("../../error/GraphQLError.mjs");
var _definition = require("../../type/definition.mjs");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Fields on correct type
 *
 * A GraphQL document is only valid if all fields selected are defined by the
 * parent type, or are an allowed meta field such as __typename.
 *
 * See https://spec.graphql.org/draft/#sec-Field-Selections
 */
function FieldsOnCorrectTypeRule(context) {
  return {
    Field: function Field(node) {
      var type = context.getParentType();
      if (type) {
        var fieldDef = context.getFieldDef();
        if (!fieldDef) {
          // This field doesn't exist, lets look for suggestions.
          var schema = context.getSchema();
          var fieldName = node.name.value; // First determine if there are any suggested types to condition on.

          var suggestion = (0, _didYouMean.didYouMean)('to use an inline fragment on', getSuggestedTypeNames(schema, type, fieldName)); // If there are no suggested types, then perhaps this was a typo?

          if (suggestion === '') {
            suggestion = (0, _didYouMean.didYouMean)(getSuggestedFieldNames(type, fieldName));
          } // Report an error, including helpful suggestions.

          context.reportError(new _GraphQLError.GraphQLError("Cannot query field \"".concat(fieldName, "\" on type \"").concat(type.name, "\".") + suggestion, {
            nodes: node
          }));
        }
      }
    }
  };
}
/**
 * Go through all of the implementations of type, as well as the interfaces that
 * they implement. If any of those types include the provided field, suggest them,
 * sorted by how often the type is referenced.
 */

function getSuggestedTypeNames(schema, type, fieldName) {
  if (!(0, _definition.isAbstractType)(type)) {
    // Must be an Object type, which does not have possible fields.
    return [];
  }
  var suggestedTypes = new Set();
  var usageCount = Object.create(null);
  var _iterator = _createForOfIteratorHelper(schema.getPossibleTypes(type)),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var possibleType = _step.value;
      if (!possibleType.getFields()[fieldName]) {
        continue;
      } // This object type defines this field.

      suggestedTypes.add(possibleType);
      usageCount[possibleType.name] = 1;
      var _iterator2 = _createForOfIteratorHelper(possibleType.getInterfaces()),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var possibleInterface = _step2.value;
          var _usageCount$possibleI;
          if (!possibleInterface.getFields()[fieldName]) {
            continue;
          } // This interface type defines this field.

          suggestedTypes.add(possibleInterface);
          usageCount[possibleInterface.name] = ((_usageCount$possibleI = usageCount[possibleInterface.name]) !== null && _usageCount$possibleI !== void 0 ? _usageCount$possibleI : 0) + 1;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return _toConsumableArray(suggestedTypes).sort(function (typeA, typeB) {
    // Suggest both interface and object types based on how common they are.
    var usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];
    if (usageCountDiff !== 0) {
      return usageCountDiff;
    } // Suggest super types first followed by subtypes

    if ((0, _definition.isInterfaceType)(typeA) && schema.isSubType(typeA, typeB)) {
      return -1;
    }
    if ((0, _definition.isInterfaceType)(typeB) && schema.isSubType(typeB, typeA)) {
      return 1;
    }
    return (0, _naturalCompare.naturalCompare)(typeA.name, typeB.name);
  }).map(function (x) {
    return x.name;
  });
}
/**
 * For the field name provided, determine if there are any similar field names
 * that may be the result of a typo.
 */

function getSuggestedFieldNames(type, fieldName) {
  if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
    var possibleFieldNames = Object.keys(type.getFields());
    return (0, _suggestionList.suggestionList)(fieldName, possibleFieldNames);
  } // Otherwise, must be a Union type, which does not define fields.

  return [];
}
},{"../../jsutils/didYouMean.mjs":"../node_modules/graphql/jsutils/didYouMean.mjs","../../jsutils/naturalCompare.mjs":"../node_modules/graphql/jsutils/naturalCompare.mjs","../../jsutils/suggestionList.mjs":"../node_modules/graphql/jsutils/suggestionList.mjs","../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../../type/definition.mjs":"../node_modules/graphql/type/definition.mjs"}],"../node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FragmentsOnCompositeTypesRule = FragmentsOnCompositeTypesRule;
var _GraphQLError = require("../../error/GraphQLError.mjs");
var _printer = require("../../language/printer.mjs");
var _definition = require("../../type/definition.mjs");
var _typeFromAST = require("../../utilities/typeFromAST.mjs");
/**
 * Fragments on composite type
 *
 * Fragments use a type condition to determine if they apply, since fragments
 * can only be spread into a composite type (object, interface, or union), the
 * type condition must also be a composite type.
 *
 * See https://spec.graphql.org/draft/#sec-Fragments-On-Composite-Types
 */
function FragmentsOnCompositeTypesRule(context) {
  return {
    InlineFragment: function InlineFragment(node) {
      var typeCondition = node.typeCondition;
      if (typeCondition) {
        var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition);
        if (type && !(0, _definition.isCompositeType)(type)) {
          var typeStr = (0, _printer.print)(typeCondition);
          context.reportError(new _GraphQLError.GraphQLError("Fragment cannot condition on non composite type \"".concat(typeStr, "\"."), {
            nodes: typeCondition
          }));
        }
      }
    },
    FragmentDefinition: function FragmentDefinition(node) {
      var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.typeCondition);
      if (type && !(0, _definition.isCompositeType)(type)) {
        var typeStr = (0, _printer.print)(node.typeCondition);
        context.reportError(new _GraphQLError.GraphQLError("Fragment \"".concat(node.name.value, "\" cannot condition on non composite type \"").concat(typeStr, "\"."), {
          nodes: node.typeCondition
        }));
      }
    }
  };
}
},{"../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../../language/printer.mjs":"../node_modules/graphql/language/printer.mjs","../../type/definition.mjs":"../node_modules/graphql/type/definition.mjs","../../utilities/typeFromAST.mjs":"../node_modules/graphql/utilities/typeFromAST.mjs"}],"../node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KnownArgumentNamesOnDirectivesRule = KnownArgumentNamesOnDirectivesRule;
exports.KnownArgumentNamesRule = KnownArgumentNamesRule;
var _didYouMean = require("../../jsutils/didYouMean.mjs");
var _suggestionList = require("../../jsutils/suggestionList.mjs");
var _GraphQLError = require("../../error/GraphQLError.mjs");
var _kinds = require("../../language/kinds.mjs");
var _directives = require("../../type/directives.mjs");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Known argument names
 *
 * A GraphQL field is only valid if all supplied arguments are defined by
 * that field.
 *
 * See https://spec.graphql.org/draft/#sec-Argument-Names
 * See https://spec.graphql.org/draft/#sec-Directives-Are-In-Valid-Locations
 */
function KnownArgumentNamesRule(context) {
  return _objectSpread(_objectSpread({}, KnownArgumentNamesOnDirectivesRule(context)), {}, {
    Argument: function Argument(argNode) {
      var argDef = context.getArgument();
      var fieldDef = context.getFieldDef();
      var parentType = context.getParentType();
      if (!argDef && fieldDef && parentType) {
        var argName = argNode.name.value;
        var knownArgsNames = fieldDef.args.map(function (arg) {
          return arg.name;
        });
        var suggestions = (0, _suggestionList.suggestionList)(argName, knownArgsNames);
        context.reportError(new _GraphQLError.GraphQLError("Unknown argument \"".concat(argName, "\" on field \"").concat(parentType.name, ".").concat(fieldDef.name, "\".") + (0, _didYouMean.didYouMean)(suggestions), {
          nodes: argNode
        }));
      }
    }
  });
}
/**
 * @internal
 */

function KnownArgumentNamesOnDirectivesRule(context) {
  var directiveArgs = Object.create(null);
  var schema = context.getSchema();
  var definedDirectives = schema ? schema.getDirectives() : _directives.specifiedDirectives;
  var _iterator = _createForOfIteratorHelper(definedDirectives),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var directive = _step.value;
      directiveArgs[directive.name] = directive.args.map(function (arg) {
        return arg.name;
      });
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var astDefinitions = context.getDocument().definitions;
  var _iterator2 = _createForOfIteratorHelper(astDefinitions),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var def = _step2.value;
      if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
        var _def$arguments;

        // FIXME: https://github.com/graphql/graphql-js/issues/2203

        /* c8 ignore next */
        var argsNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];
        directiveArgs[def.name.value] = argsNodes.map(function (arg) {
          return arg.name.value;
        });
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return {
    Directive: function Directive(directiveNode) {
      var directiveName = directiveNode.name.value;
      var knownArgs = directiveArgs[directiveName];
      if (directiveNode.arguments && knownArgs) {
        var _iterator3 = _createForOfIteratorHelper(directiveNode.arguments),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var argNode = _step3.value;
            var argName = argNode.name.value;
            if (!knownArgs.includes(argName)) {
              var suggestions = (0, _suggestionList.suggestionList)(argName, knownArgs);
              context.reportError(new _GraphQLError.GraphQLError("Unknown argument \"".concat(argName, "\" on directive \"@").concat(directiveName, "\".") + (0, _didYouMean.didYouMean)(suggestions), {
                nodes: argNode
              }));
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
      return false;
    }
  };
}
},{"../../jsutils/didYouMean.mjs":"../node_modules/graphql/jsutils/didYouMean.mjs","../../jsutils/suggestionList.mjs":"../node_modules/graphql/jsutils/suggestionList.mjs","../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs","../../type/directives.mjs":"../node_modules/graphql/type/directives.mjs"}],"../node_modules/graphql/validation/rules/KnownDirectivesRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KnownDirectivesRule = KnownDirectivesRule;
var _inspect = require("../../jsutils/inspect.mjs");
var _invariant = require("../../jsutils/invariant.mjs");
var _GraphQLError = require("../../error/GraphQLError.mjs");
var _ast = require("../../language/ast.mjs");
var _directiveLocation = require("../../language/directiveLocation.mjs");
var _kinds = require("../../language/kinds.mjs");
var _directives = require("../../type/directives.mjs");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Known directives
 *
 * A GraphQL document is only valid if all `@directives` are known by the
 * schema and legally positioned.
 *
 * See https://spec.graphql.org/draft/#sec-Directives-Are-Defined
 */
function KnownDirectivesRule(context) {
  var locationsMap = Object.create(null);
  var schema = context.getSchema();
  var definedDirectives = schema ? schema.getDirectives() : _directives.specifiedDirectives;
  var _iterator = _createForOfIteratorHelper(definedDirectives),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var directive = _step.value;
      locationsMap[directive.name] = directive.locations;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var astDefinitions = context.getDocument().definitions;
  var _iterator2 = _createForOfIteratorHelper(astDefinitions),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var def = _step2.value;
      if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
        locationsMap[def.name.value] = def.locations.map(function (name) {
          return name.value;
        });
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return {
    Directive: function Directive(node, _key, _parent, _path, ancestors) {
      var name = node.name.value;
      var locations = locationsMap[name];
      if (!locations) {
        context.reportError(new _GraphQLError.GraphQLError("Unknown directive \"@".concat(name, "\"."), {
          nodes: node
        }));
        return;
      }
      var candidateLocation = getDirectiveLocationForASTPath(ancestors);
      if (candidateLocation && !locations.includes(candidateLocation)) {
        context.reportError(new _GraphQLError.GraphQLError("Directive \"@".concat(name, "\" may not be used on ").concat(candidateLocation, "."), {
          nodes: node
        }));
      }
    }
  };
}
function getDirectiveLocationForASTPath(ancestors) {
  var appliedTo = ancestors[ancestors.length - 1];
  'kind' in appliedTo || (0, _invariant.invariant)(false);
  switch (appliedTo.kind) {
    case _kinds.Kind.OPERATION_DEFINITION:
      return getDirectiveLocationForOperation(appliedTo.operation);
    case _kinds.Kind.FIELD:
      return _directiveLocation.DirectiveLocation.FIELD;
    case _kinds.Kind.FRAGMENT_SPREAD:
      return _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD;
    case _kinds.Kind.INLINE_FRAGMENT:
      return _directiveLocation.DirectiveLocation.INLINE_FRAGMENT;
    case _kinds.Kind.FRAGMENT_DEFINITION:
      return _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION;
    case _kinds.Kind.VARIABLE_DEFINITION:
      return _directiveLocation.DirectiveLocation.VARIABLE_DEFINITION;
    case _kinds.Kind.SCHEMA_DEFINITION:
    case _kinds.Kind.SCHEMA_EXTENSION:
      return _directiveLocation.DirectiveLocation.SCHEMA;
    case _kinds.Kind.SCALAR_TYPE_DEFINITION:
    case _kinds.Kind.SCALAR_TYPE_EXTENSION:
      return _directiveLocation.DirectiveLocation.SCALAR;
    case _kinds.Kind.OBJECT_TYPE_DEFINITION:
    case _kinds.Kind.OBJECT_TYPE_EXTENSION:
      return _directiveLocation.DirectiveLocation.OBJECT;
    case _kinds.Kind.FIELD_DEFINITION:
      return _directiveLocation.DirectiveLocation.FIELD_DEFINITION;
    case _kinds.Kind.INTERFACE_TYPE_DEFINITION:
    case _kinds.Kind.INTERFACE_TYPE_EXTENSION:
      return _directiveLocation.DirectiveLocation.INTERFACE;
    case _kinds.Kind.UNION_TYPE_DEFINITION:
    case _kinds.Kind.UNION_TYPE_EXTENSION:
      return _directiveLocation.DirectiveLocation.UNION;
    case _kinds.Kind.ENUM_TYPE_DEFINITION:
    case _kinds.Kind.ENUM_TYPE_EXTENSION:
      return _directiveLocation.DirectiveLocation.ENUM;
    case _kinds.Kind.ENUM_VALUE_DEFINITION:
      return _directiveLocation.DirectiveLocation.ENUM_VALUE;
    case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:
    case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:
      return _directiveLocation.DirectiveLocation.INPUT_OBJECT;
    case _kinds.Kind.INPUT_VALUE_DEFINITION:
      {
        var parentNode = ancestors[ancestors.length - 3];
        'kind' in parentNode || (0, _invariant.invariant)(false);
        return parentNode.kind === _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION ? _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION : _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION;
      }
    // Not reachable, all possible types have been considered.

    /* c8 ignore next */

    default:
      false || (0, _invariant.invariant)(false, 'Unexpected kind: ' + (0, _inspect.inspect)(appliedTo.kind));
  }
}
function getDirectiveLocationForOperation(operation) {
  switch (operation) {
    case _ast.OperationTypeNode.QUERY:
      return _directiveLocation.DirectiveLocation.QUERY;
    case _ast.OperationTypeNode.MUTATION:
      return _directiveLocation.DirectiveLocation.MUTATION;
    case _ast.OperationTypeNode.SUBSCRIPTION:
      return _directiveLocation.DirectiveLocation.SUBSCRIPTION;
  }
}
},{"../../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","../../jsutils/invariant.mjs":"../node_modules/graphql/jsutils/invariant.mjs","../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../../language/ast.mjs":"../node_modules/graphql/language/ast.mjs","../../language/directiveLocation.mjs":"../node_modules/graphql/language/directiveLocation.mjs","../../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs","../../type/directives.mjs":"../node_modules/graphql/type/directives.mjs"}],"../node_modules/graphql/validation/rules/KnownFragmentNamesRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KnownFragmentNamesRule = KnownFragmentNamesRule;
var _GraphQLError = require("../../error/GraphQLError.mjs");
/**
 * Known fragment names
 *
 * A GraphQL document is only valid if all `...Fragment` fragment spreads refer
 * to fragments defined in the same document.
 *
 * See https://spec.graphql.org/draft/#sec-Fragment-spread-target-defined
 */
function KnownFragmentNamesRule(context) {
  return {
    FragmentSpread: function FragmentSpread(node) {
      var fragmentName = node.name.value;
      var fragment = context.getFragment(fragmentName);
      if (!fragment) {
        context.reportError(new _GraphQLError.GraphQLError("Unknown fragment \"".concat(fragmentName, "\"."), {
          nodes: node.name
        }));
      }
    }
  };
}
},{"../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs"}],"../node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KnownTypeNamesRule = KnownTypeNamesRule;
var _didYouMean = require("../../jsutils/didYouMean.mjs");
var _suggestionList = require("../../jsutils/suggestionList.mjs");
var _GraphQLError = require("../../error/GraphQLError.mjs");
var _predicates = require("../../language/predicates.mjs");
var _introspection = require("../../type/introspection.mjs");
var _scalars = require("../../type/scalars.mjs");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Known type names
 *
 * A GraphQL document is only valid if referenced types (specifically
 * variable definitions and fragment conditions) are defined by the type schema.
 *
 * See https://spec.graphql.org/draft/#sec-Fragment-Spread-Type-Existence
 */
function KnownTypeNamesRule(context) {
  var schema = context.getSchema();
  var existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);
  var definedTypes = Object.create(null);
  var _iterator = _createForOfIteratorHelper(context.getDocument().definitions),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var def = _step.value;
      if ((0, _predicates.isTypeDefinitionNode)(def)) {
        definedTypes[def.name.value] = true;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var typeNames = [].concat(_toConsumableArray(Object.keys(existingTypesMap)), _toConsumableArray(Object.keys(definedTypes)));
  return {
    NamedType: function NamedType(node, _1, parent, _2, ancestors) {
      var typeName = node.name.value;
      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {
        var _ancestors$;
        var definitionNode = (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0 ? _ancestors$ : parent;
        var isSDL = definitionNode != null && isSDLNode(definitionNode);
        if (isSDL && standardTypeNames.includes(typeName)) {
          return;
        }
        var suggestedTypes = (0, _suggestionList.suggestionList)(typeName, isSDL ? standardTypeNames.concat(typeNames) : typeNames);
        context.reportError(new _GraphQLError.GraphQLError("Unknown type \"".concat(typeName, "\".") + (0, _didYouMean.didYouMean)(suggestedTypes), {
          nodes: node
        }));
      }
    }
  };
}
var standardTypeNames = [].concat(_toConsumableArray(_scalars.specifiedScalarTypes), _toConsumableArray(_introspection.introspectionTypes)).map(function (type) {
  return type.name;
});
function isSDLNode(value) {
  return 'kind' in value && ((0, _predicates.isTypeSystemDefinitionNode)(value) || (0, _predicates.isTypeSystemExtensionNode)(value));
}
},{"../../jsutils/didYouMean.mjs":"../node_modules/graphql/jsutils/didYouMean.mjs","../../jsutils/suggestionList.mjs":"../node_modules/graphql/jsutils/suggestionList.mjs","../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../../language/predicates.mjs":"../node_modules/graphql/language/predicates.mjs","../../type/introspection.mjs":"../node_modules/graphql/type/introspection.mjs","../../type/scalars.mjs":"../node_modules/graphql/type/scalars.mjs"}],"../node_modules/graphql/validation/rules/LoneAnonymousOperationRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoneAnonymousOperationRule = LoneAnonymousOperationRule;
var _GraphQLError = require("../../error/GraphQLError.mjs");
var _kinds = require("../../language/kinds.mjs");
/**
 * Lone anonymous operation
 *
 * A GraphQL document is only valid if when it contains an anonymous operation
 * (the query short-hand) that it contains only that one operation definition.
 *
 * See https://spec.graphql.org/draft/#sec-Lone-Anonymous-Operation
 */
function LoneAnonymousOperationRule(context) {
  var operationCount = 0;
  return {
    Document: function Document(node) {
      operationCount = node.definitions.filter(function (definition) {
        return definition.kind === _kinds.Kind.OPERATION_DEFINITION;
      }).length;
    },
    OperationDefinition: function OperationDefinition(node) {
      if (!node.name && operationCount > 1) {
        context.reportError(new _GraphQLError.GraphQLError('This anonymous operation must be the only defined operation.', {
          nodes: node
        }));
      }
    }
  };
}
},{"../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs"}],"../node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoneSchemaDefinitionRule = LoneSchemaDefinitionRule;
var _GraphQLError = require("../../error/GraphQLError.mjs");
/**
 * Lone Schema definition
 *
 * A GraphQL document is only valid if it contains only one schema definition.
 */
function LoneSchemaDefinitionRule(context) {
  var _ref, _ref2, _oldSchema$astNode;
  var oldSchema = context.getSchema();
  var alreadyDefined = (_ref = (_ref2 = (_oldSchema$astNode = oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.astNode) !== null && _oldSchema$astNode !== void 0 ? _oldSchema$astNode : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getQueryType()) !== null && _ref2 !== void 0 ? _ref2 : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getMutationType()) !== null && _ref !== void 0 ? _ref : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getSubscriptionType();
  var schemaDefinitionsCount = 0;
  return {
    SchemaDefinition: function SchemaDefinition(node) {
      if (alreadyDefined) {
        context.reportError(new _GraphQLError.GraphQLError('Cannot define a new schema within a schema extension.', {
          nodes: node
        }));
        return;
      }
      if (schemaDefinitionsCount > 0) {
        context.reportError(new _GraphQLError.GraphQLError('Must provide only one schema definition.', {
          nodes: node
        }));
      }
      ++schemaDefinitionsCount;
    }
  };
}
},{"../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs"}],"../node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoFragmentCyclesRule = NoFragmentCyclesRule;
var _GraphQLError = require("../../error/GraphQLError.mjs");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * No fragment cycles
 *
 * The graph of fragment spreads must not form any cycles including spreading itself.
 * Otherwise an operation could infinitely spread or infinitely execute on cycles in the underlying data.
 *
 * See https://spec.graphql.org/draft/#sec-Fragment-spreads-must-not-form-cycles
 */
function NoFragmentCyclesRule(context) {
  // Tracks already visited fragments to maintain O(N) and to ensure that cycles
  // are not redundantly reported.
  var visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors

  var spreadPath = []; // Position in the spread path

  var spreadPathIndexByName = Object.create(null);
  return {
    OperationDefinition: function OperationDefinition() {
      return false;
    },
    FragmentDefinition: function FragmentDefinition(node) {
      detectCycleRecursive(node);
      return false;
    }
  }; // This does a straight-forward DFS to find cycles.
  // It does not terminate when a cycle was found but continues to explore
  // the graph to find all possible cycles.

  function detectCycleRecursive(fragment) {
    if (visitedFrags[fragment.name.value]) {
      return;
    }
    var fragmentName = fragment.name.value;
    visitedFrags[fragmentName] = true;
    var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);
    if (spreadNodes.length === 0) {
      return;
    }
    spreadPathIndexByName[fragmentName] = spreadPath.length;
    var _iterator = _createForOfIteratorHelper(spreadNodes),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var spreadNode = _step.value;
        var spreadName = spreadNode.name.value;
        var cycleIndex = spreadPathIndexByName[spreadName];
        spreadPath.push(spreadNode);
        if (cycleIndex === undefined) {
          var spreadFragment = context.getFragment(spreadName);
          if (spreadFragment) {
            detectCycleRecursive(spreadFragment);
          }
        } else {
          var cyclePath = spreadPath.slice(cycleIndex);
          var viaPath = cyclePath.slice(0, -1).map(function (s) {
            return '"' + s.name.value + '"';
          }).join(', ');
          context.reportError(new _GraphQLError.GraphQLError("Cannot spread fragment \"".concat(spreadName, "\" within itself") + (viaPath !== '' ? " via ".concat(viaPath, ".") : '.'), {
            nodes: cyclePath
          }));
        }
        spreadPath.pop();
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    spreadPathIndexByName[fragmentName] = undefined;
  }
}
},{"../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs"}],"../node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoUndefinedVariablesRule = NoUndefinedVariablesRule;
var _GraphQLError = require("../../error/GraphQLError.mjs");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * No undefined variables
 *
 * A GraphQL operation is only valid if all variables encountered, both directly
 * and via fragment spreads, are defined by that operation.
 *
 * See https://spec.graphql.org/draft/#sec-All-Variable-Uses-Defined
 */
function NoUndefinedVariablesRule(context) {
  var variableNameDefined = Object.create(null);
  return {
    OperationDefinition: {
      enter: function enter() {
        variableNameDefined = Object.create(null);
      },
      leave: function leave(operation) {
        var usages = context.getRecursiveVariableUsages(operation);
        var _iterator = _createForOfIteratorHelper(usages),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var node = _step.value.node;
            var varName = node.name.value;
            if (variableNameDefined[varName] !== true) {
              context.reportError(new _GraphQLError.GraphQLError(operation.name ? "Variable \"$".concat(varName, "\" is not defined by operation \"").concat(operation.name.value, "\".") : "Variable \"$".concat(varName, "\" is not defined."), {
                nodes: [node, operation]
              }));
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    },
    VariableDefinition: function VariableDefinition(node) {
      variableNameDefined[node.variable.name.value] = true;
    }
  };
}
},{"../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs"}],"../node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoUnusedFragmentsRule = NoUnusedFragmentsRule;
var _GraphQLError = require("../../error/GraphQLError.mjs");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * No unused fragments
 *
 * A GraphQL document is only valid if all fragment definitions are spread
 * within operations, or spread within other fragments spread within operations.
 *
 * See https://spec.graphql.org/draft/#sec-Fragments-Must-Be-Used
 */
function NoUnusedFragmentsRule(context) {
  var operationDefs = [];
  var fragmentDefs = [];
  return {
    OperationDefinition: function OperationDefinition(node) {
      operationDefs.push(node);
      return false;
    },
    FragmentDefinition: function FragmentDefinition(node) {
      fragmentDefs.push(node);
      return false;
    },
    Document: {
      leave: function leave() {
        var fragmentNameUsed = Object.create(null);
        for (var _i = 0, _operationDefs = operationDefs; _i < _operationDefs.length; _i++) {
          var operation = _operationDefs[_i];
          var _iterator = _createForOfIteratorHelper(context.getRecursivelyReferencedFragments(operation)),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var fragment = _step.value;
              fragmentNameUsed[fragment.name.value] = true;
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
        for (var _i2 = 0, _fragmentDefs = fragmentDefs; _i2 < _fragmentDefs.length; _i2++) {
          var fragmentDef = _fragmentDefs[_i2];
          var fragName = fragmentDef.name.value;
          if (fragmentNameUsed[fragName] !== true) {
            context.reportError(new _GraphQLError.GraphQLError("Fragment \"".concat(fragName, "\" is never used."), {
              nodes: fragmentDef
            }));
          }
        }
      }
    }
  };
}
},{"../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs"}],"../node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoUnusedVariablesRule = NoUnusedVariablesRule;
var _GraphQLError = require("../../error/GraphQLError.mjs");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * No unused variables
 *
 * A GraphQL operation is only valid if all variables defined by an operation
 * are used, either directly or within a spread fragment.
 *
 * See https://spec.graphql.org/draft/#sec-All-Variables-Used
 */
function NoUnusedVariablesRule(context) {
  var variableDefs = [];
  return {
    OperationDefinition: {
      enter: function enter() {
        variableDefs = [];
      },
      leave: function leave(operation) {
        var variableNameUsed = Object.create(null);
        var usages = context.getRecursiveVariableUsages(operation);
        var _iterator = _createForOfIteratorHelper(usages),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var node = _step.value.node;
            variableNameUsed[node.name.value] = true;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        for (var _i = 0, _variableDefs = variableDefs; _i < _variableDefs.length; _i++) {
          var variableDef = _variableDefs[_i];
          var variableName = variableDef.variable.name.value;
          if (variableNameUsed[variableName] !== true) {
            context.reportError(new _GraphQLError.GraphQLError(operation.name ? "Variable \"$".concat(variableName, "\" is never used in operation \"").concat(operation.name.value, "\".") : "Variable \"$".concat(variableName, "\" is never used."), {
              nodes: variableDef
            }));
          }
        }
      }
    },
    VariableDefinition: function VariableDefinition(def) {
      variableDefs.push(def);
    }
  };
}
},{"../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs"}],"../node_modules/graphql/utilities/sortValueNode.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sortValueNode = sortValueNode;
var _naturalCompare = require("../jsutils/naturalCompare.mjs");
var _kinds = require("../language/kinds.mjs");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Sort ValueNode.
 *
 * This function returns a sorted copy of the given ValueNode.
 *
 * @internal
 */

function sortValueNode(valueNode) {
  switch (valueNode.kind) {
    case _kinds.Kind.OBJECT:
      return _objectSpread(_objectSpread({}, valueNode), {}, {
        fields: sortFields(valueNode.fields)
      });
    case _kinds.Kind.LIST:
      return _objectSpread(_objectSpread({}, valueNode), {}, {
        values: valueNode.values.map(sortValueNode)
      });
    case _kinds.Kind.INT:
    case _kinds.Kind.FLOAT:
    case _kinds.Kind.STRING:
    case _kinds.Kind.BOOLEAN:
    case _kinds.Kind.NULL:
    case _kinds.Kind.ENUM:
    case _kinds.Kind.VARIABLE:
      return valueNode;
  }
}
function sortFields(fields) {
  return fields.map(function (fieldNode) {
    return _objectSpread(_objectSpread({}, fieldNode), {}, {
      value: sortValueNode(fieldNode.value)
    });
  }).sort(function (fieldA, fieldB) {
    return (0, _naturalCompare.naturalCompare)(fieldA.name.value, fieldB.name.value);
  });
}
},{"../jsutils/naturalCompare.mjs":"../node_modules/graphql/jsutils/naturalCompare.mjs","../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs"}],"../node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OverlappingFieldsCanBeMergedRule = OverlappingFieldsCanBeMergedRule;
var _inspect = require("../../jsutils/inspect.mjs");
var _GraphQLError = require("../../error/GraphQLError.mjs");
var _kinds = require("../../language/kinds.mjs");
var _printer = require("../../language/printer.mjs");
var _definition = require("../../type/definition.mjs");
var _sortValueNode = require("../../utilities/sortValueNode.mjs");
var _typeFromAST = require("../../utilities/typeFromAST.mjs");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function reasonMessage(reason) {
  if (Array.isArray(reason)) {
    return reason.map(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
        responseName = _ref2[0],
        subReason = _ref2[1];
      return "subfields \"".concat(responseName, "\" conflict because ") + reasonMessage(subReason);
    }).join(' and ');
  }
  return reason;
}
/**
 * Overlapping fields can be merged
 *
 * A selection set is only valid if all fields (including spreading any
 * fragments) either correspond to distinct response names or can be merged
 * without ambiguity.
 *
 * See https://spec.graphql.org/draft/#sec-Field-Selection-Merging
 */

function OverlappingFieldsCanBeMergedRule(context) {
  // A memoization for when two fragments are compared "between" each other for
  // conflicts. Two fragments may be compared many times, so memoizing this can
  // dramatically improve the performance of this validator.
  var comparedFragmentPairs = new PairSet(); // A cache for the "field map" and list of fragment names found in any given
  // selection set. Selection sets may be asked for this information multiple
  // times, so this improves the performance of this validator.

  var cachedFieldsAndFragmentNames = new Map();
  return {
    SelectionSet: function SelectionSet(selectionSet) {
      var conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, context.getParentType(), selectionSet);
      var _iterator = _createForOfIteratorHelper(conflicts),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray(_step.value, 3),
            _step$value$ = _slicedToArray(_step$value[0], 2),
            responseName = _step$value$[0],
            reason = _step$value$[1],
            fields1 = _step$value[1],
            fields2 = _step$value[2];
          var reasonMsg = reasonMessage(reason);
          context.reportError(new _GraphQLError.GraphQLError("Fields \"".concat(responseName, "\" conflict because ").concat(reasonMsg, ". Use different aliases on the fields to fetch both if this was intentional."), {
            nodes: fields1.concat(fields2)
          }));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  };
}

/**
 * Algorithm:
 *
 * Conflicts occur when two fields exist in a query which will produce the same
 * response name, but represent differing values, thus creating a conflict.
 * The algorithm below finds all conflicts via making a series of comparisons
 * between fields. In order to compare as few fields as possible, this makes
 * a series of comparisons "within" sets of fields and "between" sets of fields.
 *
 * Given any selection set, a collection produces both a set of fields by
 * also including all inline fragments, as well as a list of fragments
 * referenced by fragment spreads.
 *
 * A) Each selection set represented in the document first compares "within" its
 * collected set of fields, finding any conflicts between every pair of
 * overlapping fields.
 * Note: This is the *only time* that a the fields "within" a set are compared
 * to each other. After this only fields "between" sets are compared.
 *
 * B) Also, if any fragment is referenced in a selection set, then a
 * comparison is made "between" the original set of fields and the
 * referenced fragment.
 *
 * C) Also, if multiple fragments are referenced, then comparisons
 * are made "between" each referenced fragment.
 *
 * D) When comparing "between" a set of fields and a referenced fragment, first
 * a comparison is made between each field in the original set of fields and
 * each field in the the referenced set of fields.
 *
 * E) Also, if any fragment is referenced in the referenced selection set,
 * then a comparison is made "between" the original set of fields and the
 * referenced fragment (recursively referring to step D).
 *
 * F) When comparing "between" two fragments, first a comparison is made between
 * each field in the first referenced set of fields and each field in the the
 * second referenced set of fields.
 *
 * G) Also, any fragments referenced by the first must be compared to the
 * second, and any fragments referenced by the second must be compared to the
 * first (recursively referring to step F).
 *
 * H) When comparing two fields, if both have selection sets, then a comparison
 * is made "between" both selection sets, first comparing the set of fields in
 * the first selection set with the set of fields in the second.
 *
 * I) Also, if any fragment is referenced in either selection set, then a
 * comparison is made "between" the other set of fields and the
 * referenced fragment.
 *
 * J) Also, if two fragments are referenced in both selection sets, then a
 * comparison is made "between" the two fragments.
 *
 */
// Find all conflicts found "within" a selection set, including those found
// via spreading in fragments. Called when visiting each SelectionSet in the
// GraphQL Document.
function findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {
  var conflicts = [];
  var _getFieldsAndFragment = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet),
    _getFieldsAndFragment2 = _slicedToArray(_getFieldsAndFragment, 2),
    fieldMap = _getFieldsAndFragment2[0],
    fragmentNames = _getFieldsAndFragment2[1]; // (A) Find find all conflicts "within" the fields of this selection set.
  // Note: this is the *only place* `collectConflictsWithin` is called.

  collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap);
  if (fragmentNames.length !== 0) {
    // (B) Then collect conflicts between these fields and those represented by
    // each spread fragment name found.
    for (var i = 0; i < fragmentNames.length; i++) {
      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fieldMap, fragmentNames[i]); // (C) Then compare this fragment with all other fragments found in this
      // selection set to collect conflicts between fragments spread together.
      // This compares each item in the list of fragment names to every other
      // item in that same list (except for itself).

      for (var j = i + 1; j < fragmentNames.length; j++) {
        collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fragmentNames[i], fragmentNames[j]);
      }
    }
  }
  return conflicts;
} // Collect all conflicts found between a set of fields and a fragment reference
// including via spreading in any nested fragments.

function collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {
  var fragment = context.getFragment(fragmentName);
  if (!fragment) {
    return;
  }
  var _getReferencedFieldsA = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment),
    _getReferencedFieldsA2 = _slicedToArray(_getReferencedFieldsA, 2),
    fieldMap2 = _getReferencedFieldsA2[0],
    referencedFragmentNames = _getReferencedFieldsA2[1]; // Do not compare a fragment's fieldMap to itself.

  if (fieldMap === fieldMap2) {
    return;
  } // (D) First collect any conflicts between the provided collection of fields
  // and the collection of fields represented by the given fragment.

  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fieldMap2); // (E) Then collect any conflicts between the provided collection of fields
  // and any fragment names found in the given fragment.
  var _iterator2 = _createForOfIteratorHelper(referencedFragmentNames),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var referencedFragmentName = _step2.value;
      // Memoize so two fragments are not compared for conflicts more than once.
      if (comparedFragmentPairs.has(referencedFragmentName, fragmentName, areMutuallyExclusive)) {
        continue;
      }
      comparedFragmentPairs.add(referencedFragmentName, fragmentName, areMutuallyExclusive);
      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, referencedFragmentName);
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
} // Collect all conflicts found between two fragments, including via spreading in
// any nested fragments.

function collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {
  // No need to compare a fragment to itself.
  if (fragmentName1 === fragmentName2) {
    return;
  } // Memoize so two fragments are not compared for conflicts more than once.

  if (comparedFragmentPairs.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {
    return;
  }
  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);
  var fragment1 = context.getFragment(fragmentName1);
  var fragment2 = context.getFragment(fragmentName2);
  if (!fragment1 || !fragment2) {
    return;
  }
  var _getReferencedFieldsA3 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1),
    _getReferencedFieldsA4 = _slicedToArray(_getReferencedFieldsA3, 2),
    fieldMap1 = _getReferencedFieldsA4[0],
    referencedFragmentNames1 = _getReferencedFieldsA4[1];
  var _getReferencedFieldsA5 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2),
    _getReferencedFieldsA6 = _slicedToArray(_getReferencedFieldsA5, 2),
    fieldMap2 = _getReferencedFieldsA6[0],
    referencedFragmentNames2 = _getReferencedFieldsA6[1]; // (F) First, collect all conflicts between these two collections of fields
  // (not including any nested fragments).

  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (G) Then collect conflicts between the first fragment and any nested
  // fragments spread in the second fragment.
  var _iterator3 = _createForOfIteratorHelper(referencedFragmentNames2),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var referencedFragmentName2 = _step3.value;
      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, referencedFragmentName2);
    } // (G) Then collect conflicts between the second fragment and any nested
    // fragments spread in the first fragment.
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  var _iterator4 = _createForOfIteratorHelper(referencedFragmentNames1),
    _step4;
  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var referencedFragmentName1 = _step4.value;
      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, referencedFragmentName1, fragmentName2);
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
} // Find all conflicts found between two selection sets, including those found
// via spreading in fragments. Called when determining if conflicts exist
// between the sub-fields of two overlapping fields.

function findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {
  var conflicts = [];
  var _getFieldsAndFragment3 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1),
    _getFieldsAndFragment4 = _slicedToArray(_getFieldsAndFragment3, 2),
    fieldMap1 = _getFieldsAndFragment4[0],
    fragmentNames1 = _getFieldsAndFragment4[1];
  var _getFieldsAndFragment5 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2),
    _getFieldsAndFragment6 = _slicedToArray(_getFieldsAndFragment5, 2),
    fieldMap2 = _getFieldsAndFragment6[0],
    fragmentNames2 = _getFieldsAndFragment6[1]; // (H) First, collect all conflicts between these two collections of field.

  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (I) Then collect conflicts between the first collection of fields and
  // those referenced by each fragment name associated with the second.
  var _iterator5 = _createForOfIteratorHelper(fragmentNames2),
    _step5;
  try {
    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      var fragmentName2 = _step5.value;
      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fragmentName2);
    } // (I) Then collect conflicts between the second collection of fields and
    // those referenced by each fragment name associated with the first.
  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }
  var _iterator6 = _createForOfIteratorHelper(fragmentNames1),
    _step6;
  try {
    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
      var fragmentName1 = _step6.value;
      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap2, fragmentName1);
    } // (J) Also collect conflicts between any fragment names by the first and
    // fragment names by the second. This compares each item in the first set of
    // names to each item in the second set of names.
  } catch (err) {
    _iterator6.e(err);
  } finally {
    _iterator6.f();
  }
  var _iterator7 = _createForOfIteratorHelper(fragmentNames1),
    _step7;
  try {
    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
      var _fragmentName = _step7.value;
      var _iterator8 = _createForOfIteratorHelper(fragmentNames2),
        _step8;
      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var _fragmentName2 = _step8.value;
          collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, _fragmentName, _fragmentName2);
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
    }
  } catch (err) {
    _iterator7.e(err);
  } finally {
    _iterator7.f();
  }
  return conflicts;
} // Collect all Conflicts "within" one collection of fields.

function collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {
  // A field map is a keyed collection, where each key represents a response
  // name and the value at that key is a list of all fields which provide that
  // response name. For every response name, if there are multiple fields, they
  // must be compared to find a potential conflict.
  for (var _i = 0, _Object$entries = Object.entries(fieldMap); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
      responseName = _Object$entries$_i[0],
      fields = _Object$entries$_i[1];
    // This compares every field in the list to every other field in this list
    // (except to itself). If the list only has one item, nothing needs to
    // be compared.
    if (fields.length > 1) {
      for (var i = 0; i < fields.length; i++) {
        for (var j = i + 1; j < fields.length; j++) {
          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, false,
          // within one collection is never mutually exclusive
          responseName, fields[i], fields[j]);
          if (conflict) {
            conflicts.push(conflict);
          }
        }
      }
    }
  }
} // Collect all Conflicts between two collections of fields. This is similar to,
// but different from the `collectConflictsWithin` function above. This check
// assumes that `collectConflictsWithin` has already been called on each
// provided collection of fields. This is true because this validator traverses
// each individual selection set.

function collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {
  // A field map is a keyed collection, where each key represents a response
  // name and the value at that key is a list of all fields which provide that
  // response name. For any response name which appears in both provided field
  // maps, each field from the first field map must be compared to every field
  // in the second field map to find potential conflicts.
  for (var _i2 = 0, _Object$entries2 = Object.entries(fieldMap1); _i2 < _Object$entries2.length; _i2++) {
    var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),
      responseName = _Object$entries2$_i[0],
      fields1 = _Object$entries2$_i[1];
    var fields2 = fieldMap2[responseName];
    if (fields2) {
      var _iterator9 = _createForOfIteratorHelper(fields1),
        _step9;
      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var field1 = _step9.value;
          var _iterator10 = _createForOfIteratorHelper(fields2),
            _step10;
          try {
            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
              var field2 = _step10.value;
              var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2);
              if (conflict) {
                conflicts.push(conflict);
              }
            }
          } catch (err) {
            _iterator10.e(err);
          } finally {
            _iterator10.f();
          }
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }
    }
  }
} // Determines if there is a conflict between two particular fields, including
// comparing their sub-fields.

function findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {
  var _field = _slicedToArray(field1, 3),
    parentType1 = _field[0],
    node1 = _field[1],
    def1 = _field[2];
  var _field2 = _slicedToArray(field2, 3),
    parentType2 = _field2[0],
    node2 = _field2[1],
    def2 = _field2[2]; // If it is known that two fields could not possibly apply at the same
  // time, due to the parent types, then it is safe to permit them to diverge
  // in aliased field or arguments used as they will not present any ambiguity
  // by differing.
  // It is known that two parent types could never overlap if they are
  // different Object types. Interface or Union types might overlap - if not
  // in the current state of the schema, then perhaps in some future version,
  // thus may not safely diverge.

  var areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && (0, _definition.isObjectType)(parentType1) && (0, _definition.isObjectType)(parentType2);
  if (!areMutuallyExclusive) {
    // Two aliases must refer to the same field.
    var name1 = node1.name.value;
    var name2 = node2.name.value;
    if (name1 !== name2) {
      return [[responseName, "\"".concat(name1, "\" and \"").concat(name2, "\" are different fields")], [node1], [node2]];
    } // Two field calls must have the same arguments.

    if (!sameArguments(node1, node2)) {
      return [[responseName, 'they have differing arguments'], [node1], [node2]];
    }
  } // The return type for each field.

  var type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;
  var type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;
  if (type1 && type2 && doTypesConflict(type1, type2)) {
    return [[responseName, "they return conflicting types \"".concat((0, _inspect.inspect)(type1), "\" and \"").concat((0, _inspect.inspect)(type2), "\"")], [node1], [node2]];
  } // Collect and compare sub-fields. Use the same "visited fragment names" list
  // for both collections so fields in a fragment reference are never
  // compared to themselves.

  var selectionSet1 = node1.selectionSet;
  var selectionSet2 = node2.selectionSet;
  if (selectionSet1 && selectionSet2) {
    var conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, (0, _definition.getNamedType)(type1), selectionSet1, (0, _definition.getNamedType)(type2), selectionSet2);
    return subfieldConflicts(conflicts, responseName, node1, node2);
  }
}
function sameArguments(node1, node2) {
  var args1 = node1.arguments;
  var args2 = node2.arguments;
  if (args1 === undefined || args1.length === 0) {
    return args2 === undefined || args2.length === 0;
  }
  if (args2 === undefined || args2.length === 0) {
    return false;
  }
  /* c8 ignore next */

  if (args1.length !== args2.length) {
    /* c8 ignore next */
    return false;
    /* c8 ignore next */
  }
  var values2 = new Map(args2.map(function (_ref3) {
    var name = _ref3.name,
      value = _ref3.value;
    return [name.value, value];
  }));
  return args1.every(function (arg1) {
    var value1 = arg1.value;
    var value2 = values2.get(arg1.name.value);
    if (value2 === undefined) {
      return false;
    }
    return stringifyValue(value1) === stringifyValue(value2);
  });
}
function stringifyValue(value) {
  return (0, _printer.print)((0, _sortValueNode.sortValueNode)(value));
} // Two types conflict if both types could not apply to a value simultaneously.
// Composite types are ignored as their individual field types will be compared
// later recursively. However List and Non-Null types must match.

function doTypesConflict(type1, type2) {
  if ((0, _definition.isListType)(type1)) {
    return (0, _definition.isListType)(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;
  }
  if ((0, _definition.isListType)(type2)) {
    return true;
  }
  if ((0, _definition.isNonNullType)(type1)) {
    return (0, _definition.isNonNullType)(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;
  }
  if ((0, _definition.isNonNullType)(type2)) {
    return true;
  }
  if ((0, _definition.isLeafType)(type1) || (0, _definition.isLeafType)(type2)) {
    return type1 !== type2;
  }
  return false;
} // Given a selection set, return the collection of fields (a mapping of response
// name to field nodes and definitions) as well as a list of fragment names
// referenced via fragment spreads.

function getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {
  var cached = cachedFieldsAndFragmentNames.get(selectionSet);
  if (cached) {
    return cached;
  }
  var nodeAndDefs = Object.create(null);
  var fragmentNames = Object.create(null);
  _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);
  var result = [nodeAndDefs, Object.keys(fragmentNames)];
  cachedFieldsAndFragmentNames.set(selectionSet, result);
  return result;
} // Given a reference to a fragment, return the represented collection of fields
// as well as a list of nested fragment names referenced via fragment spreads.

function getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {
  // Short-circuit building a type from the node if possible.
  var cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);
  if (cached) {
    return cached;
  }
  var fragmentType = (0, _typeFromAST.typeFromAST)(context.getSchema(), fragment.typeCondition);
  return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);
}
function _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {
  var _iterator11 = _createForOfIteratorHelper(selectionSet.selections),
    _step11;
  try {
    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
      var selection = _step11.value;
      switch (selection.kind) {
        case _kinds.Kind.FIELD:
          {
            var fieldName = selection.name.value;
            var fieldDef = void 0;
            if ((0, _definition.isObjectType)(parentType) || (0, _definition.isInterfaceType)(parentType)) {
              fieldDef = parentType.getFields()[fieldName];
            }
            var responseName = selection.alias ? selection.alias.value : fieldName;
            if (!nodeAndDefs[responseName]) {
              nodeAndDefs[responseName] = [];
            }
            nodeAndDefs[responseName].push([parentType, selection, fieldDef]);
            break;
          }
        case _kinds.Kind.FRAGMENT_SPREAD:
          fragmentNames[selection.name.value] = true;
          break;
        case _kinds.Kind.INLINE_FRAGMENT:
          {
            var typeCondition = selection.typeCondition;
            var inlineFragmentType = typeCondition ? (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition) : parentType;
            _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);
            break;
          }
      }
    }
  } catch (err) {
    _iterator11.e(err);
  } finally {
    _iterator11.f();
  }
} // Given a series of Conflicts which occurred between two sub-fields, generate
// a single Conflict.

function subfieldConflicts(conflicts, responseName, node1, node2) {
  if (conflicts.length > 0) {
    return [[responseName, conflicts.map(function (_ref4) {
      var _ref5 = _slicedToArray(_ref4, 1),
        reason = _ref5[0];
      return reason;
    })], [node1].concat(_toConsumableArray(conflicts.map(function (_ref6) {
      var _ref7 = _slicedToArray(_ref6, 2),
        fields1 = _ref7[1];
      return fields1;
    }).flat())), [node2].concat(_toConsumableArray(conflicts.map(function (_ref8) {
      var _ref9 = _slicedToArray(_ref8, 3),
        fields2 = _ref9[2];
      return fields2;
    }).flat()))];
  }
}
/**
 * A way to keep track of pairs of things when the ordering of the pair does not matter.
 */
var PairSet = /*#__PURE__*/function () {
  function PairSet() {
    _classCallCheck(this, PairSet);
    this._data = new Map();
  }
  _createClass(PairSet, [{
    key: "has",
    value: function has(a, b, areMutuallyExclusive) {
      var _this$_data$get;
      var _ref10 = a < b ? [a, b] : [b, a],
        _ref11 = _slicedToArray(_ref10, 2),
        key1 = _ref11[0],
        key2 = _ref11[1];
      var result = (_this$_data$get = this._data.get(key1)) === null || _this$_data$get === void 0 ? void 0 : _this$_data$get.get(key2);
      if (result === undefined) {
        return false;
      } // areMutuallyExclusive being false is a superset of being true, hence if
      // we want to know if this PairSet "has" these two with no exclusivity,
      // we have to ensure it was added as such.

      return areMutuallyExclusive ? true : areMutuallyExclusive === result;
    }
  }, {
    key: "add",
    value: function add(a, b, areMutuallyExclusive) {
      var _ref12 = a < b ? [a, b] : [b, a],
        _ref13 = _slicedToArray(_ref12, 2),
        key1 = _ref13[0],
        key2 = _ref13[1];
      var map = this._data.get(key1);
      if (map === undefined) {
        this._data.set(key1, new Map([[key2, areMutuallyExclusive]]));
      } else {
        map.set(key2, areMutuallyExclusive);
      }
    }
  }]);
  return PairSet;
}();
},{"../../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs","../../language/printer.mjs":"../node_modules/graphql/language/printer.mjs","../../type/definition.mjs":"../node_modules/graphql/type/definition.mjs","../../utilities/sortValueNode.mjs":"../node_modules/graphql/utilities/sortValueNode.mjs","../../utilities/typeFromAST.mjs":"../node_modules/graphql/utilities/typeFromAST.mjs"}],"../node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PossibleFragmentSpreadsRule = PossibleFragmentSpreadsRule;
var _inspect = require("../../jsutils/inspect.mjs");
var _GraphQLError = require("../../error/GraphQLError.mjs");
var _definition = require("../../type/definition.mjs");
var _typeComparators = require("../../utilities/typeComparators.mjs");
var _typeFromAST = require("../../utilities/typeFromAST.mjs");
/**
 * Possible fragment spread
 *
 * A fragment spread is only valid if the type condition could ever possibly
 * be true: if there is a non-empty intersection of the possible parent types,
 * and possible types which pass the type condition.
 */
function PossibleFragmentSpreadsRule(context) {
  return {
    InlineFragment: function InlineFragment(node) {
      var fragType = context.getType();
      var parentType = context.getParentType();
      if ((0, _definition.isCompositeType)(fragType) && (0, _definition.isCompositeType)(parentType) && !(0, _typeComparators.doTypesOverlap)(context.getSchema(), fragType, parentType)) {
        var parentTypeStr = (0, _inspect.inspect)(parentType);
        var fragTypeStr = (0, _inspect.inspect)(fragType);
        context.reportError(new _GraphQLError.GraphQLError("Fragment cannot be spread here as objects of type \"".concat(parentTypeStr, "\" can never be of type \"").concat(fragTypeStr, "\"."), {
          nodes: node
        }));
      }
    },
    FragmentSpread: function FragmentSpread(node) {
      var fragName = node.name.value;
      var fragType = getFragmentType(context, fragName);
      var parentType = context.getParentType();
      if (fragType && parentType && !(0, _typeComparators.doTypesOverlap)(context.getSchema(), fragType, parentType)) {
        var parentTypeStr = (0, _inspect.inspect)(parentType);
        var fragTypeStr = (0, _inspect.inspect)(fragType);
        context.reportError(new _GraphQLError.GraphQLError("Fragment \"".concat(fragName, "\" cannot be spread here as objects of type \"").concat(parentTypeStr, "\" can never be of type \"").concat(fragTypeStr, "\"."), {
          nodes: node
        }));
      }
    }
  };
}
function getFragmentType(context, name) {
  var frag = context.getFragment(name);
  if (frag) {
    var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), frag.typeCondition);
    if ((0, _definition.isCompositeType)(type)) {
      return type;
    }
  }
}
},{"../../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../../type/definition.mjs":"../node_modules/graphql/type/definition.mjs","../../utilities/typeComparators.mjs":"../node_modules/graphql/utilities/typeComparators.mjs","../../utilities/typeFromAST.mjs":"../node_modules/graphql/utilities/typeFromAST.mjs"}],"../node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PossibleTypeExtensionsRule = PossibleTypeExtensionsRule;
var _didYouMean = require("../../jsutils/didYouMean.mjs");
var _inspect = require("../../jsutils/inspect.mjs");
var _invariant = require("../../jsutils/invariant.mjs");
var _suggestionList = require("../../jsutils/suggestionList.mjs");
var _GraphQLError = require("../../error/GraphQLError.mjs");
var _kinds = require("../../language/kinds.mjs");
var _predicates = require("../../language/predicates.mjs");
var _definition = require("../../type/definition.mjs");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Possible type extension
 *
 * A type extension is only valid if the type is defined and has the same kind.
 */
function PossibleTypeExtensionsRule(context) {
  var schema = context.getSchema();
  var definedTypes = Object.create(null);
  var _iterator = _createForOfIteratorHelper(context.getDocument().definitions),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var def = _step.value;
      if ((0, _predicates.isTypeDefinitionNode)(def)) {
        definedTypes[def.name.value] = def;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return {
    ScalarTypeExtension: checkExtension,
    ObjectTypeExtension: checkExtension,
    InterfaceTypeExtension: checkExtension,
    UnionTypeExtension: checkExtension,
    EnumTypeExtension: checkExtension,
    InputObjectTypeExtension: checkExtension
  };
  function checkExtension(node) {
    var typeName = node.name.value;
    var defNode = definedTypes[typeName];
    var existingType = schema === null || schema === void 0 ? void 0 : schema.getType(typeName);
    var expectedKind;
    if (defNode) {
      expectedKind = defKindToExtKind[defNode.kind];
    } else if (existingType) {
      expectedKind = typeToExtKind(existingType);
    }
    if (expectedKind) {
      if (expectedKind !== node.kind) {
        var kindStr = extensionKindToTypeName(node.kind);
        context.reportError(new _GraphQLError.GraphQLError("Cannot extend non-".concat(kindStr, " type \"").concat(typeName, "\"."), {
          nodes: defNode ? [defNode, node] : node
        }));
      }
    } else {
      var allTypeNames = Object.keys(_objectSpread(_objectSpread({}, definedTypes), schema === null || schema === void 0 ? void 0 : schema.getTypeMap()));
      var suggestedTypes = (0, _suggestionList.suggestionList)(typeName, allTypeNames);
      context.reportError(new _GraphQLError.GraphQLError("Cannot extend type \"".concat(typeName, "\" because it is not defined.") + (0, _didYouMean.didYouMean)(suggestedTypes), {
        nodes: node.name
      }));
    }
  }
}
var defKindToExtKind = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, _kinds.Kind.SCALAR_TYPE_DEFINITION, _kinds.Kind.SCALAR_TYPE_EXTENSION), _kinds.Kind.OBJECT_TYPE_DEFINITION, _kinds.Kind.OBJECT_TYPE_EXTENSION), _kinds.Kind.INTERFACE_TYPE_DEFINITION, _kinds.Kind.INTERFACE_TYPE_EXTENSION), _kinds.Kind.UNION_TYPE_DEFINITION, _kinds.Kind.UNION_TYPE_EXTENSION), _kinds.Kind.ENUM_TYPE_DEFINITION, _kinds.Kind.ENUM_TYPE_EXTENSION), _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION, _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION);
function typeToExtKind(type) {
  if ((0, _definition.isScalarType)(type)) {
    return _kinds.Kind.SCALAR_TYPE_EXTENSION;
  }
  if ((0, _definition.isObjectType)(type)) {
    return _kinds.Kind.OBJECT_TYPE_EXTENSION;
  }
  if ((0, _definition.isInterfaceType)(type)) {
    return _kinds.Kind.INTERFACE_TYPE_EXTENSION;
  }
  if ((0, _definition.isUnionType)(type)) {
    return _kinds.Kind.UNION_TYPE_EXTENSION;
  }
  if ((0, _definition.isEnumType)(type)) {
    return _kinds.Kind.ENUM_TYPE_EXTENSION;
  }
  if ((0, _definition.isInputObjectType)(type)) {
    return _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION;
  }
  /* c8 ignore next 3 */
  // Not reachable. All possible types have been considered

  false || (0, _invariant.invariant)(false, 'Unexpected type: ' + (0, _inspect.inspect)(type));
}
function extensionKindToTypeName(kind) {
  switch (kind) {
    case _kinds.Kind.SCALAR_TYPE_EXTENSION:
      return 'scalar';
    case _kinds.Kind.OBJECT_TYPE_EXTENSION:
      return 'object';
    case _kinds.Kind.INTERFACE_TYPE_EXTENSION:
      return 'interface';
    case _kinds.Kind.UNION_TYPE_EXTENSION:
      return 'union';
    case _kinds.Kind.ENUM_TYPE_EXTENSION:
      return 'enum';
    case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:
      return 'input object';
    // Not reachable. All possible types have been considered

    /* c8 ignore next */

    default:
      false || (0, _invariant.invariant)(false, 'Unexpected kind: ' + (0, _inspect.inspect)(kind));
  }
}
},{"../../jsutils/didYouMean.mjs":"../node_modules/graphql/jsutils/didYouMean.mjs","../../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","../../jsutils/invariant.mjs":"../node_modules/graphql/jsutils/invariant.mjs","../../jsutils/suggestionList.mjs":"../node_modules/graphql/jsutils/suggestionList.mjs","../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs","../../language/predicates.mjs":"../node_modules/graphql/language/predicates.mjs","../../type/definition.mjs":"../node_modules/graphql/type/definition.mjs"}],"../node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProvidedRequiredArgumentsOnDirectivesRule = ProvidedRequiredArgumentsOnDirectivesRule;
exports.ProvidedRequiredArgumentsRule = ProvidedRequiredArgumentsRule;
var _inspect = require("../../jsutils/inspect.mjs");
var _keyMap = require("../../jsutils/keyMap.mjs");
var _GraphQLError = require("../../error/GraphQLError.mjs");
var _kinds = require("../../language/kinds.mjs");
var _printer = require("../../language/printer.mjs");
var _definition = require("../../type/definition.mjs");
var _directives = require("../../type/directives.mjs");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Provided required arguments
 *
 * A field or directive is only valid if all required (non-null without a
 * default value) field arguments have been provided.
 */
function ProvidedRequiredArgumentsRule(context) {
  return _objectSpread(_objectSpread({}, ProvidedRequiredArgumentsOnDirectivesRule(context)), {}, {
    Field: {
      // Validate on leave to allow for deeper errors to appear first.
      leave: function leave(fieldNode) {
        var _fieldNode$arguments;
        var fieldDef = context.getFieldDef();
        if (!fieldDef) {
          return false;
        }
        var providedArgs = new Set(
        // FIXME: https://github.com/graphql/graphql-js/issues/2203
        /* c8 ignore next */
        (_fieldNode$arguments = fieldNode.arguments) === null || _fieldNode$arguments === void 0 ? void 0 : _fieldNode$arguments.map(function (arg) {
          return arg.name.value;
        }));
        var _iterator = _createForOfIteratorHelper(fieldDef.args),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var argDef = _step.value;
            if (!providedArgs.has(argDef.name) && (0, _definition.isRequiredArgument)(argDef)) {
              var argTypeStr = (0, _inspect.inspect)(argDef.type);
              context.reportError(new _GraphQLError.GraphQLError("Field \"".concat(fieldDef.name, "\" argument \"").concat(argDef.name, "\" of type \"").concat(argTypeStr, "\" is required, but it was not provided."), {
                nodes: fieldNode
              }));
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }
  });
}
/**
 * @internal
 */

function ProvidedRequiredArgumentsOnDirectivesRule(context) {
  var _schema$getDirectives;
  var requiredArgsMap = Object.create(null);
  var schema = context.getSchema();
  var definedDirectives = (_schema$getDirectives = schema === null || schema === void 0 ? void 0 : schema.getDirectives()) !== null && _schema$getDirectives !== void 0 ? _schema$getDirectives : _directives.specifiedDirectives;
  var _iterator2 = _createForOfIteratorHelper(definedDirectives),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var directive = _step2.value;
      requiredArgsMap[directive.name] = (0, _keyMap.keyMap)(directive.args.filter(_definition.isRequiredArgument), function (arg) {
        return arg.name;
      });
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  var astDefinitions = context.getDocument().definitions;
  var _iterator3 = _createForOfIteratorHelper(astDefinitions),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var def = _step3.value;
      if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
        var _def$arguments;

        // FIXME: https://github.com/graphql/graphql-js/issues/2203

        /* c8 ignore next */
        var argNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];
        requiredArgsMap[def.name.value] = (0, _keyMap.keyMap)(argNodes.filter(isRequiredArgumentNode), function (arg) {
          return arg.name.value;
        });
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  return {
    Directive: {
      // Validate on leave to allow for deeper errors to appear first.
      leave: function leave(directiveNode) {
        var directiveName = directiveNode.name.value;
        var requiredArgs = requiredArgsMap[directiveName];
        if (requiredArgs) {
          var _directiveNode$argume;

          // FIXME: https://github.com/graphql/graphql-js/issues/2203

          /* c8 ignore next */
          var argNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];
          var argNodeMap = new Set(argNodes.map(function (arg) {
            return arg.name.value;
          }));
          for (var _i = 0, _Object$entries = Object.entries(requiredArgs); _i < _Object$entries.length; _i++) {
            var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
              argName = _Object$entries$_i[0],
              argDef = _Object$entries$_i[1];
            if (!argNodeMap.has(argName)) {
              var argType = (0, _definition.isType)(argDef.type) ? (0, _inspect.inspect)(argDef.type) : (0, _printer.print)(argDef.type);
              context.reportError(new _GraphQLError.GraphQLError("Directive \"@".concat(directiveName, "\" argument \"").concat(argName, "\" of type \"").concat(argType, "\" is required, but it was not provided."), {
                nodes: directiveNode
              }));
            }
          }
        }
      }
    }
  };
}
function isRequiredArgumentNode(arg) {
  return arg.type.kind === _kinds.Kind.NON_NULL_TYPE && arg.defaultValue == null;
}
},{"../../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","../../jsutils/keyMap.mjs":"../node_modules/graphql/jsutils/keyMap.mjs","../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs","../../language/printer.mjs":"../node_modules/graphql/language/printer.mjs","../../type/definition.mjs":"../node_modules/graphql/type/definition.mjs","../../type/directives.mjs":"../node_modules/graphql/type/directives.mjs"}],"../node_modules/graphql/validation/rules/ScalarLeafsRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScalarLeafsRule = ScalarLeafsRule;
var _inspect = require("../../jsutils/inspect.mjs");
var _GraphQLError = require("../../error/GraphQLError.mjs");
var _definition = require("../../type/definition.mjs");
/**
 * Scalar leafs
 *
 * A GraphQL document is valid only if all leaf fields (fields without
 * sub selections) are of scalar or enum types.
 */
function ScalarLeafsRule(context) {
  return {
    Field: function Field(node) {
      var type = context.getType();
      var selectionSet = node.selectionSet;
      if (type) {
        if ((0, _definition.isLeafType)((0, _definition.getNamedType)(type))) {
          if (selectionSet) {
            var fieldName = node.name.value;
            var typeStr = (0, _inspect.inspect)(type);
            context.reportError(new _GraphQLError.GraphQLError("Field \"".concat(fieldName, "\" must not have a selection since type \"").concat(typeStr, "\" has no subfields."), {
              nodes: selectionSet
            }));
          }
        } else if (!selectionSet) {
          var _fieldName = node.name.value;
          var _typeStr = (0, _inspect.inspect)(type);
          context.reportError(new _GraphQLError.GraphQLError("Field \"".concat(_fieldName, "\" of type \"").concat(_typeStr, "\" must have a selection of subfields. Did you mean \"").concat(_fieldName, " { ... }\"?"), {
            nodes: node
          }));
        }
      }
    }
  };
}
},{"../../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../../type/definition.mjs":"../node_modules/graphql/type/definition.mjs"}],"../node_modules/graphql/jsutils/printPathArray.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.printPathArray = printPathArray;
/**
 * Build a string describing the path.
 */
function printPathArray(path) {
  return path.map(function (key) {
    return typeof key === 'number' ? '[' + key.toString() + ']' : '.' + key;
  }).join('');
}
},{}],"../node_modules/graphql/jsutils/Path.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addPath = addPath;
exports.pathToArray = pathToArray;
/**
 * Given a Path and a key, return a new Path containing the new key.
 */
function addPath(prev, key, typename) {
  return {
    prev: prev,
    key: key,
    typename: typename
  };
}
/**
 * Given a Path, return an Array of the path keys.
 */

function pathToArray(path) {
  var flattened = [];
  var curr = path;
  while (curr) {
    flattened.push(curr.key);
    curr = curr.prev;
  }
  return flattened.reverse();
}
},{}],"../node_modules/graphql/utilities/coerceInputValue.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.coerceInputValue = coerceInputValue;
var _didYouMean = require("../jsutils/didYouMean.mjs");
var _inspect = require("../jsutils/inspect.mjs");
var _invariant = require("../jsutils/invariant.mjs");
var _isIterableObject = require("../jsutils/isIterableObject.mjs");
var _isObjectLike = require("../jsutils/isObjectLike.mjs");
var _Path = require("../jsutils/Path.mjs");
var _printPathArray = require("../jsutils/printPathArray.mjs");
var _suggestionList = require("../jsutils/suggestionList.mjs");
var _GraphQLError = require("../error/GraphQLError.mjs");
var _definition = require("../type/definition.mjs");
/**
 * Coerces a JavaScript value given a GraphQL Input Type.
 */
function coerceInputValue(inputValue, type) {
  var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultOnError;
  return coerceInputValueImpl(inputValue, type, onError, undefined);
}
function defaultOnError(path, invalidValue, error) {
  var errorPrefix = 'Invalid value ' + (0, _inspect.inspect)(invalidValue);
  if (path.length > 0) {
    errorPrefix += " at \"value".concat((0, _printPathArray.printPathArray)(path), "\"");
  }
  error.message = errorPrefix + ': ' + error.message;
  throw error;
}
function coerceInputValueImpl(inputValue, type, onError, path) {
  if ((0, _definition.isNonNullType)(type)) {
    if (inputValue != null) {
      return coerceInputValueImpl(inputValue, type.ofType, onError, path);
    }
    onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError("Expected non-nullable type \"".concat((0, _inspect.inspect)(type), "\" not to be null.")));
    return;
  }
  if (inputValue == null) {
    // Explicitly return the value null.
    return null;
  }
  if ((0, _definition.isListType)(type)) {
    var itemType = type.ofType;
    if ((0, _isIterableObject.isIterableObject)(inputValue)) {
      return Array.from(inputValue, function (itemValue, index) {
        var itemPath = (0, _Path.addPath)(path, index, undefined);
        return coerceInputValueImpl(itemValue, itemType, onError, itemPath);
      });
    } // Lists accept a non-list value as a list of one.

    return [coerceInputValueImpl(inputValue, itemType, onError, path)];
  }
  if ((0, _definition.isInputObjectType)(type)) {
    if (!(0, _isObjectLike.isObjectLike)(inputValue)) {
      onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError("Expected type \"".concat(type.name, "\" to be an object.")));
      return;
    }
    var coercedValue = {};
    var fieldDefs = type.getFields();
    for (var _i = 0, _Object$values = Object.values(fieldDefs); _i < _Object$values.length; _i++) {
      var field = _Object$values[_i];
      var fieldValue = inputValue[field.name];
      if (fieldValue === undefined) {
        if (field.defaultValue !== undefined) {
          coercedValue[field.name] = field.defaultValue;
        } else if ((0, _definition.isNonNullType)(field.type)) {
          var typeStr = (0, _inspect.inspect)(field.type);
          onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError("Field \"".concat(field.name, "\" of required type \"").concat(typeStr, "\" was not provided.")));
        }
        continue;
      }
      coercedValue[field.name] = coerceInputValueImpl(fieldValue, field.type, onError, (0, _Path.addPath)(path, field.name, type.name));
    } // Ensure every provided field is defined.

    for (var _i2 = 0, _Object$keys = Object.keys(inputValue); _i2 < _Object$keys.length; _i2++) {
      var fieldName = _Object$keys[_i2];
      if (!fieldDefs[fieldName]) {
        var suggestions = (0, _suggestionList.suggestionList)(fieldName, Object.keys(type.getFields()));
        onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError("Field \"".concat(fieldName, "\" is not defined by type \"").concat(type.name, "\".") + (0, _didYouMean.didYouMean)(suggestions)));
      }
    }
    return coercedValue;
  }
  if ((0, _definition.isLeafType)(type)) {
    var parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),
    // which can throw to indicate failure. If it throws, maintain a reference
    // to the original error.

    try {
      parseResult = type.parseValue(inputValue);
    } catch (error) {
      if (error instanceof _GraphQLError.GraphQLError) {
        onError((0, _Path.pathToArray)(path), inputValue, error);
      } else {
        onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError("Expected type \"".concat(type.name, "\". ") + error.message, {
          originalError: error
        }));
      }
      return;
    }
    if (parseResult === undefined) {
      onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError("Expected type \"".concat(type.name, "\".")));
    }
    return parseResult;
  }
  /* c8 ignore next 3 */
  // Not reachable, all possible types have been considered.

  false || (0, _invariant.invariant)(false, 'Unexpected input type: ' + (0, _inspect.inspect)(type));
}
},{"../jsutils/didYouMean.mjs":"../node_modules/graphql/jsutils/didYouMean.mjs","../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","../jsutils/invariant.mjs":"../node_modules/graphql/jsutils/invariant.mjs","../jsutils/isIterableObject.mjs":"../node_modules/graphql/jsutils/isIterableObject.mjs","../jsutils/isObjectLike.mjs":"../node_modules/graphql/jsutils/isObjectLike.mjs","../jsutils/Path.mjs":"../node_modules/graphql/jsutils/Path.mjs","../jsutils/printPathArray.mjs":"../node_modules/graphql/jsutils/printPathArray.mjs","../jsutils/suggestionList.mjs":"../node_modules/graphql/jsutils/suggestionList.mjs","../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../type/definition.mjs":"../node_modules/graphql/type/definition.mjs"}],"../node_modules/graphql/utilities/valueFromAST.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.valueFromAST = valueFromAST;
var _inspect = require("../jsutils/inspect.mjs");
var _invariant = require("../jsutils/invariant.mjs");
var _keyMap = require("../jsutils/keyMap.mjs");
var _kinds = require("../language/kinds.mjs");
var _definition = require("../type/definition.mjs");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Produces a JavaScript value given a GraphQL Value AST.
 *
 * A GraphQL type must be provided, which will be used to interpret different
 * GraphQL Value literals.
 *
 * Returns `undefined` when the value could not be validly coerced according to
 * the provided type.
 *
 * | GraphQL Value        | JSON Value    |
 * | -------------------- | ------------- |
 * | Input Object         | Object        |
 * | List                 | Array         |
 * | Boolean              | Boolean       |
 * | String               | String        |
 * | Int / Float          | Number        |
 * | Enum Value           | Unknown       |
 * | NullValue            | null          |
 *
 */

function valueFromAST(valueNode, type, variables) {
  if (!valueNode) {
    // When there is no node, then there is also no value.
    // Importantly, this is different from returning the value null.
    return;
  }
  if (valueNode.kind === _kinds.Kind.VARIABLE) {
    var variableName = valueNode.name.value;
    if (variables == null || variables[variableName] === undefined) {
      // No valid return value.
      return;
    }
    var variableValue = variables[variableName];
    if (variableValue === null && (0, _definition.isNonNullType)(type)) {
      return; // Invalid: intentionally return no value.
    } // Note: This does no further checking that this variable is correct.
    // This assumes that this query has been validated and the variable
    // usage here is of the correct type.

    return variableValue;
  }
  if ((0, _definition.isNonNullType)(type)) {
    if (valueNode.kind === _kinds.Kind.NULL) {
      return; // Invalid: intentionally return no value.
    }
    return valueFromAST(valueNode, type.ofType, variables);
  }
  if (valueNode.kind === _kinds.Kind.NULL) {
    // This is explicitly returning the value null.
    return null;
  }
  if ((0, _definition.isListType)(type)) {
    var itemType = type.ofType;
    if (valueNode.kind === _kinds.Kind.LIST) {
      var coercedValues = [];
      var _iterator = _createForOfIteratorHelper(valueNode.values),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var itemNode = _step.value;
          if (isMissingVariable(itemNode, variables)) {
            // If an array contains a missing variable, it is either coerced to
            // null or if the item type is non-null, it considered invalid.
            if ((0, _definition.isNonNullType)(itemType)) {
              return; // Invalid: intentionally return no value.
            }
            coercedValues.push(null);
          } else {
            var itemValue = valueFromAST(itemNode, itemType, variables);
            if (itemValue === undefined) {
              return; // Invalid: intentionally return no value.
            }
            coercedValues.push(itemValue);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return coercedValues;
    }
    var coercedValue = valueFromAST(valueNode, itemType, variables);
    if (coercedValue === undefined) {
      return; // Invalid: intentionally return no value.
    }
    return [coercedValue];
  }
  if ((0, _definition.isInputObjectType)(type)) {
    if (valueNode.kind !== _kinds.Kind.OBJECT) {
      return; // Invalid: intentionally return no value.
    }
    var coercedObj = Object.create(null);
    var fieldNodes = (0, _keyMap.keyMap)(valueNode.fields, function (field) {
      return field.name.value;
    });
    for (var _i = 0, _Object$values = Object.values(type.getFields()); _i < _Object$values.length; _i++) {
      var field = _Object$values[_i];
      var fieldNode = fieldNodes[field.name];
      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {
        if (field.defaultValue !== undefined) {
          coercedObj[field.name] = field.defaultValue;
        } else if ((0, _definition.isNonNullType)(field.type)) {
          return; // Invalid: intentionally return no value.
        }
        continue;
      }
      var fieldValue = valueFromAST(fieldNode.value, field.type, variables);
      if (fieldValue === undefined) {
        return; // Invalid: intentionally return no value.
      }
      coercedObj[field.name] = fieldValue;
    }
    return coercedObj;
  }
  if ((0, _definition.isLeafType)(type)) {
    // Scalars and Enums fulfill parsing a literal value via parseLiteral().
    // Invalid values represent a failure to parse correctly, in which case
    // no value is returned.
    var result;
    try {
      result = type.parseLiteral(valueNode, variables);
    } catch (_error) {
      return; // Invalid: intentionally return no value.
    }
    if (result === undefined) {
      return; // Invalid: intentionally return no value.
    }
    return result;
  }
  /* c8 ignore next 3 */
  // Not reachable, all possible input types have been considered.

  false || (0, _invariant.invariant)(false, 'Unexpected input type: ' + (0, _inspect.inspect)(type));
} // Returns true if the provided valueNode is a variable which is not defined
// in the set of variables.

function isMissingVariable(valueNode, variables) {
  return valueNode.kind === _kinds.Kind.VARIABLE && (variables == null || variables[valueNode.name.value] === undefined);
}
},{"../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","../jsutils/invariant.mjs":"../node_modules/graphql/jsutils/invariant.mjs","../jsutils/keyMap.mjs":"../node_modules/graphql/jsutils/keyMap.mjs","../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs","../type/definition.mjs":"../node_modules/graphql/type/definition.mjs"}],"../node_modules/graphql/execution/values.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getArgumentValues = getArgumentValues;
exports.getDirectiveValues = getDirectiveValues;
exports.getVariableValues = getVariableValues;
var _inspect = require("../jsutils/inspect.mjs");
var _keyMap = require("../jsutils/keyMap.mjs");
var _printPathArray = require("../jsutils/printPathArray.mjs");
var _GraphQLError = require("../error/GraphQLError.mjs");
var _kinds = require("../language/kinds.mjs");
var _printer = require("../language/printer.mjs");
var _definition = require("../type/definition.mjs");
var _coerceInputValue = require("../utilities/coerceInputValue.mjs");
var _typeFromAST = require("../utilities/typeFromAST.mjs");
var _valueFromAST = require("../utilities/valueFromAST.mjs");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Prepares an object map of variableValues of the correct type based on the
 * provided variable definitions and arbitrary input. If the input cannot be
 * parsed to match the variable definitions, a GraphQLError will be thrown.
 *
 * Note: The returned value is a plain Object with a prototype, since it is
 * exposed to user code. Care should be taken to not pull values from the
 * Object prototype.
 */
function getVariableValues(schema, varDefNodes, inputs, options) {
  var errors = [];
  var maxErrors = options === null || options === void 0 ? void 0 : options.maxErrors;
  try {
    var coerced = coerceVariableValues(schema, varDefNodes, inputs, function (error) {
      if (maxErrors != null && errors.length >= maxErrors) {
        throw new _GraphQLError.GraphQLError('Too many errors processing variables, error limit reached. Execution aborted.');
      }
      errors.push(error);
    });
    if (errors.length === 0) {
      return {
        coerced: coerced
      };
    }
  } catch (error) {
    errors.push(error);
  }
  return {
    errors: errors
  };
}
function coerceVariableValues(schema, varDefNodes, inputs, onError) {
  var coercedValues = {};
  var _iterator = _createForOfIteratorHelper(varDefNodes),
    _step;
  try {
    var _loop = function _loop() {
        var varDefNode = _step.value;
        var varName = varDefNode.variable.name.value;
        var varType = (0, _typeFromAST.typeFromAST)(schema, varDefNode.type);
        if (!(0, _definition.isInputType)(varType)) {
          // Must use input types for variables. This should be caught during
          // validation, however is checked again here for safety.
          var varTypeStr = (0, _printer.print)(varDefNode.type);
          onError(new _GraphQLError.GraphQLError("Variable \"$".concat(varName, "\" expected value of type \"").concat(varTypeStr, "\" which cannot be used as an input type."), {
            nodes: varDefNode.type
          }));
          return 0; // continue
        }
        if (!hasOwnProperty(inputs, varName)) {
          if (varDefNode.defaultValue) {
            coercedValues[varName] = (0, _valueFromAST.valueFromAST)(varDefNode.defaultValue, varType);
          } else if ((0, _definition.isNonNullType)(varType)) {
            var _varTypeStr = (0, _inspect.inspect)(varType);
            onError(new _GraphQLError.GraphQLError("Variable \"$".concat(varName, "\" of required type \"").concat(_varTypeStr, "\" was not provided."), {
              nodes: varDefNode
            }));
          }
          return 0; // continue
        }
        var value = inputs[varName];
        if (value === null && (0, _definition.isNonNullType)(varType)) {
          var _varTypeStr2 = (0, _inspect.inspect)(varType);
          onError(new _GraphQLError.GraphQLError("Variable \"$".concat(varName, "\" of non-null type \"").concat(_varTypeStr2, "\" must not be null."), {
            nodes: varDefNode
          }));
          return 0; // continue
        }
        coercedValues[varName] = (0, _coerceInputValue.coerceInputValue)(value, varType, function (path, invalidValue, error) {
          var prefix = "Variable \"$".concat(varName, "\" got invalid value ") + (0, _inspect.inspect)(invalidValue);
          if (path.length > 0) {
            prefix += " at \"".concat(varName).concat((0, _printPathArray.printPathArray)(path), "\"");
          }
          onError(new _GraphQLError.GraphQLError(prefix + '; ' + error.message, {
            nodes: varDefNode,
            originalError: error
          }));
        });
      },
      _ret;
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _ret = _loop();
      if (_ret === 0) continue;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return coercedValues;
}
/**
 * Prepares an object map of argument values given a list of argument
 * definitions and list of argument AST nodes.
 *
 * Note: The returned value is a plain Object with a prototype, since it is
 * exposed to user code. Care should be taken to not pull values from the
 * Object prototype.
 */

function getArgumentValues(def, node, variableValues) {
  var _node$arguments;
  var coercedValues = {}; // FIXME: https://github.com/graphql/graphql-js/issues/2203

  /* c8 ignore next */

  var argumentNodes = (_node$arguments = node.arguments) !== null && _node$arguments !== void 0 ? _node$arguments : [];
  var argNodeMap = (0, _keyMap.keyMap)(argumentNodes, function (arg) {
    return arg.name.value;
  });
  var _iterator2 = _createForOfIteratorHelper(def.args),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var argDef = _step2.value;
      var name = argDef.name;
      var argType = argDef.type;
      var argumentNode = argNodeMap[name];
      if (!argumentNode) {
        if (argDef.defaultValue !== undefined) {
          coercedValues[name] = argDef.defaultValue;
        } else if ((0, _definition.isNonNullType)(argType)) {
          throw new _GraphQLError.GraphQLError("Argument \"".concat(name, "\" of required type \"").concat((0, _inspect.inspect)(argType), "\" ") + 'was not provided.', {
            nodes: node
          });
        }
        continue;
      }
      var valueNode = argumentNode.value;
      var isNull = valueNode.kind === _kinds.Kind.NULL;
      if (valueNode.kind === _kinds.Kind.VARIABLE) {
        var variableName = valueNode.name.value;
        if (variableValues == null || !hasOwnProperty(variableValues, variableName)) {
          if (argDef.defaultValue !== undefined) {
            coercedValues[name] = argDef.defaultValue;
          } else if ((0, _definition.isNonNullType)(argType)) {
            throw new _GraphQLError.GraphQLError("Argument \"".concat(name, "\" of required type \"").concat((0, _inspect.inspect)(argType), "\" ") + "was provided the variable \"$".concat(variableName, "\" which was not provided a runtime value."), {
              nodes: valueNode
            });
          }
          continue;
        }
        isNull = variableValues[variableName] == null;
      }
      if (isNull && (0, _definition.isNonNullType)(argType)) {
        throw new _GraphQLError.GraphQLError("Argument \"".concat(name, "\" of non-null type \"").concat((0, _inspect.inspect)(argType), "\" ") + 'must not be null.', {
          nodes: valueNode
        });
      }
      var coercedValue = (0, _valueFromAST.valueFromAST)(valueNode, argType, variableValues);
      if (coercedValue === undefined) {
        // Note: ValuesOfCorrectTypeRule validation should catch this before
        // execution. This is a runtime check to ensure execution does not
        // continue with an invalid argument value.
        throw new _GraphQLError.GraphQLError("Argument \"".concat(name, "\" has invalid value ").concat((0, _printer.print)(valueNode), "."), {
          nodes: valueNode
        });
      }
      coercedValues[name] = coercedValue;
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return coercedValues;
}
/**
 * Prepares an object map of argument values given a directive definition
 * and a AST node which may contain directives. Optionally also accepts a map
 * of variable values.
 *
 * If the directive does not exist on the node, returns undefined.
 *
 * Note: The returned value is a plain Object with a prototype, since it is
 * exposed to user code. Care should be taken to not pull values from the
 * Object prototype.
 */

function getDirectiveValues(directiveDef, node, variableValues) {
  var _node$directives;
  var directiveNode = (_node$directives = node.directives) === null || _node$directives === void 0 ? void 0 : _node$directives.find(function (directive) {
    return directive.name.value === directiveDef.name;
  });
  if (directiveNode) {
    return getArgumentValues(directiveDef, directiveNode, variableValues);
  }
}
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
},{"../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","../jsutils/keyMap.mjs":"../node_modules/graphql/jsutils/keyMap.mjs","../jsutils/printPathArray.mjs":"../node_modules/graphql/jsutils/printPathArray.mjs","../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs","../language/printer.mjs":"../node_modules/graphql/language/printer.mjs","../type/definition.mjs":"../node_modules/graphql/type/definition.mjs","../utilities/coerceInputValue.mjs":"../node_modules/graphql/utilities/coerceInputValue.mjs","../utilities/typeFromAST.mjs":"../node_modules/graphql/utilities/typeFromAST.mjs","../utilities/valueFromAST.mjs":"../node_modules/graphql/utilities/valueFromAST.mjs"}],"../node_modules/graphql/execution/collectFields.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.collectFields = collectFields;
exports.collectSubfields = collectSubfields;
var _kinds = require("../language/kinds.mjs");
var _definition = require("../type/definition.mjs");
var _directives = require("../type/directives.mjs");
var _typeFromAST = require("../utilities/typeFromAST.mjs");
var _values = require("./values.mjs");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Given a selectionSet, collects all of the fields and returns them.
 *
 * CollectFields requires the "runtime type" of an object. For a field that
 * returns an Interface or Union type, the "runtime type" will be the actual
 * object type returned by that field.
 *
 * @internal
 */

function collectFields(schema, fragments, variableValues, runtimeType, selectionSet) {
  var fields = new Map();
  collectFieldsImpl(schema, fragments, variableValues, runtimeType, selectionSet, fields, new Set());
  return fields;
}
/**
 * Given an array of field nodes, collects all of the subfields of the passed
 * in fields, and returns them at the end.
 *
 * CollectSubFields requires the "return type" of an object. For a field that
 * returns an Interface or Union type, the "return type" will be the actual
 * object type returned by that field.
 *
 * @internal
 */

function collectSubfields(schema, fragments, variableValues, returnType, fieldNodes) {
  var subFieldNodes = new Map();
  var visitedFragmentNames = new Set();
  var _iterator = _createForOfIteratorHelper(fieldNodes),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var node = _step.value;
      if (node.selectionSet) {
        collectFieldsImpl(schema, fragments, variableValues, returnType, node.selectionSet, subFieldNodes, visitedFragmentNames);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return subFieldNodes;
}
function collectFieldsImpl(schema, fragments, variableValues, runtimeType, selectionSet, fields, visitedFragmentNames) {
  var _iterator2 = _createForOfIteratorHelper(selectionSet.selections),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var selection = _step2.value;
      switch (selection.kind) {
        case _kinds.Kind.FIELD:
          {
            if (!shouldIncludeNode(variableValues, selection)) {
              continue;
            }
            var name = getFieldEntryKey(selection);
            var fieldList = fields.get(name);
            if (fieldList !== undefined) {
              fieldList.push(selection);
            } else {
              fields.set(name, [selection]);
            }
            break;
          }
        case _kinds.Kind.INLINE_FRAGMENT:
          {
            if (!shouldIncludeNode(variableValues, selection) || !doesFragmentConditionMatch(schema, selection, runtimeType)) {
              continue;
            }
            collectFieldsImpl(schema, fragments, variableValues, runtimeType, selection.selectionSet, fields, visitedFragmentNames);
            break;
          }
        case _kinds.Kind.FRAGMENT_SPREAD:
          {
            var fragName = selection.name.value;
            if (visitedFragmentNames.has(fragName) || !shouldIncludeNode(variableValues, selection)) {
              continue;
            }
            visitedFragmentNames.add(fragName);
            var fragment = fragments[fragName];
            if (!fragment || !doesFragmentConditionMatch(schema, fragment, runtimeType)) {
              continue;
            }
            collectFieldsImpl(schema, fragments, variableValues, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);
            break;
          }
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
}
/**
 * Determines if a field should be included based on the `@include` and `@skip`
 * directives, where `@skip` has higher precedence than `@include`.
 */

function shouldIncludeNode(variableValues, node) {
  var skip = (0, _values.getDirectiveValues)(_directives.GraphQLSkipDirective, node, variableValues);
  if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {
    return false;
  }
  var include = (0, _values.getDirectiveValues)(_directives.GraphQLIncludeDirective, node, variableValues);
  if ((include === null || include === void 0 ? void 0 : include.if) === false) {
    return false;
  }
  return true;
}
/**
 * Determines if a fragment is applicable to the given type.
 */

function doesFragmentConditionMatch(schema, fragment, type) {
  var typeConditionNode = fragment.typeCondition;
  if (!typeConditionNode) {
    return true;
  }
  var conditionalType = (0, _typeFromAST.typeFromAST)(schema, typeConditionNode);
  if (conditionalType === type) {
    return true;
  }
  if ((0, _definition.isAbstractType)(conditionalType)) {
    return schema.isSubType(conditionalType, type);
  }
  return false;
}
/**
 * Implements the logic to compute the key of a given field's entry
 */

function getFieldEntryKey(node) {
  return node.alias ? node.alias.value : node.name.value;
}
},{"../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs","../type/definition.mjs":"../node_modules/graphql/type/definition.mjs","../type/directives.mjs":"../node_modules/graphql/type/directives.mjs","../utilities/typeFromAST.mjs":"../node_modules/graphql/utilities/typeFromAST.mjs","./values.mjs":"../node_modules/graphql/execution/values.mjs"}],"../node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SingleFieldSubscriptionsRule = SingleFieldSubscriptionsRule;
var _GraphQLError = require("../../error/GraphQLError.mjs");
var _kinds = require("../../language/kinds.mjs");
var _collectFields = require("../../execution/collectFields.mjs");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Subscriptions must only include a non-introspection field.
 *
 * A GraphQL subscription is valid only if it contains a single root field and
 * that root field is not an introspection field.
 *
 * See https://spec.graphql.org/draft/#sec-Single-root-field
 */
function SingleFieldSubscriptionsRule(context) {
  return {
    OperationDefinition: function OperationDefinition(node) {
      if (node.operation === 'subscription') {
        var schema = context.getSchema();
        var subscriptionType = schema.getSubscriptionType();
        if (subscriptionType) {
          var operationName = node.name ? node.name.value : null;
          var variableValues = Object.create(null);
          var document = context.getDocument();
          var fragments = Object.create(null);
          var _iterator = _createForOfIteratorHelper(document.definitions),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var definition = _step.value;
              if (definition.kind === _kinds.Kind.FRAGMENT_DEFINITION) {
                fragments[definition.name.value] = definition;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          var fields = (0, _collectFields.collectFields)(schema, fragments, variableValues, subscriptionType, node.selectionSet);
          if (fields.size > 1) {
            var fieldSelectionLists = _toConsumableArray(fields.values());
            var extraFieldSelectionLists = fieldSelectionLists.slice(1);
            var extraFieldSelections = extraFieldSelectionLists.flat();
            context.reportError(new _GraphQLError.GraphQLError(operationName != null ? "Subscription \"".concat(operationName, "\" must select only one top level field.") : 'Anonymous Subscription must select only one top level field.', {
              nodes: extraFieldSelections
            }));
          }
          var _iterator2 = _createForOfIteratorHelper(fields.values()),
            _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var fieldNodes = _step2.value;
              var field = fieldNodes[0];
              var fieldName = field.name.value;
              if (fieldName.startsWith('__')) {
                context.reportError(new _GraphQLError.GraphQLError(operationName != null ? "Subscription \"".concat(operationName, "\" must not select an introspection top level field.") : 'Anonymous Subscription must not select an introspection top level field.', {
                  nodes: fieldNodes
                }));
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      }
    }
  };
}
},{"../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs","../../execution/collectFields.mjs":"../node_modules/graphql/execution/collectFields.mjs"}],"../node_modules/graphql/jsutils/groupBy.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.groupBy = groupBy;
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Groups array items into a Map, given a function to produce grouping key.
 */
function groupBy(list, keyFn) {
  var result = new Map();
  var _iterator = _createForOfIteratorHelper(list),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var item = _step.value;
      var key = keyFn(item);
      var group = result.get(key);
      if (group === undefined) {
        result.set(key, [item]);
      } else {
        group.push(item);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return result;
}
},{}],"../node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UniqueArgumentDefinitionNamesRule = UniqueArgumentDefinitionNamesRule;
var _groupBy = require("../../jsutils/groupBy.mjs");
var _GraphQLError = require("../../error/GraphQLError.mjs");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Unique argument definition names
 *
 * A GraphQL Object or Interface type is only valid if all its fields have uniquely named arguments.
 * A GraphQL Directive is only valid if all its arguments are uniquely named.
 */
function UniqueArgumentDefinitionNamesRule(context) {
  return {
    DirectiveDefinition: function DirectiveDefinition(directiveNode) {
      var _directiveNode$argume;

      // FIXME: https://github.com/graphql/graphql-js/issues/2203

      /* c8 ignore next */
      var argumentNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];
      return checkArgUniqueness("@".concat(directiveNode.name.value), argumentNodes);
    },
    InterfaceTypeDefinition: checkArgUniquenessPerField,
    InterfaceTypeExtension: checkArgUniquenessPerField,
    ObjectTypeDefinition: checkArgUniquenessPerField,
    ObjectTypeExtension: checkArgUniquenessPerField
  };
  function checkArgUniquenessPerField(typeNode) {
    var _typeNode$fields;
    var typeName = typeNode.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203

    /* c8 ignore next */

    var fieldNodes = (_typeNode$fields = typeNode.fields) !== null && _typeNode$fields !== void 0 ? _typeNode$fields : [];
    var _iterator = _createForOfIteratorHelper(fieldNodes),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var fieldDef = _step.value;
        var _fieldDef$arguments;
        var fieldName = fieldDef.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203

        /* c8 ignore next */

        var argumentNodes = (_fieldDef$arguments = fieldDef.arguments) !== null && _fieldDef$arguments !== void 0 ? _fieldDef$arguments : [];
        checkArgUniqueness("".concat(typeName, ".").concat(fieldName), argumentNodes);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return false;
  }
  function checkArgUniqueness(parentName, argumentNodes) {
    var seenArgs = (0, _groupBy.groupBy)(argumentNodes, function (arg) {
      return arg.name.value;
    });
    var _iterator2 = _createForOfIteratorHelper(seenArgs),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _step2$value = _slicedToArray(_step2.value, 2),
          argName = _step2$value[0],
          argNodes = _step2$value[1];
        if (argNodes.length > 1) {
          context.reportError(new _GraphQLError.GraphQLError("Argument \"".concat(parentName, "(").concat(argName, ":)\" can only be defined once."), {
            nodes: argNodes.map(function (node) {
              return node.name;
            })
          }));
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    return false;
  }
}
},{"../../jsutils/groupBy.mjs":"../node_modules/graphql/jsutils/groupBy.mjs","../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs"}],"../node_modules/graphql/validation/rules/UniqueArgumentNamesRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UniqueArgumentNamesRule = UniqueArgumentNamesRule;
var _groupBy = require("../../jsutils/groupBy.mjs");
var _GraphQLError = require("../../error/GraphQLError.mjs");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Unique argument names
 *
 * A GraphQL field or directive is only valid if all supplied arguments are
 * uniquely named.
 *
 * See https://spec.graphql.org/draft/#sec-Argument-Names
 */
function UniqueArgumentNamesRule(context) {
  return {
    Field: checkArgUniqueness,
    Directive: checkArgUniqueness
  };
  function checkArgUniqueness(parentNode) {
    var _parentNode$arguments;

    // FIXME: https://github.com/graphql/graphql-js/issues/2203

    /* c8 ignore next */
    var argumentNodes = (_parentNode$arguments = parentNode.arguments) !== null && _parentNode$arguments !== void 0 ? _parentNode$arguments : [];
    var seenArgs = (0, _groupBy.groupBy)(argumentNodes, function (arg) {
      return arg.name.value;
    });
    var _iterator = _createForOfIteratorHelper(seenArgs),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _step$value = _slicedToArray(_step.value, 2),
          argName = _step$value[0],
          argNodes = _step$value[1];
        if (argNodes.length > 1) {
          context.reportError(new _GraphQLError.GraphQLError("There can be only one argument named \"".concat(argName, "\"."), {
            nodes: argNodes.map(function (node) {
              return node.name;
            })
          }));
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }
}
},{"../../jsutils/groupBy.mjs":"../node_modules/graphql/jsutils/groupBy.mjs","../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs"}],"../node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UniqueDirectiveNamesRule = UniqueDirectiveNamesRule;
var _GraphQLError = require("../../error/GraphQLError.mjs");
/**
 * Unique directive names
 *
 * A GraphQL document is only valid if all defined directives have unique names.
 */
function UniqueDirectiveNamesRule(context) {
  var knownDirectiveNames = Object.create(null);
  var schema = context.getSchema();
  return {
    DirectiveDefinition: function DirectiveDefinition(node) {
      var directiveName = node.name.value;
      if (schema !== null && schema !== void 0 && schema.getDirective(directiveName)) {
        context.reportError(new _GraphQLError.GraphQLError("Directive \"@".concat(directiveName, "\" already exists in the schema. It cannot be redefined."), {
          nodes: node.name
        }));
        return;
      }
      if (knownDirectiveNames[directiveName]) {
        context.reportError(new _GraphQLError.GraphQLError("There can be only one directive named \"@".concat(directiveName, "\"."), {
          nodes: [knownDirectiveNames[directiveName], node.name]
        }));
      } else {
        knownDirectiveNames[directiveName] = node.name;
      }
      return false;
    }
  };
}
},{"../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs"}],"../node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UniqueDirectivesPerLocationRule = UniqueDirectivesPerLocationRule;
var _GraphQLError = require("../../error/GraphQLError.mjs");
var _kinds = require("../../language/kinds.mjs");
var _predicates = require("../../language/predicates.mjs");
var _directives = require("../../type/directives.mjs");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Unique directive names per location
 *
 * A GraphQL document is only valid if all non-repeatable directives at
 * a given location are uniquely named.
 *
 * See https://spec.graphql.org/draft/#sec-Directives-Are-Unique-Per-Location
 */
function UniqueDirectivesPerLocationRule(context) {
  var uniqueDirectiveMap = Object.create(null);
  var schema = context.getSchema();
  var definedDirectives = schema ? schema.getDirectives() : _directives.specifiedDirectives;
  var _iterator = _createForOfIteratorHelper(definedDirectives),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var directive = _step.value;
      uniqueDirectiveMap[directive.name] = !directive.isRepeatable;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var astDefinitions = context.getDocument().definitions;
  var _iterator2 = _createForOfIteratorHelper(astDefinitions),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var def = _step2.value;
      if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
        uniqueDirectiveMap[def.name.value] = !def.repeatable;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  var schemaDirectives = Object.create(null);
  var typeDirectivesMap = Object.create(null);
  return {
    // Many different AST nodes may contain directives. Rather than listing
    // them all, just listen for entering any node, and check to see if it
    // defines any directives.
    enter: function enter(node) {
      if (!('directives' in node) || !node.directives) {
        return;
      }
      var seenDirectives;
      if (node.kind === _kinds.Kind.SCHEMA_DEFINITION || node.kind === _kinds.Kind.SCHEMA_EXTENSION) {
        seenDirectives = schemaDirectives;
      } else if ((0, _predicates.isTypeDefinitionNode)(node) || (0, _predicates.isTypeExtensionNode)(node)) {
        var typeName = node.name.value;
        seenDirectives = typeDirectivesMap[typeName];
        if (seenDirectives === undefined) {
          typeDirectivesMap[typeName] = seenDirectives = Object.create(null);
        }
      } else {
        seenDirectives = Object.create(null);
      }
      var _iterator3 = _createForOfIteratorHelper(node.directives),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var directive = _step3.value;
          var directiveName = directive.name.value;
          if (uniqueDirectiveMap[directiveName]) {
            if (seenDirectives[directiveName]) {
              context.reportError(new _GraphQLError.GraphQLError("The directive \"@".concat(directiveName, "\" can only be used once at this location."), {
                nodes: [seenDirectives[directiveName], directive]
              }));
            } else {
              seenDirectives[directiveName] = directive;
            }
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  };
}
},{"../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs","../../language/predicates.mjs":"../node_modules/graphql/language/predicates.mjs","../../type/directives.mjs":"../node_modules/graphql/type/directives.mjs"}],"../node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UniqueEnumValueNamesRule = UniqueEnumValueNamesRule;
var _GraphQLError = require("../../error/GraphQLError.mjs");
var _definition = require("../../type/definition.mjs");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Unique enum value names
 *
 * A GraphQL enum type is only valid if all its values are uniquely named.
 */
function UniqueEnumValueNamesRule(context) {
  var schema = context.getSchema();
  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);
  var knownValueNames = Object.create(null);
  return {
    EnumTypeDefinition: checkValueUniqueness,
    EnumTypeExtension: checkValueUniqueness
  };
  function checkValueUniqueness(node) {
    var _node$values;
    var typeName = node.name.value;
    if (!knownValueNames[typeName]) {
      knownValueNames[typeName] = Object.create(null);
    } // FIXME: https://github.com/graphql/graphql-js/issues/2203

    /* c8 ignore next */

    var valueNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];
    var valueNames = knownValueNames[typeName];
    var _iterator = _createForOfIteratorHelper(valueNodes),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var valueDef = _step.value;
        var valueName = valueDef.name.value;
        var existingType = existingTypeMap[typeName];
        if ((0, _definition.isEnumType)(existingType) && existingType.getValue(valueName)) {
          context.reportError(new _GraphQLError.GraphQLError("Enum value \"".concat(typeName, ".").concat(valueName, "\" already exists in the schema. It cannot also be defined in this type extension."), {
            nodes: valueDef.name
          }));
        } else if (valueNames[valueName]) {
          context.reportError(new _GraphQLError.GraphQLError("Enum value \"".concat(typeName, ".").concat(valueName, "\" can only be defined once."), {
            nodes: [valueNames[valueName], valueDef.name]
          }));
        } else {
          valueNames[valueName] = valueDef.name;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return false;
  }
}
},{"../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../../type/definition.mjs":"../node_modules/graphql/type/definition.mjs"}],"../node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UniqueFieldDefinitionNamesRule = UniqueFieldDefinitionNamesRule;
var _GraphQLError = require("../../error/GraphQLError.mjs");
var _definition = require("../../type/definition.mjs");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Unique field definition names
 *
 * A GraphQL complex type is only valid if all its fields are uniquely named.
 */
function UniqueFieldDefinitionNamesRule(context) {
  var schema = context.getSchema();
  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);
  var knownFieldNames = Object.create(null);
  return {
    InputObjectTypeDefinition: checkFieldUniqueness,
    InputObjectTypeExtension: checkFieldUniqueness,
    InterfaceTypeDefinition: checkFieldUniqueness,
    InterfaceTypeExtension: checkFieldUniqueness,
    ObjectTypeDefinition: checkFieldUniqueness,
    ObjectTypeExtension: checkFieldUniqueness
  };
  function checkFieldUniqueness(node) {
    var _node$fields;
    var typeName = node.name.value;
    if (!knownFieldNames[typeName]) {
      knownFieldNames[typeName] = Object.create(null);
    } // FIXME: https://github.com/graphql/graphql-js/issues/2203

    /* c8 ignore next */

    var fieldNodes = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];
    var fieldNames = knownFieldNames[typeName];
    var _iterator = _createForOfIteratorHelper(fieldNodes),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var fieldDef = _step.value;
        var fieldName = fieldDef.name.value;
        if (hasField(existingTypeMap[typeName], fieldName)) {
          context.reportError(new _GraphQLError.GraphQLError("Field \"".concat(typeName, ".").concat(fieldName, "\" already exists in the schema. It cannot also be defined in this type extension."), {
            nodes: fieldDef.name
          }));
        } else if (fieldNames[fieldName]) {
          context.reportError(new _GraphQLError.GraphQLError("Field \"".concat(typeName, ".").concat(fieldName, "\" can only be defined once."), {
            nodes: [fieldNames[fieldName], fieldDef.name]
          }));
        } else {
          fieldNames[fieldName] = fieldDef.name;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return false;
  }
}
function hasField(type, fieldName) {
  if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type) || (0, _definition.isInputObjectType)(type)) {
    return type.getFields()[fieldName] != null;
  }
  return false;
}
},{"../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../../type/definition.mjs":"../node_modules/graphql/type/definition.mjs"}],"../node_modules/graphql/validation/rules/UniqueFragmentNamesRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UniqueFragmentNamesRule = UniqueFragmentNamesRule;
var _GraphQLError = require("../../error/GraphQLError.mjs");
/**
 * Unique fragment names
 *
 * A GraphQL document is only valid if all defined fragments have unique names.
 *
 * See https://spec.graphql.org/draft/#sec-Fragment-Name-Uniqueness
 */
function UniqueFragmentNamesRule(context) {
  var knownFragmentNames = Object.create(null);
  return {
    OperationDefinition: function OperationDefinition() {
      return false;
    },
    FragmentDefinition: function FragmentDefinition(node) {
      var fragmentName = node.name.value;
      if (knownFragmentNames[fragmentName]) {
        context.reportError(new _GraphQLError.GraphQLError("There can be only one fragment named \"".concat(fragmentName, "\"."), {
          nodes: [knownFragmentNames[fragmentName], node.name]
        }));
      } else {
        knownFragmentNames[fragmentName] = node.name;
      }
      return false;
    }
  };
}
},{"../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs"}],"../node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UniqueInputFieldNamesRule = UniqueInputFieldNamesRule;
var _invariant = require("../../jsutils/invariant.mjs");
var _GraphQLError = require("../../error/GraphQLError.mjs");
/**
 * Unique input field names
 *
 * A GraphQL input object value is only valid if all supplied fields are
 * uniquely named.
 *
 * See https://spec.graphql.org/draft/#sec-Input-Object-Field-Uniqueness
 */
function UniqueInputFieldNamesRule(context) {
  var knownNameStack = [];
  var knownNames = Object.create(null);
  return {
    ObjectValue: {
      enter: function enter() {
        knownNameStack.push(knownNames);
        knownNames = Object.create(null);
      },
      leave: function leave() {
        var prevKnownNames = knownNameStack.pop();
        prevKnownNames || (0, _invariant.invariant)(false);
        knownNames = prevKnownNames;
      }
    },
    ObjectField: function ObjectField(node) {
      var fieldName = node.name.value;
      if (knownNames[fieldName]) {
        context.reportError(new _GraphQLError.GraphQLError("There can be only one input field named \"".concat(fieldName, "\"."), {
          nodes: [knownNames[fieldName], node.name]
        }));
      } else {
        knownNames[fieldName] = node.name;
      }
    }
  };
}
},{"../../jsutils/invariant.mjs":"../node_modules/graphql/jsutils/invariant.mjs","../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs"}],"../node_modules/graphql/validation/rules/UniqueOperationNamesRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UniqueOperationNamesRule = UniqueOperationNamesRule;
var _GraphQLError = require("../../error/GraphQLError.mjs");
/**
 * Unique operation names
 *
 * A GraphQL document is only valid if all defined operations have unique names.
 *
 * See https://spec.graphql.org/draft/#sec-Operation-Name-Uniqueness
 */
function UniqueOperationNamesRule(context) {
  var knownOperationNames = Object.create(null);
  return {
    OperationDefinition: function OperationDefinition(node) {
      var operationName = node.name;
      if (operationName) {
        if (knownOperationNames[operationName.value]) {
          context.reportError(new _GraphQLError.GraphQLError("There can be only one operation named \"".concat(operationName.value, "\"."), {
            nodes: [knownOperationNames[operationName.value], operationName]
          }));
        } else {
          knownOperationNames[operationName.value] = operationName;
        }
      }
      return false;
    },
    FragmentDefinition: function FragmentDefinition() {
      return false;
    }
  };
}
},{"../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs"}],"../node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UniqueOperationTypesRule = UniqueOperationTypesRule;
var _GraphQLError = require("../../error/GraphQLError.mjs");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Unique operation types
 *
 * A GraphQL document is only valid if it has only one type per operation.
 */
function UniqueOperationTypesRule(context) {
  var schema = context.getSchema();
  var definedOperationTypes = Object.create(null);
  var existingOperationTypes = schema ? {
    query: schema.getQueryType(),
    mutation: schema.getMutationType(),
    subscription: schema.getSubscriptionType()
  } : {};
  return {
    SchemaDefinition: checkOperationTypes,
    SchemaExtension: checkOperationTypes
  };
  function checkOperationTypes(node) {
    var _node$operationTypes;

    // See: https://github.com/graphql/graphql-js/issues/2203

    /* c8 ignore next */
    var operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];
    var _iterator = _createForOfIteratorHelper(operationTypesNodes),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var operationType = _step.value;
        var operation = operationType.operation;
        var alreadyDefinedOperationType = definedOperationTypes[operation];
        if (existingOperationTypes[operation]) {
          context.reportError(new _GraphQLError.GraphQLError("Type for ".concat(operation, " already defined in the schema. It cannot be redefined."), {
            nodes: operationType
          }));
        } else if (alreadyDefinedOperationType) {
          context.reportError(new _GraphQLError.GraphQLError("There can be only one ".concat(operation, " type in schema."), {
            nodes: [alreadyDefinedOperationType, operationType]
          }));
        } else {
          definedOperationTypes[operation] = operationType;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return false;
  }
}
},{"../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs"}],"../node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UniqueTypeNamesRule = UniqueTypeNamesRule;
var _GraphQLError = require("../../error/GraphQLError.mjs");
/**
 * Unique type names
 *
 * A GraphQL document is only valid if all defined types have unique names.
 */
function UniqueTypeNamesRule(context) {
  var knownTypeNames = Object.create(null);
  var schema = context.getSchema();
  return {
    ScalarTypeDefinition: checkTypeName,
    ObjectTypeDefinition: checkTypeName,
    InterfaceTypeDefinition: checkTypeName,
    UnionTypeDefinition: checkTypeName,
    EnumTypeDefinition: checkTypeName,
    InputObjectTypeDefinition: checkTypeName
  };
  function checkTypeName(node) {
    var typeName = node.name.value;
    if (schema !== null && schema !== void 0 && schema.getType(typeName)) {
      context.reportError(new _GraphQLError.GraphQLError("Type \"".concat(typeName, "\" already exists in the schema. It cannot also be defined in this type definition."), {
        nodes: node.name
      }));
      return;
    }
    if (knownTypeNames[typeName]) {
      context.reportError(new _GraphQLError.GraphQLError("There can be only one type named \"".concat(typeName, "\"."), {
        nodes: [knownTypeNames[typeName], node.name]
      }));
    } else {
      knownTypeNames[typeName] = node.name;
    }
    return false;
  }
}
},{"../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs"}],"../node_modules/graphql/validation/rules/UniqueVariableNamesRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UniqueVariableNamesRule = UniqueVariableNamesRule;
var _groupBy = require("../../jsutils/groupBy.mjs");
var _GraphQLError = require("../../error/GraphQLError.mjs");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Unique variable names
 *
 * A GraphQL operation is only valid if all its variables are uniquely named.
 */
function UniqueVariableNamesRule(context) {
  return {
    OperationDefinition: function OperationDefinition(operationNode) {
      var _operationNode$variab;

      // See: https://github.com/graphql/graphql-js/issues/2203

      /* c8 ignore next */
      var variableDefinitions = (_operationNode$variab = operationNode.variableDefinitions) !== null && _operationNode$variab !== void 0 ? _operationNode$variab : [];
      var seenVariableDefinitions = (0, _groupBy.groupBy)(variableDefinitions, function (node) {
        return node.variable.name.value;
      });
      var _iterator = _createForOfIteratorHelper(seenVariableDefinitions),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray(_step.value, 2),
            variableName = _step$value[0],
            variableNodes = _step$value[1];
          if (variableNodes.length > 1) {
            context.reportError(new _GraphQLError.GraphQLError("There can be only one variable named \"$".concat(variableName, "\"."), {
              nodes: variableNodes.map(function (node) {
                return node.variable.name;
              })
            }));
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  };
}
},{"../../jsutils/groupBy.mjs":"../node_modules/graphql/jsutils/groupBy.mjs","../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs"}],"../node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValuesOfCorrectTypeRule = ValuesOfCorrectTypeRule;
var _didYouMean = require("../../jsutils/didYouMean.mjs");
var _inspect = require("../../jsutils/inspect.mjs");
var _keyMap = require("../../jsutils/keyMap.mjs");
var _suggestionList = require("../../jsutils/suggestionList.mjs");
var _GraphQLError = require("../../error/GraphQLError.mjs");
var _printer = require("../../language/printer.mjs");
var _definition = require("../../type/definition.mjs");
/**
 * Value literals of correct type
 *
 * A GraphQL document is only valid if all value literals are of the type
 * expected at their position.
 *
 * See https://spec.graphql.org/draft/#sec-Values-of-Correct-Type
 */
function ValuesOfCorrectTypeRule(context) {
  return {
    ListValue: function ListValue(node) {
      // Note: TypeInfo will traverse into a list's item type, so look to the
      // parent input type to check if it is a list.
      var type = (0, _definition.getNullableType)(context.getParentInputType());
      if (!(0, _definition.isListType)(type)) {
        isValidValueNode(context, node);
        return false; // Don't traverse further.
      }
    },
    ObjectValue: function ObjectValue(node) {
      var type = (0, _definition.getNamedType)(context.getInputType());
      if (!(0, _definition.isInputObjectType)(type)) {
        isValidValueNode(context, node);
        return false; // Don't traverse further.
      } // Ensure every required field exists.

      var fieldNodeMap = (0, _keyMap.keyMap)(node.fields, function (field) {
        return field.name.value;
      });
      for (var _i = 0, _Object$values = Object.values(type.getFields()); _i < _Object$values.length; _i++) {
        var fieldDef = _Object$values[_i];
        var fieldNode = fieldNodeMap[fieldDef.name];
        if (!fieldNode && (0, _definition.isRequiredInputField)(fieldDef)) {
          var typeStr = (0, _inspect.inspect)(fieldDef.type);
          context.reportError(new _GraphQLError.GraphQLError("Field \"".concat(type.name, ".").concat(fieldDef.name, "\" of required type \"").concat(typeStr, "\" was not provided."), {
            nodes: node
          }));
        }
      }
    },
    ObjectField: function ObjectField(node) {
      var parentType = (0, _definition.getNamedType)(context.getParentInputType());
      var fieldType = context.getInputType();
      if (!fieldType && (0, _definition.isInputObjectType)(parentType)) {
        var suggestions = (0, _suggestionList.suggestionList)(node.name.value, Object.keys(parentType.getFields()));
        context.reportError(new _GraphQLError.GraphQLError("Field \"".concat(node.name.value, "\" is not defined by type \"").concat(parentType.name, "\".") + (0, _didYouMean.didYouMean)(suggestions), {
          nodes: node
        }));
      }
    },
    NullValue: function NullValue(node) {
      var type = context.getInputType();
      if ((0, _definition.isNonNullType)(type)) {
        context.reportError(new _GraphQLError.GraphQLError("Expected value of type \"".concat((0, _inspect.inspect)(type), "\", found ").concat((0, _printer.print)(node), "."), {
          nodes: node
        }));
      }
    },
    EnumValue: function EnumValue(node) {
      return isValidValueNode(context, node);
    },
    IntValue: function IntValue(node) {
      return isValidValueNode(context, node);
    },
    FloatValue: function FloatValue(node) {
      return isValidValueNode(context, node);
    },
    StringValue: function StringValue(node) {
      return isValidValueNode(context, node);
    },
    BooleanValue: function BooleanValue(node) {
      return isValidValueNode(context, node);
    }
  };
}
/**
 * Any value literal may be a valid representation of a Scalar, depending on
 * that scalar type.
 */

function isValidValueNode(context, node) {
  // Report any error at the full type expected by the location.
  var locationType = context.getInputType();
  if (!locationType) {
    return;
  }
  var type = (0, _definition.getNamedType)(locationType);
  if (!(0, _definition.isLeafType)(type)) {
    var typeStr = (0, _inspect.inspect)(locationType);
    context.reportError(new _GraphQLError.GraphQLError("Expected value of type \"".concat(typeStr, "\", found ").concat((0, _printer.print)(node), "."), {
      nodes: node
    }));
    return;
  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),
  // which may throw or return an invalid value to indicate failure.

  try {
    var parseResult = type.parseLiteral(node, undefined
    /* variables */);
    if (parseResult === undefined) {
      var _typeStr = (0, _inspect.inspect)(locationType);
      context.reportError(new _GraphQLError.GraphQLError("Expected value of type \"".concat(_typeStr, "\", found ").concat((0, _printer.print)(node), "."), {
        nodes: node
      }));
    }
  } catch (error) {
    var _typeStr2 = (0, _inspect.inspect)(locationType);
    if (error instanceof _GraphQLError.GraphQLError) {
      context.reportError(error);
    } else {
      context.reportError(new _GraphQLError.GraphQLError("Expected value of type \"".concat(_typeStr2, "\", found ").concat((0, _printer.print)(node), "; ") + error.message, {
        nodes: node,
        originalError: error
      }));
    }
  }
}
},{"../../jsutils/didYouMean.mjs":"../node_modules/graphql/jsutils/didYouMean.mjs","../../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","../../jsutils/keyMap.mjs":"../node_modules/graphql/jsutils/keyMap.mjs","../../jsutils/suggestionList.mjs":"../node_modules/graphql/jsutils/suggestionList.mjs","../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../../language/printer.mjs":"../node_modules/graphql/language/printer.mjs","../../type/definition.mjs":"../node_modules/graphql/type/definition.mjs"}],"../node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VariablesAreInputTypesRule = VariablesAreInputTypesRule;
var _GraphQLError = require("../../error/GraphQLError.mjs");
var _printer = require("../../language/printer.mjs");
var _definition = require("../../type/definition.mjs");
var _typeFromAST = require("../../utilities/typeFromAST.mjs");
/**
 * Variables are input types
 *
 * A GraphQL operation is only valid if all the variables it defines are of
 * input types (scalar, enum, or input object).
 *
 * See https://spec.graphql.org/draft/#sec-Variables-Are-Input-Types
 */
function VariablesAreInputTypesRule(context) {
  return {
    VariableDefinition: function VariableDefinition(node) {
      var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.type);
      if (type !== undefined && !(0, _definition.isInputType)(type)) {
        var variableName = node.variable.name.value;
        var typeName = (0, _printer.print)(node.type);
        context.reportError(new _GraphQLError.GraphQLError("Variable \"$".concat(variableName, "\" cannot be non-input type \"").concat(typeName, "\"."), {
          nodes: node.type
        }));
      }
    }
  };
}
},{"../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../../language/printer.mjs":"../node_modules/graphql/language/printer.mjs","../../type/definition.mjs":"../node_modules/graphql/type/definition.mjs","../../utilities/typeFromAST.mjs":"../node_modules/graphql/utilities/typeFromAST.mjs"}],"../node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VariablesInAllowedPositionRule = VariablesInAllowedPositionRule;
var _inspect = require("../../jsutils/inspect.mjs");
var _GraphQLError = require("../../error/GraphQLError.mjs");
var _kinds = require("../../language/kinds.mjs");
var _definition = require("../../type/definition.mjs");
var _typeComparators = require("../../utilities/typeComparators.mjs");
var _typeFromAST = require("../../utilities/typeFromAST.mjs");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Variables in allowed position
 *
 * Variable usages must be compatible with the arguments they are passed to.
 *
 * See https://spec.graphql.org/draft/#sec-All-Variable-Usages-are-Allowed
 */
function VariablesInAllowedPositionRule(context) {
  var varDefMap = Object.create(null);
  return {
    OperationDefinition: {
      enter: function enter() {
        varDefMap = Object.create(null);
      },
      leave: function leave(operation) {
        var usages = context.getRecursiveVariableUsages(operation);
        var _iterator = _createForOfIteratorHelper(usages),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _step$value = _step.value,
              node = _step$value.node,
              type = _step$value.type,
              defaultValue = _step$value.defaultValue;
            var varName = node.name.value;
            var varDef = varDefMap[varName];
            if (varDef && type) {
              // A var type is allowed if it is the same or more strict (e.g. is
              // a subtype of) than the expected type. It can be more strict if
              // the variable type is non-null when the expected type is nullable.
              // If both are list types, the variable item type can be more strict
              // than the expected item type (contravariant).
              var schema = context.getSchema();
              var varType = (0, _typeFromAST.typeFromAST)(schema, varDef.type);
              if (varType && !allowedVariableUsage(schema, varType, varDef.defaultValue, type, defaultValue)) {
                var varTypeStr = (0, _inspect.inspect)(varType);
                var typeStr = (0, _inspect.inspect)(type);
                context.reportError(new _GraphQLError.GraphQLError("Variable \"$".concat(varName, "\" of type \"").concat(varTypeStr, "\" used in position expecting type \"").concat(typeStr, "\"."), {
                  nodes: [varDef, node]
                }));
              }
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    },
    VariableDefinition: function VariableDefinition(node) {
      varDefMap[node.variable.name.value] = node;
    }
  };
}
/**
 * Returns true if the variable is allowed in the location it was found,
 * which includes considering if default values exist for either the variable
 * or the location at which it is located.
 */

function allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {
  if ((0, _definition.isNonNullType)(locationType) && !(0, _definition.isNonNullType)(varType)) {
    var hasNonNullVariableDefaultValue = varDefaultValue != null && varDefaultValue.kind !== _kinds.Kind.NULL;
    var hasLocationDefaultValue = locationDefaultValue !== undefined;
    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {
      return false;
    }
    var nullableLocationType = locationType.ofType;
    return (0, _typeComparators.isTypeSubTypeOf)(schema, varType, nullableLocationType);
  }
  return (0, _typeComparators.isTypeSubTypeOf)(schema, varType, locationType);
}
},{"../../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs","../../type/definition.mjs":"../node_modules/graphql/type/definition.mjs","../../utilities/typeComparators.mjs":"../node_modules/graphql/utilities/typeComparators.mjs","../../utilities/typeFromAST.mjs":"../node_modules/graphql/utilities/typeFromAST.mjs"}],"../node_modules/graphql/validation/specifiedRules.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.specifiedSDLRules = exports.specifiedRules = void 0;
var _ExecutableDefinitionsRule = require("./rules/ExecutableDefinitionsRule.mjs");
var _FieldsOnCorrectTypeRule = require("./rules/FieldsOnCorrectTypeRule.mjs");
var _FragmentsOnCompositeTypesRule = require("./rules/FragmentsOnCompositeTypesRule.mjs");
var _KnownArgumentNamesRule = require("./rules/KnownArgumentNamesRule.mjs");
var _KnownDirectivesRule = require("./rules/KnownDirectivesRule.mjs");
var _KnownFragmentNamesRule = require("./rules/KnownFragmentNamesRule.mjs");
var _KnownTypeNamesRule = require("./rules/KnownTypeNamesRule.mjs");
var _LoneAnonymousOperationRule = require("./rules/LoneAnonymousOperationRule.mjs");
var _LoneSchemaDefinitionRule = require("./rules/LoneSchemaDefinitionRule.mjs");
var _NoFragmentCyclesRule = require("./rules/NoFragmentCyclesRule.mjs");
var _NoUndefinedVariablesRule = require("./rules/NoUndefinedVariablesRule.mjs");
var _NoUnusedFragmentsRule = require("./rules/NoUnusedFragmentsRule.mjs");
var _NoUnusedVariablesRule = require("./rules/NoUnusedVariablesRule.mjs");
var _OverlappingFieldsCanBeMergedRule = require("./rules/OverlappingFieldsCanBeMergedRule.mjs");
var _PossibleFragmentSpreadsRule = require("./rules/PossibleFragmentSpreadsRule.mjs");
var _PossibleTypeExtensionsRule = require("./rules/PossibleTypeExtensionsRule.mjs");
var _ProvidedRequiredArgumentsRule = require("./rules/ProvidedRequiredArgumentsRule.mjs");
var _ScalarLeafsRule = require("./rules/ScalarLeafsRule.mjs");
var _SingleFieldSubscriptionsRule = require("./rules/SingleFieldSubscriptionsRule.mjs");
var _UniqueArgumentDefinitionNamesRule = require("./rules/UniqueArgumentDefinitionNamesRule.mjs");
var _UniqueArgumentNamesRule = require("./rules/UniqueArgumentNamesRule.mjs");
var _UniqueDirectiveNamesRule = require("./rules/UniqueDirectiveNamesRule.mjs");
var _UniqueDirectivesPerLocationRule = require("./rules/UniqueDirectivesPerLocationRule.mjs");
var _UniqueEnumValueNamesRule = require("./rules/UniqueEnumValueNamesRule.mjs");
var _UniqueFieldDefinitionNamesRule = require("./rules/UniqueFieldDefinitionNamesRule.mjs");
var _UniqueFragmentNamesRule = require("./rules/UniqueFragmentNamesRule.mjs");
var _UniqueInputFieldNamesRule = require("./rules/UniqueInputFieldNamesRule.mjs");
var _UniqueOperationNamesRule = require("./rules/UniqueOperationNamesRule.mjs");
var _UniqueOperationTypesRule = require("./rules/UniqueOperationTypesRule.mjs");
var _UniqueTypeNamesRule = require("./rules/UniqueTypeNamesRule.mjs");
var _UniqueVariableNamesRule = require("./rules/UniqueVariableNamesRule.mjs");
var _ValuesOfCorrectTypeRule = require("./rules/ValuesOfCorrectTypeRule.mjs");
var _VariablesAreInputTypesRule = require("./rules/VariablesAreInputTypesRule.mjs");
var _VariablesInAllowedPositionRule = require("./rules/VariablesInAllowedPositionRule.mjs");
// Spec Section: "Executable Definitions"
// Spec Section: "Field Selections on Objects, Interfaces, and Unions Types"

// Spec Section: "Fragments on Composite Types"

// Spec Section: "Argument Names"

// Spec Section: "Directives Are Defined"

// Spec Section: "Fragment spread target defined"

// Spec Section: "Fragment Spread Type Existence"

// Spec Section: "Lone Anonymous Operation"

// SDL-specific validation rules

// Spec Section: "Fragments must not form cycles"

// Spec Section: "All Variable Used Defined"

// Spec Section: "Fragments must be used"

// Spec Section: "All Variables Used"

// Spec Section: "Field Selection Merging"

// Spec Section: "Fragment spread is possible"

// Spec Section: "Argument Optionality"

// Spec Section: "Leaf Field Selections"

// Spec Section: "Subscriptions with Single Root Field"

// Spec Section: "Argument Uniqueness"

// Spec Section: "Directives Are Unique Per Location"

// Spec Section: "Fragment Name Uniqueness"

// Spec Section: "Input Object Field Uniqueness"

// Spec Section: "Operation Name Uniqueness"

// Spec Section: "Variable Uniqueness"

// Spec Section: "Value Type Correctness"

// Spec Section: "Variables are Input Types"

// Spec Section: "All Variable Usages Are Allowed"

/**
 * This set includes all validation rules defined by the GraphQL spec.
 *
 * The order of the rules in this list has been adjusted to lead to the
 * most clear output when encountering multiple validation errors.
 */
var specifiedRules = exports.specifiedRules = Object.freeze([_ExecutableDefinitionsRule.ExecutableDefinitionsRule, _UniqueOperationNamesRule.UniqueOperationNamesRule, _LoneAnonymousOperationRule.LoneAnonymousOperationRule, _SingleFieldSubscriptionsRule.SingleFieldSubscriptionsRule, _KnownTypeNamesRule.KnownTypeNamesRule, _FragmentsOnCompositeTypesRule.FragmentsOnCompositeTypesRule, _VariablesAreInputTypesRule.VariablesAreInputTypesRule, _ScalarLeafsRule.ScalarLeafsRule, _FieldsOnCorrectTypeRule.FieldsOnCorrectTypeRule, _UniqueFragmentNamesRule.UniqueFragmentNamesRule, _KnownFragmentNamesRule.KnownFragmentNamesRule, _NoUnusedFragmentsRule.NoUnusedFragmentsRule, _PossibleFragmentSpreadsRule.PossibleFragmentSpreadsRule, _NoFragmentCyclesRule.NoFragmentCyclesRule, _UniqueVariableNamesRule.UniqueVariableNamesRule, _NoUndefinedVariablesRule.NoUndefinedVariablesRule, _NoUnusedVariablesRule.NoUnusedVariablesRule, _KnownDirectivesRule.KnownDirectivesRule, _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule, _KnownArgumentNamesRule.KnownArgumentNamesRule, _UniqueArgumentNamesRule.UniqueArgumentNamesRule, _ValuesOfCorrectTypeRule.ValuesOfCorrectTypeRule, _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsRule, _VariablesInAllowedPositionRule.VariablesInAllowedPositionRule, _OverlappingFieldsCanBeMergedRule.OverlappingFieldsCanBeMergedRule, _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule]);
/**
 * @internal
 */

var specifiedSDLRules = exports.specifiedSDLRules = Object.freeze([_LoneSchemaDefinitionRule.LoneSchemaDefinitionRule, _UniqueOperationTypesRule.UniqueOperationTypesRule, _UniqueTypeNamesRule.UniqueTypeNamesRule, _UniqueEnumValueNamesRule.UniqueEnumValueNamesRule, _UniqueFieldDefinitionNamesRule.UniqueFieldDefinitionNamesRule, _UniqueArgumentDefinitionNamesRule.UniqueArgumentDefinitionNamesRule, _UniqueDirectiveNamesRule.UniqueDirectiveNamesRule, _KnownTypeNamesRule.KnownTypeNamesRule, _KnownDirectivesRule.KnownDirectivesRule, _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule, _PossibleTypeExtensionsRule.PossibleTypeExtensionsRule, _KnownArgumentNamesRule.KnownArgumentNamesOnDirectivesRule, _UniqueArgumentNamesRule.UniqueArgumentNamesRule, _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule, _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsOnDirectivesRule]);
},{"./rules/ExecutableDefinitionsRule.mjs":"../node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs","./rules/FieldsOnCorrectTypeRule.mjs":"../node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs","./rules/FragmentsOnCompositeTypesRule.mjs":"../node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs","./rules/KnownArgumentNamesRule.mjs":"../node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs","./rules/KnownDirectivesRule.mjs":"../node_modules/graphql/validation/rules/KnownDirectivesRule.mjs","./rules/KnownFragmentNamesRule.mjs":"../node_modules/graphql/validation/rules/KnownFragmentNamesRule.mjs","./rules/KnownTypeNamesRule.mjs":"../node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs","./rules/LoneAnonymousOperationRule.mjs":"../node_modules/graphql/validation/rules/LoneAnonymousOperationRule.mjs","./rules/LoneSchemaDefinitionRule.mjs":"../node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.mjs","./rules/NoFragmentCyclesRule.mjs":"../node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs","./rules/NoUndefinedVariablesRule.mjs":"../node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs","./rules/NoUnusedFragmentsRule.mjs":"../node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs","./rules/NoUnusedVariablesRule.mjs":"../node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs","./rules/OverlappingFieldsCanBeMergedRule.mjs":"../node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs","./rules/PossibleFragmentSpreadsRule.mjs":"../node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs","./rules/PossibleTypeExtensionsRule.mjs":"../node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs","./rules/ProvidedRequiredArgumentsRule.mjs":"../node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs","./rules/ScalarLeafsRule.mjs":"../node_modules/graphql/validation/rules/ScalarLeafsRule.mjs","./rules/SingleFieldSubscriptionsRule.mjs":"../node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs","./rules/UniqueArgumentDefinitionNamesRule.mjs":"../node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.mjs","./rules/UniqueArgumentNamesRule.mjs":"../node_modules/graphql/validation/rules/UniqueArgumentNamesRule.mjs","./rules/UniqueDirectiveNamesRule.mjs":"../node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.mjs","./rules/UniqueDirectivesPerLocationRule.mjs":"../node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs","./rules/UniqueEnumValueNamesRule.mjs":"../node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs","./rules/UniqueFieldDefinitionNamesRule.mjs":"../node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs","./rules/UniqueFragmentNamesRule.mjs":"../node_modules/graphql/validation/rules/UniqueFragmentNamesRule.mjs","./rules/UniqueInputFieldNamesRule.mjs":"../node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs","./rules/UniqueOperationNamesRule.mjs":"../node_modules/graphql/validation/rules/UniqueOperationNamesRule.mjs","./rules/UniqueOperationTypesRule.mjs":"../node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs","./rules/UniqueTypeNamesRule.mjs":"../node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs","./rules/UniqueVariableNamesRule.mjs":"../node_modules/graphql/validation/rules/UniqueVariableNamesRule.mjs","./rules/ValuesOfCorrectTypeRule.mjs":"../node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs","./rules/VariablesAreInputTypesRule.mjs":"../node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs","./rules/VariablesInAllowedPositionRule.mjs":"../node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs"}],"../node_modules/graphql/validation/ValidationContext.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValidationContext = exports.SDLValidationContext = exports.ASTValidationContext = void 0;
var _kinds = require("../language/kinds.mjs");
var _visitor = require("../language/visitor.mjs");
var _TypeInfo = require("../utilities/TypeInfo.mjs");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * An instance of this class is passed as the "this" context to all validators,
 * allowing access to commonly useful contextual information from within a
 * validation rule.
 */
var ASTValidationContext = exports.ASTValidationContext = /*#__PURE__*/function (_Symbol$toStringTag) {
  function ASTValidationContext(ast, onError) {
    _classCallCheck(this, ASTValidationContext);
    this._ast = ast;
    this._fragments = undefined;
    this._fragmentSpreads = new Map();
    this._recursivelyReferencedFragments = new Map();
    this._onError = onError;
  }
  _createClass(ASTValidationContext, [{
    key: _Symbol$toStringTag,
    get: function get() {
      return 'ASTValidationContext';
    }
  }, {
    key: "reportError",
    value: function reportError(error) {
      this._onError(error);
    }
  }, {
    key: "getDocument",
    value: function getDocument() {
      return this._ast;
    }
  }, {
    key: "getFragment",
    value: function getFragment(name) {
      var fragments;
      if (this._fragments) {
        fragments = this._fragments;
      } else {
        fragments = Object.create(null);
        var _iterator = _createForOfIteratorHelper(this.getDocument().definitions),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var defNode = _step.value;
            if (defNode.kind === _kinds.Kind.FRAGMENT_DEFINITION) {
              fragments[defNode.name.value] = defNode;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        this._fragments = fragments;
      }
      return fragments[name];
    }
  }, {
    key: "getFragmentSpreads",
    value: function getFragmentSpreads(node) {
      var spreads = this._fragmentSpreads.get(node);
      if (!spreads) {
        spreads = [];
        var setsToVisit = [node];
        var set;
        while (set = setsToVisit.pop()) {
          var _iterator2 = _createForOfIteratorHelper(set.selections),
            _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var selection = _step2.value;
              if (selection.kind === _kinds.Kind.FRAGMENT_SPREAD) {
                spreads.push(selection);
              } else if (selection.selectionSet) {
                setsToVisit.push(selection.selectionSet);
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
        this._fragmentSpreads.set(node, spreads);
      }
      return spreads;
    }
  }, {
    key: "getRecursivelyReferencedFragments",
    value: function getRecursivelyReferencedFragments(operation) {
      var fragments = this._recursivelyReferencedFragments.get(operation);
      if (!fragments) {
        fragments = [];
        var collectedNames = Object.create(null);
        var nodesToVisit = [operation.selectionSet];
        var node;
        while (node = nodesToVisit.pop()) {
          var _iterator3 = _createForOfIteratorHelper(this.getFragmentSpreads(node)),
            _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var spread = _step3.value;
              var fragName = spread.name.value;
              if (collectedNames[fragName] !== true) {
                collectedNames[fragName] = true;
                var fragment = this.getFragment(fragName);
                if (fragment) {
                  fragments.push(fragment);
                  nodesToVisit.push(fragment.selectionSet);
                }
              }
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        }
        this._recursivelyReferencedFragments.set(operation, fragments);
      }
      return fragments;
    }
  }]);
  return ASTValidationContext;
}(Symbol.toStringTag);
var SDLValidationContext = exports.SDLValidationContext = /*#__PURE__*/function (_ASTValidationContext, _Symbol$toStringTag2) {
  _inherits(SDLValidationContext, _ASTValidationContext);
  var _super = _createSuper(SDLValidationContext);
  function SDLValidationContext(ast, schema, onError) {
    var _this;
    _classCallCheck(this, SDLValidationContext);
    _this = _super.call(this, ast, onError);
    _this._schema = schema;
    return _this;
  }
  _createClass(SDLValidationContext, [{
    key: _Symbol$toStringTag2,
    get: function get() {
      return 'SDLValidationContext';
    }
  }, {
    key: "getSchema",
    value: function getSchema() {
      return this._schema;
    }
  }]);
  return SDLValidationContext;
}(ASTValidationContext, Symbol.toStringTag);
var ValidationContext = exports.ValidationContext = /*#__PURE__*/function (_ASTValidationContext2, _Symbol$toStringTag3) {
  _inherits(ValidationContext, _ASTValidationContext2);
  var _super2 = _createSuper(ValidationContext);
  function ValidationContext(schema, ast, typeInfo, onError) {
    var _this2;
    _classCallCheck(this, ValidationContext);
    _this2 = _super2.call(this, ast, onError);
    _this2._schema = schema;
    _this2._typeInfo = typeInfo;
    _this2._variableUsages = new Map();
    _this2._recursiveVariableUsages = new Map();
    return _this2;
  }
  _createClass(ValidationContext, [{
    key: _Symbol$toStringTag3,
    get: function get() {
      return 'ValidationContext';
    }
  }, {
    key: "getSchema",
    value: function getSchema() {
      return this._schema;
    }
  }, {
    key: "getVariableUsages",
    value: function getVariableUsages(node) {
      var usages = this._variableUsages.get(node);
      if (!usages) {
        var newUsages = [];
        var typeInfo = new _TypeInfo.TypeInfo(this._schema);
        (0, _visitor.visit)(node, (0, _TypeInfo.visitWithTypeInfo)(typeInfo, {
          VariableDefinition: function VariableDefinition() {
            return false;
          },
          Variable: function Variable(variable) {
            newUsages.push({
              node: variable,
              type: typeInfo.getInputType(),
              defaultValue: typeInfo.getDefaultValue()
            });
          }
        }));
        usages = newUsages;
        this._variableUsages.set(node, usages);
      }
      return usages;
    }
  }, {
    key: "getRecursiveVariableUsages",
    value: function getRecursiveVariableUsages(operation) {
      var usages = this._recursiveVariableUsages.get(operation);
      if (!usages) {
        usages = this.getVariableUsages(operation);
        var _iterator4 = _createForOfIteratorHelper(this.getRecursivelyReferencedFragments(operation)),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var frag = _step4.value;
            usages = usages.concat(this.getVariableUsages(frag));
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
        this._recursiveVariableUsages.set(operation, usages);
      }
      return usages;
    }
  }, {
    key: "getType",
    value: function getType() {
      return this._typeInfo.getType();
    }
  }, {
    key: "getParentType",
    value: function getParentType() {
      return this._typeInfo.getParentType();
    }
  }, {
    key: "getInputType",
    value: function getInputType() {
      return this._typeInfo.getInputType();
    }
  }, {
    key: "getParentInputType",
    value: function getParentInputType() {
      return this._typeInfo.getParentInputType();
    }
  }, {
    key: "getFieldDef",
    value: function getFieldDef() {
      return this._typeInfo.getFieldDef();
    }
  }, {
    key: "getDirective",
    value: function getDirective() {
      return this._typeInfo.getDirective();
    }
  }, {
    key: "getArgument",
    value: function getArgument() {
      return this._typeInfo.getArgument();
    }
  }, {
    key: "getEnumValue",
    value: function getEnumValue() {
      return this._typeInfo.getEnumValue();
    }
  }]);
  return ValidationContext;
}(ASTValidationContext, Symbol.toStringTag);
},{"../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs","../language/visitor.mjs":"../node_modules/graphql/language/visitor.mjs","../utilities/TypeInfo.mjs":"../node_modules/graphql/utilities/TypeInfo.mjs"}],"../node_modules/graphql/validation/validate.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertValidSDL = assertValidSDL;
exports.assertValidSDLExtension = assertValidSDLExtension;
exports.validate = validate;
exports.validateSDL = validateSDL;
var _devAssert = require("../jsutils/devAssert.mjs");
var _GraphQLError = require("../error/GraphQLError.mjs");
var _visitor = require("../language/visitor.mjs");
var _validate = require("../type/validate.mjs");
var _TypeInfo = require("../utilities/TypeInfo.mjs");
var _specifiedRules = require("./specifiedRules.mjs");
var _ValidationContext = require("./ValidationContext.mjs");
/**
 * Implements the "Validation" section of the spec.
 *
 * Validation runs synchronously, returning an array of encountered errors, or
 * an empty array if no errors were encountered and the document is valid.
 *
 * A list of specific validation rules may be provided. If not provided, the
 * default list of rules defined by the GraphQL specification will be used.
 *
 * Each validation rules is a function which returns a visitor
 * (see the language/visitor API). Visitor methods are expected to return
 * GraphQLErrors, or Arrays of GraphQLErrors when invalid.
 *
 * Validate will stop validation after a `maxErrors` limit has been reached.
 * Attackers can send pathologically invalid queries to induce a DoS attack,
 * so by default `maxErrors` set to 100 errors.
 *
 * Optionally a custom TypeInfo instance may be provided. If not provided, one
 * will be created from the provided schema.
 */

function validate(schema, documentAST) {
  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _specifiedRules.specifiedRules;
  var options = arguments.length > 3 ? arguments[3] : undefined;
  var typeInfo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new _TypeInfo.TypeInfo(schema);
  var _options$maxErrors;
  var maxErrors = (_options$maxErrors = options === null || options === void 0 ? void 0 : options.maxErrors) !== null && _options$maxErrors !== void 0 ? _options$maxErrors : 100;
  documentAST || (0, _devAssert.devAssert)(false, 'Must provide document.'); // If the schema used for validation is invalid, throw an error.

  (0, _validate.assertValidSchema)(schema);
  var abortObj = Object.freeze({});
  var errors = [];
  var context = new _ValidationContext.ValidationContext(schema, documentAST, typeInfo, function (error) {
    if (errors.length >= maxErrors) {
      errors.push(new _GraphQLError.GraphQLError('Too many validation errors, error limit reached. Validation aborted.')); // eslint-disable-next-line @typescript-eslint/no-throw-literal

      throw abortObj;
    }
    errors.push(error);
  }); // This uses a specialized visitor which runs multiple visitors in parallel,
  // while maintaining the visitor skip and break API.

  var visitor = (0, _visitor.visitInParallel)(rules.map(function (rule) {
    return rule(context);
  })); // Visit the whole document with each instance of all provided rules.

  try {
    (0, _visitor.visit)(documentAST, (0, _TypeInfo.visitWithTypeInfo)(typeInfo, visitor));
  } catch (e) {
    if (e !== abortObj) {
      throw e;
    }
  }
  return errors;
}
/**
 * @internal
 */

function validateSDL(documentAST, schemaToExtend) {
  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _specifiedRules.specifiedSDLRules;
  var errors = [];
  var context = new _ValidationContext.SDLValidationContext(documentAST, schemaToExtend, function (error) {
    errors.push(error);
  });
  var visitors = rules.map(function (rule) {
    return rule(context);
  });
  (0, _visitor.visit)(documentAST, (0, _visitor.visitInParallel)(visitors));
  return errors;
}
/**
 * Utility function which asserts a SDL document is valid by throwing an error
 * if it is invalid.
 *
 * @internal
 */

function assertValidSDL(documentAST) {
  var errors = validateSDL(documentAST);
  if (errors.length !== 0) {
    throw new Error(errors.map(function (error) {
      return error.message;
    }).join('\n\n'));
  }
}
/**
 * Utility function which asserts a SDL document is valid by throwing an error
 * if it is invalid.
 *
 * @internal
 */

function assertValidSDLExtension(documentAST, schema) {
  var errors = validateSDL(documentAST, schema);
  if (errors.length !== 0) {
    throw new Error(errors.map(function (error) {
      return error.message;
    }).join('\n\n'));
  }
}
},{"../jsutils/devAssert.mjs":"../node_modules/graphql/jsutils/devAssert.mjs","../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../language/visitor.mjs":"../node_modules/graphql/language/visitor.mjs","../type/validate.mjs":"../node_modules/graphql/type/validate.mjs","../utilities/TypeInfo.mjs":"../node_modules/graphql/utilities/TypeInfo.mjs","./specifiedRules.mjs":"../node_modules/graphql/validation/specifiedRules.mjs","./ValidationContext.mjs":"../node_modules/graphql/validation/ValidationContext.mjs"}],"../node_modules/graphql/jsutils/memoize3.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.memoize3 = memoize3;
/**
 * Memoizes the provided three-argument function.
 */
function memoize3(fn) {
  var cache0;
  return function memoized(a1, a2, a3) {
    if (cache0 === undefined) {
      cache0 = new WeakMap();
    }
    var cache1 = cache0.get(a1);
    if (cache1 === undefined) {
      cache1 = new WeakMap();
      cache0.set(a1, cache1);
    }
    var cache2 = cache1.get(a2);
    if (cache2 === undefined) {
      cache2 = new WeakMap();
      cache1.set(a2, cache2);
    }
    var fnResult = cache2.get(a3);
    if (fnResult === undefined) {
      fnResult = fn(a1, a2, a3);
      cache2.set(a3, fnResult);
    }
    return fnResult;
  };
}
},{}],"../node_modules/graphql/jsutils/promiseForObject.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.promiseForObject = promiseForObject;
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * This function transforms a JS object `ObjMap<Promise<T>>` into
 * a `Promise<ObjMap<T>>`
 *
 * This is akin to bluebird's `Promise.props`, but implemented only using
 * `Promise.all` so it will work with any implementation of ES6 promises.
 */
function promiseForObject(object) {
  return Promise.all(Object.values(object)).then(function (resolvedValues) {
    var resolvedObject = Object.create(null);
    var _iterator = _createForOfIteratorHelper(Object.keys(object).entries()),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _step$value = _slicedToArray(_step.value, 2),
          i = _step$value[0],
          key = _step$value[1];
        resolvedObject[key] = resolvedValues[i];
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return resolvedObject;
  });
}
},{}],"../node_modules/graphql/jsutils/promiseReduce.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.promiseReduce = promiseReduce;
var _isPromise = require("./isPromise.mjs");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Similar to Array.prototype.reduce(), however the reducing callback may return
 * a Promise, in which case reduction will continue after each promise resolves.
 *
 * If the callback does not return a Promise, then this function will also not
 * return a Promise.
 */
function promiseReduce(values, callbackFn, initialValue) {
  var accumulator = initialValue;
  var _iterator = _createForOfIteratorHelper(values),
    _step;
  try {
    var _loop = function _loop() {
      var value = _step.value;
      accumulator = (0, _isPromise.isPromise)(accumulator) ? accumulator.then(function (resolved) {
        return callbackFn(resolved, value);
      }) : callbackFn(accumulator, value);
    };
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return accumulator;
}
},{"./isPromise.mjs":"../node_modules/graphql/jsutils/isPromise.mjs"}],"../node_modules/graphql/jsutils/toError.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toError = toError;
var _inspect = require("./inspect.mjs");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }
function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _isNativeFunction(fn) { try { return Function.toString.call(fn).indexOf("[native code]") !== -1; } catch (e) { return typeof fn === "function"; } }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
/**
 * Sometimes a non-error is thrown, wrap it as an Error instance to ensure a consistent Error interface.
 */

function toError(thrownValue) {
  return thrownValue instanceof Error ? thrownValue : new NonErrorThrown(thrownValue);
}
var NonErrorThrown = /*#__PURE__*/function (_Error) {
  _inherits(NonErrorThrown, _Error);
  var _super = _createSuper(NonErrorThrown);
  function NonErrorThrown(thrownValue) {
    var _this;
    _classCallCheck(this, NonErrorThrown);
    _this = _super.call(this, 'Unexpected error value: ' + (0, _inspect.inspect)(thrownValue));
    _this.name = 'NonErrorThrown';
    _this.thrownValue = thrownValue;
    return _this;
  }
  return _createClass(NonErrorThrown);
}( /*#__PURE__*/_wrapNativeSuper(Error));
},{"./inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs"}],"../node_modules/graphql/error/locatedError.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.locatedError = locatedError;
var _toError = require("../jsutils/toError.mjs");
var _GraphQLError = require("./GraphQLError.mjs");
/**
 * Given an arbitrary value, presumably thrown while attempting to execute a
 * GraphQL operation, produce a new GraphQLError aware of the location in the
 * document responsible for the original Error.
 */

function locatedError(rawOriginalError, nodes, path) {
  var _nodes;
  var originalError = (0, _toError.toError)(rawOriginalError); // Note: this uses a brand-check to support GraphQL errors originating from other contexts.

  if (isLocatedGraphQLError(originalError)) {
    return originalError;
  }
  return new _GraphQLError.GraphQLError(originalError.message, {
    nodes: (_nodes = originalError.nodes) !== null && _nodes !== void 0 ? _nodes : nodes,
    source: originalError.source,
    positions: originalError.positions,
    path: path,
    originalError: originalError
  });
}
function isLocatedGraphQLError(error) {
  return Array.isArray(error.path);
}
},{"../jsutils/toError.mjs":"../node_modules/graphql/jsutils/toError.mjs","./GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs"}],"../node_modules/graphql/execution/execute.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertValidExecutionArguments = assertValidExecutionArguments;
exports.buildExecutionContext = buildExecutionContext;
exports.buildResolveInfo = buildResolveInfo;
exports.defaultTypeResolver = exports.defaultFieldResolver = void 0;
exports.execute = execute;
exports.executeSync = executeSync;
exports.getFieldDef = getFieldDef;
var _devAssert = require("../jsutils/devAssert.mjs");
var _inspect = require("../jsutils/inspect.mjs");
var _invariant = require("../jsutils/invariant.mjs");
var _isIterableObject = require("../jsutils/isIterableObject.mjs");
var _isObjectLike = require("../jsutils/isObjectLike.mjs");
var _isPromise = require("../jsutils/isPromise.mjs");
var _memoize = require("../jsutils/memoize3.mjs");
var _Path = require("../jsutils/Path.mjs");
var _promiseForObject = require("../jsutils/promiseForObject.mjs");
var _promiseReduce = require("../jsutils/promiseReduce.mjs");
var _GraphQLError = require("../error/GraphQLError.mjs");
var _locatedError = require("../error/locatedError.mjs");
var _ast = require("../language/ast.mjs");
var _kinds = require("../language/kinds.mjs");
var _definition = require("../type/definition.mjs");
var _introspection = require("../type/introspection.mjs");
var _validate = require("../type/validate.mjs");
var _collectFields = require("./collectFields.mjs");
var _values = require("./values.mjs");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * A memoized collection of relevant subfields with regard to the return
 * type. Memoizing ensures the subfields are not repeatedly calculated, which
 * saves overhead when resolving lists of values.
 */

var collectSubfields = (0, _memoize.memoize3)(function (exeContext, returnType, fieldNodes) {
  return (0, _collectFields.collectSubfields)(exeContext.schema, exeContext.fragments, exeContext.variableValues, returnType, fieldNodes);
});
/**
 * Terminology
 *
 * "Definitions" are the generic name for top-level statements in the document.
 * Examples of this include:
 * 1) Operations (such as a query)
 * 2) Fragments
 *
 * "Operations" are a generic name for requests in the document.
 * Examples of this include:
 * 1) query,
 * 2) mutation
 *
 * "Selections" are the definitions that can appear legally and at
 * single level of the query. These include:
 * 1) field references e.g `a`
 * 2) fragment "spreads" e.g. `...c`
 * 3) inline fragment "spreads" e.g. `...on Type { a }`
 */

/**
 * Data that must be available at all points during query execution.
 *
 * Namely, schema of the type system that is currently executing,
 * and the fragments defined in the query document
 */

/**
 * Implements the "Executing requests" section of the GraphQL specification.
 *
 * Returns either a synchronous ExecutionResult (if all encountered resolvers
 * are synchronous), or a Promise of an ExecutionResult that will eventually be
 * resolved and never rejected.
 *
 * If the arguments to this function do not result in a legal execution context,
 * a GraphQLError will be thrown immediately explaining the invalid input.
 */
function execute(args) {
  // Temporary for v15 to v16 migration. Remove in v17
  arguments.length < 2 || (0, _devAssert.devAssert)(false, 'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.');
  var schema = args.schema,
    document = args.document,
    variableValues = args.variableValues,
    rootValue = args.rootValue; // If arguments are missing or incorrect, throw an error.

  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,
  // a "Response" with only errors is returned.

  var exeContext = buildExecutionContext(args); // Return early errors if execution context failed.

  if (!('schema' in exeContext)) {
    return {
      errors: exeContext
    };
  } // Return a Promise that will eventually resolve to the data described by
  // The "Response" section of the GraphQL specification.
  //
  // If errors are encountered while executing a GraphQL field, only that
  // field and its descendants will be omitted, and sibling fields will still
  // be executed. An execution which encounters errors will still result in a
  // resolved Promise.
  //
  // Errors from sub-fields of a NonNull type may propagate to the top level,
  // at which point we still log the error and null the parent field, which
  // in this case is the entire response.

  try {
    var operation = exeContext.operation;
    var result = executeOperation(exeContext, operation, rootValue);
    if ((0, _isPromise.isPromise)(result)) {
      return result.then(function (data) {
        return buildResponse(data, exeContext.errors);
      }, function (error) {
        exeContext.errors.push(error);
        return buildResponse(null, exeContext.errors);
      });
    }
    return buildResponse(result, exeContext.errors);
  } catch (error) {
    exeContext.errors.push(error);
    return buildResponse(null, exeContext.errors);
  }
}
/**
 * Also implements the "Executing requests" section of the GraphQL specification.
 * However, it guarantees to complete synchronously (or throw an error) assuming
 * that all field resolvers are also synchronous.
 */

function executeSync(args) {
  var result = execute(args); // Assert that the execution was synchronous.

  if ((0, _isPromise.isPromise)(result)) {
    throw new Error('GraphQL execution failed to complete synchronously.');
  }
  return result;
}
/**
 * Given a completed execution context and data, build the `{ errors, data }`
 * response defined by the "Response" section of the GraphQL specification.
 */

function buildResponse(data, errors) {
  return errors.length === 0 ? {
    data: data
  } : {
    errors: errors,
    data: data
  };
}
/**
 * Essential assertions before executing to provide developer feedback for
 * improper use of the GraphQL library.
 *
 * @internal
 */

function assertValidExecutionArguments(schema, document, rawVariableValues) {
  document || (0, _devAssert.devAssert)(false, 'Must provide document.'); // If the schema used for execution is invalid, throw an error.

  (0, _validate.assertValidSchema)(schema); // Variables, if provided, must be an object.

  rawVariableValues == null || (0, _isObjectLike.isObjectLike)(rawVariableValues) || (0, _devAssert.devAssert)(false, 'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.');
}
/**
 * Constructs a ExecutionContext object from the arguments passed to
 * execute, which we will pass throughout the other execution methods.
 *
 * Throws a GraphQLError if a valid execution context cannot be created.
 *
 * @internal
 */

function buildExecutionContext(args) {
  var _definition$name, _operation$variableDe;
  var schema = args.schema,
    document = args.document,
    rootValue = args.rootValue,
    contextValue = args.contextValue,
    rawVariableValues = args.variableValues,
    operationName = args.operationName,
    fieldResolver = args.fieldResolver,
    typeResolver = args.typeResolver,
    subscribeFieldResolver = args.subscribeFieldResolver;
  var operation;
  var fragments = Object.create(null);
  var _iterator = _createForOfIteratorHelper(document.definitions),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var definition = _step.value;
      switch (definition.kind) {
        case _kinds.Kind.OPERATION_DEFINITION:
          if (operationName == null) {
            if (operation !== undefined) {
              return [new _GraphQLError.GraphQLError('Must provide operation name if query contains multiple operations.')];
            }
            operation = definition;
          } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {
            operation = definition;
          }
          break;
        case _kinds.Kind.FRAGMENT_DEFINITION:
          fragments[definition.name.value] = definition;
          break;
        default: // ignore non-executable definitions
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (!operation) {
    if (operationName != null) {
      return [new _GraphQLError.GraphQLError("Unknown operation named \"".concat(operationName, "\"."))];
    }
    return [new _GraphQLError.GraphQLError('Must provide an operation.')];
  } // FIXME: https://github.com/graphql/graphql-js/issues/2203

  /* c8 ignore next */

  var variableDefinitions = (_operation$variableDe = operation.variableDefinitions) !== null && _operation$variableDe !== void 0 ? _operation$variableDe : [];
  var coercedVariableValues = (0, _values.getVariableValues)(schema, variableDefinitions, rawVariableValues !== null && rawVariableValues !== void 0 ? rawVariableValues : {}, {
    maxErrors: 50
  });
  if (coercedVariableValues.errors) {
    return coercedVariableValues.errors;
  }
  return {
    schema: schema,
    fragments: fragments,
    rootValue: rootValue,
    contextValue: contextValue,
    operation: operation,
    variableValues: coercedVariableValues.coerced,
    fieldResolver: fieldResolver !== null && fieldResolver !== void 0 ? fieldResolver : defaultFieldResolver,
    typeResolver: typeResolver !== null && typeResolver !== void 0 ? typeResolver : defaultTypeResolver,
    subscribeFieldResolver: subscribeFieldResolver !== null && subscribeFieldResolver !== void 0 ? subscribeFieldResolver : defaultFieldResolver,
    errors: []
  };
}
/**
 * Implements the "Executing operations" section of the spec.
 */

function executeOperation(exeContext, operation, rootValue) {
  var rootType = exeContext.schema.getRootType(operation.operation);
  if (rootType == null) {
    throw new _GraphQLError.GraphQLError("Schema is not configured to execute ".concat(operation.operation, " operation."), {
      nodes: operation
    });
  }
  var rootFields = (0, _collectFields.collectFields)(exeContext.schema, exeContext.fragments, exeContext.variableValues, rootType, operation.selectionSet);
  var path = undefined;
  switch (operation.operation) {
    case _ast.OperationTypeNode.QUERY:
      return executeFields(exeContext, rootType, rootValue, path, rootFields);
    case _ast.OperationTypeNode.MUTATION:
      return executeFieldsSerially(exeContext, rootType, rootValue, path, rootFields);
    case _ast.OperationTypeNode.SUBSCRIPTION:
      // TODO: deprecate `subscribe` and move all logic here
      // Temporary solution until we finish merging execute and subscribe together
      return executeFields(exeContext, rootType, rootValue, path, rootFields);
  }
}
/**
 * Implements the "Executing selection sets" section of the spec
 * for fields that must be executed serially.
 */

function executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {
  return (0, _promiseReduce.promiseReduce)(fields.entries(), function (results, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
      responseName = _ref2[0],
      fieldNodes = _ref2[1];
    var fieldPath = (0, _Path.addPath)(path, responseName, parentType.name);
    var result = executeField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);
    if (result === undefined) {
      return results;
    }
    if ((0, _isPromise.isPromise)(result)) {
      return result.then(function (resolvedResult) {
        results[responseName] = resolvedResult;
        return results;
      });
    }
    results[responseName] = result;
    return results;
  }, Object.create(null));
}
/**
 * Implements the "Executing selection sets" section of the spec
 * for fields that may be executed in parallel.
 */

function executeFields(exeContext, parentType, sourceValue, path, fields) {
  var results = Object.create(null);
  var containsPromise = false;
  try {
    var _iterator2 = _createForOfIteratorHelper(fields.entries()),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _step2$value = _slicedToArray(_step2.value, 2),
          responseName = _step2$value[0],
          fieldNodes = _step2$value[1];
        var fieldPath = (0, _Path.addPath)(path, responseName, parentType.name);
        var result = executeField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);
        if (result !== undefined) {
          results[responseName] = result;
          if ((0, _isPromise.isPromise)(result)) {
            containsPromise = true;
          }
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  } catch (error) {
    if (containsPromise) {
      // Ensure that any promises returned by other fields are handled, as they may also reject.
      return (0, _promiseForObject.promiseForObject)(results).finally(function () {
        throw error;
      });
    }
    throw error;
  } // If there are no promises, we can just return the object

  if (!containsPromise) {
    return results;
  } // Otherwise, results is a map from field name to the result of resolving that
  // field, which is possibly a promise. Return a promise that will return this
  // same map, but with any promises replaced with the values they resolved to.

  return (0, _promiseForObject.promiseForObject)(results);
}
/**
 * Implements the "Executing fields" section of the spec
 * In particular, this function figures out the value that the field returns by
 * calling its resolve function, then calls completeValue to complete promises,
 * serialize scalars, or execute the sub-selection-set for objects.
 */

function executeField(exeContext, parentType, source, fieldNodes, path) {
  var _fieldDef$resolve;
  var fieldDef = getFieldDef(exeContext.schema, parentType, fieldNodes[0]);
  if (!fieldDef) {
    return;
  }
  var returnType = fieldDef.type;
  var resolveFn = (_fieldDef$resolve = fieldDef.resolve) !== null && _fieldDef$resolve !== void 0 ? _fieldDef$resolve : exeContext.fieldResolver;
  var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path); // Get the resolve function, regardless of if its result is normal or abrupt (error).

  try {
    // Build a JS object of arguments from the field.arguments AST, using the
    // variables scope to fulfill any variable references.
    // TODO: find a way to memoize, in case this field is within a List type.
    var args = (0, _values.getArgumentValues)(fieldDef, fieldNodes[0], exeContext.variableValues); // The resolve function's optional third argument is a context value that
    // is provided to every resolve function within an execution. It is commonly
    // used to represent an authenticated user, or request-specific caches.

    var contextValue = exeContext.contextValue;
    var result = resolveFn(source, args, contextValue, info);
    var completed;
    if ((0, _isPromise.isPromise)(result)) {
      completed = result.then(function (resolved) {
        return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);
      });
    } else {
      completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);
    }
    if ((0, _isPromise.isPromise)(completed)) {
      // Note: we don't rely on a `catch` method, but we do expect "thenable"
      // to take a second callback for the error case.
      return completed.then(undefined, function (rawError) {
        var error = (0, _locatedError.locatedError)(rawError, fieldNodes, (0, _Path.pathToArray)(path));
        return handleFieldError(error, returnType, exeContext);
      });
    }
    return completed;
  } catch (rawError) {
    var error = (0, _locatedError.locatedError)(rawError, fieldNodes, (0, _Path.pathToArray)(path));
    return handleFieldError(error, returnType, exeContext);
  }
}
/**
 * @internal
 */

function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {
  // The resolve function's optional fourth argument is a collection of
  // information about the current execution state.
  return {
    fieldName: fieldDef.name,
    fieldNodes: fieldNodes,
    returnType: fieldDef.type,
    parentType: parentType,
    path: path,
    schema: exeContext.schema,
    fragments: exeContext.fragments,
    rootValue: exeContext.rootValue,
    operation: exeContext.operation,
    variableValues: exeContext.variableValues
  };
}
function handleFieldError(error, returnType, exeContext) {
  // If the field type is non-nullable, then it is resolved without any
  // protection from errors, however it still properly locates the error.
  if ((0, _definition.isNonNullType)(returnType)) {
    throw error;
  } // Otherwise, error protection is applied, logging the error and resolving
  // a null value for this field if one is encountered.

  exeContext.errors.push(error);
  return null;
}
/**
 * Implements the instructions for completeValue as defined in the
 * "Value Completion" section of the spec.
 *
 * If the field type is Non-Null, then this recursively completes the value
 * for the inner type. It throws a field error if that completion returns null,
 * as per the "Nullability" section of the spec.
 *
 * If the field type is a List, then this recursively completes the value
 * for the inner type on each item in the list.
 *
 * If the field type is a Scalar or Enum, ensures the completed value is a legal
 * value of the type by calling the `serialize` method of GraphQL type
 * definition.
 *
 * If the field is an abstract type, determine the runtime type of the value
 * and then complete based on that type
 *
 * Otherwise, the field type expects a sub-selection set, and will complete the
 * value by executing all sub-selections.
 */

function completeValue(exeContext, returnType, fieldNodes, info, path, result) {
  // If result is an Error, throw a located error.
  if (result instanceof Error) {
    throw result;
  } // If field type is NonNull, complete for inner type, and throw field error
  // if result is null.

  if ((0, _definition.isNonNullType)(returnType)) {
    var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);
    if (completed === null) {
      throw new Error("Cannot return null for non-nullable field ".concat(info.parentType.name, ".").concat(info.fieldName, "."));
    }
    return completed;
  } // If result value is null or undefined then return null.

  if (result == null) {
    return null;
  } // If field type is List, complete each item in the list with the inner type

  if ((0, _definition.isListType)(returnType)) {
    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);
  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,
  // returning null if serialization is not possible.

  if ((0, _definition.isLeafType)(returnType)) {
    return completeLeafValue(returnType, result);
  } // If field type is an abstract type, Interface or Union, determine the
  // runtime Object type and complete for that type.

  if ((0, _definition.isAbstractType)(returnType)) {
    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);
  } // If field type is Object, execute and complete all sub-selections.

  if ((0, _definition.isObjectType)(returnType)) {
    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);
  }
  /* c8 ignore next 6 */
  // Not reachable, all possible output types have been considered.

  false || (0, _invariant.invariant)(false, 'Cannot complete value of unexpected output type: ' + (0, _inspect.inspect)(returnType));
}
/**
 * Complete a list value by completing each item in the list with the
 * inner type
 */

function completeListValue(exeContext, returnType, fieldNodes, info, path, result) {
  if (!(0, _isIterableObject.isIterableObject)(result)) {
    throw new _GraphQLError.GraphQLError("Expected Iterable, but did not find one for field \"".concat(info.parentType.name, ".").concat(info.fieldName, "\"."));
  } // This is specified as a simple map, however we're optimizing the path
  // where the list contains no Promises by avoiding creating another Promise.

  var itemType = returnType.ofType;
  var containsPromise = false;
  var completedResults = Array.from(result, function (item, index) {
    // No need to modify the info object containing the path,
    // since from here on it is not ever accessed by resolver functions.
    var itemPath = (0, _Path.addPath)(path, index, undefined);
    try {
      var completedItem;
      if ((0, _isPromise.isPromise)(item)) {
        completedItem = item.then(function (resolved) {
          return completeValue(exeContext, itemType, fieldNodes, info, itemPath, resolved);
        });
      } else {
        completedItem = completeValue(exeContext, itemType, fieldNodes, info, itemPath, item);
      }
      if ((0, _isPromise.isPromise)(completedItem)) {
        containsPromise = true; // Note: we don't rely on a `catch` method, but we do expect "thenable"
        // to take a second callback for the error case.

        return completedItem.then(undefined, function (rawError) {
          var error = (0, _locatedError.locatedError)(rawError, fieldNodes, (0, _Path.pathToArray)(itemPath));
          return handleFieldError(error, itemType, exeContext);
        });
      }
      return completedItem;
    } catch (rawError) {
      var error = (0, _locatedError.locatedError)(rawError, fieldNodes, (0, _Path.pathToArray)(itemPath));
      return handleFieldError(error, itemType, exeContext);
    }
  });
  return containsPromise ? Promise.all(completedResults) : completedResults;
}
/**
 * Complete a Scalar or Enum by serializing to a valid value, returning
 * null if serialization is not possible.
 */

function completeLeafValue(returnType, result) {
  var serializedResult = returnType.serialize(result);
  if (serializedResult == null) {
    throw new Error("Expected `".concat((0, _inspect.inspect)(returnType), ".serialize(").concat((0, _inspect.inspect)(result), ")` to ") + "return non-nullable value, returned: ".concat((0, _inspect.inspect)(serializedResult)));
  }
  return serializedResult;
}
/**
 * Complete a value of an abstract type by determining the runtime object type
 * of that value, then complete the value for that type.
 */

function completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {
  var _returnType$resolveTy;
  var resolveTypeFn = (_returnType$resolveTy = returnType.resolveType) !== null && _returnType$resolveTy !== void 0 ? _returnType$resolveTy : exeContext.typeResolver;
  var contextValue = exeContext.contextValue;
  var runtimeType = resolveTypeFn(result, contextValue, info, returnType);
  if ((0, _isPromise.isPromise)(runtimeType)) {
    return runtimeType.then(function (resolvedRuntimeType) {
      return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);
    });
  }
  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);
}
function ensureValidRuntimeType(runtimeTypeName, exeContext, returnType, fieldNodes, info, result) {
  if (runtimeTypeName == null) {
    throw new _GraphQLError.GraphQLError("Abstract type \"".concat(returnType.name, "\" must resolve to an Object type at runtime for field \"").concat(info.parentType.name, ".").concat(info.fieldName, "\". Either the \"").concat(returnType.name, "\" type should provide a \"resolveType\" function or each possible type should provide an \"isTypeOf\" function."), fieldNodes);
  } // releases before 16.0.0 supported returning `GraphQLObjectType` from `resolveType`
  // TODO: remove in 17.0.0 release

  if ((0, _definition.isObjectType)(runtimeTypeName)) {
    throw new _GraphQLError.GraphQLError('Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.');
  }
  if (typeof runtimeTypeName !== 'string') {
    throw new _GraphQLError.GraphQLError("Abstract type \"".concat(returnType.name, "\" must resolve to an Object type at runtime for field \"").concat(info.parentType.name, ".").concat(info.fieldName, "\" with ") + "value ".concat((0, _inspect.inspect)(result), ", received \"").concat((0, _inspect.inspect)(runtimeTypeName), "\"."));
  }
  var runtimeType = exeContext.schema.getType(runtimeTypeName);
  if (runtimeType == null) {
    throw new _GraphQLError.GraphQLError("Abstract type \"".concat(returnType.name, "\" was resolved to a type \"").concat(runtimeTypeName, "\" that does not exist inside the schema."), {
      nodes: fieldNodes
    });
  }
  if (!(0, _definition.isObjectType)(runtimeType)) {
    throw new _GraphQLError.GraphQLError("Abstract type \"".concat(returnType.name, "\" was resolved to a non-object type \"").concat(runtimeTypeName, "\"."), {
      nodes: fieldNodes
    });
  }
  if (!exeContext.schema.isSubType(returnType, runtimeType)) {
    throw new _GraphQLError.GraphQLError("Runtime Object type \"".concat(runtimeType.name, "\" is not a possible type for \"").concat(returnType.name, "\"."), {
      nodes: fieldNodes
    });
  }
  return runtimeType;
}
/**
 * Complete an Object value by executing all sub-selections.
 */

function completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {
  // Collect sub-fields to execute to complete this value.
  var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes); // If there is an isTypeOf predicate function, call it with the
  // current result. If isTypeOf returns false, then raise an error rather
  // than continuing execution.

  if (returnType.isTypeOf) {
    var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);
    if ((0, _isPromise.isPromise)(isTypeOf)) {
      return isTypeOf.then(function (resolvedIsTypeOf) {
        if (!resolvedIsTypeOf) {
          throw invalidReturnTypeError(returnType, result, fieldNodes);
        }
        return executeFields(exeContext, returnType, result, path, subFieldNodes);
      });
    }
    if (!isTypeOf) {
      throw invalidReturnTypeError(returnType, result, fieldNodes);
    }
  }
  return executeFields(exeContext, returnType, result, path, subFieldNodes);
}
function invalidReturnTypeError(returnType, result, fieldNodes) {
  return new _GraphQLError.GraphQLError("Expected value of type \"".concat(returnType.name, "\" but got: ").concat((0, _inspect.inspect)(result), "."), {
    nodes: fieldNodes
  });
}
/**
 * If a resolveType function is not given, then a default resolve behavior is
 * used which attempts two strategies:
 *
 * First, See if the provided value has a `__typename` field defined, if so, use
 * that value as name of the resolved type.
 *
 * Otherwise, test each possible type for the abstract type by calling
 * isTypeOf for the object being coerced, returning the first type that matches.
 */

var defaultTypeResolver = exports.defaultTypeResolver = function defaultTypeResolver(value, contextValue, info, abstractType) {
  // First, look for `__typename`.
  if ((0, _isObjectLike.isObjectLike)(value) && typeof value.__typename === 'string') {
    return value.__typename;
  } // Otherwise, test each possible type.

  var possibleTypes = info.schema.getPossibleTypes(abstractType);
  var promisedIsTypeOfResults = [];
  for (var i = 0; i < possibleTypes.length; i++) {
    var type = possibleTypes[i];
    if (type.isTypeOf) {
      var isTypeOfResult = type.isTypeOf(value, contextValue, info);
      if ((0, _isPromise.isPromise)(isTypeOfResult)) {
        promisedIsTypeOfResults[i] = isTypeOfResult;
      } else if (isTypeOfResult) {
        return type.name;
      }
    }
  }
  if (promisedIsTypeOfResults.length) {
    return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {
      for (var _i = 0; _i < isTypeOfResults.length; _i++) {
        if (isTypeOfResults[_i]) {
          return possibleTypes[_i].name;
        }
      }
    });
  }
};
/**
 * If a resolve function is not given, then a default resolve behavior is used
 * which takes the property of the source object of the same name as the field
 * and returns it as the result, or if it's a function, returns the result
 * of calling that function while passing along args and context value.
 */

var defaultFieldResolver = exports.defaultFieldResolver = function defaultFieldResolver(source, args, contextValue, info) {
  // ensure source is a value for which property access is acceptable.
  if ((0, _isObjectLike.isObjectLike)(source) || typeof source === 'function') {
    var property = source[info.fieldName];
    if (typeof property === 'function') {
      return source[info.fieldName](args, contextValue, info);
    }
    return property;
  }
};
/**
 * This method looks up the field on the given type definition.
 * It has special casing for the three introspection fields,
 * __schema, __type and __typename. __typename is special because
 * it can always be queried as a field, even in situations where no
 * other fields are allowed, like on a Union. __schema and __type
 * could get automatically added to the query type, but that would
 * require mutating type definitions, which would cause issues.
 *
 * @internal
 */

function getFieldDef(schema, parentType, fieldNode) {
  var fieldName = fieldNode.name.value;
  if (fieldName === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {
    return _introspection.SchemaMetaFieldDef;
  } else if (fieldName === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {
    return _introspection.TypeMetaFieldDef;
  } else if (fieldName === _introspection.TypeNameMetaFieldDef.name) {
    return _introspection.TypeNameMetaFieldDef;
  }
  return parentType.getFields()[fieldName];
}
},{"../jsutils/devAssert.mjs":"../node_modules/graphql/jsutils/devAssert.mjs","../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","../jsutils/invariant.mjs":"../node_modules/graphql/jsutils/invariant.mjs","../jsutils/isIterableObject.mjs":"../node_modules/graphql/jsutils/isIterableObject.mjs","../jsutils/isObjectLike.mjs":"../node_modules/graphql/jsutils/isObjectLike.mjs","../jsutils/isPromise.mjs":"../node_modules/graphql/jsutils/isPromise.mjs","../jsutils/memoize3.mjs":"../node_modules/graphql/jsutils/memoize3.mjs","../jsutils/Path.mjs":"../node_modules/graphql/jsutils/Path.mjs","../jsutils/promiseForObject.mjs":"../node_modules/graphql/jsutils/promiseForObject.mjs","../jsutils/promiseReduce.mjs":"../node_modules/graphql/jsutils/promiseReduce.mjs","../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../error/locatedError.mjs":"../node_modules/graphql/error/locatedError.mjs","../language/ast.mjs":"../node_modules/graphql/language/ast.mjs","../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs","../type/definition.mjs":"../node_modules/graphql/type/definition.mjs","../type/introspection.mjs":"../node_modules/graphql/type/introspection.mjs","../type/validate.mjs":"../node_modules/graphql/type/validate.mjs","./collectFields.mjs":"../node_modules/graphql/execution/collectFields.mjs","./values.mjs":"../node_modules/graphql/execution/values.mjs"}],"../node_modules/graphql/graphql.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.graphql = graphql;
exports.graphqlSync = graphqlSync;
var _devAssert = require("./jsutils/devAssert.mjs");
var _isPromise = require("./jsutils/isPromise.mjs");
var _parser = require("./language/parser.mjs");
var _validate = require("./type/validate.mjs");
var _validate2 = require("./validation/validate.mjs");
var _execute = require("./execution/execute.mjs");
/**
 * This is the primary entry point function for fulfilling GraphQL operations
 * by parsing, validating, and executing a GraphQL document along side a
 * GraphQL schema.
 *
 * More sophisticated GraphQL servers, such as those which persist queries,
 * may wish to separate the validation and execution phases to a static time
 * tooling step, and a server runtime step.
 *
 * Accepts either an object with named arguments, or individual arguments:
 *
 * schema:
 *    The GraphQL type system to use when validating and executing a query.
 * source:
 *    A GraphQL language formatted string representing the requested operation.
 * rootValue:
 *    The value provided as the first argument to resolver functions on the top
 *    level type (e.g. the query object type).
 * contextValue:
 *    The context value is provided as an argument to resolver functions after
 *    field arguments. It is used to pass shared information useful at any point
 *    during executing this query, for example the currently logged in user and
 *    connections to databases or other services.
 * variableValues:
 *    A mapping of variable name to runtime value to use for all variables
 *    defined in the requestString.
 * operationName:
 *    The name of the operation to use if requestString contains multiple
 *    possible operations. Can be omitted if requestString contains only
 *    one operation.
 * fieldResolver:
 *    A resolver function to use when one is not provided by the schema.
 *    If not provided, the default field resolver is used (which looks for a
 *    value or method on the source value with the field's name).
 * typeResolver:
 *    A type resolver function to use when none is provided by the schema.
 *    If not provided, the default type resolver is used (which looks for a
 *    `__typename` field or alternatively calls the `isTypeOf` method).
 */

function graphql(args) {
  // Always return a Promise for a consistent API.
  return new Promise(function (resolve) {
    return resolve(graphqlImpl(args));
  });
}
/**
 * The graphqlSync function also fulfills GraphQL operations by parsing,
 * validating, and executing a GraphQL document along side a GraphQL schema.
 * However, it guarantees to complete synchronously (or throw an error) assuming
 * that all field resolvers are also synchronous.
 */

function graphqlSync(args) {
  var result = graphqlImpl(args); // Assert that the execution was synchronous.

  if ((0, _isPromise.isPromise)(result)) {
    throw new Error('GraphQL execution failed to complete synchronously.');
  }
  return result;
}
function graphqlImpl(args) {
  // Temporary for v15 to v16 migration. Remove in v17
  arguments.length < 2 || (0, _devAssert.devAssert)(false, 'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.');
  var schema = args.schema,
    source = args.source,
    rootValue = args.rootValue,
    contextValue = args.contextValue,
    variableValues = args.variableValues,
    operationName = args.operationName,
    fieldResolver = args.fieldResolver,
    typeResolver = args.typeResolver; // Validate Schema

  var schemaValidationErrors = (0, _validate.validateSchema)(schema);
  if (schemaValidationErrors.length > 0) {
    return {
      errors: schemaValidationErrors
    };
  } // Parse

  var document;
  try {
    document = (0, _parser.parse)(source);
  } catch (syntaxError) {
    return {
      errors: [syntaxError]
    };
  } // Validate

  var validationErrors = (0, _validate2.validate)(schema, document);
  if (validationErrors.length > 0) {
    return {
      errors: validationErrors
    };
  } // Execute

  return (0, _execute.execute)({
    schema: schema,
    document: document,
    rootValue: rootValue,
    contextValue: contextValue,
    variableValues: variableValues,
    operationName: operationName,
    fieldResolver: fieldResolver,
    typeResolver: typeResolver
  });
}
},{"./jsutils/devAssert.mjs":"../node_modules/graphql/jsutils/devAssert.mjs","./jsutils/isPromise.mjs":"../node_modules/graphql/jsutils/isPromise.mjs","./language/parser.mjs":"../node_modules/graphql/language/parser.mjs","./type/validate.mjs":"../node_modules/graphql/type/validate.mjs","./validation/validate.mjs":"../node_modules/graphql/validation/validate.mjs","./execution/execute.mjs":"../node_modules/graphql/execution/execute.mjs"}],"../node_modules/graphql/type/index.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "DEFAULT_DEPRECATION_REASON", {
  enumerable: true,
  get: function () {
    return _directives.DEFAULT_DEPRECATION_REASON;
  }
});
Object.defineProperty(exports, "GRAPHQL_MAX_INT", {
  enumerable: true,
  get: function () {
    return _scalars.GRAPHQL_MAX_INT;
  }
});
Object.defineProperty(exports, "GRAPHQL_MIN_INT", {
  enumerable: true,
  get: function () {
    return _scalars.GRAPHQL_MIN_INT;
  }
});
Object.defineProperty(exports, "GraphQLBoolean", {
  enumerable: true,
  get: function () {
    return _scalars.GraphQLBoolean;
  }
});
Object.defineProperty(exports, "GraphQLDeprecatedDirective", {
  enumerable: true,
  get: function () {
    return _directives.GraphQLDeprecatedDirective;
  }
});
Object.defineProperty(exports, "GraphQLDirective", {
  enumerable: true,
  get: function () {
    return _directives.GraphQLDirective;
  }
});
Object.defineProperty(exports, "GraphQLEnumType", {
  enumerable: true,
  get: function () {
    return _definition.GraphQLEnumType;
  }
});
Object.defineProperty(exports, "GraphQLFloat", {
  enumerable: true,
  get: function () {
    return _scalars.GraphQLFloat;
  }
});
Object.defineProperty(exports, "GraphQLID", {
  enumerable: true,
  get: function () {
    return _scalars.GraphQLID;
  }
});
Object.defineProperty(exports, "GraphQLIncludeDirective", {
  enumerable: true,
  get: function () {
    return _directives.GraphQLIncludeDirective;
  }
});
Object.defineProperty(exports, "GraphQLInputObjectType", {
  enumerable: true,
  get: function () {
    return _definition.GraphQLInputObjectType;
  }
});
Object.defineProperty(exports, "GraphQLInt", {
  enumerable: true,
  get: function () {
    return _scalars.GraphQLInt;
  }
});
Object.defineProperty(exports, "GraphQLInterfaceType", {
  enumerable: true,
  get: function () {
    return _definition.GraphQLInterfaceType;
  }
});
Object.defineProperty(exports, "GraphQLList", {
  enumerable: true,
  get: function () {
    return _definition.GraphQLList;
  }
});
Object.defineProperty(exports, "GraphQLNonNull", {
  enumerable: true,
  get: function () {
    return _definition.GraphQLNonNull;
  }
});
Object.defineProperty(exports, "GraphQLObjectType", {
  enumerable: true,
  get: function () {
    return _definition.GraphQLObjectType;
  }
});
Object.defineProperty(exports, "GraphQLScalarType", {
  enumerable: true,
  get: function () {
    return _definition.GraphQLScalarType;
  }
});
Object.defineProperty(exports, "GraphQLSchema", {
  enumerable: true,
  get: function () {
    return _schema.GraphQLSchema;
  }
});
Object.defineProperty(exports, "GraphQLSkipDirective", {
  enumerable: true,
  get: function () {
    return _directives.GraphQLSkipDirective;
  }
});
Object.defineProperty(exports, "GraphQLSpecifiedByDirective", {
  enumerable: true,
  get: function () {
    return _directives.GraphQLSpecifiedByDirective;
  }
});
Object.defineProperty(exports, "GraphQLString", {
  enumerable: true,
  get: function () {
    return _scalars.GraphQLString;
  }
});
Object.defineProperty(exports, "GraphQLUnionType", {
  enumerable: true,
  get: function () {
    return _definition.GraphQLUnionType;
  }
});
Object.defineProperty(exports, "SchemaMetaFieldDef", {
  enumerable: true,
  get: function () {
    return _introspection.SchemaMetaFieldDef;
  }
});
Object.defineProperty(exports, "TypeKind", {
  enumerable: true,
  get: function () {
    return _introspection.TypeKind;
  }
});
Object.defineProperty(exports, "TypeMetaFieldDef", {
  enumerable: true,
  get: function () {
    return _introspection.TypeMetaFieldDef;
  }
});
Object.defineProperty(exports, "TypeNameMetaFieldDef", {
  enumerable: true,
  get: function () {
    return _introspection.TypeNameMetaFieldDef;
  }
});
Object.defineProperty(exports, "__Directive", {
  enumerable: true,
  get: function () {
    return _introspection.__Directive;
  }
});
Object.defineProperty(exports, "__DirectiveLocation", {
  enumerable: true,
  get: function () {
    return _introspection.__DirectiveLocation;
  }
});
Object.defineProperty(exports, "__EnumValue", {
  enumerable: true,
  get: function () {
    return _introspection.__EnumValue;
  }
});
Object.defineProperty(exports, "__Field", {
  enumerable: true,
  get: function () {
    return _introspection.__Field;
  }
});
Object.defineProperty(exports, "__InputValue", {
  enumerable: true,
  get: function () {
    return _introspection.__InputValue;
  }
});
Object.defineProperty(exports, "__Schema", {
  enumerable: true,
  get: function () {
    return _introspection.__Schema;
  }
});
Object.defineProperty(exports, "__Type", {
  enumerable: true,
  get: function () {
    return _introspection.__Type;
  }
});
Object.defineProperty(exports, "__TypeKind", {
  enumerable: true,
  get: function () {
    return _introspection.__TypeKind;
  }
});
Object.defineProperty(exports, "assertAbstractType", {
  enumerable: true,
  get: function () {
    return _definition.assertAbstractType;
  }
});
Object.defineProperty(exports, "assertCompositeType", {
  enumerable: true,
  get: function () {
    return _definition.assertCompositeType;
  }
});
Object.defineProperty(exports, "assertDirective", {
  enumerable: true,
  get: function () {
    return _directives.assertDirective;
  }
});
Object.defineProperty(exports, "assertEnumType", {
  enumerable: true,
  get: function () {
    return _definition.assertEnumType;
  }
});
Object.defineProperty(exports, "assertEnumValueName", {
  enumerable: true,
  get: function () {
    return _assertName.assertEnumValueName;
  }
});
Object.defineProperty(exports, "assertInputObjectType", {
  enumerable: true,
  get: function () {
    return _definition.assertInputObjectType;
  }
});
Object.defineProperty(exports, "assertInputType", {
  enumerable: true,
  get: function () {
    return _definition.assertInputType;
  }
});
Object.defineProperty(exports, "assertInterfaceType", {
  enumerable: true,
  get: function () {
    return _definition.assertInterfaceType;
  }
});
Object.defineProperty(exports, "assertLeafType", {
  enumerable: true,
  get: function () {
    return _definition.assertLeafType;
  }
});
Object.defineProperty(exports, "assertListType", {
  enumerable: true,
  get: function () {
    return _definition.assertListType;
  }
});
Object.defineProperty(exports, "assertName", {
  enumerable: true,
  get: function () {
    return _assertName.assertName;
  }
});
Object.defineProperty(exports, "assertNamedType", {
  enumerable: true,
  get: function () {
    return _definition.assertNamedType;
  }
});
Object.defineProperty(exports, "assertNonNullType", {
  enumerable: true,
  get: function () {
    return _definition.assertNonNullType;
  }
});
Object.defineProperty(exports, "assertNullableType", {
  enumerable: true,
  get: function () {
    return _definition.assertNullableType;
  }
});
Object.defineProperty(exports, "assertObjectType", {
  enumerable: true,
  get: function () {
    return _definition.assertObjectType;
  }
});
Object.defineProperty(exports, "assertOutputType", {
  enumerable: true,
  get: function () {
    return _definition.assertOutputType;
  }
});
Object.defineProperty(exports, "assertScalarType", {
  enumerable: true,
  get: function () {
    return _definition.assertScalarType;
  }
});
Object.defineProperty(exports, "assertSchema", {
  enumerable: true,
  get: function () {
    return _schema.assertSchema;
  }
});
Object.defineProperty(exports, "assertType", {
  enumerable: true,
  get: function () {
    return _definition.assertType;
  }
});
Object.defineProperty(exports, "assertUnionType", {
  enumerable: true,
  get: function () {
    return _definition.assertUnionType;
  }
});
Object.defineProperty(exports, "assertValidSchema", {
  enumerable: true,
  get: function () {
    return _validate.assertValidSchema;
  }
});
Object.defineProperty(exports, "assertWrappingType", {
  enumerable: true,
  get: function () {
    return _definition.assertWrappingType;
  }
});
Object.defineProperty(exports, "getNamedType", {
  enumerable: true,
  get: function () {
    return _definition.getNamedType;
  }
});
Object.defineProperty(exports, "getNullableType", {
  enumerable: true,
  get: function () {
    return _definition.getNullableType;
  }
});
Object.defineProperty(exports, "introspectionTypes", {
  enumerable: true,
  get: function () {
    return _introspection.introspectionTypes;
  }
});
Object.defineProperty(exports, "isAbstractType", {
  enumerable: true,
  get: function () {
    return _definition.isAbstractType;
  }
});
Object.defineProperty(exports, "isCompositeType", {
  enumerable: true,
  get: function () {
    return _definition.isCompositeType;
  }
});
Object.defineProperty(exports, "isDirective", {
  enumerable: true,
  get: function () {
    return _directives.isDirective;
  }
});
Object.defineProperty(exports, "isEnumType", {
  enumerable: true,
  get: function () {
    return _definition.isEnumType;
  }
});
Object.defineProperty(exports, "isInputObjectType", {
  enumerable: true,
  get: function () {
    return _definition.isInputObjectType;
  }
});
Object.defineProperty(exports, "isInputType", {
  enumerable: true,
  get: function () {
    return _definition.isInputType;
  }
});
Object.defineProperty(exports, "isInterfaceType", {
  enumerable: true,
  get: function () {
    return _definition.isInterfaceType;
  }
});
Object.defineProperty(exports, "isIntrospectionType", {
  enumerable: true,
  get: function () {
    return _introspection.isIntrospectionType;
  }
});
Object.defineProperty(exports, "isLeafType", {
  enumerable: true,
  get: function () {
    return _definition.isLeafType;
  }
});
Object.defineProperty(exports, "isListType", {
  enumerable: true,
  get: function () {
    return _definition.isListType;
  }
});
Object.defineProperty(exports, "isNamedType", {
  enumerable: true,
  get: function () {
    return _definition.isNamedType;
  }
});
Object.defineProperty(exports, "isNonNullType", {
  enumerable: true,
  get: function () {
    return _definition.isNonNullType;
  }
});
Object.defineProperty(exports, "isNullableType", {
  enumerable: true,
  get: function () {
    return _definition.isNullableType;
  }
});
Object.defineProperty(exports, "isObjectType", {
  enumerable: true,
  get: function () {
    return _definition.isObjectType;
  }
});
Object.defineProperty(exports, "isOutputType", {
  enumerable: true,
  get: function () {
    return _definition.isOutputType;
  }
});
Object.defineProperty(exports, "isRequiredArgument", {
  enumerable: true,
  get: function () {
    return _definition.isRequiredArgument;
  }
});
Object.defineProperty(exports, "isRequiredInputField", {
  enumerable: true,
  get: function () {
    return _definition.isRequiredInputField;
  }
});
Object.defineProperty(exports, "isScalarType", {
  enumerable: true,
  get: function () {
    return _definition.isScalarType;
  }
});
Object.defineProperty(exports, "isSchema", {
  enumerable: true,
  get: function () {
    return _schema.isSchema;
  }
});
Object.defineProperty(exports, "isSpecifiedDirective", {
  enumerable: true,
  get: function () {
    return _directives.isSpecifiedDirective;
  }
});
Object.defineProperty(exports, "isSpecifiedScalarType", {
  enumerable: true,
  get: function () {
    return _scalars.isSpecifiedScalarType;
  }
});
Object.defineProperty(exports, "isType", {
  enumerable: true,
  get: function () {
    return _definition.isType;
  }
});
Object.defineProperty(exports, "isUnionType", {
  enumerable: true,
  get: function () {
    return _definition.isUnionType;
  }
});
Object.defineProperty(exports, "isWrappingType", {
  enumerable: true,
  get: function () {
    return _definition.isWrappingType;
  }
});
Object.defineProperty(exports, "resolveObjMapThunk", {
  enumerable: true,
  get: function () {
    return _definition.resolveObjMapThunk;
  }
});
Object.defineProperty(exports, "resolveReadonlyArrayThunk", {
  enumerable: true,
  get: function () {
    return _definition.resolveReadonlyArrayThunk;
  }
});
Object.defineProperty(exports, "specifiedDirectives", {
  enumerable: true,
  get: function () {
    return _directives.specifiedDirectives;
  }
});
Object.defineProperty(exports, "specifiedScalarTypes", {
  enumerable: true,
  get: function () {
    return _scalars.specifiedScalarTypes;
  }
});
Object.defineProperty(exports, "validateSchema", {
  enumerable: true,
  get: function () {
    return _validate.validateSchema;
  }
});
var _schema = require("./schema.mjs");
var _definition = require("./definition.mjs");
var _directives = require("./directives.mjs");
var _scalars = require("./scalars.mjs");
var _introspection = require("./introspection.mjs");
var _validate = require("./validate.mjs");
var _assertName = require("./assertName.mjs");
},{"./schema.mjs":"../node_modules/graphql/type/schema.mjs","./definition.mjs":"../node_modules/graphql/type/definition.mjs","./directives.mjs":"../node_modules/graphql/type/directives.mjs","./scalars.mjs":"../node_modules/graphql/type/scalars.mjs","./introspection.mjs":"../node_modules/graphql/type/introspection.mjs","./validate.mjs":"../node_modules/graphql/type/validate.mjs","./assertName.mjs":"../node_modules/graphql/type/assertName.mjs"}],"../node_modules/graphql/language/index.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BREAK", {
  enumerable: true,
  get: function () {
    return _visitor.BREAK;
  }
});
Object.defineProperty(exports, "DirectiveLocation", {
  enumerable: true,
  get: function () {
    return _directiveLocation.DirectiveLocation;
  }
});
Object.defineProperty(exports, "Kind", {
  enumerable: true,
  get: function () {
    return _kinds.Kind;
  }
});
Object.defineProperty(exports, "Lexer", {
  enumerable: true,
  get: function () {
    return _lexer.Lexer;
  }
});
Object.defineProperty(exports, "Location", {
  enumerable: true,
  get: function () {
    return _ast.Location;
  }
});
Object.defineProperty(exports, "OperationTypeNode", {
  enumerable: true,
  get: function () {
    return _ast.OperationTypeNode;
  }
});
Object.defineProperty(exports, "Source", {
  enumerable: true,
  get: function () {
    return _source.Source;
  }
});
Object.defineProperty(exports, "Token", {
  enumerable: true,
  get: function () {
    return _ast.Token;
  }
});
Object.defineProperty(exports, "TokenKind", {
  enumerable: true,
  get: function () {
    return _tokenKind.TokenKind;
  }
});
Object.defineProperty(exports, "getEnterLeaveForKind", {
  enumerable: true,
  get: function () {
    return _visitor.getEnterLeaveForKind;
  }
});
Object.defineProperty(exports, "getLocation", {
  enumerable: true,
  get: function () {
    return _location.getLocation;
  }
});
Object.defineProperty(exports, "getVisitFn", {
  enumerable: true,
  get: function () {
    return _visitor.getVisitFn;
  }
});
Object.defineProperty(exports, "isConstValueNode", {
  enumerable: true,
  get: function () {
    return _predicates.isConstValueNode;
  }
});
Object.defineProperty(exports, "isDefinitionNode", {
  enumerable: true,
  get: function () {
    return _predicates.isDefinitionNode;
  }
});
Object.defineProperty(exports, "isExecutableDefinitionNode", {
  enumerable: true,
  get: function () {
    return _predicates.isExecutableDefinitionNode;
  }
});
Object.defineProperty(exports, "isSelectionNode", {
  enumerable: true,
  get: function () {
    return _predicates.isSelectionNode;
  }
});
Object.defineProperty(exports, "isTypeDefinitionNode", {
  enumerable: true,
  get: function () {
    return _predicates.isTypeDefinitionNode;
  }
});
Object.defineProperty(exports, "isTypeExtensionNode", {
  enumerable: true,
  get: function () {
    return _predicates.isTypeExtensionNode;
  }
});
Object.defineProperty(exports, "isTypeNode", {
  enumerable: true,
  get: function () {
    return _predicates.isTypeNode;
  }
});
Object.defineProperty(exports, "isTypeSystemDefinitionNode", {
  enumerable: true,
  get: function () {
    return _predicates.isTypeSystemDefinitionNode;
  }
});
Object.defineProperty(exports, "isTypeSystemExtensionNode", {
  enumerable: true,
  get: function () {
    return _predicates.isTypeSystemExtensionNode;
  }
});
Object.defineProperty(exports, "isValueNode", {
  enumerable: true,
  get: function () {
    return _predicates.isValueNode;
  }
});
Object.defineProperty(exports, "parse", {
  enumerable: true,
  get: function () {
    return _parser.parse;
  }
});
Object.defineProperty(exports, "parseConstValue", {
  enumerable: true,
  get: function () {
    return _parser.parseConstValue;
  }
});
Object.defineProperty(exports, "parseType", {
  enumerable: true,
  get: function () {
    return _parser.parseType;
  }
});
Object.defineProperty(exports, "parseValue", {
  enumerable: true,
  get: function () {
    return _parser.parseValue;
  }
});
Object.defineProperty(exports, "print", {
  enumerable: true,
  get: function () {
    return _printer.print;
  }
});
Object.defineProperty(exports, "printLocation", {
  enumerable: true,
  get: function () {
    return _printLocation.printLocation;
  }
});
Object.defineProperty(exports, "printSourceLocation", {
  enumerable: true,
  get: function () {
    return _printLocation.printSourceLocation;
  }
});
Object.defineProperty(exports, "visit", {
  enumerable: true,
  get: function () {
    return _visitor.visit;
  }
});
Object.defineProperty(exports, "visitInParallel", {
  enumerable: true,
  get: function () {
    return _visitor.visitInParallel;
  }
});
var _source = require("./source.mjs");
var _location = require("./location.mjs");
var _printLocation = require("./printLocation.mjs");
var _kinds = require("./kinds.mjs");
var _tokenKind = require("./tokenKind.mjs");
var _lexer = require("./lexer.mjs");
var _parser = require("./parser.mjs");
var _printer = require("./printer.mjs");
var _visitor = require("./visitor.mjs");
var _ast = require("./ast.mjs");
var _predicates = require("./predicates.mjs");
var _directiveLocation = require("./directiveLocation.mjs");
},{"./source.mjs":"../node_modules/graphql/language/source.mjs","./location.mjs":"../node_modules/graphql/language/location.mjs","./printLocation.mjs":"../node_modules/graphql/language/printLocation.mjs","./kinds.mjs":"../node_modules/graphql/language/kinds.mjs","./tokenKind.mjs":"../node_modules/graphql/language/tokenKind.mjs","./lexer.mjs":"../node_modules/graphql/language/lexer.mjs","./parser.mjs":"../node_modules/graphql/language/parser.mjs","./printer.mjs":"../node_modules/graphql/language/printer.mjs","./visitor.mjs":"../node_modules/graphql/language/visitor.mjs","./ast.mjs":"../node_modules/graphql/language/ast.mjs","./predicates.mjs":"../node_modules/graphql/language/predicates.mjs","./directiveLocation.mjs":"../node_modules/graphql/language/directiveLocation.mjs"}],"../node_modules/graphql/jsutils/isAsyncIterable.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isAsyncIterable = isAsyncIterable;
/**
 * Returns true if the provided object implements the AsyncIterator protocol via
 * implementing a `Symbol.asyncIterator` method.
 */
function isAsyncIterable(maybeAsyncIterable) {
  return typeof (maybeAsyncIterable === null || maybeAsyncIterable === void 0 ? void 0 : maybeAsyncIterable[Symbol.asyncIterator]) === 'function';
}
},{}],"../node_modules/graphql/execution/mapAsyncIterator.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapAsyncIterator = mapAsyncIterator;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
/**
 * Given an AsyncIterable and a callback function, return an AsyncIterator
 * which produces values mapped via calling the callback function.
 */
function mapAsyncIterator(iterable, callback) {
  var iterator = iterable[Symbol.asyncIterator]();
  function mapResult(_x) {
    return _mapResult.apply(this, arguments);
  }
  function _mapResult() {
    _mapResult = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(result) {
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            if (!result.done) {
              _context4.next = 2;
              break;
            }
            return _context4.abrupt("return", result);
          case 2:
            _context4.prev = 2;
            _context4.next = 5;
            return callback(result.value);
          case 5:
            _context4.t0 = _context4.sent;
            return _context4.abrupt("return", {
              value: _context4.t0,
              done: false
            });
          case 9:
            _context4.prev = 9;
            _context4.t1 = _context4["catch"](2);
            if (!(typeof iterator.return === 'function')) {
              _context4.next = 19;
              break;
            }
            _context4.prev = 12;
            _context4.next = 15;
            return iterator.return();
          case 15:
            _context4.next = 19;
            break;
          case 17:
            _context4.prev = 17;
            _context4.t2 = _context4["catch"](12);
          case 19:
            throw _context4.t1;
          case 20:
          case "end":
            return _context4.stop();
        }
      }, _callee4, null, [[2, 9], [12, 17]]);
    }));
    return _mapResult.apply(this, arguments);
  }
  return _defineProperty({
    next: function next() {
      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.t0 = mapResult;
              _context.next = 3;
              return iterator.next();
            case 3:
              _context.t1 = _context.sent;
              return _context.abrupt("return", (0, _context.t0)(_context.t1));
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }))();
    },
    return: function _return() {
      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!(typeof iterator.return === 'function')) {
                _context2.next = 8;
                break;
              }
              _context2.t1 = mapResult;
              _context2.next = 4;
              return iterator.return();
            case 4:
              _context2.t2 = _context2.sent;
              _context2.t0 = (0, _context2.t1)(_context2.t2);
              _context2.next = 9;
              break;
            case 8:
              _context2.t0 = {
                value: undefined,
                done: true
              };
            case 9:
              return _context2.abrupt("return", _context2.t0);
            case 10:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }))();
    },
    throw: function _throw(error) {
      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!(typeof iterator.throw === 'function')) {
                _context3.next = 6;
                break;
              }
              _context3.t0 = mapResult;
              _context3.next = 4;
              return iterator.throw(error);
            case 4:
              _context3.t1 = _context3.sent;
              return _context3.abrupt("return", (0, _context3.t0)(_context3.t1));
            case 6:
              throw error;
            case 7:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }))();
    }
  }, Symbol.asyncIterator, function () {
    return this;
  });
}
},{}],"../node_modules/graphql/execution/subscribe.mjs":[function(require,module,exports) {
var define;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSourceEventStream = createSourceEventStream;
exports.subscribe = subscribe;
var _devAssert = require("../jsutils/devAssert.mjs");
var _inspect = require("../jsutils/inspect.mjs");
var _isAsyncIterable = require("../jsutils/isAsyncIterable.mjs");
var _Path = require("../jsutils/Path.mjs");
var _GraphQLError = require("../error/GraphQLError.mjs");
var _locatedError = require("../error/locatedError.mjs");
var _collectFields = require("./collectFields.mjs");
var _execute = require("./execute.mjs");
var _mapAsyncIterator = require("./mapAsyncIterator.mjs");
var _values = require("./values.mjs");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
/**
 * Implements the "Subscribe" algorithm described in the GraphQL specification.
 *
 * Returns a Promise which resolves to either an AsyncIterator (if successful)
 * or an ExecutionResult (error). The promise will be rejected if the schema or
 * other arguments to this function are invalid, or if the resolved event stream
 * is not an async iterable.
 *
 * If the client-provided arguments to this function do not result in a
 * compliant subscription, a GraphQL Response (ExecutionResult) with
 * descriptive errors and no data will be returned.
 *
 * If the source stream could not be created due to faulty subscription
 * resolver logic or underlying systems, the promise will resolve to a single
 * ExecutionResult containing `errors` and no `data`.
 *
 * If the operation succeeded, the promise resolves to an AsyncIterator, which
 * yields a stream of ExecutionResults representing the response stream.
 *
 * Accepts either an object with named arguments, or individual arguments.
 */
function subscribe(_x) {
  return _subscribe.apply(this, arguments);
}
function _subscribe() {
  _subscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(args) {
    var resultOrStream,
      mapSourceToResponse,
      _args = arguments;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          // Temporary for v15 to v16 migration. Remove in v17
          _args.length < 2 || (0, _devAssert.devAssert)(false, 'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.');
          _context.next = 3;
          return createSourceEventStream(args);
        case 3:
          resultOrStream = _context.sent;
          if ((0, _isAsyncIterable.isAsyncIterable)(resultOrStream)) {
            _context.next = 6;
            break;
          }
          return _context.abrupt("return", resultOrStream);
        case 6:
          // For each payload yielded from a subscription, map it over the normal
          // GraphQL `execute` function, with `payload` as the rootValue.
          // This implements the "MapSourceToResponseEvent" algorithm described in
          // the GraphQL specification. The `execute` function provides the
          // "ExecuteSubscriptionEvent" algorithm, as it is nearly identical to the
          // "ExecuteQuery" algorithm, for which `execute` is also used.
          mapSourceToResponse = function mapSourceToResponse(payload) {
            return (0, _execute.execute)(_objectSpread(_objectSpread({}, args), {}, {
              rootValue: payload
            }));
          }; // Map every source value to a ExecutionResult value as described above.
          return _context.abrupt("return", (0, _mapAsyncIterator.mapAsyncIterator)(resultOrStream, mapSourceToResponse));
        case 8:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _subscribe.apply(this, arguments);
}
function toNormalizedArgs(args) {
  var firstArg = args[0];
  if (firstArg && 'document' in firstArg) {
    return firstArg;
  }
  return {
    schema: firstArg,
    // FIXME: when underlying TS bug fixed, see https://github.com/microsoft/TypeScript/issues/31613
    document: args[1],
    rootValue: args[2],
    contextValue: args[3],
    variableValues: args[4],
    operationName: args[5],
    subscribeFieldResolver: args[6]
  };
}
/**
 * Implements the "CreateSourceEventStream" algorithm described in the
 * GraphQL specification, resolving the subscription source event stream.
 *
 * Returns a Promise which resolves to either an AsyncIterable (if successful)
 * or an ExecutionResult (error). The promise will be rejected if the schema or
 * other arguments to this function are invalid, or if the resolved event stream
 * is not an async iterable.
 *
 * If the client-provided arguments to this function do not result in a
 * compliant subscription, a GraphQL Response (ExecutionResult) with
 * descriptive errors and no data will be returned.
 *
 * If the the source stream could not be created due to faulty subscription
 * resolver logic or underlying systems, the promise will resolve to a single
 * ExecutionResult containing `errors` and no `data`.
 *
 * If the operation succeeded, the promise resolves to the AsyncIterable for the
 * event stream returned by the resolver.
 *
 * A Source Event Stream represents a sequence of events, each of which triggers
 * a GraphQL execution for that event.
 *
 * This may be useful when hosting the stateful subscription service in a
 * different process or machine than the stateless GraphQL execution engine,
 * or otherwise separating these two steps. For more on this, see the
 * "Supporting Subscriptions at Scale" information in the GraphQL specification.
 */
function createSourceEventStream() {
  return _createSourceEventStream.apply(this, arguments);
}
function _createSourceEventStream() {
  _createSourceEventStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    var _len,
      rawArgs,
      _key,
      args,
      schema,
      document,
      variableValues,
      exeContext,
      eventStream,
      _args2 = arguments;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          for (_len = _args2.length, rawArgs = new Array(_len), _key = 0; _key < _len; _key++) {
            rawArgs[_key] = _args2[_key];
          }
          args = toNormalizedArgs(rawArgs);
          schema = args.schema, document = args.document, variableValues = args.variableValues; // If arguments are missing or incorrectly typed, this is an internal
          // developer mistake which should throw an early error.
          (0, _execute.assertValidExecutionArguments)(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,
          // a "Response" with only errors is returned.
          exeContext = (0, _execute.buildExecutionContext)(args); // Return early errors if execution context failed.
          if ('schema' in exeContext) {
            _context2.next = 7;
            break;
          }
          return _context2.abrupt("return", {
            errors: exeContext
          });
        case 7:
          _context2.prev = 7;
          _context2.next = 10;
          return executeSubscription(exeContext);
        case 10:
          eventStream = _context2.sent;
          if ((0, _isAsyncIterable.isAsyncIterable)(eventStream)) {
            _context2.next = 13;
            break;
          }
          throw new Error('Subscription field must return Async Iterable. ' + "Received: ".concat((0, _inspect.inspect)(eventStream), "."));
        case 13:
          return _context2.abrupt("return", eventStream);
        case 16:
          _context2.prev = 16;
          _context2.t0 = _context2["catch"](7);
          if (!(_context2.t0 instanceof _GraphQLError.GraphQLError)) {
            _context2.next = 20;
            break;
          }
          return _context2.abrupt("return", {
            errors: [_context2.t0]
          });
        case 20:
          throw _context2.t0;
        case 21:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[7, 16]]);
  }));
  return _createSourceEventStream.apply(this, arguments);
}
function executeSubscription(_x2) {
  return _executeSubscription.apply(this, arguments);
}
function _executeSubscription() {
  _executeSubscription = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(exeContext) {
    var schema, fragments, operation, variableValues, rootValue, rootType, rootFields, _, responseName, fieldNodes, fieldDef, fieldName, path, info, _fieldDef$subscribe, args, contextValue, resolveFn, eventStream;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          schema = exeContext.schema, fragments = exeContext.fragments, operation = exeContext.operation, variableValues = exeContext.variableValues, rootValue = exeContext.rootValue;
          rootType = schema.getSubscriptionType();
          if (!(rootType == null)) {
            _context3.next = 4;
            break;
          }
          throw new _GraphQLError.GraphQLError('Schema is not configured to execute subscription operation.', {
            nodes: operation
          });
        case 4:
          rootFields = (0, _collectFields.collectFields)(schema, fragments, variableValues, rootType, operation.selectionSet);
          _ = _slicedToArray(_toConsumableArray(rootFields.entries())[0], 2), responseName = _[0], fieldNodes = _[1];
          fieldDef = (0, _execute.getFieldDef)(schema, rootType, fieldNodes[0]);
          if (fieldDef) {
            _context3.next = 10;
            break;
          }
          fieldName = fieldNodes[0].name.value;
          throw new _GraphQLError.GraphQLError("The subscription field \"".concat(fieldName, "\" is not defined."), {
            nodes: fieldNodes
          });
        case 10:
          path = (0, _Path.addPath)(undefined, responseName, rootType.name);
          info = (0, _execute.buildResolveInfo)(exeContext, fieldDef, fieldNodes, rootType, path);
          _context3.prev = 12;
          // Implements the "ResolveFieldEventStream" algorithm from GraphQL specification.
          // It differs from "ResolveFieldValue" due to providing a different `resolveFn`.
          // Build a JS object of arguments from the field.arguments AST, using the
          // variables scope to fulfill any variable references.
          args = (0, _values.getArgumentValues)(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that
          // is provided to every resolve function within an execution. It is commonly
          // used to represent an authenticated user, or request-specific caches.
          contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an
          // AsyncIterable yielding raw payloads.
          resolveFn = (_fieldDef$subscribe = fieldDef.subscribe) !== null && _fieldDef$subscribe !== void 0 ? _fieldDef$subscribe : exeContext.subscribeFieldResolver;
          _context3.next = 18;
          return resolveFn(rootValue, args, contextValue, info);
        case 18:
          eventStream = _context3.sent;
          if (!(eventStream instanceof Error)) {
            _context3.next = 21;
            break;
          }
          throw eventStream;
        case 21:
          return _context3.abrupt("return", eventStream);
        case 24:
          _context3.prev = 24;
          _context3.t0 = _context3["catch"](12);
          throw (0, _locatedError.locatedError)(_context3.t0, fieldNodes, (0, _Path.pathToArray)(path));
        case 27:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[12, 24]]);
  }));
  return _executeSubscription.apply(this, arguments);
}
},{"../jsutils/devAssert.mjs":"../node_modules/graphql/jsutils/devAssert.mjs","../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","../jsutils/isAsyncIterable.mjs":"../node_modules/graphql/jsutils/isAsyncIterable.mjs","../jsutils/Path.mjs":"../node_modules/graphql/jsutils/Path.mjs","../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../error/locatedError.mjs":"../node_modules/graphql/error/locatedError.mjs","./collectFields.mjs":"../node_modules/graphql/execution/collectFields.mjs","./execute.mjs":"../node_modules/graphql/execution/execute.mjs","./mapAsyncIterator.mjs":"../node_modules/graphql/execution/mapAsyncIterator.mjs","./values.mjs":"../node_modules/graphql/execution/values.mjs"}],"../node_modules/graphql/execution/index.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "createSourceEventStream", {
  enumerable: true,
  get: function () {
    return _subscribe.createSourceEventStream;
  }
});
Object.defineProperty(exports, "defaultFieldResolver", {
  enumerable: true,
  get: function () {
    return _execute.defaultFieldResolver;
  }
});
Object.defineProperty(exports, "defaultTypeResolver", {
  enumerable: true,
  get: function () {
    return _execute.defaultTypeResolver;
  }
});
Object.defineProperty(exports, "execute", {
  enumerable: true,
  get: function () {
    return _execute.execute;
  }
});
Object.defineProperty(exports, "executeSync", {
  enumerable: true,
  get: function () {
    return _execute.executeSync;
  }
});
Object.defineProperty(exports, "getArgumentValues", {
  enumerable: true,
  get: function () {
    return _values.getArgumentValues;
  }
});
Object.defineProperty(exports, "getDirectiveValues", {
  enumerable: true,
  get: function () {
    return _values.getDirectiveValues;
  }
});
Object.defineProperty(exports, "getVariableValues", {
  enumerable: true,
  get: function () {
    return _values.getVariableValues;
  }
});
Object.defineProperty(exports, "responsePathAsArray", {
  enumerable: true,
  get: function () {
    return _Path.pathToArray;
  }
});
Object.defineProperty(exports, "subscribe", {
  enumerable: true,
  get: function () {
    return _subscribe.subscribe;
  }
});
var _Path = require("../jsutils/Path.mjs");
var _execute = require("./execute.mjs");
var _subscribe = require("./subscribe.mjs");
var _values = require("./values.mjs");
},{"../jsutils/Path.mjs":"../node_modules/graphql/jsutils/Path.mjs","./execute.mjs":"../node_modules/graphql/execution/execute.mjs","./subscribe.mjs":"../node_modules/graphql/execution/subscribe.mjs","./values.mjs":"../node_modules/graphql/execution/values.mjs"}],"../node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoDeprecatedCustomRule = NoDeprecatedCustomRule;
var _invariant = require("../../../jsutils/invariant.mjs");
var _GraphQLError = require("../../../error/GraphQLError.mjs");
var _definition = require("../../../type/definition.mjs");
/**
 * No deprecated
 *
 * A GraphQL document is only valid if all selected fields and all used enum values have not been
 * deprecated.
 *
 * Note: This rule is optional and is not part of the Validation section of the GraphQL
 * Specification. The main purpose of this rule is detection of deprecated usages and not
 * necessarily to forbid their use when querying a service.
 */
function NoDeprecatedCustomRule(context) {
  return {
    Field: function Field(node) {
      var fieldDef = context.getFieldDef();
      var deprecationReason = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.deprecationReason;
      if (fieldDef && deprecationReason != null) {
        var parentType = context.getParentType();
        parentType != null || (0, _invariant.invariant)(false);
        context.reportError(new _GraphQLError.GraphQLError("The field ".concat(parentType.name, ".").concat(fieldDef.name, " is deprecated. ").concat(deprecationReason), {
          nodes: node
        }));
      }
    },
    Argument: function Argument(node) {
      var argDef = context.getArgument();
      var deprecationReason = argDef === null || argDef === void 0 ? void 0 : argDef.deprecationReason;
      if (argDef && deprecationReason != null) {
        var directiveDef = context.getDirective();
        if (directiveDef != null) {
          context.reportError(new _GraphQLError.GraphQLError("Directive \"@".concat(directiveDef.name, "\" argument \"").concat(argDef.name, "\" is deprecated. ").concat(deprecationReason), {
            nodes: node
          }));
        } else {
          var parentType = context.getParentType();
          var fieldDef = context.getFieldDef();
          parentType != null && fieldDef != null || (0, _invariant.invariant)(false);
          context.reportError(new _GraphQLError.GraphQLError("Field \"".concat(parentType.name, ".").concat(fieldDef.name, "\" argument \"").concat(argDef.name, "\" is deprecated. ").concat(deprecationReason), {
            nodes: node
          }));
        }
      }
    },
    ObjectField: function ObjectField(node) {
      var inputObjectDef = (0, _definition.getNamedType)(context.getParentInputType());
      if ((0, _definition.isInputObjectType)(inputObjectDef)) {
        var inputFieldDef = inputObjectDef.getFields()[node.name.value];
        var deprecationReason = inputFieldDef === null || inputFieldDef === void 0 ? void 0 : inputFieldDef.deprecationReason;
        if (deprecationReason != null) {
          context.reportError(new _GraphQLError.GraphQLError("The input field ".concat(inputObjectDef.name, ".").concat(inputFieldDef.name, " is deprecated. ").concat(deprecationReason), {
            nodes: node
          }));
        }
      }
    },
    EnumValue: function EnumValue(node) {
      var enumValueDef = context.getEnumValue();
      var deprecationReason = enumValueDef === null || enumValueDef === void 0 ? void 0 : enumValueDef.deprecationReason;
      if (enumValueDef && deprecationReason != null) {
        var enumTypeDef = (0, _definition.getNamedType)(context.getInputType());
        enumTypeDef != null || (0, _invariant.invariant)(false);
        context.reportError(new _GraphQLError.GraphQLError("The enum value \"".concat(enumTypeDef.name, ".").concat(enumValueDef.name, "\" is deprecated. ").concat(deprecationReason), {
          nodes: node
        }));
      }
    }
  };
}
},{"../../../jsutils/invariant.mjs":"../node_modules/graphql/jsutils/invariant.mjs","../../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../../../type/definition.mjs":"../node_modules/graphql/type/definition.mjs"}],"../node_modules/graphql/validation/rules/custom/NoSchemaIntrospectionCustomRule.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoSchemaIntrospectionCustomRule = NoSchemaIntrospectionCustomRule;
var _GraphQLError = require("../../../error/GraphQLError.mjs");
var _definition = require("../../../type/definition.mjs");
var _introspection = require("../../../type/introspection.mjs");
/**
 * Prohibit introspection queries
 *
 * A GraphQL document is only valid if all fields selected are not fields that
 * return an introspection type.
 *
 * Note: This rule is optional and is not part of the Validation section of the
 * GraphQL Specification. This rule effectively disables introspection, which
 * does not reflect best practices and should only be done if absolutely necessary.
 */
function NoSchemaIntrospectionCustomRule(context) {
  return {
    Field: function Field(node) {
      var type = (0, _definition.getNamedType)(context.getType());
      if (type && (0, _introspection.isIntrospectionType)(type)) {
        context.reportError(new _GraphQLError.GraphQLError("GraphQL introspection has been disabled, but the requested query contained the field \"".concat(node.name.value, "\"."), {
          nodes: node
        }));
      }
    }
  };
}
},{"../../../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../../../type/definition.mjs":"../node_modules/graphql/type/definition.mjs","../../../type/introspection.mjs":"../node_modules/graphql/type/introspection.mjs"}],"../node_modules/graphql/validation/index.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ExecutableDefinitionsRule", {
  enumerable: true,
  get: function () {
    return _ExecutableDefinitionsRule.ExecutableDefinitionsRule;
  }
});
Object.defineProperty(exports, "FieldsOnCorrectTypeRule", {
  enumerable: true,
  get: function () {
    return _FieldsOnCorrectTypeRule.FieldsOnCorrectTypeRule;
  }
});
Object.defineProperty(exports, "FragmentsOnCompositeTypesRule", {
  enumerable: true,
  get: function () {
    return _FragmentsOnCompositeTypesRule.FragmentsOnCompositeTypesRule;
  }
});
Object.defineProperty(exports, "KnownArgumentNamesRule", {
  enumerable: true,
  get: function () {
    return _KnownArgumentNamesRule.KnownArgumentNamesRule;
  }
});
Object.defineProperty(exports, "KnownDirectivesRule", {
  enumerable: true,
  get: function () {
    return _KnownDirectivesRule.KnownDirectivesRule;
  }
});
Object.defineProperty(exports, "KnownFragmentNamesRule", {
  enumerable: true,
  get: function () {
    return _KnownFragmentNamesRule.KnownFragmentNamesRule;
  }
});
Object.defineProperty(exports, "KnownTypeNamesRule", {
  enumerable: true,
  get: function () {
    return _KnownTypeNamesRule.KnownTypeNamesRule;
  }
});
Object.defineProperty(exports, "LoneAnonymousOperationRule", {
  enumerable: true,
  get: function () {
    return _LoneAnonymousOperationRule.LoneAnonymousOperationRule;
  }
});
Object.defineProperty(exports, "LoneSchemaDefinitionRule", {
  enumerable: true,
  get: function () {
    return _LoneSchemaDefinitionRule.LoneSchemaDefinitionRule;
  }
});
Object.defineProperty(exports, "NoDeprecatedCustomRule", {
  enumerable: true,
  get: function () {
    return _NoDeprecatedCustomRule.NoDeprecatedCustomRule;
  }
});
Object.defineProperty(exports, "NoFragmentCyclesRule", {
  enumerable: true,
  get: function () {
    return _NoFragmentCyclesRule.NoFragmentCyclesRule;
  }
});
Object.defineProperty(exports, "NoSchemaIntrospectionCustomRule", {
  enumerable: true,
  get: function () {
    return _NoSchemaIntrospectionCustomRule.NoSchemaIntrospectionCustomRule;
  }
});
Object.defineProperty(exports, "NoUndefinedVariablesRule", {
  enumerable: true,
  get: function () {
    return _NoUndefinedVariablesRule.NoUndefinedVariablesRule;
  }
});
Object.defineProperty(exports, "NoUnusedFragmentsRule", {
  enumerable: true,
  get: function () {
    return _NoUnusedFragmentsRule.NoUnusedFragmentsRule;
  }
});
Object.defineProperty(exports, "NoUnusedVariablesRule", {
  enumerable: true,
  get: function () {
    return _NoUnusedVariablesRule.NoUnusedVariablesRule;
  }
});
Object.defineProperty(exports, "OverlappingFieldsCanBeMergedRule", {
  enumerable: true,
  get: function () {
    return _OverlappingFieldsCanBeMergedRule.OverlappingFieldsCanBeMergedRule;
  }
});
Object.defineProperty(exports, "PossibleFragmentSpreadsRule", {
  enumerable: true,
  get: function () {
    return _PossibleFragmentSpreadsRule.PossibleFragmentSpreadsRule;
  }
});
Object.defineProperty(exports, "PossibleTypeExtensionsRule", {
  enumerable: true,
  get: function () {
    return _PossibleTypeExtensionsRule.PossibleTypeExtensionsRule;
  }
});
Object.defineProperty(exports, "ProvidedRequiredArgumentsRule", {
  enumerable: true,
  get: function () {
    return _ProvidedRequiredArgumentsRule.ProvidedRequiredArgumentsRule;
  }
});
Object.defineProperty(exports, "ScalarLeafsRule", {
  enumerable: true,
  get: function () {
    return _ScalarLeafsRule.ScalarLeafsRule;
  }
});
Object.defineProperty(exports, "SingleFieldSubscriptionsRule", {
  enumerable: true,
  get: function () {
    return _SingleFieldSubscriptionsRule.SingleFieldSubscriptionsRule;
  }
});
Object.defineProperty(exports, "UniqueArgumentDefinitionNamesRule", {
  enumerable: true,
  get: function () {
    return _UniqueArgumentDefinitionNamesRule.UniqueArgumentDefinitionNamesRule;
  }
});
Object.defineProperty(exports, "UniqueArgumentNamesRule", {
  enumerable: true,
  get: function () {
    return _UniqueArgumentNamesRule.UniqueArgumentNamesRule;
  }
});
Object.defineProperty(exports, "UniqueDirectiveNamesRule", {
  enumerable: true,
  get: function () {
    return _UniqueDirectiveNamesRule.UniqueDirectiveNamesRule;
  }
});
Object.defineProperty(exports, "UniqueDirectivesPerLocationRule", {
  enumerable: true,
  get: function () {
    return _UniqueDirectivesPerLocationRule.UniqueDirectivesPerLocationRule;
  }
});
Object.defineProperty(exports, "UniqueEnumValueNamesRule", {
  enumerable: true,
  get: function () {
    return _UniqueEnumValueNamesRule.UniqueEnumValueNamesRule;
  }
});
Object.defineProperty(exports, "UniqueFieldDefinitionNamesRule", {
  enumerable: true,
  get: function () {
    return _UniqueFieldDefinitionNamesRule.UniqueFieldDefinitionNamesRule;
  }
});
Object.defineProperty(exports, "UniqueFragmentNamesRule", {
  enumerable: true,
  get: function () {
    return _UniqueFragmentNamesRule.UniqueFragmentNamesRule;
  }
});
Object.defineProperty(exports, "UniqueInputFieldNamesRule", {
  enumerable: true,
  get: function () {
    return _UniqueInputFieldNamesRule.UniqueInputFieldNamesRule;
  }
});
Object.defineProperty(exports, "UniqueOperationNamesRule", {
  enumerable: true,
  get: function () {
    return _UniqueOperationNamesRule.UniqueOperationNamesRule;
  }
});
Object.defineProperty(exports, "UniqueOperationTypesRule", {
  enumerable: true,
  get: function () {
    return _UniqueOperationTypesRule.UniqueOperationTypesRule;
  }
});
Object.defineProperty(exports, "UniqueTypeNamesRule", {
  enumerable: true,
  get: function () {
    return _UniqueTypeNamesRule.UniqueTypeNamesRule;
  }
});
Object.defineProperty(exports, "UniqueVariableNamesRule", {
  enumerable: true,
  get: function () {
    return _UniqueVariableNamesRule.UniqueVariableNamesRule;
  }
});
Object.defineProperty(exports, "ValidationContext", {
  enumerable: true,
  get: function () {
    return _ValidationContext.ValidationContext;
  }
});
Object.defineProperty(exports, "ValuesOfCorrectTypeRule", {
  enumerable: true,
  get: function () {
    return _ValuesOfCorrectTypeRule.ValuesOfCorrectTypeRule;
  }
});
Object.defineProperty(exports, "VariablesAreInputTypesRule", {
  enumerable: true,
  get: function () {
    return _VariablesAreInputTypesRule.VariablesAreInputTypesRule;
  }
});
Object.defineProperty(exports, "VariablesInAllowedPositionRule", {
  enumerable: true,
  get: function () {
    return _VariablesInAllowedPositionRule.VariablesInAllowedPositionRule;
  }
});
Object.defineProperty(exports, "specifiedRules", {
  enumerable: true,
  get: function () {
    return _specifiedRules.specifiedRules;
  }
});
Object.defineProperty(exports, "validate", {
  enumerable: true,
  get: function () {
    return _validate.validate;
  }
});
var _validate = require("./validate.mjs");
var _ValidationContext = require("./ValidationContext.mjs");
var _specifiedRules = require("./specifiedRules.mjs");
var _ExecutableDefinitionsRule = require("./rules/ExecutableDefinitionsRule.mjs");
var _FieldsOnCorrectTypeRule = require("./rules/FieldsOnCorrectTypeRule.mjs");
var _FragmentsOnCompositeTypesRule = require("./rules/FragmentsOnCompositeTypesRule.mjs");
var _KnownArgumentNamesRule = require("./rules/KnownArgumentNamesRule.mjs");
var _KnownDirectivesRule = require("./rules/KnownDirectivesRule.mjs");
var _KnownFragmentNamesRule = require("./rules/KnownFragmentNamesRule.mjs");
var _KnownTypeNamesRule = require("./rules/KnownTypeNamesRule.mjs");
var _LoneAnonymousOperationRule = require("./rules/LoneAnonymousOperationRule.mjs");
var _NoFragmentCyclesRule = require("./rules/NoFragmentCyclesRule.mjs");
var _NoUndefinedVariablesRule = require("./rules/NoUndefinedVariablesRule.mjs");
var _NoUnusedFragmentsRule = require("./rules/NoUnusedFragmentsRule.mjs");
var _NoUnusedVariablesRule = require("./rules/NoUnusedVariablesRule.mjs");
var _OverlappingFieldsCanBeMergedRule = require("./rules/OverlappingFieldsCanBeMergedRule.mjs");
var _PossibleFragmentSpreadsRule = require("./rules/PossibleFragmentSpreadsRule.mjs");
var _ProvidedRequiredArgumentsRule = require("./rules/ProvidedRequiredArgumentsRule.mjs");
var _ScalarLeafsRule = require("./rules/ScalarLeafsRule.mjs");
var _SingleFieldSubscriptionsRule = require("./rules/SingleFieldSubscriptionsRule.mjs");
var _UniqueArgumentNamesRule = require("./rules/UniqueArgumentNamesRule.mjs");
var _UniqueDirectivesPerLocationRule = require("./rules/UniqueDirectivesPerLocationRule.mjs");
var _UniqueFragmentNamesRule = require("./rules/UniqueFragmentNamesRule.mjs");
var _UniqueInputFieldNamesRule = require("./rules/UniqueInputFieldNamesRule.mjs");
var _UniqueOperationNamesRule = require("./rules/UniqueOperationNamesRule.mjs");
var _UniqueVariableNamesRule = require("./rules/UniqueVariableNamesRule.mjs");
var _ValuesOfCorrectTypeRule = require("./rules/ValuesOfCorrectTypeRule.mjs");
var _VariablesAreInputTypesRule = require("./rules/VariablesAreInputTypesRule.mjs");
var _VariablesInAllowedPositionRule = require("./rules/VariablesInAllowedPositionRule.mjs");
var _LoneSchemaDefinitionRule = require("./rules/LoneSchemaDefinitionRule.mjs");
var _UniqueOperationTypesRule = require("./rules/UniqueOperationTypesRule.mjs");
var _UniqueTypeNamesRule = require("./rules/UniqueTypeNamesRule.mjs");
var _UniqueEnumValueNamesRule = require("./rules/UniqueEnumValueNamesRule.mjs");
var _UniqueFieldDefinitionNamesRule = require("./rules/UniqueFieldDefinitionNamesRule.mjs");
var _UniqueArgumentDefinitionNamesRule = require("./rules/UniqueArgumentDefinitionNamesRule.mjs");
var _UniqueDirectiveNamesRule = require("./rules/UniqueDirectiveNamesRule.mjs");
var _PossibleTypeExtensionsRule = require("./rules/PossibleTypeExtensionsRule.mjs");
var _NoDeprecatedCustomRule = require("./rules/custom/NoDeprecatedCustomRule.mjs");
var _NoSchemaIntrospectionCustomRule = require("./rules/custom/NoSchemaIntrospectionCustomRule.mjs");
},{"./validate.mjs":"../node_modules/graphql/validation/validate.mjs","./ValidationContext.mjs":"../node_modules/graphql/validation/ValidationContext.mjs","./specifiedRules.mjs":"../node_modules/graphql/validation/specifiedRules.mjs","./rules/ExecutableDefinitionsRule.mjs":"../node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs","./rules/FieldsOnCorrectTypeRule.mjs":"../node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs","./rules/FragmentsOnCompositeTypesRule.mjs":"../node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs","./rules/KnownArgumentNamesRule.mjs":"../node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs","./rules/KnownDirectivesRule.mjs":"../node_modules/graphql/validation/rules/KnownDirectivesRule.mjs","./rules/KnownFragmentNamesRule.mjs":"../node_modules/graphql/validation/rules/KnownFragmentNamesRule.mjs","./rules/KnownTypeNamesRule.mjs":"../node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs","./rules/LoneAnonymousOperationRule.mjs":"../node_modules/graphql/validation/rules/LoneAnonymousOperationRule.mjs","./rules/NoFragmentCyclesRule.mjs":"../node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs","./rules/NoUndefinedVariablesRule.mjs":"../node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs","./rules/NoUnusedFragmentsRule.mjs":"../node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs","./rules/NoUnusedVariablesRule.mjs":"../node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs","./rules/OverlappingFieldsCanBeMergedRule.mjs":"../node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs","./rules/PossibleFragmentSpreadsRule.mjs":"../node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs","./rules/ProvidedRequiredArgumentsRule.mjs":"../node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs","./rules/ScalarLeafsRule.mjs":"../node_modules/graphql/validation/rules/ScalarLeafsRule.mjs","./rules/SingleFieldSubscriptionsRule.mjs":"../node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs","./rules/UniqueArgumentNamesRule.mjs":"../node_modules/graphql/validation/rules/UniqueArgumentNamesRule.mjs","./rules/UniqueDirectivesPerLocationRule.mjs":"../node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs","./rules/UniqueFragmentNamesRule.mjs":"../node_modules/graphql/validation/rules/UniqueFragmentNamesRule.mjs","./rules/UniqueInputFieldNamesRule.mjs":"../node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs","./rules/UniqueOperationNamesRule.mjs":"../node_modules/graphql/validation/rules/UniqueOperationNamesRule.mjs","./rules/UniqueVariableNamesRule.mjs":"../node_modules/graphql/validation/rules/UniqueVariableNamesRule.mjs","./rules/ValuesOfCorrectTypeRule.mjs":"../node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs","./rules/VariablesAreInputTypesRule.mjs":"../node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs","./rules/VariablesInAllowedPositionRule.mjs":"../node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs","./rules/LoneSchemaDefinitionRule.mjs":"../node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.mjs","./rules/UniqueOperationTypesRule.mjs":"../node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs","./rules/UniqueTypeNamesRule.mjs":"../node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs","./rules/UniqueEnumValueNamesRule.mjs":"../node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs","./rules/UniqueFieldDefinitionNamesRule.mjs":"../node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs","./rules/UniqueArgumentDefinitionNamesRule.mjs":"../node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.mjs","./rules/UniqueDirectiveNamesRule.mjs":"../node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.mjs","./rules/PossibleTypeExtensionsRule.mjs":"../node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs","./rules/custom/NoDeprecatedCustomRule.mjs":"../node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.mjs","./rules/custom/NoSchemaIntrospectionCustomRule.mjs":"../node_modules/graphql/validation/rules/custom/NoSchemaIntrospectionCustomRule.mjs"}],"../node_modules/graphql/error/index.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "GraphQLError", {
  enumerable: true,
  get: function () {
    return _GraphQLError.GraphQLError;
  }
});
Object.defineProperty(exports, "formatError", {
  enumerable: true,
  get: function () {
    return _GraphQLError.formatError;
  }
});
Object.defineProperty(exports, "locatedError", {
  enumerable: true,
  get: function () {
    return _locatedError.locatedError;
  }
});
Object.defineProperty(exports, "printError", {
  enumerable: true,
  get: function () {
    return _GraphQLError.printError;
  }
});
Object.defineProperty(exports, "syntaxError", {
  enumerable: true,
  get: function () {
    return _syntaxError.syntaxError;
  }
});
var _GraphQLError = require("./GraphQLError.mjs");
var _syntaxError = require("./syntaxError.mjs");
var _locatedError = require("./locatedError.mjs");
},{"./GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","./syntaxError.mjs":"../node_modules/graphql/error/syntaxError.mjs","./locatedError.mjs":"../node_modules/graphql/error/locatedError.mjs"}],"../node_modules/graphql/utilities/getIntrospectionQuery.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getIntrospectionQuery = getIntrospectionQuery;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Produce the GraphQL query recommended for a full schema introspection.
 * Accepts optional IntrospectionOptions.
 */
function getIntrospectionQuery(options) {
  var optionsWithDefault = _objectSpread({
    descriptions: true,
    specifiedByUrl: false,
    directiveIsRepeatable: false,
    schemaDescription: false,
    inputValueDeprecation: false
  }, options);
  var descriptions = optionsWithDefault.descriptions ? 'description' : '';
  var specifiedByUrl = optionsWithDefault.specifiedByUrl ? 'specifiedByURL' : '';
  var directiveIsRepeatable = optionsWithDefault.directiveIsRepeatable ? 'isRepeatable' : '';
  var schemaDescription = optionsWithDefault.schemaDescription ? descriptions : '';
  function inputDeprecation(str) {
    return optionsWithDefault.inputValueDeprecation ? str : '';
  }
  return "\n    query IntrospectionQuery {\n      __schema {\n        ".concat(schemaDescription, "\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          ").concat(descriptions, "\n          ").concat(directiveIsRepeatable, "\n          locations\n          args").concat(inputDeprecation('(includeDeprecated: true)'), " {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      ").concat(descriptions, "\n      ").concat(specifiedByUrl, "\n      fields(includeDeprecated: true) {\n        name\n        ").concat(descriptions, "\n        args").concat(inputDeprecation('(includeDeprecated: true)'), " {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields").concat(inputDeprecation('(includeDeprecated: true)'), " {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        ").concat(descriptions, "\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      ").concat(descriptions, "\n      type { ...TypeRef }\n      defaultValue\n      ").concat(inputDeprecation('isDeprecated'), "\n      ").concat(inputDeprecation('deprecationReason'), "\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                    ofType {\n                      kind\n                      name\n                      ofType {\n                        kind\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ");
}
},{}],"../node_modules/graphql/utilities/getOperationAST.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOperationAST = getOperationAST;
var _kinds = require("../language/kinds.mjs");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Returns an operation AST given a document AST and optionally an operation
 * name. If a name is not provided, an operation is only returned if only one is
 * provided in the document.
 */

function getOperationAST(documentAST, operationName) {
  var operation = null;
  var _iterator = _createForOfIteratorHelper(documentAST.definitions),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var definition = _step.value;
      if (definition.kind === _kinds.Kind.OPERATION_DEFINITION) {
        var _definition$name;
        if (operationName == null) {
          // If no operation name was provided, only return an Operation if there
          // is one defined in the document. Upon encountering the second, return
          // null.
          if (operation) {
            return null;
          }
          operation = definition;
        } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {
          return definition;
        }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return operation;
}
},{"../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs"}],"../node_modules/graphql/utilities/getOperationRootType.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOperationRootType = getOperationRootType;
var _GraphQLError = require("../error/GraphQLError.mjs");
/**
 * Extracts the root type of the operation from the schema.
 *
 * @deprecated Please use `GraphQLSchema.getRootType` instead. Will be removed in v17
 */
function getOperationRootType(schema, operation) {
  if (operation.operation === 'query') {
    var queryType = schema.getQueryType();
    if (!queryType) {
      throw new _GraphQLError.GraphQLError('Schema does not define the required query root type.', {
        nodes: operation
      });
    }
    return queryType;
  }
  if (operation.operation === 'mutation') {
    var mutationType = schema.getMutationType();
    if (!mutationType) {
      throw new _GraphQLError.GraphQLError('Schema is not configured for mutations.', {
        nodes: operation
      });
    }
    return mutationType;
  }
  if (operation.operation === 'subscription') {
    var subscriptionType = schema.getSubscriptionType();
    if (!subscriptionType) {
      throw new _GraphQLError.GraphQLError('Schema is not configured for subscriptions.', {
        nodes: operation
      });
    }
    return subscriptionType;
  }
  throw new _GraphQLError.GraphQLError('Can only have query, mutation and subscription operations.', {
    nodes: operation
  });
}
},{"../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs"}],"../node_modules/graphql/utilities/introspectionFromSchema.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.introspectionFromSchema = introspectionFromSchema;
var _invariant = require("../jsutils/invariant.mjs");
var _parser = require("../language/parser.mjs");
var _execute = require("../execution/execute.mjs");
var _getIntrospectionQuery = require("./getIntrospectionQuery.mjs");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Build an IntrospectionQuery from a GraphQLSchema
 *
 * IntrospectionQuery is useful for utilities that care about type and field
 * relationships, but do not need to traverse through those relationships.
 *
 * This is the inverse of buildClientSchema. The primary use case is outside
 * of the server context, for instance when doing schema comparisons.
 */

function introspectionFromSchema(schema, options) {
  var optionsWithDefaults = _objectSpread({
    specifiedByUrl: true,
    directiveIsRepeatable: true,
    schemaDescription: true,
    inputValueDeprecation: true
  }, options);
  var document = (0, _parser.parse)((0, _getIntrospectionQuery.getIntrospectionQuery)(optionsWithDefaults));
  var result = (0, _execute.executeSync)({
    schema: schema,
    document: document
  });
  !result.errors && result.data || (0, _invariant.invariant)(false);
  return result.data;
}
},{"../jsutils/invariant.mjs":"../node_modules/graphql/jsutils/invariant.mjs","../language/parser.mjs":"../node_modules/graphql/language/parser.mjs","../execution/execute.mjs":"../node_modules/graphql/execution/execute.mjs","./getIntrospectionQuery.mjs":"../node_modules/graphql/utilities/getIntrospectionQuery.mjs"}],"../node_modules/graphql/utilities/buildClientSchema.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildClientSchema = buildClientSchema;
var _devAssert = require("../jsutils/devAssert.mjs");
var _inspect = require("../jsutils/inspect.mjs");
var _isObjectLike = require("../jsutils/isObjectLike.mjs");
var _keyValMap = require("../jsutils/keyValMap.mjs");
var _parser = require("../language/parser.mjs");
var _definition = require("../type/definition.mjs");
var _directives = require("../type/directives.mjs");
var _introspection = require("../type/introspection.mjs");
var _scalars = require("../type/scalars.mjs");
var _schema = require("../type/schema.mjs");
var _valueFromAST = require("./valueFromAST.mjs");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Build a GraphQLSchema for use by client tools.
 *
 * Given the result of a client running the introspection query, creates and
 * returns a GraphQLSchema instance which can be then used with all graphql-js
 * tools, but cannot be used to execute a query, as introspection does not
 * represent the "resolver", "parse" or "serialize" functions or any other
 * server-internal mechanisms.
 *
 * This function expects a complete introspection result. Don't forget to check
 * the "errors" field of a server response before calling this function.
 */

function buildClientSchema(introspection, options) {
  (0, _isObjectLike.isObjectLike)(introspection) && (0, _isObjectLike.isObjectLike)(introspection.__schema) || (0, _devAssert.devAssert)(false, "Invalid or incomplete introspection result. Ensure that you are passing \"data\" property of introspection response and no \"errors\" was returned alongside: ".concat((0, _inspect.inspect)(introspection), ".")); // Get the schema from the introspection result.

  var schemaIntrospection = introspection.__schema; // Iterate through all types, getting the type definition for each.

  var typeMap = (0, _keyValMap.keyValMap)(schemaIntrospection.types, function (typeIntrospection) {
    return typeIntrospection.name;
  }, function (typeIntrospection) {
    return buildType(typeIntrospection);
  }); // Include standard types only if they are used.

  for (var _i = 0, _arr = [].concat(_toConsumableArray(_scalars.specifiedScalarTypes), _toConsumableArray(_introspection.introspectionTypes)); _i < _arr.length; _i++) {
    var stdType = _arr[_i];
    if (typeMap[stdType.name]) {
      typeMap[stdType.name] = stdType;
    }
  } // Get the root Query, Mutation, and Subscription types.

  var queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null;
  var mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;
  var subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null; // Get the directives supported by Introspection, assuming empty-set if
  // directives were not queried for.

  var directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : []; // Then produce and return a Schema with these types.

  return new _schema.GraphQLSchema({
    description: schemaIntrospection.description,
    query: queryType,
    mutation: mutationType,
    subscription: subscriptionType,
    types: Object.values(typeMap),
    directives: directives,
    assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid
  }); // Given a type reference in introspection, return the GraphQLType instance.
  // preferring cached instances before building new instances.

  function getType(typeRef) {
    if (typeRef.kind === _introspection.TypeKind.LIST) {
      var itemRef = typeRef.ofType;
      if (!itemRef) {
        throw new Error('Decorated type deeper than introspection query.');
      }
      return new _definition.GraphQLList(getType(itemRef));
    }
    if (typeRef.kind === _introspection.TypeKind.NON_NULL) {
      var nullableRef = typeRef.ofType;
      if (!nullableRef) {
        throw new Error('Decorated type deeper than introspection query.');
      }
      var nullableType = getType(nullableRef);
      return new _definition.GraphQLNonNull((0, _definition.assertNullableType)(nullableType));
    }
    return getNamedType(typeRef);
  }
  function getNamedType(typeRef) {
    var typeName = typeRef.name;
    if (!typeName) {
      throw new Error("Unknown type reference: ".concat((0, _inspect.inspect)(typeRef), "."));
    }
    var type = typeMap[typeName];
    if (!type) {
      throw new Error("Invalid or incomplete schema, unknown type: ".concat(typeName, ". Ensure that a full introspection query is used in order to build a client schema."));
    }
    return type;
  }
  function getObjectType(typeRef) {
    return (0, _definition.assertObjectType)(getNamedType(typeRef));
  }
  function getInterfaceType(typeRef) {
    return (0, _definition.assertInterfaceType)(getNamedType(typeRef));
  } // Given a type's introspection result, construct the correct
  // GraphQLType instance.

  function buildType(type) {
    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain
    if (type != null && type.name != null && type.kind != null) {
      // FIXME: Properly type IntrospectionType, it's a breaking change so fix in v17
      // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check
      switch (type.kind) {
        case _introspection.TypeKind.SCALAR:
          return buildScalarDef(type);
        case _introspection.TypeKind.OBJECT:
          return buildObjectDef(type);
        case _introspection.TypeKind.INTERFACE:
          return buildInterfaceDef(type);
        case _introspection.TypeKind.UNION:
          return buildUnionDef(type);
        case _introspection.TypeKind.ENUM:
          return buildEnumDef(type);
        case _introspection.TypeKind.INPUT_OBJECT:
          return buildInputObjectDef(type);
      }
    }
    var typeStr = (0, _inspect.inspect)(type);
    throw new Error("Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ".concat(typeStr, "."));
  }
  function buildScalarDef(scalarIntrospection) {
    return new _definition.GraphQLScalarType({
      name: scalarIntrospection.name,
      description: scalarIntrospection.description,
      specifiedByURL: scalarIntrospection.specifiedByURL
    });
  }
  function buildImplementationsList(implementingIntrospection) {
    // TODO: Temporary workaround until GraphQL ecosystem will fully support
    // 'interfaces' on interface types.
    if (implementingIntrospection.interfaces === null && implementingIntrospection.kind === _introspection.TypeKind.INTERFACE) {
      return [];
    }
    if (!implementingIntrospection.interfaces) {
      var implementingIntrospectionStr = (0, _inspect.inspect)(implementingIntrospection);
      throw new Error("Introspection result missing interfaces: ".concat(implementingIntrospectionStr, "."));
    }
    return implementingIntrospection.interfaces.map(getInterfaceType);
  }
  function buildObjectDef(objectIntrospection) {
    return new _definition.GraphQLObjectType({
      name: objectIntrospection.name,
      description: objectIntrospection.description,
      interfaces: function interfaces() {
        return buildImplementationsList(objectIntrospection);
      },
      fields: function fields() {
        return buildFieldDefMap(objectIntrospection);
      }
    });
  }
  function buildInterfaceDef(interfaceIntrospection) {
    return new _definition.GraphQLInterfaceType({
      name: interfaceIntrospection.name,
      description: interfaceIntrospection.description,
      interfaces: function interfaces() {
        return buildImplementationsList(interfaceIntrospection);
      },
      fields: function fields() {
        return buildFieldDefMap(interfaceIntrospection);
      }
    });
  }
  function buildUnionDef(unionIntrospection) {
    if (!unionIntrospection.possibleTypes) {
      var unionIntrospectionStr = (0, _inspect.inspect)(unionIntrospection);
      throw new Error("Introspection result missing possibleTypes: ".concat(unionIntrospectionStr, "."));
    }
    return new _definition.GraphQLUnionType({
      name: unionIntrospection.name,
      description: unionIntrospection.description,
      types: function types() {
        return unionIntrospection.possibleTypes.map(getObjectType);
      }
    });
  }
  function buildEnumDef(enumIntrospection) {
    if (!enumIntrospection.enumValues) {
      var enumIntrospectionStr = (0, _inspect.inspect)(enumIntrospection);
      throw new Error("Introspection result missing enumValues: ".concat(enumIntrospectionStr, "."));
    }
    return new _definition.GraphQLEnumType({
      name: enumIntrospection.name,
      description: enumIntrospection.description,
      values: (0, _keyValMap.keyValMap)(enumIntrospection.enumValues, function (valueIntrospection) {
        return valueIntrospection.name;
      }, function (valueIntrospection) {
        return {
          description: valueIntrospection.description,
          deprecationReason: valueIntrospection.deprecationReason
        };
      })
    });
  }
  function buildInputObjectDef(inputObjectIntrospection) {
    if (!inputObjectIntrospection.inputFields) {
      var inputObjectIntrospectionStr = (0, _inspect.inspect)(inputObjectIntrospection);
      throw new Error("Introspection result missing inputFields: ".concat(inputObjectIntrospectionStr, "."));
    }
    return new _definition.GraphQLInputObjectType({
      name: inputObjectIntrospection.name,
      description: inputObjectIntrospection.description,
      fields: function fields() {
        return buildInputValueDefMap(inputObjectIntrospection.inputFields);
      }
    });
  }
  function buildFieldDefMap(typeIntrospection) {
    if (!typeIntrospection.fields) {
      throw new Error("Introspection result missing fields: ".concat((0, _inspect.inspect)(typeIntrospection), "."));
    }
    return (0, _keyValMap.keyValMap)(typeIntrospection.fields, function (fieldIntrospection) {
      return fieldIntrospection.name;
    }, buildField);
  }
  function buildField(fieldIntrospection) {
    var type = getType(fieldIntrospection.type);
    if (!(0, _definition.isOutputType)(type)) {
      var typeStr = (0, _inspect.inspect)(type);
      throw new Error("Introspection must provide output type for fields, but received: ".concat(typeStr, "."));
    }
    if (!fieldIntrospection.args) {
      var fieldIntrospectionStr = (0, _inspect.inspect)(fieldIntrospection);
      throw new Error("Introspection result missing field args: ".concat(fieldIntrospectionStr, "."));
    }
    return {
      description: fieldIntrospection.description,
      deprecationReason: fieldIntrospection.deprecationReason,
      type: type,
      args: buildInputValueDefMap(fieldIntrospection.args)
    };
  }
  function buildInputValueDefMap(inputValueIntrospections) {
    return (0, _keyValMap.keyValMap)(inputValueIntrospections, function (inputValue) {
      return inputValue.name;
    }, buildInputValue);
  }
  function buildInputValue(inputValueIntrospection) {
    var type = getType(inputValueIntrospection.type);
    if (!(0, _definition.isInputType)(type)) {
      var typeStr = (0, _inspect.inspect)(type);
      throw new Error("Introspection must provide input type for arguments, but received: ".concat(typeStr, "."));
    }
    var defaultValue = inputValueIntrospection.defaultValue != null ? (0, _valueFromAST.valueFromAST)((0, _parser.parseValue)(inputValueIntrospection.defaultValue), type) : undefined;
    return {
      description: inputValueIntrospection.description,
      type: type,
      defaultValue: defaultValue,
      deprecationReason: inputValueIntrospection.deprecationReason
    };
  }
  function buildDirective(directiveIntrospection) {
    if (!directiveIntrospection.args) {
      var directiveIntrospectionStr = (0, _inspect.inspect)(directiveIntrospection);
      throw new Error("Introspection result missing directive args: ".concat(directiveIntrospectionStr, "."));
    }
    if (!directiveIntrospection.locations) {
      var _directiveIntrospectionStr = (0, _inspect.inspect)(directiveIntrospection);
      throw new Error("Introspection result missing directive locations: ".concat(_directiveIntrospectionStr, "."));
    }
    return new _directives.GraphQLDirective({
      name: directiveIntrospection.name,
      description: directiveIntrospection.description,
      isRepeatable: directiveIntrospection.isRepeatable,
      locations: directiveIntrospection.locations.slice(),
      args: buildInputValueDefMap(directiveIntrospection.args)
    });
  }
}
},{"../jsutils/devAssert.mjs":"../node_modules/graphql/jsutils/devAssert.mjs","../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","../jsutils/isObjectLike.mjs":"../node_modules/graphql/jsutils/isObjectLike.mjs","../jsutils/keyValMap.mjs":"../node_modules/graphql/jsutils/keyValMap.mjs","../language/parser.mjs":"../node_modules/graphql/language/parser.mjs","../type/definition.mjs":"../node_modules/graphql/type/definition.mjs","../type/directives.mjs":"../node_modules/graphql/type/directives.mjs","../type/introspection.mjs":"../node_modules/graphql/type/introspection.mjs","../type/scalars.mjs":"../node_modules/graphql/type/scalars.mjs","../type/schema.mjs":"../node_modules/graphql/type/schema.mjs","./valueFromAST.mjs":"../node_modules/graphql/utilities/valueFromAST.mjs"}],"../node_modules/graphql/utilities/extendSchema.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extendSchema = extendSchema;
exports.extendSchemaImpl = extendSchemaImpl;
var _devAssert = require("../jsutils/devAssert.mjs");
var _inspect = require("../jsutils/inspect.mjs");
var _invariant = require("../jsutils/invariant.mjs");
var _keyMap = require("../jsutils/keyMap.mjs");
var _mapValue = require("../jsutils/mapValue.mjs");
var _kinds = require("../language/kinds.mjs");
var _predicates = require("../language/predicates.mjs");
var _definition = require("../type/definition.mjs");
var _directives = require("../type/directives.mjs");
var _introspection = require("../type/introspection.mjs");
var _scalars = require("../type/scalars.mjs");
var _schema = require("../type/schema.mjs");
var _validate = require("../validation/validate.mjs");
var _values = require("../execution/values.mjs");
var _valueFromAST = require("./valueFromAST.mjs");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Produces a new schema given an existing schema and a document which may
 * contain GraphQL type extensions and definitions. The original schema will
 * remain unaltered.
 *
 * Because a schema represents a graph of references, a schema cannot be
 * extended without effectively making an entire copy. We do not know until it's
 * too late if subgraphs remain unchanged.
 *
 * This algorithm copies the provided schema, applying extensions while
 * producing the copy. The original schema remains unaltered.
 */
function extendSchema(schema, documentAST, options) {
  (0, _schema.assertSchema)(schema);
  documentAST != null && documentAST.kind === _kinds.Kind.DOCUMENT || (0, _devAssert.devAssert)(false, 'Must provide valid Document AST.');
  if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {
    (0, _validate.assertValidSDLExtension)(documentAST, schema);
  }
  var schemaConfig = schema.toConfig();
  var extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);
  return schemaConfig === extendedConfig ? schema : new _schema.GraphQLSchema(extendedConfig);
}
/**
 * @internal
 */

function extendSchemaImpl(schemaConfig, documentAST, options) {
  var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid;

  // Collect the type definitions and extensions found in the document.
  var typeDefs = [];
  var typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can
  // have the same name. For example, a type named "skip".

  var directiveDefs = [];
  var schemaDef; // Schema extensions are collected which may add additional operation types.

  var schemaExtensions = [];
  var _iterator = _createForOfIteratorHelper(documentAST.definitions),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var def = _step.value;
      if (def.kind === _kinds.Kind.SCHEMA_DEFINITION) {
        schemaDef = def;
      } else if (def.kind === _kinds.Kind.SCHEMA_EXTENSION) {
        schemaExtensions.push(def);
      } else if ((0, _predicates.isTypeDefinitionNode)(def)) {
        typeDefs.push(def);
      } else if ((0, _predicates.isTypeExtensionNode)(def)) {
        var extendedTypeName = def.name.value;
        var existingTypeExtensions = typeExtensionsMap[extendedTypeName];
        typeExtensionsMap[extendedTypeName] = existingTypeExtensions ? existingTypeExtensions.concat([def]) : [def];
      } else if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
        directiveDefs.push(def);
      }
    } // If this document contains no new types, extensions, or directives then
    // return the same unmodified GraphQLSchema instance.
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (Object.keys(typeExtensionsMap).length === 0 && typeDefs.length === 0 && directiveDefs.length === 0 && schemaExtensions.length === 0 && schemaDef == null) {
    return schemaConfig;
  }
  var typeMap = Object.create(null);
  var _iterator2 = _createForOfIteratorHelper(schemaConfig.types),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var existingType = _step2.value;
      typeMap[existingType.name] = extendNamedType(existingType);
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  for (var _i = 0, _typeDefs = typeDefs; _i < _typeDefs.length; _i++) {
    var typeNode = _typeDefs[_i];
    var _stdTypeMap$name;
    var name = typeNode.name.value;
    typeMap[name] = (_stdTypeMap$name = stdTypeMap[name]) !== null && _stdTypeMap$name !== void 0 ? _stdTypeMap$name : buildType(typeNode);
  }
  var operationTypes = _objectSpread(_objectSpread({
    // Get the extended root operation types.
    query: schemaConfig.query && replaceNamedType(schemaConfig.query),
    mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),
    subscription: schemaConfig.subscription && replaceNamedType(schemaConfig.subscription)
  }, schemaDef && getOperationTypes([schemaDef])), getOperationTypes(schemaExtensions)); // Then produce and return a Schema config with these types.

  return _objectSpread(_objectSpread({
    description: (_schemaDef = schemaDef) === null || _schemaDef === void 0 ? void 0 : (_schemaDef$descriptio = _schemaDef.description) === null || _schemaDef$descriptio === void 0 ? void 0 : _schemaDef$descriptio.value
  }, operationTypes), {}, {
    types: Object.values(typeMap),
    directives: [].concat(_toConsumableArray(schemaConfig.directives.map(replaceDirective)), _toConsumableArray(directiveDefs.map(buildDirective))),
    extensions: Object.create(null),
    astNode: (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0 ? _schemaDef2 : schemaConfig.astNode,
    extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),
    assumeValid: (_options$assumeValid = options === null || options === void 0 ? void 0 : options.assumeValid) !== null && _options$assumeValid !== void 0 ? _options$assumeValid : false
  }); // Below are functions used for producing this schema that have closed over
  // this scope and have access to the schema, cache, and newly defined types.

  function replaceType(type) {
    if ((0, _definition.isListType)(type)) {
      // @ts-expect-error
      return new _definition.GraphQLList(replaceType(type.ofType));
    }
    if ((0, _definition.isNonNullType)(type)) {
      // @ts-expect-error
      return new _definition.GraphQLNonNull(replaceType(type.ofType));
    } // @ts-expect-error FIXME

    return replaceNamedType(type);
  }
  function replaceNamedType(type) {
    // Note: While this could make early assertions to get the correctly
    // typed values, that would throw immediately while type system
    // validation with validateSchema() will produce more actionable results.
    return typeMap[type.name];
  }
  function replaceDirective(directive) {
    var config = directive.toConfig();
    return new _directives.GraphQLDirective(_objectSpread(_objectSpread({}, config), {}, {
      args: (0, _mapValue.mapValue)(config.args, extendArg)
    }));
  }
  function extendNamedType(type) {
    if ((0, _introspection.isIntrospectionType)(type) || (0, _scalars.isSpecifiedScalarType)(type)) {
      // Builtin types are not extended.
      return type;
    }
    if ((0, _definition.isScalarType)(type)) {
      return extendScalarType(type);
    }
    if ((0, _definition.isObjectType)(type)) {
      return extendObjectType(type);
    }
    if ((0, _definition.isInterfaceType)(type)) {
      return extendInterfaceType(type);
    }
    if ((0, _definition.isUnionType)(type)) {
      return extendUnionType(type);
    }
    if ((0, _definition.isEnumType)(type)) {
      return extendEnumType(type);
    }
    if ((0, _definition.isInputObjectType)(type)) {
      return extendInputObjectType(type);
    }
    /* c8 ignore next 3 */
    // Not reachable, all possible type definition nodes have been considered.

    false || (0, _invariant.invariant)(false, 'Unexpected type: ' + (0, _inspect.inspect)(type));
  }
  function extendInputObjectType(type) {
    var _typeExtensionsMap$co;
    var config = type.toConfig();
    var extensions = (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co !== void 0 ? _typeExtensionsMap$co : [];
    return new _definition.GraphQLInputObjectType(_objectSpread(_objectSpread({}, config), {}, {
      fields: function fields() {
        return _objectSpread(_objectSpread({}, (0, _mapValue.mapValue)(config.fields, function (field) {
          return _objectSpread(_objectSpread({}, field), {}, {
            type: replaceType(field.type)
          });
        })), buildInputFieldMap(extensions));
      },
      extensionASTNodes: config.extensionASTNodes.concat(extensions)
    }));
  }
  function extendEnumType(type) {
    var _typeExtensionsMap$ty;
    var config = type.toConfig();
    var extensions = (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null && _typeExtensionsMap$ty !== void 0 ? _typeExtensionsMap$ty : [];
    return new _definition.GraphQLEnumType(_objectSpread(_objectSpread({}, config), {}, {
      values: _objectSpread(_objectSpread({}, config.values), buildEnumValueMap(extensions)),
      extensionASTNodes: config.extensionASTNodes.concat(extensions)
    }));
  }
  function extendScalarType(type) {
    var _typeExtensionsMap$co2;
    var config = type.toConfig();
    var extensions = (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co2 !== void 0 ? _typeExtensionsMap$co2 : [];
    var specifiedByURL = config.specifiedByURL;
    var _iterator3 = _createForOfIteratorHelper(extensions),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var extensionNode = _step3.value;
        var _getSpecifiedByURL;
        specifiedByURL = (_getSpecifiedByURL = getSpecifiedByURL(extensionNode)) !== null && _getSpecifiedByURL !== void 0 ? _getSpecifiedByURL : specifiedByURL;
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
    return new _definition.GraphQLScalarType(_objectSpread(_objectSpread({}, config), {}, {
      specifiedByURL: specifiedByURL,
      extensionASTNodes: config.extensionASTNodes.concat(extensions)
    }));
  }
  function extendObjectType(type) {
    var _typeExtensionsMap$co3;
    var config = type.toConfig();
    var extensions = (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co3 !== void 0 ? _typeExtensionsMap$co3 : [];
    return new _definition.GraphQLObjectType(_objectSpread(_objectSpread({}, config), {}, {
      interfaces: function interfaces() {
        return [].concat(_toConsumableArray(type.getInterfaces().map(replaceNamedType)), _toConsumableArray(buildInterfaces(extensions)));
      },
      fields: function fields() {
        return _objectSpread(_objectSpread({}, (0, _mapValue.mapValue)(config.fields, extendField)), buildFieldMap(extensions));
      },
      extensionASTNodes: config.extensionASTNodes.concat(extensions)
    }));
  }
  function extendInterfaceType(type) {
    var _typeExtensionsMap$co4;
    var config = type.toConfig();
    var extensions = (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co4 !== void 0 ? _typeExtensionsMap$co4 : [];
    return new _definition.GraphQLInterfaceType(_objectSpread(_objectSpread({}, config), {}, {
      interfaces: function interfaces() {
        return [].concat(_toConsumableArray(type.getInterfaces().map(replaceNamedType)), _toConsumableArray(buildInterfaces(extensions)));
      },
      fields: function fields() {
        return _objectSpread(_objectSpread({}, (0, _mapValue.mapValue)(config.fields, extendField)), buildFieldMap(extensions));
      },
      extensionASTNodes: config.extensionASTNodes.concat(extensions)
    }));
  }
  function extendUnionType(type) {
    var _typeExtensionsMap$co5;
    var config = type.toConfig();
    var extensions = (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co5 !== void 0 ? _typeExtensionsMap$co5 : [];
    return new _definition.GraphQLUnionType(_objectSpread(_objectSpread({}, config), {}, {
      types: function types() {
        return [].concat(_toConsumableArray(type.getTypes().map(replaceNamedType)), _toConsumableArray(buildUnionTypes(extensions)));
      },
      extensionASTNodes: config.extensionASTNodes.concat(extensions)
    }));
  }
  function extendField(field) {
    return _objectSpread(_objectSpread({}, field), {}, {
      type: replaceType(field.type),
      args: field.args && (0, _mapValue.mapValue)(field.args, extendArg)
    });
  }
  function extendArg(arg) {
    return _objectSpread(_objectSpread({}, arg), {}, {
      type: replaceType(arg.type)
    });
  }
  function getOperationTypes(nodes) {
    var opTypes = {};
    var _iterator4 = _createForOfIteratorHelper(nodes),
      _step4;
    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var node = _step4.value;
        var _node$operationTypes;

        // FIXME: https://github.com/graphql/graphql-js/issues/2203
        var operationTypesNodes = /* c8 ignore next */
        (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];
        var _iterator5 = _createForOfIteratorHelper(operationTypesNodes),
          _step5;
        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var operationType = _step5.value;
            // Note: While this could make early assertions to get the correctly
            // typed values below, that would throw immediately while type system
            // validation with validateSchema() will produce more actionable results.
            // @ts-expect-error
            opTypes[operationType.operation] = getNamedType(operationType.type);
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
    return opTypes;
  }
  function getNamedType(node) {
    var _stdTypeMap$name2;
    var name = node.name.value;
    var type = (_stdTypeMap$name2 = stdTypeMap[name]) !== null && _stdTypeMap$name2 !== void 0 ? _stdTypeMap$name2 : typeMap[name];
    if (type === undefined) {
      throw new Error("Unknown type: \"".concat(name, "\"."));
    }
    return type;
  }
  function getWrappedType(node) {
    if (node.kind === _kinds.Kind.LIST_TYPE) {
      return new _definition.GraphQLList(getWrappedType(node.type));
    }
    if (node.kind === _kinds.Kind.NON_NULL_TYPE) {
      return new _definition.GraphQLNonNull(getWrappedType(node.type));
    }
    return getNamedType(node);
  }
  function buildDirective(node) {
    var _node$description;
    return new _directives.GraphQLDirective({
      name: node.name.value,
      description: (_node$description = node.description) === null || _node$description === void 0 ? void 0 : _node$description.value,
      // @ts-expect-error
      locations: node.locations.map(function (_ref) {
        var value = _ref.value;
        return value;
      }),
      isRepeatable: node.repeatable,
      args: buildArgumentMap(node.arguments),
      astNode: node
    });
  }
  function buildFieldMap(nodes) {
    var fieldConfigMap = Object.create(null);
    var _iterator6 = _createForOfIteratorHelper(nodes),
      _step6;
    try {
      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
        var node = _step6.value;
        var _node$fields;

        // FIXME: https://github.com/graphql/graphql-js/issues/2203
        var nodeFields = /* c8 ignore next */
        (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];
        var _iterator7 = _createForOfIteratorHelper(nodeFields),
          _step7;
        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var field = _step7.value;
            var _field$description;
            fieldConfigMap[field.name.value] = {
              // Note: While this could make assertions to get the correctly typed
              // value, that would throw immediately while type system validation
              // with validateSchema() will produce more actionable results.
              type: getWrappedType(field.type),
              description: (_field$description = field.description) === null || _field$description === void 0 ? void 0 : _field$description.value,
              args: buildArgumentMap(field.arguments),
              deprecationReason: getDeprecationReason(field),
              astNode: field
            };
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }
      }
    } catch (err) {
      _iterator6.e(err);
    } finally {
      _iterator6.f();
    }
    return fieldConfigMap;
  }
  function buildArgumentMap(args) {
    // FIXME: https://github.com/graphql/graphql-js/issues/2203
    var argsNodes = /* c8 ignore next */
    args !== null && args !== void 0 ? args : [];
    var argConfigMap = Object.create(null);
    var _iterator8 = _createForOfIteratorHelper(argsNodes),
      _step8;
    try {
      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
        var arg = _step8.value;
        var _arg$description;

        // Note: While this could make assertions to get the correctly typed
        // value, that would throw immediately while type system validation
        // with validateSchema() will produce more actionable results.
        var type = getWrappedType(arg.type);
        argConfigMap[arg.name.value] = {
          type: type,
          description: (_arg$description = arg.description) === null || _arg$description === void 0 ? void 0 : _arg$description.value,
          defaultValue: (0, _valueFromAST.valueFromAST)(arg.defaultValue, type),
          deprecationReason: getDeprecationReason(arg),
          astNode: arg
        };
      }
    } catch (err) {
      _iterator8.e(err);
    } finally {
      _iterator8.f();
    }
    return argConfigMap;
  }
  function buildInputFieldMap(nodes) {
    var inputFieldMap = Object.create(null);
    var _iterator9 = _createForOfIteratorHelper(nodes),
      _step9;
    try {
      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
        var node = _step9.value;
        var _node$fields2;

        // FIXME: https://github.com/graphql/graphql-js/issues/2203
        var fieldsNodes = /* c8 ignore next */
        (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0 ? _node$fields2 : [];
        var _iterator10 = _createForOfIteratorHelper(fieldsNodes),
          _step10;
        try {
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
            var field = _step10.value;
            var _field$description2;

            // Note: While this could make assertions to get the correctly typed
            // value, that would throw immediately while type system validation
            // with validateSchema() will produce more actionable results.
            var type = getWrappedType(field.type);
            inputFieldMap[field.name.value] = {
              type: type,
              description: (_field$description2 = field.description) === null || _field$description2 === void 0 ? void 0 : _field$description2.value,
              defaultValue: (0, _valueFromAST.valueFromAST)(field.defaultValue, type),
              deprecationReason: getDeprecationReason(field),
              astNode: field
            };
          }
        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }
      }
    } catch (err) {
      _iterator9.e(err);
    } finally {
      _iterator9.f();
    }
    return inputFieldMap;
  }
  function buildEnumValueMap(nodes) {
    var enumValueMap = Object.create(null);
    var _iterator11 = _createForOfIteratorHelper(nodes),
      _step11;
    try {
      for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
        var node = _step11.value;
        var _node$values;

        // FIXME: https://github.com/graphql/graphql-js/issues/2203
        var valuesNodes = /* c8 ignore next */
        (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];
        var _iterator12 = _createForOfIteratorHelper(valuesNodes),
          _step12;
        try {
          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
            var value = _step12.value;
            var _value$description;
            enumValueMap[value.name.value] = {
              description: (_value$description = value.description) === null || _value$description === void 0 ? void 0 : _value$description.value,
              deprecationReason: getDeprecationReason(value),
              astNode: value
            };
          }
        } catch (err) {
          _iterator12.e(err);
        } finally {
          _iterator12.f();
        }
      }
    } catch (err) {
      _iterator11.e(err);
    } finally {
      _iterator11.f();
    }
    return enumValueMap;
  }
  function buildInterfaces(nodes) {
    // Note: While this could make assertions to get the correctly typed
    // values below, that would throw immediately while type system
    // validation with validateSchema() will produce more actionable results.
    // @ts-expect-error
    return nodes.flatMap(
    // FIXME: https://github.com/graphql/graphql-js/issues/2203
    function (node) {
      var _node$interfaces$map, _node$interfaces;
      return /* c8 ignore next */(
        (_node$interfaces$map = (_node$interfaces = node.interfaces) === null || _node$interfaces === void 0 ? void 0 : _node$interfaces.map(getNamedType)) !== null && _node$interfaces$map !== void 0 ? _node$interfaces$map : []
      );
    });
  }
  function buildUnionTypes(nodes) {
    // Note: While this could make assertions to get the correctly typed
    // values below, that would throw immediately while type system
    // validation with validateSchema() will produce more actionable results.
    // @ts-expect-error
    return nodes.flatMap(
    // FIXME: https://github.com/graphql/graphql-js/issues/2203
    function (node) {
      var _node$types$map, _node$types;
      return /* c8 ignore next */(
        (_node$types$map = (_node$types = node.types) === null || _node$types === void 0 ? void 0 : _node$types.map(getNamedType)) !== null && _node$types$map !== void 0 ? _node$types$map : []
      );
    });
  }
  function buildType(astNode) {
    var _typeExtensionsMap$na;
    var name = astNode.name.value;
    var extensionASTNodes = (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null && _typeExtensionsMap$na !== void 0 ? _typeExtensionsMap$na : [];
    switch (astNode.kind) {
      case _kinds.Kind.OBJECT_TYPE_DEFINITION:
        {
          var _astNode$description;
          var allNodes = [astNode].concat(_toConsumableArray(extensionASTNodes));
          return new _definition.GraphQLObjectType({
            name: name,
            description: (_astNode$description = astNode.description) === null || _astNode$description === void 0 ? void 0 : _astNode$description.value,
            interfaces: function interfaces() {
              return buildInterfaces(allNodes);
            },
            fields: function fields() {
              return buildFieldMap(allNodes);
            },
            astNode: astNode,
            extensionASTNodes: extensionASTNodes
          });
        }
      case _kinds.Kind.INTERFACE_TYPE_DEFINITION:
        {
          var _astNode$description2;
          var _allNodes = [astNode].concat(_toConsumableArray(extensionASTNodes));
          return new _definition.GraphQLInterfaceType({
            name: name,
            description: (_astNode$description2 = astNode.description) === null || _astNode$description2 === void 0 ? void 0 : _astNode$description2.value,
            interfaces: function interfaces() {
              return buildInterfaces(_allNodes);
            },
            fields: function fields() {
              return buildFieldMap(_allNodes);
            },
            astNode: astNode,
            extensionASTNodes: extensionASTNodes
          });
        }
      case _kinds.Kind.ENUM_TYPE_DEFINITION:
        {
          var _astNode$description3;
          var _allNodes2 = [astNode].concat(_toConsumableArray(extensionASTNodes));
          return new _definition.GraphQLEnumType({
            name: name,
            description: (_astNode$description3 = astNode.description) === null || _astNode$description3 === void 0 ? void 0 : _astNode$description3.value,
            values: buildEnumValueMap(_allNodes2),
            astNode: astNode,
            extensionASTNodes: extensionASTNodes
          });
        }
      case _kinds.Kind.UNION_TYPE_DEFINITION:
        {
          var _astNode$description4;
          var _allNodes3 = [astNode].concat(_toConsumableArray(extensionASTNodes));
          return new _definition.GraphQLUnionType({
            name: name,
            description: (_astNode$description4 = astNode.description) === null || _astNode$description4 === void 0 ? void 0 : _astNode$description4.value,
            types: function types() {
              return buildUnionTypes(_allNodes3);
            },
            astNode: astNode,
            extensionASTNodes: extensionASTNodes
          });
        }
      case _kinds.Kind.SCALAR_TYPE_DEFINITION:
        {
          var _astNode$description5;
          return new _definition.GraphQLScalarType({
            name: name,
            description: (_astNode$description5 = astNode.description) === null || _astNode$description5 === void 0 ? void 0 : _astNode$description5.value,
            specifiedByURL: getSpecifiedByURL(astNode),
            astNode: astNode,
            extensionASTNodes: extensionASTNodes
          });
        }
      case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:
        {
          var _astNode$description6;
          var _allNodes4 = [astNode].concat(_toConsumableArray(extensionASTNodes));
          return new _definition.GraphQLInputObjectType({
            name: name,
            description: (_astNode$description6 = astNode.description) === null || _astNode$description6 === void 0 ? void 0 : _astNode$description6.value,
            fields: function fields() {
              return buildInputFieldMap(_allNodes4);
            },
            astNode: astNode,
            extensionASTNodes: extensionASTNodes
          });
        }
    }
  }
}
var stdTypeMap = (0, _keyMap.keyMap)([].concat(_toConsumableArray(_scalars.specifiedScalarTypes), _toConsumableArray(_introspection.introspectionTypes)), function (type) {
  return type.name;
});
/**
 * Given a field or enum value node, returns the string value for the
 * deprecation reason.
 */

function getDeprecationReason(node) {
  var deprecated = (0, _values.getDirectiveValues)(_directives.GraphQLDeprecatedDirective, node); // @ts-expect-error validated by `getDirectiveValues`

  return deprecated === null || deprecated === void 0 ? void 0 : deprecated.reason;
}
/**
 * Given a scalar node, returns the string value for the specifiedByURL.
 */

function getSpecifiedByURL(node) {
  var specifiedBy = (0, _values.getDirectiveValues)(_directives.GraphQLSpecifiedByDirective, node); // @ts-expect-error validated by `getDirectiveValues`

  return specifiedBy === null || specifiedBy === void 0 ? void 0 : specifiedBy.url;
}
},{"../jsutils/devAssert.mjs":"../node_modules/graphql/jsutils/devAssert.mjs","../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","../jsutils/invariant.mjs":"../node_modules/graphql/jsutils/invariant.mjs","../jsutils/keyMap.mjs":"../node_modules/graphql/jsutils/keyMap.mjs","../jsutils/mapValue.mjs":"../node_modules/graphql/jsutils/mapValue.mjs","../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs","../language/predicates.mjs":"../node_modules/graphql/language/predicates.mjs","../type/definition.mjs":"../node_modules/graphql/type/definition.mjs","../type/directives.mjs":"../node_modules/graphql/type/directives.mjs","../type/introspection.mjs":"../node_modules/graphql/type/introspection.mjs","../type/scalars.mjs":"../node_modules/graphql/type/scalars.mjs","../type/schema.mjs":"../node_modules/graphql/type/schema.mjs","../validation/validate.mjs":"../node_modules/graphql/validation/validate.mjs","../execution/values.mjs":"../node_modules/graphql/execution/values.mjs","./valueFromAST.mjs":"../node_modules/graphql/utilities/valueFromAST.mjs"}],"../node_modules/graphql/utilities/buildASTSchema.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildASTSchema = buildASTSchema;
exports.buildSchema = buildSchema;
var _devAssert = require("../jsutils/devAssert.mjs");
var _kinds = require("../language/kinds.mjs");
var _parser = require("../language/parser.mjs");
var _directives = require("../type/directives.mjs");
var _schema = require("../type/schema.mjs");
var _validate = require("../validation/validate.mjs");
var _extendSchema = require("./extendSchema.mjs");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * This takes the ast of a schema document produced by the parse function in
 * src/language/parser.js.
 *
 * If no schema definition is provided, then it will look for types named Query,
 * Mutation and Subscription.
 *
 * Given that AST it constructs a GraphQLSchema. The resulting schema
 * has no resolve methods, so execution will use default resolvers.
 */
function buildASTSchema(documentAST, options) {
  documentAST != null && documentAST.kind === _kinds.Kind.DOCUMENT || (0, _devAssert.devAssert)(false, 'Must provide valid Document AST.');
  if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {
    (0, _validate.assertValidSDL)(documentAST);
  }
  var emptySchemaConfig = {
    description: undefined,
    types: [],
    directives: [],
    extensions: Object.create(null),
    extensionASTNodes: [],
    assumeValid: false
  };
  var config = (0, _extendSchema.extendSchemaImpl)(emptySchemaConfig, documentAST, options);
  if (config.astNode == null) {
    var _iterator = _createForOfIteratorHelper(config.types),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var type = _step.value;
        switch (type.name) {
          // Note: While this could make early assertions to get the correctly
          // typed values below, that would throw immediately while type system
          // validation with validateSchema() will produce more actionable results.
          case 'Query':
            // @ts-expect-error validated in `validateSchema`
            config.query = type;
            break;
          case 'Mutation':
            // @ts-expect-error validated in `validateSchema`
            config.mutation = type;
            break;
          case 'Subscription':
            // @ts-expect-error validated in `validateSchema`
            config.subscription = type;
            break;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }
  var directives = [].concat(_toConsumableArray(config.directives), _toConsumableArray(_directives.specifiedDirectives.filter(function (stdDirective) {
    return config.directives.every(function (directive) {
      return directive.name !== stdDirective.name;
    });
  })));
  return new _schema.GraphQLSchema(_objectSpread(_objectSpread({}, config), {}, {
    directives: directives
  }));
}
/**
 * A helper function to build a GraphQLSchema directly from a source
 * document.
 */

function buildSchema(source, options) {
  var document = (0, _parser.parse)(source, {
    noLocation: options === null || options === void 0 ? void 0 : options.noLocation,
    allowLegacyFragmentVariables: options === null || options === void 0 ? void 0 : options.allowLegacyFragmentVariables
  });
  return buildASTSchema(document, {
    assumeValidSDL: options === null || options === void 0 ? void 0 : options.assumeValidSDL,
    assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid
  });
}
},{"../jsutils/devAssert.mjs":"../node_modules/graphql/jsutils/devAssert.mjs","../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs","../language/parser.mjs":"../node_modules/graphql/language/parser.mjs","../type/directives.mjs":"../node_modules/graphql/type/directives.mjs","../type/schema.mjs":"../node_modules/graphql/type/schema.mjs","../validation/validate.mjs":"../node_modules/graphql/validation/validate.mjs","./extendSchema.mjs":"../node_modules/graphql/utilities/extendSchema.mjs"}],"../node_modules/graphql/utilities/lexicographicSortSchema.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lexicographicSortSchema = lexicographicSortSchema;
var _inspect = require("../jsutils/inspect.mjs");
var _invariant = require("../jsutils/invariant.mjs");
var _keyValMap = require("../jsutils/keyValMap.mjs");
var _naturalCompare = require("../jsutils/naturalCompare.mjs");
var _definition = require("../type/definition.mjs");
var _directives = require("../type/directives.mjs");
var _introspection = require("../type/introspection.mjs");
var _schema = require("../type/schema.mjs");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Sort GraphQLSchema.
 *
 * This function returns a sorted copy of the given GraphQLSchema.
 */

function lexicographicSortSchema(schema) {
  var schemaConfig = schema.toConfig();
  var typeMap = (0, _keyValMap.keyValMap)(sortByName(schemaConfig.types), function (type) {
    return type.name;
  }, sortNamedType);
  return new _schema.GraphQLSchema(_objectSpread(_objectSpread({}, schemaConfig), {}, {
    types: Object.values(typeMap),
    directives: sortByName(schemaConfig.directives).map(sortDirective),
    query: replaceMaybeType(schemaConfig.query),
    mutation: replaceMaybeType(schemaConfig.mutation),
    subscription: replaceMaybeType(schemaConfig.subscription)
  }));
  function replaceType(type) {
    if ((0, _definition.isListType)(type)) {
      // @ts-expect-error
      return new _definition.GraphQLList(replaceType(type.ofType));
    } else if ((0, _definition.isNonNullType)(type)) {
      // @ts-expect-error
      return new _definition.GraphQLNonNull(replaceType(type.ofType));
    } // @ts-expect-error FIXME: TS Conversion

    return replaceNamedType(type);
  }
  function replaceNamedType(type) {
    return typeMap[type.name];
  }
  function replaceMaybeType(maybeType) {
    return maybeType && replaceNamedType(maybeType);
  }
  function sortDirective(directive) {
    var config = directive.toConfig();
    return new _directives.GraphQLDirective(_objectSpread(_objectSpread({}, config), {}, {
      locations: sortBy(config.locations, function (x) {
        return x;
      }),
      args: sortArgs(config.args)
    }));
  }
  function sortArgs(args) {
    return sortObjMap(args, function (arg) {
      return _objectSpread(_objectSpread({}, arg), {}, {
        type: replaceType(arg.type)
      });
    });
  }
  function sortFields(fieldsMap) {
    return sortObjMap(fieldsMap, function (field) {
      return _objectSpread(_objectSpread({}, field), {}, {
        type: replaceType(field.type),
        args: field.args && sortArgs(field.args)
      });
    });
  }
  function sortInputFields(fieldsMap) {
    return sortObjMap(fieldsMap, function (field) {
      return _objectSpread(_objectSpread({}, field), {}, {
        type: replaceType(field.type)
      });
    });
  }
  function sortTypes(array) {
    return sortByName(array).map(replaceNamedType);
  }
  function sortNamedType(type) {
    if ((0, _definition.isScalarType)(type) || (0, _introspection.isIntrospectionType)(type)) {
      return type;
    }
    if ((0, _definition.isObjectType)(type)) {
      var config = type.toConfig();
      return new _definition.GraphQLObjectType(_objectSpread(_objectSpread({}, config), {}, {
        interfaces: function interfaces() {
          return sortTypes(config.interfaces);
        },
        fields: function fields() {
          return sortFields(config.fields);
        }
      }));
    }
    if ((0, _definition.isInterfaceType)(type)) {
      var _config = type.toConfig();
      return new _definition.GraphQLInterfaceType(_objectSpread(_objectSpread({}, _config), {}, {
        interfaces: function interfaces() {
          return sortTypes(_config.interfaces);
        },
        fields: function fields() {
          return sortFields(_config.fields);
        }
      }));
    }
    if ((0, _definition.isUnionType)(type)) {
      var _config2 = type.toConfig();
      return new _definition.GraphQLUnionType(_objectSpread(_objectSpread({}, _config2), {}, {
        types: function types() {
          return sortTypes(_config2.types);
        }
      }));
    }
    if ((0, _definition.isEnumType)(type)) {
      var _config3 = type.toConfig();
      return new _definition.GraphQLEnumType(_objectSpread(_objectSpread({}, _config3), {}, {
        values: sortObjMap(_config3.values, function (value) {
          return value;
        })
      }));
    }
    if ((0, _definition.isInputObjectType)(type)) {
      var _config4 = type.toConfig();
      return new _definition.GraphQLInputObjectType(_objectSpread(_objectSpread({}, _config4), {}, {
        fields: function fields() {
          return sortInputFields(_config4.fields);
        }
      }));
    }
    /* c8 ignore next 3 */
    // Not reachable, all possible types have been considered.

    false || (0, _invariant.invariant)(false, 'Unexpected type: ' + (0, _inspect.inspect)(type));
  }
}
function sortObjMap(map, sortValueFn) {
  var sortedMap = Object.create(null);
  var _iterator = _createForOfIteratorHelper(Object.keys(map).sort(_naturalCompare.naturalCompare)),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var key = _step.value;
      sortedMap[key] = sortValueFn(map[key]);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return sortedMap;
}
function sortByName(array) {
  return sortBy(array, function (obj) {
    return obj.name;
  });
}
function sortBy(array, mapToKey) {
  return array.slice().sort(function (obj1, obj2) {
    var key1 = mapToKey(obj1);
    var key2 = mapToKey(obj2);
    return (0, _naturalCompare.naturalCompare)(key1, key2);
  });
}
},{"../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","../jsutils/invariant.mjs":"../node_modules/graphql/jsutils/invariant.mjs","../jsutils/keyValMap.mjs":"../node_modules/graphql/jsutils/keyValMap.mjs","../jsutils/naturalCompare.mjs":"../node_modules/graphql/jsutils/naturalCompare.mjs","../type/definition.mjs":"../node_modules/graphql/type/definition.mjs","../type/directives.mjs":"../node_modules/graphql/type/directives.mjs","../type/introspection.mjs":"../node_modules/graphql/type/introspection.mjs","../type/schema.mjs":"../node_modules/graphql/type/schema.mjs"}],"../node_modules/graphql/utilities/printSchema.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.printIntrospectionSchema = printIntrospectionSchema;
exports.printSchema = printSchema;
exports.printType = printType;
var _inspect = require("../jsutils/inspect.mjs");
var _invariant = require("../jsutils/invariant.mjs");
var _blockString = require("../language/blockString.mjs");
var _kinds = require("../language/kinds.mjs");
var _printer = require("../language/printer.mjs");
var _definition = require("../type/definition.mjs");
var _directives = require("../type/directives.mjs");
var _introspection = require("../type/introspection.mjs");
var _scalars = require("../type/scalars.mjs");
var _astFromValue = require("./astFromValue.mjs");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function printSchema(schema) {
  return printFilteredSchema(schema, function (n) {
    return !(0, _directives.isSpecifiedDirective)(n);
  }, isDefinedType);
}
function printIntrospectionSchema(schema) {
  return printFilteredSchema(schema, _directives.isSpecifiedDirective, _introspection.isIntrospectionType);
}
function isDefinedType(type) {
  return !(0, _scalars.isSpecifiedScalarType)(type) && !(0, _introspection.isIntrospectionType)(type);
}
function printFilteredSchema(schema, directiveFilter, typeFilter) {
  var directives = schema.getDirectives().filter(directiveFilter);
  var types = Object.values(schema.getTypeMap()).filter(typeFilter);
  return [printSchemaDefinition(schema)].concat(_toConsumableArray(directives.map(function (directive) {
    return printDirective(directive);
  })), _toConsumableArray(types.map(function (type) {
    return printType(type);
  }))).filter(Boolean).join('\n\n');
}
function printSchemaDefinition(schema) {
  if (schema.description == null && isSchemaOfCommonNames(schema)) {
    return;
  }
  var operationTypes = [];
  var queryType = schema.getQueryType();
  if (queryType) {
    operationTypes.push("  query: ".concat(queryType.name));
  }
  var mutationType = schema.getMutationType();
  if (mutationType) {
    operationTypes.push("  mutation: ".concat(mutationType.name));
  }
  var subscriptionType = schema.getSubscriptionType();
  if (subscriptionType) {
    operationTypes.push("  subscription: ".concat(subscriptionType.name));
  }
  return printDescription(schema) + "schema {\n".concat(operationTypes.join('\n'), "\n}");
}
/**
 * GraphQL schema define root types for each type of operation. These types are
 * the same as any other type and can be named in any manner, however there is
 * a common naming convention:
 *
 * ```graphql
 *   schema {
 *     query: Query
 *     mutation: Mutation
 *     subscription: Subscription
 *   }
 * ```
 *
 * When using this naming convention, the schema description can be omitted.
 */

function isSchemaOfCommonNames(schema) {
  var queryType = schema.getQueryType();
  if (queryType && queryType.name !== 'Query') {
    return false;
  }
  var mutationType = schema.getMutationType();
  if (mutationType && mutationType.name !== 'Mutation') {
    return false;
  }
  var subscriptionType = schema.getSubscriptionType();
  if (subscriptionType && subscriptionType.name !== 'Subscription') {
    return false;
  }
  return true;
}
function printType(type) {
  if ((0, _definition.isScalarType)(type)) {
    return printScalar(type);
  }
  if ((0, _definition.isObjectType)(type)) {
    return printObject(type);
  }
  if ((0, _definition.isInterfaceType)(type)) {
    return printInterface(type);
  }
  if ((0, _definition.isUnionType)(type)) {
    return printUnion(type);
  }
  if ((0, _definition.isEnumType)(type)) {
    return printEnum(type);
  }
  if ((0, _definition.isInputObjectType)(type)) {
    return printInputObject(type);
  }
  /* c8 ignore next 3 */
  // Not reachable, all possible types have been considered.

  false || (0, _invariant.invariant)(false, 'Unexpected type: ' + (0, _inspect.inspect)(type));
}
function printScalar(type) {
  return printDescription(type) + "scalar ".concat(type.name) + printSpecifiedByURL(type);
}
function printImplementedInterfaces(type) {
  var interfaces = type.getInterfaces();
  return interfaces.length ? ' implements ' + interfaces.map(function (i) {
    return i.name;
  }).join(' & ') : '';
}
function printObject(type) {
  return printDescription(type) + "type ".concat(type.name) + printImplementedInterfaces(type) + printFields(type);
}
function printInterface(type) {
  return printDescription(type) + "interface ".concat(type.name) + printImplementedInterfaces(type) + printFields(type);
}
function printUnion(type) {
  var types = type.getTypes();
  var possibleTypes = types.length ? ' = ' + types.join(' | ') : '';
  return printDescription(type) + 'union ' + type.name + possibleTypes;
}
function printEnum(type) {
  var values = type.getValues().map(function (value, i) {
    return printDescription(value, '  ', !i) + '  ' + value.name + printDeprecated(value.deprecationReason);
  });
  return printDescription(type) + "enum ".concat(type.name) + printBlock(values);
}
function printInputObject(type) {
  var fields = Object.values(type.getFields()).map(function (f, i) {
    return printDescription(f, '  ', !i) + '  ' + printInputValue(f);
  });
  return printDescription(type) + "input ".concat(type.name) + printBlock(fields);
}
function printFields(type) {
  var fields = Object.values(type.getFields()).map(function (f, i) {
    return printDescription(f, '  ', !i) + '  ' + f.name + printArgs(f.args, '  ') + ': ' + String(f.type) + printDeprecated(f.deprecationReason);
  });
  return printBlock(fields);
}
function printBlock(items) {
  return items.length !== 0 ? ' {\n' + items.join('\n') + '\n}' : '';
}
function printArgs(args) {
  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  if (args.length === 0) {
    return '';
  } // If every arg does not have a description, print them on one line.

  if (args.every(function (arg) {
    return !arg.description;
  })) {
    return '(' + args.map(printInputValue).join(', ') + ')';
  }
  return '(\n' + args.map(function (arg, i) {
    return printDescription(arg, '  ' + indentation, !i) + '  ' + indentation + printInputValue(arg);
  }).join('\n') + '\n' + indentation + ')';
}
function printInputValue(arg) {
  var defaultAST = (0, _astFromValue.astFromValue)(arg.defaultValue, arg.type);
  var argDecl = arg.name + ': ' + String(arg.type);
  if (defaultAST) {
    argDecl += " = ".concat((0, _printer.print)(defaultAST));
  }
  return argDecl + printDeprecated(arg.deprecationReason);
}
function printDirective(directive) {
  return printDescription(directive) + 'directive @' + directive.name + printArgs(directive.args) + (directive.isRepeatable ? ' repeatable' : '') + ' on ' + directive.locations.join(' | ');
}
function printDeprecated(reason) {
  if (reason == null) {
    return '';
  }
  if (reason !== _directives.DEFAULT_DEPRECATION_REASON) {
    var astValue = (0, _printer.print)({
      kind: _kinds.Kind.STRING,
      value: reason
    });
    return " @deprecated(reason: ".concat(astValue, ")");
  }
  return ' @deprecated';
}
function printSpecifiedByURL(scalar) {
  if (scalar.specifiedByURL == null) {
    return '';
  }
  var astValue = (0, _printer.print)({
    kind: _kinds.Kind.STRING,
    value: scalar.specifiedByURL
  });
  return " @specifiedBy(url: ".concat(astValue, ")");
}
function printDescription(def) {
  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var firstInBlock = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var description = def.description;
  if (description == null) {
    return '';
  }
  var blockString = (0, _printer.print)({
    kind: _kinds.Kind.STRING,
    value: description,
    block: (0, _blockString.isPrintableAsBlockString)(description)
  });
  var prefix = indentation && !firstInBlock ? '\n' + indentation : indentation;
  return prefix + blockString.replace(/\n/g, '\n' + indentation) + '\n';
}
},{"../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","../jsutils/invariant.mjs":"../node_modules/graphql/jsutils/invariant.mjs","../language/blockString.mjs":"../node_modules/graphql/language/blockString.mjs","../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs","../language/printer.mjs":"../node_modules/graphql/language/printer.mjs","../type/definition.mjs":"../node_modules/graphql/type/definition.mjs","../type/directives.mjs":"../node_modules/graphql/type/directives.mjs","../type/introspection.mjs":"../node_modules/graphql/type/introspection.mjs","../type/scalars.mjs":"../node_modules/graphql/type/scalars.mjs","./astFromValue.mjs":"../node_modules/graphql/utilities/astFromValue.mjs"}],"../node_modules/graphql/utilities/concatAST.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concatAST = concatAST;
var _kinds = require("../language/kinds.mjs");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Provided a collection of ASTs, presumably each from different files,
 * concatenate the ASTs together into batched AST, useful for validating many
 * GraphQL source files which together represent one conceptual application.
 */

function concatAST(documents) {
  var definitions = [];
  var _iterator = _createForOfIteratorHelper(documents),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var doc = _step.value;
      definitions.push.apply(definitions, _toConsumableArray(doc.definitions));
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return {
    kind: _kinds.Kind.DOCUMENT,
    definitions: definitions
  };
}
},{"../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs"}],"../node_modules/graphql/utilities/separateOperations.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.separateOperations = separateOperations;
var _kinds = require("../language/kinds.mjs");
var _visitor = require("../language/visitor.mjs");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * separateOperations accepts a single AST document which may contain many
 * operations and fragments and returns a collection of AST documents each of
 * which contains a single operation as well the fragment definitions it
 * refers to.
 */

function separateOperations(documentAST) {
  var operations = [];
  var depGraph = Object.create(null); // Populate metadata and build a dependency graph.
  var _iterator = _createForOfIteratorHelper(documentAST.definitions),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var definitionNode = _step.value;
      switch (definitionNode.kind) {
        case _kinds.Kind.OPERATION_DEFINITION:
          operations.push(definitionNode);
          break;
        case _kinds.Kind.FRAGMENT_DEFINITION:
          depGraph[definitionNode.name.value] = collectDependencies(definitionNode.selectionSet);
          break;
        default: // ignore non-executable definitions
      }
    } // For each operation, produce a new synthesized AST which includes only what
    // is necessary for completing that operation.
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var separatedDocumentASTs = Object.create(null);
  var _loop = function _loop() {
    var operation = _operations[_i];
    var dependencies = new Set();
    var _iterator2 = _createForOfIteratorHelper(collectDependencies(operation.selectionSet)),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var fragmentName = _step2.value;
        collectTransitiveDependencies(dependencies, depGraph, fragmentName);
      } // Provides the empty string for anonymous operations.
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    var operationName = operation.name ? operation.name.value : ''; // The list of definition nodes to be included for this operation, sorted
    // to retain the same order as the original document.

    separatedDocumentASTs[operationName] = {
      kind: _kinds.Kind.DOCUMENT,
      definitions: documentAST.definitions.filter(function (node) {
        return node === operation || node.kind === _kinds.Kind.FRAGMENT_DEFINITION && dependencies.has(node.name.value);
      })
    };
  };
  for (var _i = 0, _operations = operations; _i < _operations.length; _i++) {
    _loop();
  }
  return separatedDocumentASTs;
}

// From a dependency graph, collects a list of transitive dependencies by
// recursing through a dependency graph.
function collectTransitiveDependencies(collected, depGraph, fromName) {
  if (!collected.has(fromName)) {
    collected.add(fromName);
    var immediateDeps = depGraph[fromName];
    if (immediateDeps !== undefined) {
      var _iterator3 = _createForOfIteratorHelper(immediateDeps),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var toName = _step3.value;
          collectTransitiveDependencies(collected, depGraph, toName);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }
}
function collectDependencies(selectionSet) {
  var dependencies = [];
  (0, _visitor.visit)(selectionSet, {
    FragmentSpread: function FragmentSpread(node) {
      dependencies.push(node.name.value);
    }
  });
  return dependencies;
}
},{"../language/kinds.mjs":"../node_modules/graphql/language/kinds.mjs","../language/visitor.mjs":"../node_modules/graphql/language/visitor.mjs"}],"../node_modules/graphql/utilities/stripIgnoredCharacters.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stripIgnoredCharacters = stripIgnoredCharacters;
var _blockString = require("../language/blockString.mjs");
var _lexer = require("../language/lexer.mjs");
var _source = require("../language/source.mjs");
var _tokenKind = require("../language/tokenKind.mjs");
/**
 * Strips characters that are not significant to the validity or execution
 * of a GraphQL document:
 *   - UnicodeBOM
 *   - WhiteSpace
 *   - LineTerminator
 *   - Comment
 *   - Comma
 *   - BlockString indentation
 *
 * Note: It is required to have a delimiter character between neighboring
 * non-punctuator tokens and this function always uses single space as delimiter.
 *
 * It is guaranteed that both input and output documents if parsed would result
 * in the exact same AST except for nodes location.
 *
 * Warning: It is guaranteed that this function will always produce stable results.
 * However, it's not guaranteed that it will stay the same between different
 * releases due to bugfixes or changes in the GraphQL specification.
 *
 * Query example:
 *
 * ```graphql
 * query SomeQuery($foo: String!, $bar: String) {
 *   someField(foo: $foo, bar: $bar) {
 *     a
 *     b {
 *       c
 *       d
 *     }
 *   }
 * }
 * ```
 *
 * Becomes:
 *
 * ```graphql
 * query SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}
 * ```
 *
 * SDL example:
 *
 * ```graphql
 * """
 * Type description
 * """
 * type Foo {
 *   """
 *   Field description
 *   """
 *   bar: String
 * }
 * ```
 *
 * Becomes:
 *
 * ```graphql
 * """Type description""" type Foo{"""Field description""" bar:String}
 * ```
 */

function stripIgnoredCharacters(source) {
  var sourceObj = (0, _source.isSource)(source) ? source : new _source.Source(source);
  var body = sourceObj.body;
  var lexer = new _lexer.Lexer(sourceObj);
  var strippedBody = '';
  var wasLastAddedTokenNonPunctuator = false;
  while (lexer.advance().kind !== _tokenKind.TokenKind.EOF) {
    var currentToken = lexer.token;
    var tokenKind = currentToken.kind;
    /**
     * Every two non-punctuator tokens should have space between them.
     * Also prevent case of non-punctuator token following by spread resulting
     * in invalid token (e.g. `1...` is invalid Float token).
     */

    var isNonPunctuator = !(0, _lexer.isPunctuatorTokenKind)(currentToken.kind);
    if (wasLastAddedTokenNonPunctuator) {
      if (isNonPunctuator || currentToken.kind === _tokenKind.TokenKind.SPREAD) {
        strippedBody += ' ';
      }
    }
    var tokenBody = body.slice(currentToken.start, currentToken.end);
    if (tokenKind === _tokenKind.TokenKind.BLOCK_STRING) {
      strippedBody += (0, _blockString.printBlockString)(currentToken.value, {
        minimize: true
      });
    } else {
      strippedBody += tokenBody;
    }
    wasLastAddedTokenNonPunctuator = isNonPunctuator;
  }
  return strippedBody;
}
},{"../language/blockString.mjs":"../node_modules/graphql/language/blockString.mjs","../language/lexer.mjs":"../node_modules/graphql/language/lexer.mjs","../language/source.mjs":"../node_modules/graphql/language/source.mjs","../language/tokenKind.mjs":"../node_modules/graphql/language/tokenKind.mjs"}],"../node_modules/graphql/utilities/assertValidName.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertValidName = assertValidName;
exports.isValidNameError = isValidNameError;
var _devAssert = require("../jsutils/devAssert.mjs");
var _GraphQLError = require("../error/GraphQLError.mjs");
var _assertName = require("../type/assertName.mjs");
/* c8 ignore start */

/**
 * Upholds the spec rules about naming.
 * @deprecated Please use `assertName` instead. Will be removed in v17
 */

function assertValidName(name) {
  var error = isValidNameError(name);
  if (error) {
    throw error;
  }
  return name;
}
/**
 * Returns an Error if a name is invalid.
 * @deprecated Please use `assertName` instead. Will be removed in v17
 */

function isValidNameError(name) {
  typeof name === 'string' || (0, _devAssert.devAssert)(false, 'Expected name to be a string.');
  if (name.startsWith('__')) {
    return new _GraphQLError.GraphQLError("Name \"".concat(name, "\" must not begin with \"__\", which is reserved by GraphQL introspection."));
  }
  try {
    (0, _assertName.assertName)(name);
  } catch (error) {
    return error;
  }
}
/* c8 ignore stop */
},{"../jsutils/devAssert.mjs":"../node_modules/graphql/jsutils/devAssert.mjs","../error/GraphQLError.mjs":"../node_modules/graphql/error/GraphQLError.mjs","../type/assertName.mjs":"../node_modules/graphql/type/assertName.mjs"}],"../node_modules/graphql/utilities/findBreakingChanges.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DangerousChangeType = exports.BreakingChangeType = void 0;
exports.findBreakingChanges = findBreakingChanges;
exports.findDangerousChanges = findDangerousChanges;
var _inspect = require("../jsutils/inspect.mjs");
var _invariant = require("../jsutils/invariant.mjs");
var _keyMap = require("../jsutils/keyMap.mjs");
var _printer = require("../language/printer.mjs");
var _definition = require("../type/definition.mjs");
var _scalars = require("../type/scalars.mjs");
var _astFromValue = require("./astFromValue.mjs");
var _sortValueNode = require("./sortValueNode.mjs");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var BreakingChangeType;
(function (BreakingChangeType) {
  BreakingChangeType['TYPE_REMOVED'] = 'TYPE_REMOVED';
  BreakingChangeType['TYPE_CHANGED_KIND'] = 'TYPE_CHANGED_KIND';
  BreakingChangeType['TYPE_REMOVED_FROM_UNION'] = 'TYPE_REMOVED_FROM_UNION';
  BreakingChangeType['VALUE_REMOVED_FROM_ENUM'] = 'VALUE_REMOVED_FROM_ENUM';
  BreakingChangeType['REQUIRED_INPUT_FIELD_ADDED'] = 'REQUIRED_INPUT_FIELD_ADDED';
  BreakingChangeType['IMPLEMENTED_INTERFACE_REMOVED'] = 'IMPLEMENTED_INTERFACE_REMOVED';
  BreakingChangeType['FIELD_REMOVED'] = 'FIELD_REMOVED';
  BreakingChangeType['FIELD_CHANGED_KIND'] = 'FIELD_CHANGED_KIND';
  BreakingChangeType['REQUIRED_ARG_ADDED'] = 'REQUIRED_ARG_ADDED';
  BreakingChangeType['ARG_REMOVED'] = 'ARG_REMOVED';
  BreakingChangeType['ARG_CHANGED_KIND'] = 'ARG_CHANGED_KIND';
  BreakingChangeType['DIRECTIVE_REMOVED'] = 'DIRECTIVE_REMOVED';
  BreakingChangeType['DIRECTIVE_ARG_REMOVED'] = 'DIRECTIVE_ARG_REMOVED';
  BreakingChangeType['REQUIRED_DIRECTIVE_ARG_ADDED'] = 'REQUIRED_DIRECTIVE_ARG_ADDED';
  BreakingChangeType['DIRECTIVE_REPEATABLE_REMOVED'] = 'DIRECTIVE_REPEATABLE_REMOVED';
  BreakingChangeType['DIRECTIVE_LOCATION_REMOVED'] = 'DIRECTIVE_LOCATION_REMOVED';
})(BreakingChangeType || (exports.BreakingChangeType = BreakingChangeType = {}));
var DangerousChangeType;
(function (DangerousChangeType) {
  DangerousChangeType['VALUE_ADDED_TO_ENUM'] = 'VALUE_ADDED_TO_ENUM';
  DangerousChangeType['TYPE_ADDED_TO_UNION'] = 'TYPE_ADDED_TO_UNION';
  DangerousChangeType['OPTIONAL_INPUT_FIELD_ADDED'] = 'OPTIONAL_INPUT_FIELD_ADDED';
  DangerousChangeType['OPTIONAL_ARG_ADDED'] = 'OPTIONAL_ARG_ADDED';
  DangerousChangeType['IMPLEMENTED_INTERFACE_ADDED'] = 'IMPLEMENTED_INTERFACE_ADDED';
  DangerousChangeType['ARG_DEFAULT_VALUE_CHANGE'] = 'ARG_DEFAULT_VALUE_CHANGE';
})(DangerousChangeType || (exports.DangerousChangeType = DangerousChangeType = {}));
/**
 * Given two schemas, returns an Array containing descriptions of all the types
 * of breaking changes covered by the other functions down below.
 */
function findBreakingChanges(oldSchema, newSchema) {
  // @ts-expect-error
  return findSchemaChanges(oldSchema, newSchema).filter(function (change) {
    return change.type in BreakingChangeType;
  });
}
/**
 * Given two schemas, returns an Array containing descriptions of all the types
 * of potentially dangerous changes covered by the other functions down below.
 */

function findDangerousChanges(oldSchema, newSchema) {
  // @ts-expect-error
  return findSchemaChanges(oldSchema, newSchema).filter(function (change) {
    return change.type in DangerousChangeType;
  });
}
function findSchemaChanges(oldSchema, newSchema) {
  return [].concat(_toConsumableArray(findTypeChanges(oldSchema, newSchema)), _toConsumableArray(findDirectiveChanges(oldSchema, newSchema)));
}
function findDirectiveChanges(oldSchema, newSchema) {
  var schemaChanges = [];
  var directivesDiff = diff(oldSchema.getDirectives(), newSchema.getDirectives());
  var _iterator = _createForOfIteratorHelper(directivesDiff.removed),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var oldDirective = _step.value;
      schemaChanges.push({
        type: BreakingChangeType.DIRECTIVE_REMOVED,
        description: "".concat(oldDirective.name, " was removed.")
      });
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var _iterator2 = _createForOfIteratorHelper(directivesDiff.persisted),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _step2$value = _slicedToArray(_step2.value, 2),
        _oldDirective = _step2$value[0],
        newDirective = _step2$value[1];
      var argsDiff = diff(_oldDirective.args, newDirective.args);
      var _iterator3 = _createForOfIteratorHelper(argsDiff.added),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var newArg = _step3.value;
          if ((0, _definition.isRequiredArgument)(newArg)) {
            schemaChanges.push({
              type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,
              description: "A required arg ".concat(newArg.name, " on directive ").concat(_oldDirective.name, " was added.")
            });
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      var _iterator4 = _createForOfIteratorHelper(argsDiff.removed),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var oldArg = _step4.value;
          schemaChanges.push({
            type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,
            description: "".concat(oldArg.name, " was removed from ").concat(_oldDirective.name, ".")
          });
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      if (_oldDirective.isRepeatable && !newDirective.isRepeatable) {
        schemaChanges.push({
          type: BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,
          description: "Repeatable flag was removed from ".concat(_oldDirective.name, ".")
        });
      }
      var _iterator5 = _createForOfIteratorHelper(_oldDirective.locations),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var location = _step5.value;
          if (!newDirective.locations.includes(location)) {
            schemaChanges.push({
              type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,
              description: "".concat(location, " was removed from ").concat(_oldDirective.name, ".")
            });
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return schemaChanges;
}
function findTypeChanges(oldSchema, newSchema) {
  var schemaChanges = [];
  var typesDiff = diff(Object.values(oldSchema.getTypeMap()), Object.values(newSchema.getTypeMap()));
  var _iterator6 = _createForOfIteratorHelper(typesDiff.removed),
    _step6;
  try {
    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
      var oldType = _step6.value;
      schemaChanges.push({
        type: BreakingChangeType.TYPE_REMOVED,
        description: (0, _scalars.isSpecifiedScalarType)(oldType) ? "Standard scalar ".concat(oldType.name, " was removed because it is not referenced anymore.") : "".concat(oldType.name, " was removed.")
      });
    }
  } catch (err) {
    _iterator6.e(err);
  } finally {
    _iterator6.f();
  }
  var _iterator7 = _createForOfIteratorHelper(typesDiff.persisted),
    _step7;
  try {
    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
      var _step7$value = _slicedToArray(_step7.value, 2),
        _oldType = _step7$value[0],
        newType = _step7$value[1];
      if ((0, _definition.isEnumType)(_oldType) && (0, _definition.isEnumType)(newType)) {
        schemaChanges.push.apply(schemaChanges, _toConsumableArray(findEnumTypeChanges(_oldType, newType)));
      } else if ((0, _definition.isUnionType)(_oldType) && (0, _definition.isUnionType)(newType)) {
        schemaChanges.push.apply(schemaChanges, _toConsumableArray(findUnionTypeChanges(_oldType, newType)));
      } else if ((0, _definition.isInputObjectType)(_oldType) && (0, _definition.isInputObjectType)(newType)) {
        schemaChanges.push.apply(schemaChanges, _toConsumableArray(findInputObjectTypeChanges(_oldType, newType)));
      } else if ((0, _definition.isObjectType)(_oldType) && (0, _definition.isObjectType)(newType)) {
        schemaChanges.push.apply(schemaChanges, _toConsumableArray(findFieldChanges(_oldType, newType)).concat(_toConsumableArray(findImplementedInterfacesChanges(_oldType, newType))));
      } else if ((0, _definition.isInterfaceType)(_oldType) && (0, _definition.isInterfaceType)(newType)) {
        schemaChanges.push.apply(schemaChanges, _toConsumableArray(findFieldChanges(_oldType, newType)).concat(_toConsumableArray(findImplementedInterfacesChanges(_oldType, newType))));
      } else if (_oldType.constructor !== newType.constructor) {
        schemaChanges.push({
          type: BreakingChangeType.TYPE_CHANGED_KIND,
          description: "".concat(_oldType.name, " changed from ") + "".concat(typeKindName(_oldType), " to ").concat(typeKindName(newType), ".")
        });
      }
    }
  } catch (err) {
    _iterator7.e(err);
  } finally {
    _iterator7.f();
  }
  return schemaChanges;
}
function findInputObjectTypeChanges(oldType, newType) {
  var schemaChanges = [];
  var fieldsDiff = diff(Object.values(oldType.getFields()), Object.values(newType.getFields()));
  var _iterator8 = _createForOfIteratorHelper(fieldsDiff.added),
    _step8;
  try {
    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
      var newField = _step8.value;
      if ((0, _definition.isRequiredInputField)(newField)) {
        schemaChanges.push({
          type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,
          description: "A required field ".concat(newField.name, " on input type ").concat(oldType.name, " was added.")
        });
      } else {
        schemaChanges.push({
          type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,
          description: "An optional field ".concat(newField.name, " on input type ").concat(oldType.name, " was added.")
        });
      }
    }
  } catch (err) {
    _iterator8.e(err);
  } finally {
    _iterator8.f();
  }
  var _iterator9 = _createForOfIteratorHelper(fieldsDiff.removed),
    _step9;
  try {
    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
      var oldField = _step9.value;
      schemaChanges.push({
        type: BreakingChangeType.FIELD_REMOVED,
        description: "".concat(oldType.name, ".").concat(oldField.name, " was removed.")
      });
    }
  } catch (err) {
    _iterator9.e(err);
  } finally {
    _iterator9.f();
  }
  var _iterator10 = _createForOfIteratorHelper(fieldsDiff.persisted),
    _step10;
  try {
    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
      var _step10$value = _slicedToArray(_step10.value, 2),
        _oldField = _step10$value[0],
        _newField = _step10$value[1];
      var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldField.type, _newField.type);
      if (!isSafe) {
        schemaChanges.push({
          type: BreakingChangeType.FIELD_CHANGED_KIND,
          description: "".concat(oldType.name, ".").concat(_oldField.name, " changed type from ") + "".concat(String(_oldField.type), " to ").concat(String(_newField.type), ".")
        });
      }
    }
  } catch (err) {
    _iterator10.e(err);
  } finally {
    _iterator10.f();
  }
  return schemaChanges;
}
function findUnionTypeChanges(oldType, newType) {
  var schemaChanges = [];
  var possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());
  var _iterator11 = _createForOfIteratorHelper(possibleTypesDiff.added),
    _step11;
  try {
    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
      var newPossibleType = _step11.value;
      schemaChanges.push({
        type: DangerousChangeType.TYPE_ADDED_TO_UNION,
        description: "".concat(newPossibleType.name, " was added to union type ").concat(oldType.name, ".")
      });
    }
  } catch (err) {
    _iterator11.e(err);
  } finally {
    _iterator11.f();
  }
  var _iterator12 = _createForOfIteratorHelper(possibleTypesDiff.removed),
    _step12;
  try {
    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
      var oldPossibleType = _step12.value;
      schemaChanges.push({
        type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,
        description: "".concat(oldPossibleType.name, " was removed from union type ").concat(oldType.name, ".")
      });
    }
  } catch (err) {
    _iterator12.e(err);
  } finally {
    _iterator12.f();
  }
  return schemaChanges;
}
function findEnumTypeChanges(oldType, newType) {
  var schemaChanges = [];
  var valuesDiff = diff(oldType.getValues(), newType.getValues());
  var _iterator13 = _createForOfIteratorHelper(valuesDiff.added),
    _step13;
  try {
    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
      var newValue = _step13.value;
      schemaChanges.push({
        type: DangerousChangeType.VALUE_ADDED_TO_ENUM,
        description: "".concat(newValue.name, " was added to enum type ").concat(oldType.name, ".")
      });
    }
  } catch (err) {
    _iterator13.e(err);
  } finally {
    _iterator13.f();
  }
  var _iterator14 = _createForOfIteratorHelper(valuesDiff.removed),
    _step14;
  try {
    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
      var oldValue = _step14.value;
      schemaChanges.push({
        type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,
        description: "".concat(oldValue.name, " was removed from enum type ").concat(oldType.name, ".")
      });
    }
  } catch (err) {
    _iterator14.e(err);
  } finally {
    _iterator14.f();
  }
  return schemaChanges;
}
function findImplementedInterfacesChanges(oldType, newType) {
  var schemaChanges = [];
  var interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());
  var _iterator15 = _createForOfIteratorHelper(interfacesDiff.added),
    _step15;
  try {
    for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
      var newInterface = _step15.value;
      schemaChanges.push({
        type: DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,
        description: "".concat(newInterface.name, " added to interfaces implemented by ").concat(oldType.name, ".")
      });
    }
  } catch (err) {
    _iterator15.e(err);
  } finally {
    _iterator15.f();
  }
  var _iterator16 = _createForOfIteratorHelper(interfacesDiff.removed),
    _step16;
  try {
    for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
      var oldInterface = _step16.value;
      schemaChanges.push({
        type: BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,
        description: "".concat(oldType.name, " no longer implements interface ").concat(oldInterface.name, ".")
      });
    }
  } catch (err) {
    _iterator16.e(err);
  } finally {
    _iterator16.f();
  }
  return schemaChanges;
}
function findFieldChanges(oldType, newType) {
  var schemaChanges = [];
  var fieldsDiff = diff(Object.values(oldType.getFields()), Object.values(newType.getFields()));
  var _iterator17 = _createForOfIteratorHelper(fieldsDiff.removed),
    _step17;
  try {
    for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
      var oldField = _step17.value;
      schemaChanges.push({
        type: BreakingChangeType.FIELD_REMOVED,
        description: "".concat(oldType.name, ".").concat(oldField.name, " was removed.")
      });
    }
  } catch (err) {
    _iterator17.e(err);
  } finally {
    _iterator17.f();
  }
  var _iterator18 = _createForOfIteratorHelper(fieldsDiff.persisted),
    _step18;
  try {
    for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
      var _step18$value = _slicedToArray(_step18.value, 2),
        _oldField2 = _step18$value[0],
        newField = _step18$value[1];
      schemaChanges.push.apply(schemaChanges, _toConsumableArray(findArgChanges(oldType, _oldField2, newField)));
      var isSafe = isChangeSafeForObjectOrInterfaceField(_oldField2.type, newField.type);
      if (!isSafe) {
        schemaChanges.push({
          type: BreakingChangeType.FIELD_CHANGED_KIND,
          description: "".concat(oldType.name, ".").concat(_oldField2.name, " changed type from ") + "".concat(String(_oldField2.type), " to ").concat(String(newField.type), ".")
        });
      }
    }
  } catch (err) {
    _iterator18.e(err);
  } finally {
    _iterator18.f();
  }
  return schemaChanges;
}
function findArgChanges(oldType, oldField, newField) {
  var schemaChanges = [];
  var argsDiff = diff(oldField.args, newField.args);
  var _iterator19 = _createForOfIteratorHelper(argsDiff.removed),
    _step19;
  try {
    for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
      var oldArg = _step19.value;
      schemaChanges.push({
        type: BreakingChangeType.ARG_REMOVED,
        description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(oldArg.name, " was removed.")
      });
    }
  } catch (err) {
    _iterator19.e(err);
  } finally {
    _iterator19.f();
  }
  var _iterator20 = _createForOfIteratorHelper(argsDiff.persisted),
    _step20;
  try {
    for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
      var _step20$value = _slicedToArray(_step20.value, 2),
        _oldArg = _step20$value[0],
        newArg = _step20$value[1];
      var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldArg.type, newArg.type);
      if (!isSafe) {
        schemaChanges.push({
          type: BreakingChangeType.ARG_CHANGED_KIND,
          description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(_oldArg.name, " has changed type from ") + "".concat(String(_oldArg.type), " to ").concat(String(newArg.type), ".")
        });
      } else if (_oldArg.defaultValue !== undefined) {
        if (newArg.defaultValue === undefined) {
          schemaChanges.push({
            type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
            description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(_oldArg.name, " defaultValue was removed.")
          });
        } else {
          // Since we looking only for client's observable changes we should
          // compare default values in the same representation as they are
          // represented inside introspection.
          var oldValueStr = stringifyValue(_oldArg.defaultValue, _oldArg.type);
          var newValueStr = stringifyValue(newArg.defaultValue, newArg.type);
          if (oldValueStr !== newValueStr) {
            schemaChanges.push({
              type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
              description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(_oldArg.name, " has changed defaultValue from ").concat(oldValueStr, " to ").concat(newValueStr, ".")
            });
          }
        }
      }
    }
  } catch (err) {
    _iterator20.e(err);
  } finally {
    _iterator20.f();
  }
  var _iterator21 = _createForOfIteratorHelper(argsDiff.added),
    _step21;
  try {
    for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
      var _newArg = _step21.value;
      if ((0, _definition.isRequiredArgument)(_newArg)) {
        schemaChanges.push({
          type: BreakingChangeType.REQUIRED_ARG_ADDED,
          description: "A required arg ".concat(_newArg.name, " on ").concat(oldType.name, ".").concat(oldField.name, " was added.")
        });
      } else {
        schemaChanges.push({
          type: DangerousChangeType.OPTIONAL_ARG_ADDED,
          description: "An optional arg ".concat(_newArg.name, " on ").concat(oldType.name, ".").concat(oldField.name, " was added.")
        });
      }
    }
  } catch (err) {
    _iterator21.e(err);
  } finally {
    _iterator21.f();
  }
  return schemaChanges;
}
function isChangeSafeForObjectOrInterfaceField(oldType, newType) {
  if ((0, _definition.isListType)(oldType)) {
    return (
      // if they're both lists, make sure the underlying types are compatible
      (0, _definition.isListType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) ||
      // moving from nullable to non-null of the same underlying type is safe
      (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)
    );
  }
  if ((0, _definition.isNonNullType)(oldType)) {
    // if they're both non-null, make sure the underlying types are compatible
    return (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);
  }
  return (
    // if they're both named types, see if their names are equivalent
    (0, _definition.isNamedType)(newType) && oldType.name === newType.name ||
    // moving from nullable to non-null of the same underlying type is safe
    (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)
  );
}
function isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {
  if ((0, _definition.isListType)(oldType)) {
    // if they're both lists, make sure the underlying types are compatible
    return (0, _definition.isListType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);
  }
  if ((0, _definition.isNonNullType)(oldType)) {
    return (
      // if they're both non-null, make sure the underlying types are
      // compatible
      (0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) ||
      // moving from non-null to nullable of the same underlying type is safe
      !(0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType)
    );
  } // if they're both named types, see if their names are equivalent

  return (0, _definition.isNamedType)(newType) && oldType.name === newType.name;
}
function typeKindName(type) {
  if ((0, _definition.isScalarType)(type)) {
    return 'a Scalar type';
  }
  if ((0, _definition.isObjectType)(type)) {
    return 'an Object type';
  }
  if ((0, _definition.isInterfaceType)(type)) {
    return 'an Interface type';
  }
  if ((0, _definition.isUnionType)(type)) {
    return 'a Union type';
  }
  if ((0, _definition.isEnumType)(type)) {
    return 'an Enum type';
  }
  if ((0, _definition.isInputObjectType)(type)) {
    return 'an Input type';
  }
  /* c8 ignore next 3 */
  // Not reachable, all possible types have been considered.

  false || (0, _invariant.invariant)(false, 'Unexpected type: ' + (0, _inspect.inspect)(type));
}
function stringifyValue(value, type) {
  var ast = (0, _astFromValue.astFromValue)(value, type);
  ast != null || (0, _invariant.invariant)(false);
  return (0, _printer.print)((0, _sortValueNode.sortValueNode)(ast));
}
function diff(oldArray, newArray) {
  var added = [];
  var removed = [];
  var persisted = [];
  var oldMap = (0, _keyMap.keyMap)(oldArray, function (_ref) {
    var name = _ref.name;
    return name;
  });
  var newMap = (0, _keyMap.keyMap)(newArray, function (_ref2) {
    var name = _ref2.name;
    return name;
  });
  var _iterator22 = _createForOfIteratorHelper(oldArray),
    _step22;
  try {
    for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
      var oldItem = _step22.value;
      var newItem = newMap[oldItem.name];
      if (newItem === undefined) {
        removed.push(oldItem);
      } else {
        persisted.push([oldItem, newItem]);
      }
    }
  } catch (err) {
    _iterator22.e(err);
  } finally {
    _iterator22.f();
  }
  var _iterator23 = _createForOfIteratorHelper(newArray),
    _step23;
  try {
    for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
      var _newItem = _step23.value;
      if (oldMap[_newItem.name] === undefined) {
        added.push(_newItem);
      }
    }
  } catch (err) {
    _iterator23.e(err);
  } finally {
    _iterator23.f();
  }
  return {
    added: added,
    persisted: persisted,
    removed: removed
  };
}
},{"../jsutils/inspect.mjs":"../node_modules/graphql/jsutils/inspect.mjs","../jsutils/invariant.mjs":"../node_modules/graphql/jsutils/invariant.mjs","../jsutils/keyMap.mjs":"../node_modules/graphql/jsutils/keyMap.mjs","../language/printer.mjs":"../node_modules/graphql/language/printer.mjs","../type/definition.mjs":"../node_modules/graphql/type/definition.mjs","../type/scalars.mjs":"../node_modules/graphql/type/scalars.mjs","./astFromValue.mjs":"../node_modules/graphql/utilities/astFromValue.mjs","./sortValueNode.mjs":"../node_modules/graphql/utilities/sortValueNode.mjs"}],"../node_modules/graphql/utilities/index.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BreakingChangeType", {
  enumerable: true,
  get: function () {
    return _findBreakingChanges.BreakingChangeType;
  }
});
Object.defineProperty(exports, "DangerousChangeType", {
  enumerable: true,
  get: function () {
    return _findBreakingChanges.DangerousChangeType;
  }
});
Object.defineProperty(exports, "TypeInfo", {
  enumerable: true,
  get: function () {
    return _TypeInfo.TypeInfo;
  }
});
Object.defineProperty(exports, "assertValidName", {
  enumerable: true,
  get: function () {
    return _assertValidName.assertValidName;
  }
});
Object.defineProperty(exports, "astFromValue", {
  enumerable: true,
  get: function () {
    return _astFromValue.astFromValue;
  }
});
Object.defineProperty(exports, "buildASTSchema", {
  enumerable: true,
  get: function () {
    return _buildASTSchema.buildASTSchema;
  }
});
Object.defineProperty(exports, "buildClientSchema", {
  enumerable: true,
  get: function () {
    return _buildClientSchema.buildClientSchema;
  }
});
Object.defineProperty(exports, "buildSchema", {
  enumerable: true,
  get: function () {
    return _buildASTSchema.buildSchema;
  }
});
Object.defineProperty(exports, "coerceInputValue", {
  enumerable: true,
  get: function () {
    return _coerceInputValue.coerceInputValue;
  }
});
Object.defineProperty(exports, "concatAST", {
  enumerable: true,
  get: function () {
    return _concatAST.concatAST;
  }
});
Object.defineProperty(exports, "doTypesOverlap", {
  enumerable: true,
  get: function () {
    return _typeComparators.doTypesOverlap;
  }
});
Object.defineProperty(exports, "extendSchema", {
  enumerable: true,
  get: function () {
    return _extendSchema.extendSchema;
  }
});
Object.defineProperty(exports, "findBreakingChanges", {
  enumerable: true,
  get: function () {
    return _findBreakingChanges.findBreakingChanges;
  }
});
Object.defineProperty(exports, "findDangerousChanges", {
  enumerable: true,
  get: function () {
    return _findBreakingChanges.findDangerousChanges;
  }
});
Object.defineProperty(exports, "getIntrospectionQuery", {
  enumerable: true,
  get: function () {
    return _getIntrospectionQuery.getIntrospectionQuery;
  }
});
Object.defineProperty(exports, "getOperationAST", {
  enumerable: true,
  get: function () {
    return _getOperationAST.getOperationAST;
  }
});
Object.defineProperty(exports, "getOperationRootType", {
  enumerable: true,
  get: function () {
    return _getOperationRootType.getOperationRootType;
  }
});
Object.defineProperty(exports, "introspectionFromSchema", {
  enumerable: true,
  get: function () {
    return _introspectionFromSchema.introspectionFromSchema;
  }
});
Object.defineProperty(exports, "isEqualType", {
  enumerable: true,
  get: function () {
    return _typeComparators.isEqualType;
  }
});
Object.defineProperty(exports, "isTypeSubTypeOf", {
  enumerable: true,
  get: function () {
    return _typeComparators.isTypeSubTypeOf;
  }
});
Object.defineProperty(exports, "isValidNameError", {
  enumerable: true,
  get: function () {
    return _assertValidName.isValidNameError;
  }
});
Object.defineProperty(exports, "lexicographicSortSchema", {
  enumerable: true,
  get: function () {
    return _lexicographicSortSchema.lexicographicSortSchema;
  }
});
Object.defineProperty(exports, "printIntrospectionSchema", {
  enumerable: true,
  get: function () {
    return _printSchema.printIntrospectionSchema;
  }
});
Object.defineProperty(exports, "printSchema", {
  enumerable: true,
  get: function () {
    return _printSchema.printSchema;
  }
});
Object.defineProperty(exports, "printType", {
  enumerable: true,
  get: function () {
    return _printSchema.printType;
  }
});
Object.defineProperty(exports, "separateOperations", {
  enumerable: true,
  get: function () {
    return _separateOperations.separateOperations;
  }
});
Object.defineProperty(exports, "stripIgnoredCharacters", {
  enumerable: true,
  get: function () {
    return _stripIgnoredCharacters.stripIgnoredCharacters;
  }
});
Object.defineProperty(exports, "typeFromAST", {
  enumerable: true,
  get: function () {
    return _typeFromAST.typeFromAST;
  }
});
Object.defineProperty(exports, "valueFromAST", {
  enumerable: true,
  get: function () {
    return _valueFromAST.valueFromAST;
  }
});
Object.defineProperty(exports, "valueFromASTUntyped", {
  enumerable: true,
  get: function () {
    return _valueFromASTUntyped.valueFromASTUntyped;
  }
});
Object.defineProperty(exports, "visitWithTypeInfo", {
  enumerable: true,
  get: function () {
    return _TypeInfo.visitWithTypeInfo;
  }
});
var _getIntrospectionQuery = require("./getIntrospectionQuery.mjs");
var _getOperationAST = require("./getOperationAST.mjs");
var _getOperationRootType = require("./getOperationRootType.mjs");
var _introspectionFromSchema = require("./introspectionFromSchema.mjs");
var _buildClientSchema = require("./buildClientSchema.mjs");
var _buildASTSchema = require("./buildASTSchema.mjs");
var _extendSchema = require("./extendSchema.mjs");
var _lexicographicSortSchema = require("./lexicographicSortSchema.mjs");
var _printSchema = require("./printSchema.mjs");
var _typeFromAST = require("./typeFromAST.mjs");
var _valueFromAST = require("./valueFromAST.mjs");
var _valueFromASTUntyped = require("./valueFromASTUntyped.mjs");
var _astFromValue = require("./astFromValue.mjs");
var _TypeInfo = require("./TypeInfo.mjs");
var _coerceInputValue = require("./coerceInputValue.mjs");
var _concatAST = require("./concatAST.mjs");
var _separateOperations = require("./separateOperations.mjs");
var _stripIgnoredCharacters = require("./stripIgnoredCharacters.mjs");
var _typeComparators = require("./typeComparators.mjs");
var _assertValidName = require("./assertValidName.mjs");
var _findBreakingChanges = require("./findBreakingChanges.mjs");
},{"./getIntrospectionQuery.mjs":"../node_modules/graphql/utilities/getIntrospectionQuery.mjs","./getOperationAST.mjs":"../node_modules/graphql/utilities/getOperationAST.mjs","./getOperationRootType.mjs":"../node_modules/graphql/utilities/getOperationRootType.mjs","./introspectionFromSchema.mjs":"../node_modules/graphql/utilities/introspectionFromSchema.mjs","./buildClientSchema.mjs":"../node_modules/graphql/utilities/buildClientSchema.mjs","./buildASTSchema.mjs":"../node_modules/graphql/utilities/buildASTSchema.mjs","./extendSchema.mjs":"../node_modules/graphql/utilities/extendSchema.mjs","./lexicographicSortSchema.mjs":"../node_modules/graphql/utilities/lexicographicSortSchema.mjs","./printSchema.mjs":"../node_modules/graphql/utilities/printSchema.mjs","./typeFromAST.mjs":"../node_modules/graphql/utilities/typeFromAST.mjs","./valueFromAST.mjs":"../node_modules/graphql/utilities/valueFromAST.mjs","./valueFromASTUntyped.mjs":"../node_modules/graphql/utilities/valueFromASTUntyped.mjs","./astFromValue.mjs":"../node_modules/graphql/utilities/astFromValue.mjs","./TypeInfo.mjs":"../node_modules/graphql/utilities/TypeInfo.mjs","./coerceInputValue.mjs":"../node_modules/graphql/utilities/coerceInputValue.mjs","./concatAST.mjs":"../node_modules/graphql/utilities/concatAST.mjs","./separateOperations.mjs":"../node_modules/graphql/utilities/separateOperations.mjs","./stripIgnoredCharacters.mjs":"../node_modules/graphql/utilities/stripIgnoredCharacters.mjs","./typeComparators.mjs":"../node_modules/graphql/utilities/typeComparators.mjs","./assertValidName.mjs":"../node_modules/graphql/utilities/assertValidName.mjs","./findBreakingChanges.mjs":"../node_modules/graphql/utilities/findBreakingChanges.mjs"}],"../node_modules/graphql/index.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BREAK", {
  enumerable: true,
  get: function () {
    return _index2.BREAK;
  }
});
Object.defineProperty(exports, "BreakingChangeType", {
  enumerable: true,
  get: function () {
    return _index6.BreakingChangeType;
  }
});
Object.defineProperty(exports, "DEFAULT_DEPRECATION_REASON", {
  enumerable: true,
  get: function () {
    return _index.DEFAULT_DEPRECATION_REASON;
  }
});
Object.defineProperty(exports, "DangerousChangeType", {
  enumerable: true,
  get: function () {
    return _index6.DangerousChangeType;
  }
});
Object.defineProperty(exports, "DirectiveLocation", {
  enumerable: true,
  get: function () {
    return _index2.DirectiveLocation;
  }
});
Object.defineProperty(exports, "ExecutableDefinitionsRule", {
  enumerable: true,
  get: function () {
    return _index4.ExecutableDefinitionsRule;
  }
});
Object.defineProperty(exports, "FieldsOnCorrectTypeRule", {
  enumerable: true,
  get: function () {
    return _index4.FieldsOnCorrectTypeRule;
  }
});
Object.defineProperty(exports, "FragmentsOnCompositeTypesRule", {
  enumerable: true,
  get: function () {
    return _index4.FragmentsOnCompositeTypesRule;
  }
});
Object.defineProperty(exports, "GRAPHQL_MAX_INT", {
  enumerable: true,
  get: function () {
    return _index.GRAPHQL_MAX_INT;
  }
});
Object.defineProperty(exports, "GRAPHQL_MIN_INT", {
  enumerable: true,
  get: function () {
    return _index.GRAPHQL_MIN_INT;
  }
});
Object.defineProperty(exports, "GraphQLBoolean", {
  enumerable: true,
  get: function () {
    return _index.GraphQLBoolean;
  }
});
Object.defineProperty(exports, "GraphQLDeprecatedDirective", {
  enumerable: true,
  get: function () {
    return _index.GraphQLDeprecatedDirective;
  }
});
Object.defineProperty(exports, "GraphQLDirective", {
  enumerable: true,
  get: function () {
    return _index.GraphQLDirective;
  }
});
Object.defineProperty(exports, "GraphQLEnumType", {
  enumerable: true,
  get: function () {
    return _index.GraphQLEnumType;
  }
});
Object.defineProperty(exports, "GraphQLError", {
  enumerable: true,
  get: function () {
    return _index5.GraphQLError;
  }
});
Object.defineProperty(exports, "GraphQLFloat", {
  enumerable: true,
  get: function () {
    return _index.GraphQLFloat;
  }
});
Object.defineProperty(exports, "GraphQLID", {
  enumerable: true,
  get: function () {
    return _index.GraphQLID;
  }
});
Object.defineProperty(exports, "GraphQLIncludeDirective", {
  enumerable: true,
  get: function () {
    return _index.GraphQLIncludeDirective;
  }
});
Object.defineProperty(exports, "GraphQLInputObjectType", {
  enumerable: true,
  get: function () {
    return _index.GraphQLInputObjectType;
  }
});
Object.defineProperty(exports, "GraphQLInt", {
  enumerable: true,
  get: function () {
    return _index.GraphQLInt;
  }
});
Object.defineProperty(exports, "GraphQLInterfaceType", {
  enumerable: true,
  get: function () {
    return _index.GraphQLInterfaceType;
  }
});
Object.defineProperty(exports, "GraphQLList", {
  enumerable: true,
  get: function () {
    return _index.GraphQLList;
  }
});
Object.defineProperty(exports, "GraphQLNonNull", {
  enumerable: true,
  get: function () {
    return _index.GraphQLNonNull;
  }
});
Object.defineProperty(exports, "GraphQLObjectType", {
  enumerable: true,
  get: function () {
    return _index.GraphQLObjectType;
  }
});
Object.defineProperty(exports, "GraphQLScalarType", {
  enumerable: true,
  get: function () {
    return _index.GraphQLScalarType;
  }
});
Object.defineProperty(exports, "GraphQLSchema", {
  enumerable: true,
  get: function () {
    return _index.GraphQLSchema;
  }
});
Object.defineProperty(exports, "GraphQLSkipDirective", {
  enumerable: true,
  get: function () {
    return _index.GraphQLSkipDirective;
  }
});
Object.defineProperty(exports, "GraphQLSpecifiedByDirective", {
  enumerable: true,
  get: function () {
    return _index.GraphQLSpecifiedByDirective;
  }
});
Object.defineProperty(exports, "GraphQLString", {
  enumerable: true,
  get: function () {
    return _index.GraphQLString;
  }
});
Object.defineProperty(exports, "GraphQLUnionType", {
  enumerable: true,
  get: function () {
    return _index.GraphQLUnionType;
  }
});
Object.defineProperty(exports, "Kind", {
  enumerable: true,
  get: function () {
    return _index2.Kind;
  }
});
Object.defineProperty(exports, "KnownArgumentNamesRule", {
  enumerable: true,
  get: function () {
    return _index4.KnownArgumentNamesRule;
  }
});
Object.defineProperty(exports, "KnownDirectivesRule", {
  enumerable: true,
  get: function () {
    return _index4.KnownDirectivesRule;
  }
});
Object.defineProperty(exports, "KnownFragmentNamesRule", {
  enumerable: true,
  get: function () {
    return _index4.KnownFragmentNamesRule;
  }
});
Object.defineProperty(exports, "KnownTypeNamesRule", {
  enumerable: true,
  get: function () {
    return _index4.KnownTypeNamesRule;
  }
});
Object.defineProperty(exports, "Lexer", {
  enumerable: true,
  get: function () {
    return _index2.Lexer;
  }
});
Object.defineProperty(exports, "Location", {
  enumerable: true,
  get: function () {
    return _index2.Location;
  }
});
Object.defineProperty(exports, "LoneAnonymousOperationRule", {
  enumerable: true,
  get: function () {
    return _index4.LoneAnonymousOperationRule;
  }
});
Object.defineProperty(exports, "LoneSchemaDefinitionRule", {
  enumerable: true,
  get: function () {
    return _index4.LoneSchemaDefinitionRule;
  }
});
Object.defineProperty(exports, "NoDeprecatedCustomRule", {
  enumerable: true,
  get: function () {
    return _index4.NoDeprecatedCustomRule;
  }
});
Object.defineProperty(exports, "NoFragmentCyclesRule", {
  enumerable: true,
  get: function () {
    return _index4.NoFragmentCyclesRule;
  }
});
Object.defineProperty(exports, "NoSchemaIntrospectionCustomRule", {
  enumerable: true,
  get: function () {
    return _index4.NoSchemaIntrospectionCustomRule;
  }
});
Object.defineProperty(exports, "NoUndefinedVariablesRule", {
  enumerable: true,
  get: function () {
    return _index4.NoUndefinedVariablesRule;
  }
});
Object.defineProperty(exports, "NoUnusedFragmentsRule", {
  enumerable: true,
  get: function () {
    return _index4.NoUnusedFragmentsRule;
  }
});
Object.defineProperty(exports, "NoUnusedVariablesRule", {
  enumerable: true,
  get: function () {
    return _index4.NoUnusedVariablesRule;
  }
});
Object.defineProperty(exports, "OperationTypeNode", {
  enumerable: true,
  get: function () {
    return _index2.OperationTypeNode;
  }
});
Object.defineProperty(exports, "OverlappingFieldsCanBeMergedRule", {
  enumerable: true,
  get: function () {
    return _index4.OverlappingFieldsCanBeMergedRule;
  }
});
Object.defineProperty(exports, "PossibleFragmentSpreadsRule", {
  enumerable: true,
  get: function () {
    return _index4.PossibleFragmentSpreadsRule;
  }
});
Object.defineProperty(exports, "PossibleTypeExtensionsRule", {
  enumerable: true,
  get: function () {
    return _index4.PossibleTypeExtensionsRule;
  }
});
Object.defineProperty(exports, "ProvidedRequiredArgumentsRule", {
  enumerable: true,
  get: function () {
    return _index4.ProvidedRequiredArgumentsRule;
  }
});
Object.defineProperty(exports, "ScalarLeafsRule", {
  enumerable: true,
  get: function () {
    return _index4.ScalarLeafsRule;
  }
});
Object.defineProperty(exports, "SchemaMetaFieldDef", {
  enumerable: true,
  get: function () {
    return _index.SchemaMetaFieldDef;
  }
});
Object.defineProperty(exports, "SingleFieldSubscriptionsRule", {
  enumerable: true,
  get: function () {
    return _index4.SingleFieldSubscriptionsRule;
  }
});
Object.defineProperty(exports, "Source", {
  enumerable: true,
  get: function () {
    return _index2.Source;
  }
});
Object.defineProperty(exports, "Token", {
  enumerable: true,
  get: function () {
    return _index2.Token;
  }
});
Object.defineProperty(exports, "TokenKind", {
  enumerable: true,
  get: function () {
    return _index2.TokenKind;
  }
});
Object.defineProperty(exports, "TypeInfo", {
  enumerable: true,
  get: function () {
    return _index6.TypeInfo;
  }
});
Object.defineProperty(exports, "TypeKind", {
  enumerable: true,
  get: function () {
    return _index.TypeKind;
  }
});
Object.defineProperty(exports, "TypeMetaFieldDef", {
  enumerable: true,
  get: function () {
    return _index.TypeMetaFieldDef;
  }
});
Object.defineProperty(exports, "TypeNameMetaFieldDef", {
  enumerable: true,
  get: function () {
    return _index.TypeNameMetaFieldDef;
  }
});
Object.defineProperty(exports, "UniqueArgumentDefinitionNamesRule", {
  enumerable: true,
  get: function () {
    return _index4.UniqueArgumentDefinitionNamesRule;
  }
});
Object.defineProperty(exports, "UniqueArgumentNamesRule", {
  enumerable: true,
  get: function () {
    return _index4.UniqueArgumentNamesRule;
  }
});
Object.defineProperty(exports, "UniqueDirectiveNamesRule", {
  enumerable: true,
  get: function () {
    return _index4.UniqueDirectiveNamesRule;
  }
});
Object.defineProperty(exports, "UniqueDirectivesPerLocationRule", {
  enumerable: true,
  get: function () {
    return _index4.UniqueDirectivesPerLocationRule;
  }
});
Object.defineProperty(exports, "UniqueEnumValueNamesRule", {
  enumerable: true,
  get: function () {
    return _index4.UniqueEnumValueNamesRule;
  }
});
Object.defineProperty(exports, "UniqueFieldDefinitionNamesRule", {
  enumerable: true,
  get: function () {
    return _index4.UniqueFieldDefinitionNamesRule;
  }
});
Object.defineProperty(exports, "UniqueFragmentNamesRule", {
  enumerable: true,
  get: function () {
    return _index4.UniqueFragmentNamesRule;
  }
});
Object.defineProperty(exports, "UniqueInputFieldNamesRule", {
  enumerable: true,
  get: function () {
    return _index4.UniqueInputFieldNamesRule;
  }
});
Object.defineProperty(exports, "UniqueOperationNamesRule", {
  enumerable: true,
  get: function () {
    return _index4.UniqueOperationNamesRule;
  }
});
Object.defineProperty(exports, "UniqueOperationTypesRule", {
  enumerable: true,
  get: function () {
    return _index4.UniqueOperationTypesRule;
  }
});
Object.defineProperty(exports, "UniqueTypeNamesRule", {
  enumerable: true,
  get: function () {
    return _index4.UniqueTypeNamesRule;
  }
});
Object.defineProperty(exports, "UniqueVariableNamesRule", {
  enumerable: true,
  get: function () {
    return _index4.UniqueVariableNamesRule;
  }
});
Object.defineProperty(exports, "ValidationContext", {
  enumerable: true,
  get: function () {
    return _index4.ValidationContext;
  }
});
Object.defineProperty(exports, "ValuesOfCorrectTypeRule", {
  enumerable: true,
  get: function () {
    return _index4.ValuesOfCorrectTypeRule;
  }
});
Object.defineProperty(exports, "VariablesAreInputTypesRule", {
  enumerable: true,
  get: function () {
    return _index4.VariablesAreInputTypesRule;
  }
});
Object.defineProperty(exports, "VariablesInAllowedPositionRule", {
  enumerable: true,
  get: function () {
    return _index4.VariablesInAllowedPositionRule;
  }
});
Object.defineProperty(exports, "__Directive", {
  enumerable: true,
  get: function () {
    return _index.__Directive;
  }
});
Object.defineProperty(exports, "__DirectiveLocation", {
  enumerable: true,
  get: function () {
    return _index.__DirectiveLocation;
  }
});
Object.defineProperty(exports, "__EnumValue", {
  enumerable: true,
  get: function () {
    return _index.__EnumValue;
  }
});
Object.defineProperty(exports, "__Field", {
  enumerable: true,
  get: function () {
    return _index.__Field;
  }
});
Object.defineProperty(exports, "__InputValue", {
  enumerable: true,
  get: function () {
    return _index.__InputValue;
  }
});
Object.defineProperty(exports, "__Schema", {
  enumerable: true,
  get: function () {
    return _index.__Schema;
  }
});
Object.defineProperty(exports, "__Type", {
  enumerable: true,
  get: function () {
    return _index.__Type;
  }
});
Object.defineProperty(exports, "__TypeKind", {
  enumerable: true,
  get: function () {
    return _index.__TypeKind;
  }
});
Object.defineProperty(exports, "assertAbstractType", {
  enumerable: true,
  get: function () {
    return _index.assertAbstractType;
  }
});
Object.defineProperty(exports, "assertCompositeType", {
  enumerable: true,
  get: function () {
    return _index.assertCompositeType;
  }
});
Object.defineProperty(exports, "assertDirective", {
  enumerable: true,
  get: function () {
    return _index.assertDirective;
  }
});
Object.defineProperty(exports, "assertEnumType", {
  enumerable: true,
  get: function () {
    return _index.assertEnumType;
  }
});
Object.defineProperty(exports, "assertEnumValueName", {
  enumerable: true,
  get: function () {
    return _index.assertEnumValueName;
  }
});
Object.defineProperty(exports, "assertInputObjectType", {
  enumerable: true,
  get: function () {
    return _index.assertInputObjectType;
  }
});
Object.defineProperty(exports, "assertInputType", {
  enumerable: true,
  get: function () {
    return _index.assertInputType;
  }
});
Object.defineProperty(exports, "assertInterfaceType", {
  enumerable: true,
  get: function () {
    return _index.assertInterfaceType;
  }
});
Object.defineProperty(exports, "assertLeafType", {
  enumerable: true,
  get: function () {
    return _index.assertLeafType;
  }
});
Object.defineProperty(exports, "assertListType", {
  enumerable: true,
  get: function () {
    return _index.assertListType;
  }
});
Object.defineProperty(exports, "assertName", {
  enumerable: true,
  get: function () {
    return _index.assertName;
  }
});
Object.defineProperty(exports, "assertNamedType", {
  enumerable: true,
  get: function () {
    return _index.assertNamedType;
  }
});
Object.defineProperty(exports, "assertNonNullType", {
  enumerable: true,
  get: function () {
    return _index.assertNonNullType;
  }
});
Object.defineProperty(exports, "assertNullableType", {
  enumerable: true,
  get: function () {
    return _index.assertNullableType;
  }
});
Object.defineProperty(exports, "assertObjectType", {
  enumerable: true,
  get: function () {
    return _index.assertObjectType;
  }
});
Object.defineProperty(exports, "assertOutputType", {
  enumerable: true,
  get: function () {
    return _index.assertOutputType;
  }
});
Object.defineProperty(exports, "assertScalarType", {
  enumerable: true,
  get: function () {
    return _index.assertScalarType;
  }
});
Object.defineProperty(exports, "assertSchema", {
  enumerable: true,
  get: function () {
    return _index.assertSchema;
  }
});
Object.defineProperty(exports, "assertType", {
  enumerable: true,
  get: function () {
    return _index.assertType;
  }
});
Object.defineProperty(exports, "assertUnionType", {
  enumerable: true,
  get: function () {
    return _index.assertUnionType;
  }
});
Object.defineProperty(exports, "assertValidName", {
  enumerable: true,
  get: function () {
    return _index6.assertValidName;
  }
});
Object.defineProperty(exports, "assertValidSchema", {
  enumerable: true,
  get: function () {
    return _index.assertValidSchema;
  }
});
Object.defineProperty(exports, "assertWrappingType", {
  enumerable: true,
  get: function () {
    return _index.assertWrappingType;
  }
});
Object.defineProperty(exports, "astFromValue", {
  enumerable: true,
  get: function () {
    return _index6.astFromValue;
  }
});
Object.defineProperty(exports, "buildASTSchema", {
  enumerable: true,
  get: function () {
    return _index6.buildASTSchema;
  }
});
Object.defineProperty(exports, "buildClientSchema", {
  enumerable: true,
  get: function () {
    return _index6.buildClientSchema;
  }
});
Object.defineProperty(exports, "buildSchema", {
  enumerable: true,
  get: function () {
    return _index6.buildSchema;
  }
});
Object.defineProperty(exports, "coerceInputValue", {
  enumerable: true,
  get: function () {
    return _index6.coerceInputValue;
  }
});
Object.defineProperty(exports, "concatAST", {
  enumerable: true,
  get: function () {
    return _index6.concatAST;
  }
});
Object.defineProperty(exports, "createSourceEventStream", {
  enumerable: true,
  get: function () {
    return _index3.createSourceEventStream;
  }
});
Object.defineProperty(exports, "defaultFieldResolver", {
  enumerable: true,
  get: function () {
    return _index3.defaultFieldResolver;
  }
});
Object.defineProperty(exports, "defaultTypeResolver", {
  enumerable: true,
  get: function () {
    return _index3.defaultTypeResolver;
  }
});
Object.defineProperty(exports, "doTypesOverlap", {
  enumerable: true,
  get: function () {
    return _index6.doTypesOverlap;
  }
});
Object.defineProperty(exports, "execute", {
  enumerable: true,
  get: function () {
    return _index3.execute;
  }
});
Object.defineProperty(exports, "executeSync", {
  enumerable: true,
  get: function () {
    return _index3.executeSync;
  }
});
Object.defineProperty(exports, "extendSchema", {
  enumerable: true,
  get: function () {
    return _index6.extendSchema;
  }
});
Object.defineProperty(exports, "findBreakingChanges", {
  enumerable: true,
  get: function () {
    return _index6.findBreakingChanges;
  }
});
Object.defineProperty(exports, "findDangerousChanges", {
  enumerable: true,
  get: function () {
    return _index6.findDangerousChanges;
  }
});
Object.defineProperty(exports, "formatError", {
  enumerable: true,
  get: function () {
    return _index5.formatError;
  }
});
Object.defineProperty(exports, "getArgumentValues", {
  enumerable: true,
  get: function () {
    return _index3.getArgumentValues;
  }
});
Object.defineProperty(exports, "getDirectiveValues", {
  enumerable: true,
  get: function () {
    return _index3.getDirectiveValues;
  }
});
Object.defineProperty(exports, "getEnterLeaveForKind", {
  enumerable: true,
  get: function () {
    return _index2.getEnterLeaveForKind;
  }
});
Object.defineProperty(exports, "getIntrospectionQuery", {
  enumerable: true,
  get: function () {
    return _index6.getIntrospectionQuery;
  }
});
Object.defineProperty(exports, "getLocation", {
  enumerable: true,
  get: function () {
    return _index2.getLocation;
  }
});
Object.defineProperty(exports, "getNamedType", {
  enumerable: true,
  get: function () {
    return _index.getNamedType;
  }
});
Object.defineProperty(exports, "getNullableType", {
  enumerable: true,
  get: function () {
    return _index.getNullableType;
  }
});
Object.defineProperty(exports, "getOperationAST", {
  enumerable: true,
  get: function () {
    return _index6.getOperationAST;
  }
});
Object.defineProperty(exports, "getOperationRootType", {
  enumerable: true,
  get: function () {
    return _index6.getOperationRootType;
  }
});
Object.defineProperty(exports, "getVariableValues", {
  enumerable: true,
  get: function () {
    return _index3.getVariableValues;
  }
});
Object.defineProperty(exports, "getVisitFn", {
  enumerable: true,
  get: function () {
    return _index2.getVisitFn;
  }
});
Object.defineProperty(exports, "graphql", {
  enumerable: true,
  get: function () {
    return _graphql.graphql;
  }
});
Object.defineProperty(exports, "graphqlSync", {
  enumerable: true,
  get: function () {
    return _graphql.graphqlSync;
  }
});
Object.defineProperty(exports, "introspectionFromSchema", {
  enumerable: true,
  get: function () {
    return _index6.introspectionFromSchema;
  }
});
Object.defineProperty(exports, "introspectionTypes", {
  enumerable: true,
  get: function () {
    return _index.introspectionTypes;
  }
});
Object.defineProperty(exports, "isAbstractType", {
  enumerable: true,
  get: function () {
    return _index.isAbstractType;
  }
});
Object.defineProperty(exports, "isCompositeType", {
  enumerable: true,
  get: function () {
    return _index.isCompositeType;
  }
});
Object.defineProperty(exports, "isConstValueNode", {
  enumerable: true,
  get: function () {
    return _index2.isConstValueNode;
  }
});
Object.defineProperty(exports, "isDefinitionNode", {
  enumerable: true,
  get: function () {
    return _index2.isDefinitionNode;
  }
});
Object.defineProperty(exports, "isDirective", {
  enumerable: true,
  get: function () {
    return _index.isDirective;
  }
});
Object.defineProperty(exports, "isEnumType", {
  enumerable: true,
  get: function () {
    return _index.isEnumType;
  }
});
Object.defineProperty(exports, "isEqualType", {
  enumerable: true,
  get: function () {
    return _index6.isEqualType;
  }
});
Object.defineProperty(exports, "isExecutableDefinitionNode", {
  enumerable: true,
  get: function () {
    return _index2.isExecutableDefinitionNode;
  }
});
Object.defineProperty(exports, "isInputObjectType", {
  enumerable: true,
  get: function () {
    return _index.isInputObjectType;
  }
});
Object.defineProperty(exports, "isInputType", {
  enumerable: true,
  get: function () {
    return _index.isInputType;
  }
});
Object.defineProperty(exports, "isInterfaceType", {
  enumerable: true,
  get: function () {
    return _index.isInterfaceType;
  }
});
Object.defineProperty(exports, "isIntrospectionType", {
  enumerable: true,
  get: function () {
    return _index.isIntrospectionType;
  }
});
Object.defineProperty(exports, "isLeafType", {
  enumerable: true,
  get: function () {
    return _index.isLeafType;
  }
});
Object.defineProperty(exports, "isListType", {
  enumerable: true,
  get: function () {
    return _index.isListType;
  }
});
Object.defineProperty(exports, "isNamedType", {
  enumerable: true,
  get: function () {
    return _index.isNamedType;
  }
});
Object.defineProperty(exports, "isNonNullType", {
  enumerable: true,
  get: function () {
    return _index.isNonNullType;
  }
});
Object.defineProperty(exports, "isNullableType", {
  enumerable: true,
  get: function () {
    return _index.isNullableType;
  }
});
Object.defineProperty(exports, "isObjectType", {
  enumerable: true,
  get: function () {
    return _index.isObjectType;
  }
});
Object.defineProperty(exports, "isOutputType", {
  enumerable: true,
  get: function () {
    return _index.isOutputType;
  }
});
Object.defineProperty(exports, "isRequiredArgument", {
  enumerable: true,
  get: function () {
    return _index.isRequiredArgument;
  }
});
Object.defineProperty(exports, "isRequiredInputField", {
  enumerable: true,
  get: function () {
    return _index.isRequiredInputField;
  }
});
Object.defineProperty(exports, "isScalarType", {
  enumerable: true,
  get: function () {
    return _index.isScalarType;
  }
});
Object.defineProperty(exports, "isSchema", {
  enumerable: true,
  get: function () {
    return _index.isSchema;
  }
});
Object.defineProperty(exports, "isSelectionNode", {
  enumerable: true,
  get: function () {
    return _index2.isSelectionNode;
  }
});
Object.defineProperty(exports, "isSpecifiedDirective", {
  enumerable: true,
  get: function () {
    return _index.isSpecifiedDirective;
  }
});
Object.defineProperty(exports, "isSpecifiedScalarType", {
  enumerable: true,
  get: function () {
    return _index.isSpecifiedScalarType;
  }
});
Object.defineProperty(exports, "isType", {
  enumerable: true,
  get: function () {
    return _index.isType;
  }
});
Object.defineProperty(exports, "isTypeDefinitionNode", {
  enumerable: true,
  get: function () {
    return _index2.isTypeDefinitionNode;
  }
});
Object.defineProperty(exports, "isTypeExtensionNode", {
  enumerable: true,
  get: function () {
    return _index2.isTypeExtensionNode;
  }
});
Object.defineProperty(exports, "isTypeNode", {
  enumerable: true,
  get: function () {
    return _index2.isTypeNode;
  }
});
Object.defineProperty(exports, "isTypeSubTypeOf", {
  enumerable: true,
  get: function () {
    return _index6.isTypeSubTypeOf;
  }
});
Object.defineProperty(exports, "isTypeSystemDefinitionNode", {
  enumerable: true,
  get: function () {
    return _index2.isTypeSystemDefinitionNode;
  }
});
Object.defineProperty(exports, "isTypeSystemExtensionNode", {
  enumerable: true,
  get: function () {
    return _index2.isTypeSystemExtensionNode;
  }
});
Object.defineProperty(exports, "isUnionType", {
  enumerable: true,
  get: function () {
    return _index.isUnionType;
  }
});
Object.defineProperty(exports, "isValidNameError", {
  enumerable: true,
  get: function () {
    return _index6.isValidNameError;
  }
});
Object.defineProperty(exports, "isValueNode", {
  enumerable: true,
  get: function () {
    return _index2.isValueNode;
  }
});
Object.defineProperty(exports, "isWrappingType", {
  enumerable: true,
  get: function () {
    return _index.isWrappingType;
  }
});
Object.defineProperty(exports, "lexicographicSortSchema", {
  enumerable: true,
  get: function () {
    return _index6.lexicographicSortSchema;
  }
});
Object.defineProperty(exports, "locatedError", {
  enumerable: true,
  get: function () {
    return _index5.locatedError;
  }
});
Object.defineProperty(exports, "parse", {
  enumerable: true,
  get: function () {
    return _index2.parse;
  }
});
Object.defineProperty(exports, "parseConstValue", {
  enumerable: true,
  get: function () {
    return _index2.parseConstValue;
  }
});
Object.defineProperty(exports, "parseType", {
  enumerable: true,
  get: function () {
    return _index2.parseType;
  }
});
Object.defineProperty(exports, "parseValue", {
  enumerable: true,
  get: function () {
    return _index2.parseValue;
  }
});
Object.defineProperty(exports, "print", {
  enumerable: true,
  get: function () {
    return _index2.print;
  }
});
Object.defineProperty(exports, "printError", {
  enumerable: true,
  get: function () {
    return _index5.printError;
  }
});
Object.defineProperty(exports, "printIntrospectionSchema", {
  enumerable: true,
  get: function () {
    return _index6.printIntrospectionSchema;
  }
});
Object.defineProperty(exports, "printLocation", {
  enumerable: true,
  get: function () {
    return _index2.printLocation;
  }
});
Object.defineProperty(exports, "printSchema", {
  enumerable: true,
  get: function () {
    return _index6.printSchema;
  }
});
Object.defineProperty(exports, "printSourceLocation", {
  enumerable: true,
  get: function () {
    return _index2.printSourceLocation;
  }
});
Object.defineProperty(exports, "printType", {
  enumerable: true,
  get: function () {
    return _index6.printType;
  }
});
Object.defineProperty(exports, "resolveObjMapThunk", {
  enumerable: true,
  get: function () {
    return _index.resolveObjMapThunk;
  }
});
Object.defineProperty(exports, "resolveReadonlyArrayThunk", {
  enumerable: true,
  get: function () {
    return _index.resolveReadonlyArrayThunk;
  }
});
Object.defineProperty(exports, "responsePathAsArray", {
  enumerable: true,
  get: function () {
    return _index3.responsePathAsArray;
  }
});
Object.defineProperty(exports, "separateOperations", {
  enumerable: true,
  get: function () {
    return _index6.separateOperations;
  }
});
Object.defineProperty(exports, "specifiedDirectives", {
  enumerable: true,
  get: function () {
    return _index.specifiedDirectives;
  }
});
Object.defineProperty(exports, "specifiedRules", {
  enumerable: true,
  get: function () {
    return _index4.specifiedRules;
  }
});
Object.defineProperty(exports, "specifiedScalarTypes", {
  enumerable: true,
  get: function () {
    return _index.specifiedScalarTypes;
  }
});
Object.defineProperty(exports, "stripIgnoredCharacters", {
  enumerable: true,
  get: function () {
    return _index6.stripIgnoredCharacters;
  }
});
Object.defineProperty(exports, "subscribe", {
  enumerable: true,
  get: function () {
    return _index3.subscribe;
  }
});
Object.defineProperty(exports, "syntaxError", {
  enumerable: true,
  get: function () {
    return _index5.syntaxError;
  }
});
Object.defineProperty(exports, "typeFromAST", {
  enumerable: true,
  get: function () {
    return _index6.typeFromAST;
  }
});
Object.defineProperty(exports, "validate", {
  enumerable: true,
  get: function () {
    return _index4.validate;
  }
});
Object.defineProperty(exports, "validateSchema", {
  enumerable: true,
  get: function () {
    return _index.validateSchema;
  }
});
Object.defineProperty(exports, "valueFromAST", {
  enumerable: true,
  get: function () {
    return _index6.valueFromAST;
  }
});
Object.defineProperty(exports, "valueFromASTUntyped", {
  enumerable: true,
  get: function () {
    return _index6.valueFromASTUntyped;
  }
});
Object.defineProperty(exports, "version", {
  enumerable: true,
  get: function () {
    return _version.version;
  }
});
Object.defineProperty(exports, "versionInfo", {
  enumerable: true,
  get: function () {
    return _version.versionInfo;
  }
});
Object.defineProperty(exports, "visit", {
  enumerable: true,
  get: function () {
    return _index2.visit;
  }
});
Object.defineProperty(exports, "visitInParallel", {
  enumerable: true,
  get: function () {
    return _index2.visitInParallel;
  }
});
Object.defineProperty(exports, "visitWithTypeInfo", {
  enumerable: true,
  get: function () {
    return _index6.visitWithTypeInfo;
  }
});
var _version = require("./version.mjs");
var _graphql = require("./graphql.mjs");
var _index = require("./type/index.mjs");
var _index2 = require("./language/index.mjs");
var _index3 = require("./execution/index.mjs");
var _index4 = require("./validation/index.mjs");
var _index5 = require("./error/index.mjs");
var _index6 = require("./utilities/index.mjs");
},{"./version.mjs":"../node_modules/graphql/version.mjs","./graphql.mjs":"../node_modules/graphql/graphql.mjs","./type/index.mjs":"../node_modules/graphql/type/index.mjs","./language/index.mjs":"../node_modules/graphql/language/index.mjs","./execution/index.mjs":"../node_modules/graphql/execution/index.mjs","./validation/index.mjs":"../node_modules/graphql/validation/index.mjs","./error/index.mjs":"../node_modules/graphql/error/index.mjs","./utilities/index.mjs":"../node_modules/graphql/utilities/index.mjs"}],"../node_modules/@apollo/client/utilities/graphql/directives.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDirectiveNames = getDirectiveNames;
exports.getInclusionDirectives = getInclusionDirectives;
exports.hasAnyDirectives = exports.hasAllDirectives = void 0;
exports.hasClientExports = hasClientExports;
exports.hasDirectives = hasDirectives;
exports.shouldInclude = shouldInclude;
var _index = require("../globals/index.js");
var _graphql = require("graphql");
function shouldInclude(_a, variables) {
  var directives = _a.directives;
  if (!directives || !directives.length) {
    return true;
  }
  return getInclusionDirectives(directives).every(function (_a) {
    var directive = _a.directive,
      ifArgument = _a.ifArgument;
    var evaledValue = false;
    if (ifArgument.value.kind === "Variable") {
      evaledValue = variables && variables[ifArgument.value.name.value];
      (0, _index.invariant)(evaledValue !== void 0, 66, directive.name.value);
    } else {
      evaledValue = ifArgument.value.value;
    }
    return directive.name.value === "skip" ? !evaledValue : evaledValue;
  });
}
function getDirectiveNames(root) {
  var names = [];
  (0, _graphql.visit)(root, {
    Directive: function (node) {
      names.push(node.name.value);
    }
  });
  return names;
}
var hasAnyDirectives = function (names, root) {
  return hasDirectives(names, root, false);
};
exports.hasAnyDirectives = hasAnyDirectives;
var hasAllDirectives = function (names, root) {
  return hasDirectives(names, root, true);
};
exports.hasAllDirectives = hasAllDirectives;
function hasDirectives(names, root, all) {
  var nameSet = new Set(names);
  var uniqueCount = nameSet.size;
  (0, _graphql.visit)(root, {
    Directive: function (node) {
      if (nameSet.delete(node.name.value) && (!all || !nameSet.size)) {
        return _graphql.BREAK;
      }
    }
  });
  // If we found all the names, nameSet will be empty. If we only care about
  // finding some of them, the < condition is sufficient.
  return all ? !nameSet.size : nameSet.size < uniqueCount;
}
function hasClientExports(document) {
  return document && hasDirectives(["client", "export"], document, true);
}
function isInclusionDirective(_a) {
  var value = _a.name.value;
  return value === "skip" || value === "include";
}
function getInclusionDirectives(directives) {
  var result = [];
  if (directives && directives.length) {
    directives.forEach(function (directive) {
      if (!isInclusionDirective(directive)) return;
      var directiveArguments = directive.arguments;
      var directiveName = directive.name.value;
      (0, _index.invariant)(directiveArguments && directiveArguments.length === 1, 67, directiveName);
      var ifArgument = directiveArguments[0];
      (0, _index.invariant)(ifArgument.name && ifArgument.name.value === "if", 68, directiveName);
      var ifValue = ifArgument.value;
      // means it has to be a variable value if this is a valid @skip or @include directive
      (0, _index.invariant)(ifValue && (ifValue.kind === "Variable" || ifValue.kind === "BooleanValue"), 69, directiveName);
      result.push({
        directive: directive,
        ifArgument: ifArgument
      });
    });
  }
  return result;
}
},{"../globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","graphql":"../node_modules/graphql/index.mjs"}],"../node_modules/@wry/trie/lib/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Trie = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds
// object keys weakly, yet can also hold non-object keys, unlike the
// native `WeakMap`.
// If no makeData function is supplied, the looked-up data will be an empty,
// null-prototype Object.
var defaultMakeData = function defaultMakeData() {
  return Object.create(null);
};
// Useful for processing arguments objects as well as arrays.
var _Array$prototype = Array.prototype,
  forEach = _Array$prototype.forEach,
  slice = _Array$prototype.slice;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var Trie = exports.Trie = /*#__PURE__*/function () {
  function Trie() {
    var weakness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    var makeData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultMakeData;
    _classCallCheck(this, Trie);
    this.weakness = weakness;
    this.makeData = makeData;
  }
  _createClass(Trie, [{
    key: "lookup",
    value: function lookup() {
      return this.lookupArray(arguments);
    }
  }, {
    key: "lookupArray",
    value: function lookupArray(array) {
      var node = this;
      forEach.call(array, function (key) {
        return node = node.getChildTrie(key);
      });
      return hasOwnProperty.call(node, "data") ? node.data : node.data = this.makeData(slice.call(array));
    }
  }, {
    key: "peek",
    value: function peek() {
      return this.peekArray(arguments);
    }
  }, {
    key: "peekArray",
    value: function peekArray(array) {
      var node = this;
      for (var i = 0, len = array.length; node && i < len; ++i) {
        var map = node.mapFor(array[i], false);
        node = map && map.get(array[i]);
      }
      return node && node.data;
    }
  }, {
    key: "remove",
    value: function remove() {
      return this.removeArray(arguments);
    }
  }, {
    key: "removeArray",
    value: function removeArray(array) {
      var data;
      if (array.length) {
        var head = array[0];
        var map = this.mapFor(head, false);
        var child = map && map.get(head);
        if (child) {
          data = child.removeArray(slice.call(array, 1));
          if (!child.data && !child.weak && !(child.strong && child.strong.size)) {
            map.delete(head);
          }
        }
      } else {
        data = this.data;
        delete this.data;
      }
      return data;
    }
  }, {
    key: "getChildTrie",
    value: function getChildTrie(key) {
      var map = this.mapFor(key, true);
      var child = map.get(key);
      if (!child) map.set(key, child = new Trie(this.weakness, this.makeData));
      return child;
    }
  }, {
    key: "mapFor",
    value: function mapFor(key, create) {
      return this.weakness && isObjRef(key) ? this.weak || (create ? this.weak = new WeakMap() : void 0) : this.strong || (create ? this.strong = new Map() : void 0);
    }
  }]);
  return Trie;
}();
function isObjRef(value) {
  switch (_typeof(value)) {
    case "object":
      if (value === null) break;
    // Fall through to return true...
    case "function":
      return true;
  }
  return false;
}
},{}],"../node_modules/@apollo/client/utilities/common/canUse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.canUseWeakSet = exports.canUseWeakMap = exports.canUseSymbol = exports.canUseLayoutEffect = exports.canUseDOM = exports.canUseAsyncIteratorSymbol = void 0;
var _index = require("../globals/index.js");
var canUseWeakMap = exports.canUseWeakMap = typeof WeakMap === "function" && (0, _index.maybe)(function () {
  return navigator.product;
}) !== "ReactNative";
var canUseWeakSet = exports.canUseWeakSet = typeof WeakSet === "function";
var canUseSymbol = exports.canUseSymbol = typeof Symbol === "function" && typeof Symbol.for === "function";
var canUseAsyncIteratorSymbol = exports.canUseAsyncIteratorSymbol = canUseSymbol && Symbol.asyncIterator;
var canUseDOM = exports.canUseDOM = typeof (0, _index.maybe)(function () {
  return window.document.createElement;
}) === "function";
var usingJSDOM =
// Following advice found in this comment from @domenic (maintainer of jsdom):
// https://github.com/jsdom/jsdom/issues/1537#issuecomment-229405327
//
// Since we control the version of Jest and jsdom used when running Apollo
// Client tests, and that version is recent enought to include " jsdom/x.y.z"
// at the end of the user agent string, I believe this case is all we need to
// check. Testing for "Node.js" was recommended for backwards compatibility
// with older version of jsdom, but we don't have that problem.
(0, _index.maybe)(function () {
  return navigator.userAgent.indexOf("jsdom") >= 0;
}) || false;
// Our tests should all continue to pass if we remove this !usingJSDOM
// condition, thereby allowing useLayoutEffect when using jsdom. Unfortunately,
// if we allow useLayoutEffect, then useSyncExternalStore generates many
// warnings about useLayoutEffect doing nothing on the server. While these
// warnings are harmless, this !usingJSDOM condition seems to be the best way to
// prevent them (i.e. skipping useLayoutEffect when using jsdom).
var canUseLayoutEffect = exports.canUseLayoutEffect = canUseDOM && !usingJSDOM;
},{"../globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js"}],"../node_modules/@apollo/client/utilities/common/objects.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNonNullObject = isNonNullObject;
exports.isPlainObject = isPlainObject;
function isNonNullObject(obj) {
  return obj !== null && typeof obj === "object";
}
function isPlainObject(obj) {
  return obj !== null && typeof obj === "object" && (Object.getPrototypeOf(obj) === Object.prototype || Object.getPrototypeOf(obj) === null);
}
},{}],"../node_modules/@apollo/client/utilities/graphql/fragments.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFragmentMap = createFragmentMap;
exports.getFragmentFromSelection = getFragmentFromSelection;
exports.getFragmentQueryDocument = getFragmentQueryDocument;
var _tslib = require("tslib");
var _index = require("../globals/index.js");
/**
 * Returns a query document which adds a single query operation that only
 * spreads the target fragment inside of it.
 *
 * So for example a document of:
 *
 * ```graphql
 * fragment foo on Foo { a b c }
 * ```
 *
 * Turns into:
 *
 * ```graphql
 * { ...foo }
 *
 * fragment foo on Foo { a b c }
 * ```
 *
 * The target fragment will either be the only fragment in the document, or a
 * fragment specified by the provided `fragmentName`. If there is more than one
 * fragment, but a `fragmentName` was not defined then an error will be thrown.
 */
function getFragmentQueryDocument(document, fragmentName) {
  var actualFragmentName = fragmentName;
  // Build an array of all our fragment definitions that will be used for
  // validations. We also do some validations on the other definitions in the
  // document while building this list.
  var fragments = [];
  document.definitions.forEach(function (definition) {
    // Throw an error if we encounter an operation definition because we will
    // define our own operation definition later on.
    if (definition.kind === "OperationDefinition") {
      throw (0, _index.newInvariantError)(70, definition.operation, definition.name ? " named '".concat(definition.name.value, "'") : "");
    }
    // Add our definition to the fragments array if it is a fragment
    // definition.
    if (definition.kind === "FragmentDefinition") {
      fragments.push(definition);
    }
  });
  // If the user did not give us a fragment name then let us try to get a
  // name from a single fragment in the definition.
  if (typeof actualFragmentName === "undefined") {
    (0, _index.invariant)(fragments.length === 1, 71, fragments.length);
    actualFragmentName = fragments[0].name.value;
  }
  // Generate a query document with an operation that simply spreads the
  // fragment inside of it.
  var query = (0, _tslib.__assign)((0, _tslib.__assign)({}, document), {
    definitions: (0, _tslib.__spreadArray)([{
      kind: "OperationDefinition",
      // OperationTypeNode is an enum
      operation: "query",
      selectionSet: {
        kind: "SelectionSet",
        selections: [{
          kind: "FragmentSpread",
          name: {
            kind: "Name",
            value: actualFragmentName
          }
        }]
      }
    }], document.definitions, true)
  });
  return query;
}
// Utility function that takes a list of fragment definitions and makes a hash out of them
// that maps the name of the fragment to the fragment definition.
function createFragmentMap(fragments) {
  if (fragments === void 0) {
    fragments = [];
  }
  var symTable = {};
  fragments.forEach(function (fragment) {
    symTable[fragment.name.value] = fragment;
  });
  return symTable;
}
function getFragmentFromSelection(selection, fragmentMap) {
  switch (selection.kind) {
    case "InlineFragment":
      return selection;
    case "FragmentSpread":
      {
        var fragmentName = selection.name.value;
        if (typeof fragmentMap === "function") {
          return fragmentMap(fragmentName);
        }
        var fragment = fragmentMap && fragmentMap[fragmentName];
        (0, _index.invariant)(fragment, 72, fragmentName);
        return fragment || null;
      }
    default:
      return null;
  }
}
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","../globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js"}],"../node_modules/@apollo/client/utilities/graphql/storeUtils.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.argumentsObjectFromField = argumentsObjectFromField;
exports.getStoreKeyName = void 0;
exports.getTypenameFromResult = getTypenameFromResult;
exports.isDocumentNode = isDocumentNode;
exports.isField = isField;
exports.isInlineFragment = isInlineFragment;
exports.isReference = isReference;
exports.makeReference = makeReference;
exports.resultKeyNameFromField = resultKeyNameFromField;
exports.storeKeyNameFromField = storeKeyNameFromField;
exports.valueToObjectRepresentation = valueToObjectRepresentation;
var _index = require("../globals/index.js");
var _objects = require("../common/objects.js");
var _fragments = require("./fragments.js");
function makeReference(id) {
  return {
    __ref: String(id)
  };
}
function isReference(obj) {
  return Boolean(obj && typeof obj === "object" && typeof obj.__ref === "string");
}
function isDocumentNode(value) {
  return (0, _objects.isNonNullObject)(value) && value.kind === "Document" && Array.isArray(value.definitions);
}
function isStringValue(value) {
  return value.kind === "StringValue";
}
function isBooleanValue(value) {
  return value.kind === "BooleanValue";
}
function isIntValue(value) {
  return value.kind === "IntValue";
}
function isFloatValue(value) {
  return value.kind === "FloatValue";
}
function isVariable(value) {
  return value.kind === "Variable";
}
function isObjectValue(value) {
  return value.kind === "ObjectValue";
}
function isListValue(value) {
  return value.kind === "ListValue";
}
function isEnumValue(value) {
  return value.kind === "EnumValue";
}
function isNullValue(value) {
  return value.kind === "NullValue";
}
function valueToObjectRepresentation(argObj, name, value, variables) {
  if (isIntValue(value) || isFloatValue(value)) {
    argObj[name.value] = Number(value.value);
  } else if (isBooleanValue(value) || isStringValue(value)) {
    argObj[name.value] = value.value;
  } else if (isObjectValue(value)) {
    var nestedArgObj_1 = {};
    value.fields.map(function (obj) {
      return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);
    });
    argObj[name.value] = nestedArgObj_1;
  } else if (isVariable(value)) {
    var variableValue = (variables || {})[value.name.value];
    argObj[name.value] = variableValue;
  } else if (isListValue(value)) {
    argObj[name.value] = value.values.map(function (listValue) {
      var nestedArgArrayObj = {};
      valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);
      return nestedArgArrayObj[name.value];
    });
  } else if (isEnumValue(value)) {
    argObj[name.value] = value.value;
  } else if (isNullValue(value)) {
    argObj[name.value] = null;
  } else {
    throw (0, _index.newInvariantError)(81, name.value, value.kind);
  }
}
function storeKeyNameFromField(field, variables) {
  var directivesObj = null;
  if (field.directives) {
    directivesObj = {};
    field.directives.forEach(function (directive) {
      directivesObj[directive.name.value] = {};
      if (directive.arguments) {
        directive.arguments.forEach(function (_a) {
          var name = _a.name,
            value = _a.value;
          return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);
        });
      }
    });
  }
  var argObj = null;
  if (field.arguments && field.arguments.length) {
    argObj = {};
    field.arguments.forEach(function (_a) {
      var name = _a.name,
        value = _a.value;
      return valueToObjectRepresentation(argObj, name, value, variables);
    });
  }
  return getStoreKeyName(field.name.value, argObj, directivesObj);
}
var KNOWN_DIRECTIVES = ["connection", "include", "skip", "client", "rest", "export", "nonreactive"];
var getStoreKeyName = exports.getStoreKeyName = Object.assign(function (fieldName, args, directives) {
  if (args && directives && directives["connection"] && directives["connection"]["key"]) {
    if (directives["connection"]["filter"] && directives["connection"]["filter"].length > 0) {
      var filterKeys = directives["connection"]["filter"] ? directives["connection"]["filter"] : [];
      filterKeys.sort();
      var filteredArgs_1 = {};
      filterKeys.forEach(function (key) {
        filteredArgs_1[key] = args[key];
      });
      return "".concat(directives["connection"]["key"], "(").concat(stringify(filteredArgs_1), ")");
    } else {
      return directives["connection"]["key"];
    }
  }
  var completeFieldName = fieldName;
  if (args) {
    // We can't use `JSON.stringify` here since it's non-deterministic,
    // and can lead to different store key names being created even though
    // the `args` object used during creation has the same properties/values.
    var stringifiedArgs = stringify(args);
    completeFieldName += "(".concat(stringifiedArgs, ")");
  }
  if (directives) {
    Object.keys(directives).forEach(function (key) {
      if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;
      if (directives[key] && Object.keys(directives[key]).length) {
        completeFieldName += "@".concat(key, "(").concat(stringify(directives[key]), ")");
      } else {
        completeFieldName += "@".concat(key);
      }
    });
  }
  return completeFieldName;
}, {
  setStringify: function (s) {
    var previous = stringify;
    stringify = s;
    return previous;
  }
});
// Default stable JSON.stringify implementation. Can be updated/replaced with
// something better by calling getStoreKeyName.setStringify.
var stringify = function defaultStringify(value) {
  return JSON.stringify(value, stringifyReplacer);
};
function stringifyReplacer(_key, value) {
  if ((0, _objects.isNonNullObject)(value) && !Array.isArray(value)) {
    value = Object.keys(value).sort().reduce(function (copy, key) {
      copy[key] = value[key];
      return copy;
    }, {});
  }
  return value;
}
function argumentsObjectFromField(field, variables) {
  if (field.arguments && field.arguments.length) {
    var argObj_1 = {};
    field.arguments.forEach(function (_a) {
      var name = _a.name,
        value = _a.value;
      return valueToObjectRepresentation(argObj_1, name, value, variables);
    });
    return argObj_1;
  }
  return null;
}
function resultKeyNameFromField(field) {
  return field.alias ? field.alias.value : field.name.value;
}
function getTypenameFromResult(result, selectionSet, fragmentMap) {
  var fragments;
  for (var _i = 0, _a = selectionSet.selections; _i < _a.length; _i++) {
    var selection = _a[_i];
    if (isField(selection)) {
      if (selection.name.value === "__typename") {
        return result[resultKeyNameFromField(selection)];
      }
    } else if (fragments) {
      fragments.push(selection);
    } else {
      fragments = [selection];
    }
  }
  if (typeof result.__typename === "string") {
    return result.__typename;
  }
  if (fragments) {
    for (var _b = 0, fragments_1 = fragments; _b < fragments_1.length; _b++) {
      var selection = fragments_1[_b];
      var typename = getTypenameFromResult(result, (0, _fragments.getFragmentFromSelection)(selection, fragmentMap).selectionSet, fragmentMap);
      if (typeof typename === "string") {
        return typename;
      }
    }
  }
}
function isField(selection) {
  return selection.kind === "Field";
}
function isInlineFragment(selection) {
  return selection.kind === "InlineFragment";
}
},{"../globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","../common/objects.js":"../node_modules/@apollo/client/utilities/common/objects.js","./fragments.js":"../node_modules/@apollo/client/utilities/graphql/fragments.js"}],"../node_modules/@apollo/client/utilities/graphql/getFromAST.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkDocument = checkDocument;
exports.getDefaultValues = getDefaultValues;
exports.getFragmentDefinition = getFragmentDefinition;
exports.getFragmentDefinitions = getFragmentDefinitions;
exports.getMainDefinition = getMainDefinition;
exports.getOperationDefinition = getOperationDefinition;
exports.getOperationName = getOperationName;
exports.getQueryDefinition = getQueryDefinition;
var _index = require("../globals/index.js");
var _storeUtils = require("./storeUtils.js");
// Checks the document for errors and throws an exception if there is an error.
function checkDocument(doc) {
  (0, _index.invariant)(doc && doc.kind === "Document", 73);
  var operations = doc.definitions.filter(function (d) {
    return d.kind !== "FragmentDefinition";
  }).map(function (definition) {
    if (definition.kind !== "OperationDefinition") {
      throw (0, _index.newInvariantError)(74, definition.kind);
    }
    return definition;
  });
  (0, _index.invariant)(operations.length <= 1, 75, operations.length);
  return doc;
}
function getOperationDefinition(doc) {
  checkDocument(doc);
  return doc.definitions.filter(function (definition) {
    return definition.kind === "OperationDefinition";
  })[0];
}
function getOperationName(doc) {
  return doc.definitions.filter(function (definition) {
    return definition.kind === "OperationDefinition" && !!definition.name;
  }).map(function (x) {
    return x.name.value;
  })[0] || null;
}
// Returns the FragmentDefinitions from a particular document as an array
function getFragmentDefinitions(doc) {
  return doc.definitions.filter(function (definition) {
    return definition.kind === "FragmentDefinition";
  });
}
function getQueryDefinition(doc) {
  var queryDef = getOperationDefinition(doc);
  (0, _index.invariant)(queryDef && queryDef.operation === "query", 76);
  return queryDef;
}
function getFragmentDefinition(doc) {
  (0, _index.invariant)(doc.kind === "Document", 77);
  (0, _index.invariant)(doc.definitions.length <= 1, 78);
  var fragmentDef = doc.definitions[0];
  (0, _index.invariant)(fragmentDef.kind === "FragmentDefinition", 79);
  return fragmentDef;
}
/**
 * Returns the first operation definition found in this document.
 * If no operation definition is found, the first fragment definition will be returned.
 * If no definitions are found, an error will be thrown.
 */
function getMainDefinition(queryDoc) {
  checkDocument(queryDoc);
  var fragmentDefinition;
  for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {
    var definition = _a[_i];
    if (definition.kind === "OperationDefinition") {
      var operation = definition.operation;
      if (operation === "query" || operation === "mutation" || operation === "subscription") {
        return definition;
      }
    }
    if (definition.kind === "FragmentDefinition" && !fragmentDefinition) {
      // we do this because we want to allow multiple fragment definitions
      // to precede an operation definition.
      fragmentDefinition = definition;
    }
  }
  if (fragmentDefinition) {
    return fragmentDefinition;
  }
  throw (0, _index.newInvariantError)(80);
}
function getDefaultValues(definition) {
  var defaultValues = Object.create(null);
  var defs = definition && definition.variableDefinitions;
  if (defs && defs.length) {
    defs.forEach(function (def) {
      if (def.defaultValue) {
        (0, _storeUtils.valueToObjectRepresentation)(defaultValues, def.variable.name, def.defaultValue);
      }
    });
  }
  return defaultValues;
}
},{"../globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","./storeUtils.js":"../node_modules/@apollo/client/utilities/graphql/storeUtils.js"}],"../node_modules/@apollo/client/utilities/graphql/DocumentTransform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentTransform = void 0;
var _trie = require("@wry/trie");
var _canUse = require("../common/canUse.js");
var _getFromAST = require("./getFromAST.js");
var _index = require("../globals/index.js");
function identity(document) {
  return document;
}
var DocumentTransform = exports.DocumentTransform = /** @class */function () {
  function DocumentTransform(transform, options) {
    if (options === void 0) {
      options = Object.create(null);
    }
    this.resultCache = _canUse.canUseWeakSet ? new WeakSet() : new Set();
    this.transform = transform;
    if (options.getCacheKey) {
      // Override default `getCacheKey` function, which returns [document].
      this.getCacheKey = options.getCacheKey;
    }
    if (options.cache !== false) {
      this.stableCacheKeys = new _trie.Trie(_canUse.canUseWeakMap, function (key) {
        return {
          key: key
        };
      });
    }
  }
  // This default implementation of getCacheKey can be overridden by providing
  // options.getCacheKey to the DocumentTransform constructor. In general, a
  // getCacheKey function may either return an array of keys (often including
  // the document) to be used as a cache key, or undefined to indicate the
  // transform for this document should not be cached.
  DocumentTransform.prototype.getCacheKey = function (document) {
    return [document];
  };
  DocumentTransform.identity = function () {
    // No need to cache this transform since it just returns the document
    // unchanged. This should save a bit of memory that would otherwise be
    // needed to populate the `documentCache` of this transform.
    return new DocumentTransform(identity, {
      cache: false
    });
  };
  DocumentTransform.split = function (predicate, left, right) {
    if (right === void 0) {
      right = DocumentTransform.identity();
    }
    return new DocumentTransform(function (document) {
      var documentTransform = predicate(document) ? left : right;
      return documentTransform.transformDocument(document);
    },
    // Reasonably assume both `left` and `right` transforms handle their own caching
    {
      cache: false
    });
  };
  DocumentTransform.prototype.transformDocument = function (document) {
    // If a user passes an already transformed result back to this function,
    // immediately return it.
    if (this.resultCache.has(document)) {
      return document;
    }
    var cacheEntry = this.getStableCacheEntry(document);
    if (cacheEntry && cacheEntry.value) {
      return cacheEntry.value;
    }
    (0, _getFromAST.checkDocument)(document);
    var transformedDocument = this.transform(document);
    this.resultCache.add(transformedDocument);
    if (cacheEntry) {
      cacheEntry.value = transformedDocument;
    }
    return transformedDocument;
  };
  DocumentTransform.prototype.concat = function (otherTransform) {
    var _this = this;
    return new DocumentTransform(function (document) {
      return otherTransform.transformDocument(_this.transformDocument(document));
    },
    // Reasonably assume both transforms handle their own caching
    {
      cache: false
    });
  };
  DocumentTransform.prototype.getStableCacheEntry = function (document) {
    if (!this.stableCacheKeys) return;
    var cacheKeys = this.getCacheKey(document);
    if (cacheKeys) {
      (0, _index.invariant)(Array.isArray(cacheKeys), 65);
      return this.stableCacheKeys.lookupArray(cacheKeys);
    }
  };
  return DocumentTransform;
}();
},{"@wry/trie":"../node_modules/@wry/trie/lib/index.js","../common/canUse.js":"../node_modules/@apollo/client/utilities/common/canUse.js","./getFromAST.js":"../node_modules/@apollo/client/utilities/graphql/getFromAST.js","../globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js"}],"../node_modules/@apollo/client/utilities/graphql/print.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.print = void 0;
var _graphql = require("graphql");
var _canUse = require("../common/canUse.js");
var printCache = _canUse.canUseWeakMap ? new WeakMap() : undefined;
var print = function (ast) {
  var result;
  result = printCache === null || printCache === void 0 ? void 0 : printCache.get(ast);
  if (!result) {
    result = (0, _graphql.print)(ast);
    printCache === null || printCache === void 0 ? void 0 : printCache.set(ast, result);
  }
  return result;
};
exports.print = print;
},{"graphql":"../node_modules/graphql/index.mjs","../common/canUse.js":"../node_modules/@apollo/client/utilities/common/canUse.js"}],"../node_modules/@apollo/client/utilities/common/arrays.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isArray = void 0;
exports.isNonEmptyArray = isNonEmptyArray;
// A version of Array.isArray that works better with readonly arrays.
var isArray = exports.isArray = Array.isArray;
function isNonEmptyArray(value) {
  return Array.isArray(value) && value.length > 0;
}
},{}],"../node_modules/@apollo/client/utilities/graphql/transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addTypenameToDocument = void 0;
exports.buildQueryFromSelectionSet = buildQueryFromSelectionSet;
exports.removeArgumentsFromDocument = removeArgumentsFromDocument;
exports.removeClientSetsFromDocument = removeClientSetsFromDocument;
exports.removeConnectionDirectiveFromDocument = removeConnectionDirectiveFromDocument;
exports.removeDirectivesFromDocument = removeDirectivesFromDocument;
exports.removeFragmentSpreadFromDocument = removeFragmentSpreadFromDocument;
var _tslib = require("tslib");
var _index = require("../globals/index.js");
var _graphql = require("graphql");
var _getFromAST = require("./getFromAST.js");
var _storeUtils = require("./storeUtils.js");
var _fragments = require("./fragments.js");
var _arrays = require("../common/arrays.js");
var TYPENAME_FIELD = {
  kind: _graphql.Kind.FIELD,
  name: {
    kind: _graphql.Kind.NAME,
    value: "__typename"
  }
};
function isEmpty(op, fragmentMap) {
  return !op || op.selectionSet.selections.every(function (selection) {
    return selection.kind === _graphql.Kind.FRAGMENT_SPREAD && isEmpty(fragmentMap[selection.name.value], fragmentMap);
  });
}
function nullIfDocIsEmpty(doc) {
  return isEmpty((0, _getFromAST.getOperationDefinition)(doc) || (0, _getFromAST.getFragmentDefinition)(doc), (0, _fragments.createFragmentMap)((0, _getFromAST.getFragmentDefinitions)(doc))) ? null : doc;
}
function getDirectiveMatcher(configs) {
  var names = new Map();
  var tests = new Map();
  configs.forEach(function (directive) {
    if (directive) {
      if (directive.name) {
        names.set(directive.name, directive);
      } else if (directive.test) {
        tests.set(directive.test, directive);
      }
    }
  });
  return function (directive) {
    var config = names.get(directive.name.value);
    if (!config && tests.size) {
      tests.forEach(function (testConfig, test) {
        if (test(directive)) {
          config = testConfig;
        }
      });
    }
    return config;
  };
}
function makeInUseGetterFunction(defaultKey) {
  var map = new Map();
  return function inUseGetterFunction(key) {
    if (key === void 0) {
      key = defaultKey;
    }
    var inUse = map.get(key);
    if (!inUse) {
      map.set(key, inUse = {
        // Variable and fragment spread names used directly within this
        // operation or fragment definition, as identified by key. These sets
        // will be populated during the first traversal of the document in
        // removeDirectivesFromDocument below.
        variables: new Set(),
        fragmentSpreads: new Set()
      });
    }
    return inUse;
  };
}
function removeDirectivesFromDocument(directives, doc) {
  (0, _getFromAST.checkDocument)(doc);
  // Passing empty strings to makeInUseGetterFunction means we handle anonymous
  // operations as if their names were "". Anonymous fragment definitions are
  // not supposed to be possible, but the same default naming strategy seems
  // appropriate for that case as well.
  var getInUseByOperationName = makeInUseGetterFunction("");
  var getInUseByFragmentName = makeInUseGetterFunction("");
  var getInUse = function (ancestors) {
    for (var p = 0, ancestor = void 0; p < ancestors.length && (ancestor = ancestors[p]); ++p) {
      if ((0, _arrays.isArray)(ancestor)) continue;
      if (ancestor.kind === _graphql.Kind.OPERATION_DEFINITION) {
        // If an operation is anonymous, we use the empty string as its key.
        return getInUseByOperationName(ancestor.name && ancestor.name.value);
      }
      if (ancestor.kind === _graphql.Kind.FRAGMENT_DEFINITION) {
        return getInUseByFragmentName(ancestor.name.value);
      }
    }
    globalThis.__DEV__ !== false && _index.invariant.error(82);
    return null;
  };
  var operationCount = 0;
  for (var i = doc.definitions.length - 1; i >= 0; --i) {
    if (doc.definitions[i].kind === _graphql.Kind.OPERATION_DEFINITION) {
      ++operationCount;
    }
  }
  var directiveMatcher = getDirectiveMatcher(directives);
  var shouldRemoveField = function (nodeDirectives) {
    return (0, _arrays.isNonEmptyArray)(nodeDirectives) && nodeDirectives.map(directiveMatcher).some(function (config) {
      return config && config.remove;
    });
  };
  var originalFragmentDefsByPath = new Map();
  // Any time the first traversal of the document below makes a change like
  // removing a fragment (by returning null), this variable should be set to
  // true. Once it becomes true, it should never be set to false again. If this
  // variable remains false throughout the traversal, then we can return the
  // original doc immediately without any modifications.
  var firstVisitMadeChanges = false;
  var fieldOrInlineFragmentVisitor = {
    enter: function (node) {
      if (shouldRemoveField(node.directives)) {
        firstVisitMadeChanges = true;
        return null;
      }
    }
  };
  var docWithoutDirectiveSubtrees = (0, _graphql.visit)(doc, {
    // These two AST node types share the same implementation, defined above.
    Field: fieldOrInlineFragmentVisitor,
    InlineFragment: fieldOrInlineFragmentVisitor,
    VariableDefinition: {
      enter: function () {
        // VariableDefinition nodes do not count as variables in use, though
        // they do contain Variable nodes that might be visited below. To avoid
        // counting variable declarations as usages, we skip visiting the
        // contents of this VariableDefinition node by returning false.
        return false;
      }
    },
    Variable: {
      enter: function (node, _key, _parent, _path, ancestors) {
        var inUse = getInUse(ancestors);
        if (inUse) {
          inUse.variables.add(node.name.value);
        }
      }
    },
    FragmentSpread: {
      enter: function (node, _key, _parent, _path, ancestors) {
        if (shouldRemoveField(node.directives)) {
          firstVisitMadeChanges = true;
          return null;
        }
        var inUse = getInUse(ancestors);
        if (inUse) {
          inUse.fragmentSpreads.add(node.name.value);
        }
        // We might like to remove this FragmentSpread by returning null here if
        // the corresponding FragmentDefinition node is also going to be removed
        // by the logic below, but we can't control the relative order of those
        // events, so we have to postpone the removal of dangling FragmentSpread
        // nodes until after the current visit of the document has finished.
      }
    },
    FragmentDefinition: {
      enter: function (node, _key, _parent, path) {
        originalFragmentDefsByPath.set(JSON.stringify(path), node);
      },
      leave: function (node, _key, _parent, path) {
        var originalNode = originalFragmentDefsByPath.get(JSON.stringify(path));
        if (node === originalNode) {
          // If the FragmentNode received by this leave function is identical to
          // the one received by the corresponding enter function (above), then
          // the visitor must not have made any changes within this
          // FragmentDefinition node. This fragment definition may still be
          // removed if there are no ...spread references to it, but it won't be
          // removed just because it has only a __typename field.
          return node;
        }
        if (
        // This logic applies only if the document contains one or more
        // operations, since removing all fragments from a document containing
        // only fragments makes the document useless.
        operationCount > 0 && node.selectionSet.selections.every(function (selection) {
          return selection.kind === _graphql.Kind.FIELD && selection.name.value === "__typename";
        })) {
          // This is a somewhat opinionated choice: if a FragmentDefinition ends
          // up having no fields other than __typename, we remove the whole
          // fragment definition, and later prune ...spread references to it.
          getInUseByFragmentName(node.name.value).removed = true;
          firstVisitMadeChanges = true;
          return null;
        }
      }
    },
    Directive: {
      leave: function (node) {
        // If a matching directive is found, remove the directive itself. Note
        // that this does not remove the target (field, argument, etc) of the
        // directive, but only the directive itself.
        if (directiveMatcher(node)) {
          firstVisitMadeChanges = true;
          return null;
        }
      }
    }
  });
  if (!firstVisitMadeChanges) {
    // If our first pass did not change anything about the document, then there
    // is no cleanup we need to do, and we can return the original doc.
    return doc;
  }
  // Utility for making sure inUse.transitiveVars is recursively populated.
  // Because this logic assumes inUse.fragmentSpreads has been completely
  // populated and inUse.removed has been set if appropriate,
  // populateTransitiveVars must be called after that information has been
  // collected by the first traversal of the document.
  var populateTransitiveVars = function (inUse) {
    if (!inUse.transitiveVars) {
      inUse.transitiveVars = new Set(inUse.variables);
      if (!inUse.removed) {
        inUse.fragmentSpreads.forEach(function (childFragmentName) {
          populateTransitiveVars(getInUseByFragmentName(childFragmentName)).transitiveVars.forEach(function (varName) {
            inUse.transitiveVars.add(varName);
          });
        });
      }
    }
    return inUse;
  };
  // Since we've been keeping track of fragment spreads used by particular
  // operations and fragment definitions, we now need to compute the set of all
  // spreads used (transitively) by any operations in the document.
  var allFragmentNamesUsed = new Set();
  docWithoutDirectiveSubtrees.definitions.forEach(function (def) {
    if (def.kind === _graphql.Kind.OPERATION_DEFINITION) {
      populateTransitiveVars(getInUseByOperationName(def.name && def.name.value)).fragmentSpreads.forEach(function (childFragmentName) {
        allFragmentNamesUsed.add(childFragmentName);
      });
    } else if (def.kind === _graphql.Kind.FRAGMENT_DEFINITION &&
    // If there are no operations in the document, then all fragment
    // definitions count as usages of their own fragment names. This heuristic
    // prevents accidentally removing all fragment definitions from the
    // document just because it contains no operations that use the fragments.
    operationCount === 0 && !getInUseByFragmentName(def.name.value).removed) {
      allFragmentNamesUsed.add(def.name.value);
    }
  });
  // Now that we have added all fragment spreads used by operations to the
  // allFragmentNamesUsed set, we can complete the set by transitively adding
  // all fragment spreads used by those fragments, and so on.
  allFragmentNamesUsed.forEach(function (fragmentName) {
    // Once all the childFragmentName strings added here have been seen already,
    // the top-level allFragmentNamesUsed.forEach loop will terminate.
    populateTransitiveVars(getInUseByFragmentName(fragmentName)).fragmentSpreads.forEach(function (childFragmentName) {
      allFragmentNamesUsed.add(childFragmentName);
    });
  });
  var fragmentWillBeRemoved = function (fragmentName) {
    return !!(
    // A fragment definition will be removed if there are no spreads that refer
    // to it, or the fragment was explicitly removed because it had no fields
    // other than __typename.
    !allFragmentNamesUsed.has(fragmentName) || getInUseByFragmentName(fragmentName).removed);
  };
  var enterVisitor = {
    enter: function (node) {
      if (fragmentWillBeRemoved(node.name.value)) {
        return null;
      }
    }
  };
  return nullIfDocIsEmpty((0, _graphql.visit)(docWithoutDirectiveSubtrees, {
    // If the fragment is going to be removed, then leaving any dangling
    // FragmentSpread nodes with the same name would be a mistake.
    FragmentSpread: enterVisitor,
    // This is where the fragment definition is actually removed.
    FragmentDefinition: enterVisitor,
    OperationDefinition: {
      leave: function (node) {
        // Upon leaving each operation in the depth-first AST traversal, prune
        // any variables that are declared by the operation but unused within.
        if (node.variableDefinitions) {
          var usedVariableNames_1 = populateTransitiveVars(
          // If an operation is anonymous, we use the empty string as its key.
          getInUseByOperationName(node.name && node.name.value)).transitiveVars;
          // According to the GraphQL spec, all variables declared by an
          // operation must either be used by that operation or used by some
          // fragment included transitively into that operation:
          // https://spec.graphql.org/draft/#sec-All-Variables-Used
          //
          // To stay on the right side of this validation rule, if/when we
          // remove the last $var references from an operation or its fragments,
          // we must also remove the corresponding $var declaration from the
          // enclosing operation. This pruning applies only to operations and
          // not fragment definitions, at the moment. Fragments may be able to
          // declare variables eventually, but today they can only consume them.
          if (usedVariableNames_1.size < node.variableDefinitions.length) {
            return (0, _tslib.__assign)((0, _tslib.__assign)({}, node), {
              variableDefinitions: node.variableDefinitions.filter(function (varDef) {
                return usedVariableNames_1.has(varDef.variable.name.value);
              })
            });
          }
        }
      }
    }
  }));
}
var addTypenameToDocument = exports.addTypenameToDocument = Object.assign(function (doc) {
  return (0, _graphql.visit)(doc, {
    SelectionSet: {
      enter: function (node, _key, parent) {
        // Don't add __typename to OperationDefinitions.
        if (parent && parent.kind === _graphql.Kind.OPERATION_DEFINITION) {
          return;
        }
        // No changes if no selections.
        var selections = node.selections;
        if (!selections) {
          return;
        }
        // If selections already have a __typename, or are part of an
        // introspection query, do nothing.
        var skip = selections.some(function (selection) {
          return (0, _storeUtils.isField)(selection) && (selection.name.value === "__typename" || selection.name.value.lastIndexOf("__", 0) === 0);
        });
        if (skip) {
          return;
        }
        // If this SelectionSet is @export-ed as an input variable, it should
        // not have a __typename field (see issue #4691).
        var field = parent;
        if ((0, _storeUtils.isField)(field) && field.directives && field.directives.some(function (d) {
          return d.name.value === "export";
        })) {
          return;
        }
        // Create and return a new SelectionSet with a __typename Field.
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, node), {
          selections: (0, _tslib.__spreadArray)((0, _tslib.__spreadArray)([], selections, true), [TYPENAME_FIELD], false)
        });
      }
    }
  });
}, {
  added: function (field) {
    return field === TYPENAME_FIELD;
  }
});
var connectionRemoveConfig = {
  test: function (directive) {
    var willRemove = directive.name.value === "connection";
    if (willRemove) {
      if (!directive.arguments || !directive.arguments.some(function (arg) {
        return arg.name.value === "key";
      })) {
        globalThis.__DEV__ !== false && _index.invariant.warn(83);
      }
    }
    return willRemove;
  }
};
function removeConnectionDirectiveFromDocument(doc) {
  return removeDirectivesFromDocument([connectionRemoveConfig], (0, _getFromAST.checkDocument)(doc));
}
function hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {
  if (nestedCheck === void 0) {
    nestedCheck = true;
  }
  return !!selectionSet && selectionSet.selections && selectionSet.selections.some(function (selection) {
    return hasDirectivesInSelection(directives, selection, nestedCheck);
  });
}
function hasDirectivesInSelection(directives, selection, nestedCheck) {
  if (nestedCheck === void 0) {
    nestedCheck = true;
  }
  if (!(0, _storeUtils.isField)(selection)) {
    return true;
  }
  if (!selection.directives) {
    return false;
  }
  return selection.directives.some(getDirectiveMatcher(directives)) || nestedCheck && hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck);
}
function getArgumentMatcher(config) {
  return function argumentMatcher(argument) {
    return config.some(function (aConfig) {
      return argument.value && argument.value.kind === _graphql.Kind.VARIABLE && argument.value.name && (aConfig.name === argument.value.name.value || aConfig.test && aConfig.test(argument));
    });
  };
}
function removeArgumentsFromDocument(config, doc) {
  var argMatcher = getArgumentMatcher(config);
  return nullIfDocIsEmpty((0, _graphql.visit)(doc, {
    OperationDefinition: {
      enter: function (node) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, node), {
          // Remove matching top level variables definitions.
          variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(function (varDef) {
            return !config.some(function (arg) {
              return arg.name === varDef.variable.name.value;
            });
          }) : []
        });
      }
    },
    Field: {
      enter: function (node) {
        // If `remove` is set to true for an argument, and an argument match
        // is found for a field, remove the field as well.
        var shouldRemoveField = config.some(function (argConfig) {
          return argConfig.remove;
        });
        if (shouldRemoveField) {
          var argMatchCount_1 = 0;
          if (node.arguments) {
            node.arguments.forEach(function (arg) {
              if (argMatcher(arg)) {
                argMatchCount_1 += 1;
              }
            });
          }
          if (argMatchCount_1 === 1) {
            return null;
          }
        }
      }
    },
    Argument: {
      enter: function (node) {
        // Remove all matching arguments.
        if (argMatcher(node)) {
          return null;
        }
      }
    }
  }));
}
function removeFragmentSpreadFromDocument(config, doc) {
  function enter(node) {
    if (config.some(function (def) {
      return def.name === node.name.value;
    })) {
      return null;
    }
  }
  return nullIfDocIsEmpty((0, _graphql.visit)(doc, {
    FragmentSpread: {
      enter: enter
    },
    FragmentDefinition: {
      enter: enter
    }
  }));
}
// If the incoming document is a query, return it as is. Otherwise, build a
// new document containing a query operation based on the selection set
// of the previous main operation.
function buildQueryFromSelectionSet(document) {
  var definition = (0, _getFromAST.getMainDefinition)(document);
  var definitionOperation = definition.operation;
  if (definitionOperation === "query") {
    // Already a query, so return the existing document.
    return document;
  }
  // Build a new query using the selection set of the main operation.
  var modifiedDoc = (0, _graphql.visit)(document, {
    OperationDefinition: {
      enter: function (node) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, node), {
          operation: "query"
        });
      }
    }
  });
  return modifiedDoc;
}
// Remove fields / selection sets that include an @client directive.
function removeClientSetsFromDocument(document) {
  (0, _getFromAST.checkDocument)(document);
  var modifiedDoc = removeDirectivesFromDocument([{
    test: function (directive) {
      return directive.name.value === "client";
    },
    remove: true
  }], document);
  return modifiedDoc;
}
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","../globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","graphql":"../node_modules/graphql/index.mjs","./getFromAST.js":"../node_modules/@apollo/client/utilities/graphql/getFromAST.js","./storeUtils.js":"../node_modules/@apollo/client/utilities/graphql/storeUtils.js","./fragments.js":"../node_modules/@apollo/client/utilities/graphql/fragments.js","../common/arrays.js":"../node_modules/@apollo/client/utilities/common/arrays.js"}],"../node_modules/@apollo/client/utilities/graphql/operations.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isMutationOperation = isMutationOperation;
exports.isQueryOperation = isQueryOperation;
exports.isSubscriptionOperation = isSubscriptionOperation;
var _getFromAST = require("./getFromAST.js");
function isOperation(document, operation) {
  var _a;
  return ((_a = (0, _getFromAST.getOperationDefinition)(document)) === null || _a === void 0 ? void 0 : _a.operation) === operation;
}
function isMutationOperation(document) {
  return isOperation(document, "mutation");
}
function isQueryOperation(document) {
  return isOperation(document, "query");
}
function isSubscriptionOperation(document) {
  return isOperation(document, "subscription");
}
},{"./getFromAST.js":"../node_modules/@apollo/client/utilities/graphql/getFromAST.js"}],"../node_modules/@apollo/client/utilities/common/mergeDeep.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DeepMerger = void 0;
exports.mergeDeep = mergeDeep;
exports.mergeDeepArray = mergeDeepArray;
var _tslib = require("tslib");
var _objects = require("./objects.js");
var hasOwnProperty = Object.prototype.hasOwnProperty;
function mergeDeep() {
  var sources = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    sources[_i] = arguments[_i];
  }
  return mergeDeepArray(sources);
}
// In almost any situation where you could succeed in getting the
// TypeScript compiler to infer a tuple type for the sources array, you
// could just use mergeDeep instead of mergeDeepArray, so instead of
// trying to convert T[] to an intersection type we just infer the array
// element type, which works perfectly when the sources array has a
// consistent element type.
function mergeDeepArray(sources) {
  var target = sources[0] || {};
  var count = sources.length;
  if (count > 1) {
    var merger = new DeepMerger();
    for (var i = 1; i < count; ++i) {
      target = merger.merge(target, sources[i]);
    }
  }
  return target;
}
var defaultReconciler = function (target, source, property) {
  return this.merge(target[property], source[property]);
};
var DeepMerger = exports.DeepMerger = /** @class */function () {
  function DeepMerger(reconciler) {
    if (reconciler === void 0) {
      reconciler = defaultReconciler;
    }
    this.reconciler = reconciler;
    this.isObject = _objects.isNonNullObject;
    this.pastCopies = new Set();
  }
  DeepMerger.prototype.merge = function (target, source) {
    var _this = this;
    var context = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      context[_i - 2] = arguments[_i];
    }
    if ((0, _objects.isNonNullObject)(source) && (0, _objects.isNonNullObject)(target)) {
      Object.keys(source).forEach(function (sourceKey) {
        if (hasOwnProperty.call(target, sourceKey)) {
          var targetValue = target[sourceKey];
          if (source[sourceKey] !== targetValue) {
            var result = _this.reconciler.apply(_this, (0, _tslib.__spreadArray)([target, source, sourceKey], context, false));
            // A well-implemented reconciler may return targetValue to indicate
            // the merge changed nothing about the structure of the target.
            if (result !== targetValue) {
              target = _this.shallowCopyForMerge(target);
              target[sourceKey] = result;
            }
          }
        } else {
          // If there is no collision, the target can safely share memory with
          // the source, and the recursion can terminate here.
          target = _this.shallowCopyForMerge(target);
          target[sourceKey] = source[sourceKey];
        }
      });
      return target;
    }
    // If source (or target) is not an object, let source replace target.
    return source;
  };
  DeepMerger.prototype.shallowCopyForMerge = function (value) {
    if ((0, _objects.isNonNullObject)(value)) {
      if (!this.pastCopies.has(value)) {
        if (Array.isArray(value)) {
          value = value.slice(0);
        } else {
          value = (0, _tslib.__assign)({
            __proto__: Object.getPrototypeOf(value)
          }, value);
        }
        this.pastCopies.add(value);
      }
    }
    return value;
  };
  return DeepMerger;
}();
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","./objects.js":"../node_modules/@apollo/client/utilities/common/objects.js"}],"../node_modules/@apollo/client/utilities/policies/pagination.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concatPagination = concatPagination;
exports.offsetLimitPagination = offsetLimitPagination;
exports.relayStylePagination = relayStylePagination;
var _tslib = require("tslib");
var _mergeDeep = require("../common/mergeDeep.js");
// A very basic pagination field policy that always concatenates new
// results onto the existing array, without examining options.args.
function concatPagination(keyArgs) {
  if (keyArgs === void 0) {
    keyArgs = false;
  }
  return {
    keyArgs: keyArgs,
    merge: function (existing, incoming) {
      return existing ? (0, _tslib.__spreadArray)((0, _tslib.__spreadArray)([], existing, true), incoming, true) : incoming;
    }
  };
}
// A basic field policy that uses options.args.{offset,limit} to splice
// the incoming data into the existing array. If your arguments are called
// something different (like args.{start,count}), feel free to copy/paste
// this implementation and make the appropriate changes.
function offsetLimitPagination(keyArgs) {
  if (keyArgs === void 0) {
    keyArgs = false;
  }
  return {
    keyArgs: keyArgs,
    merge: function (existing, incoming, _a) {
      var args = _a.args;
      var merged = existing ? existing.slice(0) : [];
      if (incoming) {
        if (args) {
          // Assume an offset of 0 if args.offset omitted.
          var _b = args.offset,
            offset = _b === void 0 ? 0 : _b;
          for (var i = 0; i < incoming.length; ++i) {
            merged[offset + i] = incoming[i];
          }
        } else {
          // It's unusual (probably a mistake) for a paginated field not
          // to receive any arguments, so you might prefer to throw an
          // exception here, instead of recovering by appending incoming
          // onto the existing array.
          merged.push.apply(merged, incoming);
        }
      }
      return merged;
    }
  };
}
// As proof of the flexibility of field policies, this function generates
// one that handles Relay-style pagination, without Apollo Client knowing
// anything about connections, edges, cursors, or pageInfo objects.
function relayStylePagination(keyArgs) {
  if (keyArgs === void 0) {
    keyArgs = false;
  }
  return {
    keyArgs: keyArgs,
    read: function (existing, _a) {
      var canRead = _a.canRead,
        readField = _a.readField;
      if (!existing) return existing;
      var edges = [];
      var firstEdgeCursor = "";
      var lastEdgeCursor = "";
      existing.edges.forEach(function (edge) {
        // Edges themselves could be Reference objects, so it's important
        // to use readField to access the edge.edge.node property.
        if (canRead(readField("node", edge))) {
          edges.push(edge);
          if (edge.cursor) {
            firstEdgeCursor = firstEdgeCursor || edge.cursor || "";
            lastEdgeCursor = edge.cursor || lastEdgeCursor;
          }
        }
      });
      if (edges.length > 1 && firstEdgeCursor === lastEdgeCursor) {
        firstEdgeCursor = "";
      }
      var _b = existing.pageInfo || {},
        startCursor = _b.startCursor,
        endCursor = _b.endCursor;
      return (0, _tslib.__assign)((0, _tslib.__assign)({}, getExtras(existing)), {
        edges: edges,
        pageInfo: (0, _tslib.__assign)((0, _tslib.__assign)({}, existing.pageInfo), {
          // If existing.pageInfo.{start,end}Cursor are undefined or "", default
          // to firstEdgeCursor and/or lastEdgeCursor.
          startCursor: startCursor || firstEdgeCursor,
          endCursor: endCursor || lastEdgeCursor
        })
      });
    },
    merge: function (existing, incoming, _a) {
      var args = _a.args,
        isReference = _a.isReference,
        readField = _a.readField;
      if (!existing) {
        existing = makeEmptyData();
      }
      if (!incoming) {
        return existing;
      }
      var incomingEdges = incoming.edges ? incoming.edges.map(function (edge) {
        if (isReference(edge = (0, _tslib.__assign)({}, edge))) {
          // In case edge is a Reference, we read out its cursor field and
          // store it as an extra property of the Reference object.
          edge.cursor = readField("cursor", edge);
        }
        return edge;
      }) : [];
      if (incoming.pageInfo) {
        var pageInfo_1 = incoming.pageInfo;
        var startCursor = pageInfo_1.startCursor,
          endCursor = pageInfo_1.endCursor;
        var firstEdge = incomingEdges[0];
        var lastEdge = incomingEdges[incomingEdges.length - 1];
        // In case we did not request the cursor field for edges in this
        // query, we can still infer cursors from pageInfo.
        if (firstEdge && startCursor) {
          firstEdge.cursor = startCursor;
        }
        if (lastEdge && endCursor) {
          lastEdge.cursor = endCursor;
        }
        // Cursors can also come from edges, so we default
        // pageInfo.{start,end}Cursor to {first,last}Edge.cursor.
        var firstCursor = firstEdge && firstEdge.cursor;
        if (firstCursor && !startCursor) {
          incoming = (0, _mergeDeep.mergeDeep)(incoming, {
            pageInfo: {
              startCursor: firstCursor
            }
          });
        }
        var lastCursor = lastEdge && lastEdge.cursor;
        if (lastCursor && !endCursor) {
          incoming = (0, _mergeDeep.mergeDeep)(incoming, {
            pageInfo: {
              endCursor: lastCursor
            }
          });
        }
      }
      var prefix = existing.edges;
      var suffix = [];
      if (args && args.after) {
        // This comparison does not need to use readField("cursor", edge),
        // because we stored the cursor field of any Reference edges as an
        // extra property of the Reference object.
        var index = prefix.findIndex(function (edge) {
          return edge.cursor === args.after;
        });
        if (index >= 0) {
          prefix = prefix.slice(0, index + 1);
          // suffix = []; // already true
        }
      } else if (args && args.before) {
        var index = prefix.findIndex(function (edge) {
          return edge.cursor === args.before;
        });
        suffix = index < 0 ? prefix : prefix.slice(index);
        prefix = [];
      } else if (incoming.edges) {
        // If we have neither args.after nor args.before, the incoming
        // edges cannot be spliced into the existing edges, so they must
        // replace the existing edges. See #6592 for a motivating example.
        prefix = [];
      }
      var edges = (0, _tslib.__spreadArray)((0, _tslib.__spreadArray)((0, _tslib.__spreadArray)([], prefix, true), incomingEdges, true), suffix, true);
      var pageInfo = (0, _tslib.__assign)((0, _tslib.__assign)({}, incoming.pageInfo), existing.pageInfo);
      if (incoming.pageInfo) {
        var _b = incoming.pageInfo,
          hasPreviousPage = _b.hasPreviousPage,
          hasNextPage = _b.hasNextPage,
          startCursor = _b.startCursor,
          endCursor = _b.endCursor,
          extras = (0, _tslib.__rest)(_b, ["hasPreviousPage", "hasNextPage", "startCursor", "endCursor"]);
        // If incoming.pageInfo had any extra non-standard properties,
        // assume they should take precedence over any existing properties
        // of the same name, regardless of where this page falls with
        // respect to the existing data.
        Object.assign(pageInfo, extras);
        // Keep existing.pageInfo.has{Previous,Next}Page unless the
        // placement of the incoming edges means incoming.hasPreviousPage
        // or incoming.hasNextPage should become the new values for those
        // properties in existing.pageInfo. Note that these updates are
        // only permitted when the beginning or end of the incoming page
        // coincides with the beginning or end of the existing data, as
        // determined using prefix.length and suffix.length.
        if (!prefix.length) {
          if (void 0 !== hasPreviousPage) pageInfo.hasPreviousPage = hasPreviousPage;
          if (void 0 !== startCursor) pageInfo.startCursor = startCursor;
        }
        if (!suffix.length) {
          if (void 0 !== hasNextPage) pageInfo.hasNextPage = hasNextPage;
          if (void 0 !== endCursor) pageInfo.endCursor = endCursor;
        }
      }
      return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, getExtras(existing)), getExtras(incoming)), {
        edges: edges,
        pageInfo: pageInfo
      });
    }
  };
}
// Returns any unrecognized properties of the given object.
var getExtras = function (obj) {
  return (0, _tslib.__rest)(obj, notExtras);
};
var notExtras = ["edges", "pageInfo"];
function makeEmptyData() {
  return {
    edges: [],
    pageInfo: {
      hasPreviousPage: false,
      hasNextPage: true,
      startCursor: "",
      endCursor: ""
    }
  };
}
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","../common/mergeDeep.js":"../node_modules/@apollo/client/utilities/common/mergeDeep.js"}],"../node_modules/zen-observable-ts/module.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Observable = void 0;
function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

// === Symbol Support ===
var hasSymbols = function () {
  return typeof Symbol === 'function';
};
var hasSymbol = function (name) {
  return hasSymbols() && Boolean(Symbol[name]);
};
var getSymbol = function (name) {
  return hasSymbol(name) ? Symbol[name] : '@@' + name;
};
if (hasSymbols() && !hasSymbol('observable')) {
  Symbol.observable = Symbol('observable');
}
var SymbolIterator = getSymbol('iterator');
var SymbolObservable = getSymbol('observable');
var SymbolSpecies = getSymbol('species'); // === Abstract Operations ===

function getMethod(obj, key) {
  var value = obj[key];
  if (value == null) return undefined;
  if (typeof value !== 'function') throw new TypeError(value + ' is not a function');
  return value;
}
function getSpecies(obj) {
  var ctor = obj.constructor;
  if (ctor !== undefined) {
    ctor = ctor[SymbolSpecies];
    if (ctor === null) {
      ctor = undefined;
    }
  }
  return ctor !== undefined ? ctor : Observable;
}
function isObservable(x) {
  return x instanceof Observable; // SPEC: Brand check
}
function hostReportError(e) {
  if (hostReportError.log) {
    hostReportError.log(e);
  } else {
    setTimeout(function () {
      throw e;
    });
  }
}
function enqueue(fn) {
  Promise.resolve().then(function () {
    try {
      fn();
    } catch (e) {
      hostReportError(e);
    }
  });
}
function cleanupSubscription(subscription) {
  var cleanup = subscription._cleanup;
  if (cleanup === undefined) return;
  subscription._cleanup = undefined;
  if (!cleanup) {
    return;
  }
  try {
    if (typeof cleanup === 'function') {
      cleanup();
    } else {
      var unsubscribe = getMethod(cleanup, 'unsubscribe');
      if (unsubscribe) {
        unsubscribe.call(cleanup);
      }
    }
  } catch (e) {
    hostReportError(e);
  }
}
function closeSubscription(subscription) {
  subscription._observer = undefined;
  subscription._queue = undefined;
  subscription._state = 'closed';
}
function flushSubscription(subscription) {
  var queue = subscription._queue;
  if (!queue) {
    return;
  }
  subscription._queue = undefined;
  subscription._state = 'ready';
  for (var i = 0; i < queue.length; ++i) {
    notifySubscription(subscription, queue[i].type, queue[i].value);
    if (subscription._state === 'closed') break;
  }
}
function notifySubscription(subscription, type, value) {
  subscription._state = 'running';
  var observer = subscription._observer;
  try {
    var m = getMethod(observer, type);
    switch (type) {
      case 'next':
        if (m) m.call(observer, value);
        break;
      case 'error':
        closeSubscription(subscription);
        if (m) m.call(observer, value);else throw value;
        break;
      case 'complete':
        closeSubscription(subscription);
        if (m) m.call(observer);
        break;
    }
  } catch (e) {
    hostReportError(e);
  }
  if (subscription._state === 'closed') cleanupSubscription(subscription);else if (subscription._state === 'running') subscription._state = 'ready';
}
function onNotify(subscription, type, value) {
  if (subscription._state === 'closed') return;
  if (subscription._state === 'buffering') {
    subscription._queue.push({
      type: type,
      value: value
    });
    return;
  }
  if (subscription._state !== 'ready') {
    subscription._state = 'buffering';
    subscription._queue = [{
      type: type,
      value: value
    }];
    enqueue(function () {
      return flushSubscription(subscription);
    });
    return;
  }
  notifySubscription(subscription, type, value);
}
var Subscription = /*#__PURE__*/function () {
  function Subscription(observer, subscriber) {
    // ASSERT: observer is an object
    // ASSERT: subscriber is callable
    this._cleanup = undefined;
    this._observer = observer;
    this._queue = undefined;
    this._state = 'initializing';
    var subscriptionObserver = new SubscriptionObserver(this);
    try {
      this._cleanup = subscriber.call(undefined, subscriptionObserver);
    } catch (e) {
      subscriptionObserver.error(e);
    }
    if (this._state === 'initializing') this._state = 'ready';
  }
  var _proto = Subscription.prototype;
  _proto.unsubscribe = function unsubscribe() {
    if (this._state !== 'closed') {
      closeSubscription(this);
      cleanupSubscription(this);
    }
  };
  _createClass(Subscription, [{
    key: "closed",
    get: function () {
      return this._state === 'closed';
    }
  }]);
  return Subscription;
}();
var SubscriptionObserver = /*#__PURE__*/function () {
  function SubscriptionObserver(subscription) {
    this._subscription = subscription;
  }
  var _proto2 = SubscriptionObserver.prototype;
  _proto2.next = function next(value) {
    onNotify(this._subscription, 'next', value);
  };
  _proto2.error = function error(value) {
    onNotify(this._subscription, 'error', value);
  };
  _proto2.complete = function complete() {
    onNotify(this._subscription, 'complete');
  };
  _createClass(SubscriptionObserver, [{
    key: "closed",
    get: function () {
      return this._subscription._state === 'closed';
    }
  }]);
  return SubscriptionObserver;
}();
var Observable = exports.Observable = /*#__PURE__*/function () {
  function Observable(subscriber) {
    if (!(this instanceof Observable)) throw new TypeError('Observable cannot be called as a function');
    if (typeof subscriber !== 'function') throw new TypeError('Observable initializer must be a function');
    this._subscriber = subscriber;
  }
  var _proto3 = Observable.prototype;
  _proto3.subscribe = function subscribe(observer) {
    if (typeof observer !== 'object' || observer === null) {
      observer = {
        next: observer,
        error: arguments[1],
        complete: arguments[2]
      };
    }
    return new Subscription(observer, this._subscriber);
  };
  _proto3.forEach = function forEach(fn) {
    var _this = this;
    return new Promise(function (resolve, reject) {
      if (typeof fn !== 'function') {
        reject(new TypeError(fn + ' is not a function'));
        return;
      }
      function done() {
        subscription.unsubscribe();
        resolve();
      }
      var subscription = _this.subscribe({
        next: function (value) {
          try {
            fn(value, done);
          } catch (e) {
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  };
  _proto3.map = function map(fn) {
    var _this2 = this;
    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
    var C = getSpecies(this);
    return new C(function (observer) {
      return _this2.subscribe({
        next: function (value) {
          try {
            value = fn(value);
          } catch (e) {
            return observer.error(e);
          }
          observer.next(value);
        },
        error: function (e) {
          observer.error(e);
        },
        complete: function () {
          observer.complete();
        }
      });
    });
  };
  _proto3.filter = function filter(fn) {
    var _this3 = this;
    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
    var C = getSpecies(this);
    return new C(function (observer) {
      return _this3.subscribe({
        next: function (value) {
          try {
            if (!fn(value)) return;
          } catch (e) {
            return observer.error(e);
          }
          observer.next(value);
        },
        error: function (e) {
          observer.error(e);
        },
        complete: function () {
          observer.complete();
        }
      });
    });
  };
  _proto3.reduce = function reduce(fn) {
    var _this4 = this;
    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
    var C = getSpecies(this);
    var hasSeed = arguments.length > 1;
    var hasValue = false;
    var seed = arguments[1];
    var acc = seed;
    return new C(function (observer) {
      return _this4.subscribe({
        next: function (value) {
          var first = !hasValue;
          hasValue = true;
          if (!first || hasSeed) {
            try {
              acc = fn(acc, value);
            } catch (e) {
              return observer.error(e);
            }
          } else {
            acc = value;
          }
        },
        error: function (e) {
          observer.error(e);
        },
        complete: function () {
          if (!hasValue && !hasSeed) return observer.error(new TypeError('Cannot reduce an empty sequence'));
          observer.next(acc);
          observer.complete();
        }
      });
    });
  };
  _proto3.concat = function concat() {
    var _this5 = this;
    for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
      sources[_key] = arguments[_key];
    }
    var C = getSpecies(this);
    return new C(function (observer) {
      var subscription;
      var index = 0;
      function startNext(next) {
        subscription = next.subscribe({
          next: function (v) {
            observer.next(v);
          },
          error: function (e) {
            observer.error(e);
          },
          complete: function () {
            if (index === sources.length) {
              subscription = undefined;
              observer.complete();
            } else {
              startNext(C.from(sources[index++]));
            }
          }
        });
      }
      startNext(_this5);
      return function () {
        if (subscription) {
          subscription.unsubscribe();
          subscription = undefined;
        }
      };
    });
  };
  _proto3.flatMap = function flatMap(fn) {
    var _this6 = this;
    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
    var C = getSpecies(this);
    return new C(function (observer) {
      var subscriptions = [];
      var outer = _this6.subscribe({
        next: function (value) {
          if (fn) {
            try {
              value = fn(value);
            } catch (e) {
              return observer.error(e);
            }
          }
          var inner = C.from(value).subscribe({
            next: function (value) {
              observer.next(value);
            },
            error: function (e) {
              observer.error(e);
            },
            complete: function () {
              var i = subscriptions.indexOf(inner);
              if (i >= 0) subscriptions.splice(i, 1);
              completeIfDone();
            }
          });
          subscriptions.push(inner);
        },
        error: function (e) {
          observer.error(e);
        },
        complete: function () {
          completeIfDone();
        }
      });
      function completeIfDone() {
        if (outer.closed && subscriptions.length === 0) observer.complete();
      }
      return function () {
        subscriptions.forEach(function (s) {
          return s.unsubscribe();
        });
        outer.unsubscribe();
      };
    });
  };
  _proto3[SymbolObservable] = function () {
    return this;
  };
  Observable.from = function from(x) {
    var C = typeof this === 'function' ? this : Observable;
    if (x == null) throw new TypeError(x + ' is not an object');
    var method = getMethod(x, SymbolObservable);
    if (method) {
      var observable = method.call(x);
      if (Object(observable) !== observable) throw new TypeError(observable + ' is not an object');
      if (isObservable(observable) && observable.constructor === C) return observable;
      return new C(function (observer) {
        return observable.subscribe(observer);
      });
    }
    if (hasSymbol('iterator')) {
      method = getMethod(x, SymbolIterator);
      if (method) {
        return new C(function (observer) {
          enqueue(function () {
            if (observer.closed) return;
            for (var _iterator = _createForOfIteratorHelperLoose(method.call(x)), _step; !(_step = _iterator()).done;) {
              var item = _step.value;
              observer.next(item);
              if (observer.closed) return;
            }
            observer.complete();
          });
        });
      }
    }
    if (Array.isArray(x)) {
      return new C(function (observer) {
        enqueue(function () {
          if (observer.closed) return;
          for (var i = 0; i < x.length; ++i) {
            observer.next(x[i]);
            if (observer.closed) return;
          }
          observer.complete();
        });
      });
    }
    throw new TypeError(x + ' is not observable');
  };
  Observable.of = function of() {
    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      items[_key2] = arguments[_key2];
    }
    var C = typeof this === 'function' ? this : Observable;
    return new C(function (observer) {
      enqueue(function () {
        if (observer.closed) return;
        for (var i = 0; i < items.length; ++i) {
          observer.next(items[i]);
          if (observer.closed) return;
        }
        observer.complete();
      });
    });
  };
  _createClass(Observable, null, [{
    key: SymbolSpecies,
    get: function () {
      return this;
    }
  }]);
  return Observable;
}();
if (hasSymbols()) {
  Object.defineProperty(Observable, Symbol('extensions'), {
    value: {
      symbol: SymbolObservable,
      hostReportError: hostReportError
    },
    configurable: true
  });
}
},{}],"../node_modules/symbol-observable/es/ponyfill.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = symbolObservablePonyfill;
function symbolObservablePonyfill(root) {
  var result;
  var Symbol = root.Symbol;
  if (typeof Symbol === 'function') {
    if (Symbol.observable) {
      result = Symbol.observable;
    } else {
      if (typeof Symbol.for === 'function') {
        // This just needs to be something that won't trample other user's Symbol.for use
        // It also will guide people to the source of their issues, if this is problematic.
        // META: It's a resource locator!
        result = Symbol.for('https://github.com/benlesh/symbol-observable');
      } else {
        // Symbol.for didn't exist! The best we can do at this point is a totally 
        // unique symbol. Note that the string argument here is a descriptor, not
        // an identifier. This symbol is unique.
        result = Symbol('https://github.com/benlesh/symbol-observable');
      }
      try {
        Symbol.observable = result;
      } catch (err) {
        // Do nothing. In some environments, users have frozen `Symbol` for security reasons,
        // if it is frozen assigning to it will throw. In this case, we don't care, because
        // they will need to use the returned value from the ponyfill.
      }
    }
  } else {
    result = '@@observable';
  }
  return result;
}
;
},{}],"../node_modules/symbol-observable/es/index.js":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ponyfill = _interopRequireDefault(require("./ponyfill.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/* global window */

var root;
if (typeof self !== 'undefined') {
  root = self;
} else if (typeof window !== 'undefined') {
  root = window;
} else if (typeof global !== 'undefined') {
  root = global;
} else if (typeof module !== 'undefined') {
  root = module;
} else {
  root = Function('return this')();
}
var result = (0, _ponyfill.default)(root);
var _default = exports.default = result;
},{"./ponyfill.js":"../node_modules/symbol-observable/es/ponyfill.js"}],"../node_modules/@apollo/client/utilities/observables/Observable.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Observable", {
  enumerable: true,
  get: function () {
    return _zenObservableTs.Observable;
  }
});
var _zenObservableTs = require("zen-observable-ts");
require("symbol-observable");
// This simplified polyfill attempts to follow the ECMAScript Observable
// proposal (https://github.com/zenparsing/es-observable)

// The zen-observable package defines Observable.prototype[Symbol.observable]
// when Symbol is supported, but RxJS interop depends on also setting this fake
// '@@observable' string as a polyfill for Symbol.observable.
var prototype = _zenObservableTs.Observable.prototype;
var fakeObsSymbol = "@@observable";
if (!prototype[fakeObsSymbol]) {
  // @ts-expect-error
  prototype[fakeObsSymbol] = function () {
    return this;
  };
}
},{"zen-observable-ts":"../node_modules/zen-observable-ts/module.js","symbol-observable":"../node_modules/symbol-observable/es/index.js"}],"../node_modules/@apollo/client/utilities/promises/decoration.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFulfilledPromise = createFulfilledPromise;
exports.createRejectedPromise = createRejectedPromise;
exports.isStatefulPromise = isStatefulPromise;
exports.wrapPromiseWithState = wrapPromiseWithState;
function createFulfilledPromise(value) {
  var promise = Promise.resolve(value);
  promise.status = "fulfilled";
  promise.value = value;
  return promise;
}
function createRejectedPromise(reason) {
  var promise = Promise.reject(reason);
  // prevent potential edge cases leaking unhandled error rejections
  promise.catch(function () {});
  promise.status = "rejected";
  promise.reason = reason;
  return promise;
}
function isStatefulPromise(promise) {
  return "status" in promise;
}
function wrapPromiseWithState(promise) {
  if (isStatefulPromise(promise)) {
    return promise;
  }
  var pendingPromise = promise;
  pendingPromise.status = "pending";
  pendingPromise.then(function (value) {
    if (pendingPromise.status === "pending") {
      var fulfilledPromise = pendingPromise;
      fulfilledPromise.status = "fulfilled";
      fulfilledPromise.value = value;
    }
  }, function (reason) {
    if (pendingPromise.status === "pending") {
      var rejectedPromise = pendingPromise;
      rejectedPromise.status = "rejected";
      rejectedPromise.reason = reason;
    }
  });
  return promise;
}
},{}],"../node_modules/@apollo/client/utilities/common/cloneDeep.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cloneDeep = cloneDeep;
var toString = Object.prototype.toString;
/**
 * Deeply clones a value to create a new instance.
 */
function cloneDeep(value) {
  return cloneDeepHelper(value);
}
function cloneDeepHelper(val, seen) {
  switch (toString.call(val)) {
    case "[object Array]":
      {
        seen = seen || new Map();
        if (seen.has(val)) return seen.get(val);
        var copy_1 = val.slice(0);
        seen.set(val, copy_1);
        copy_1.forEach(function (child, i) {
          copy_1[i] = cloneDeepHelper(child, seen);
        });
        return copy_1;
      }
    case "[object Object]":
      {
        seen = seen || new Map();
        if (seen.has(val)) return seen.get(val);
        // High fidelity polyfills of Object.create and Object.getPrototypeOf are
        // possible in all JS environments, so we will assume they exist/work.
        var copy_2 = Object.create(Object.getPrototypeOf(val));
        seen.set(val, copy_2);
        Object.keys(val).forEach(function (key) {
          copy_2[key] = cloneDeepHelper(val[key], seen);
        });
        return copy_2;
      }
    default:
      return val;
  }
}
},{}],"../node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maybeDeepFreeze = maybeDeepFreeze;
var _objects = require("./objects.js");
function deepFreeze(value) {
  var workSet = new Set([value]);
  workSet.forEach(function (obj) {
    if ((0, _objects.isNonNullObject)(obj) && shallowFreeze(obj) === obj) {
      Object.getOwnPropertyNames(obj).forEach(function (name) {
        if ((0, _objects.isNonNullObject)(obj[name])) workSet.add(obj[name]);
      });
    }
  });
  return value;
}
function shallowFreeze(obj) {
  if (globalThis.__DEV__ !== false && !Object.isFrozen(obj)) {
    try {
      Object.freeze(obj);
    } catch (e) {
      // Some types like Uint8Array and Node.js's Buffer cannot be frozen, but
      // they all throw a TypeError when you try, so we re-throw any exceptions
      // that are not TypeErrors, since that would be unexpected.
      if (e instanceof TypeError) return null;
      throw e;
    }
  }
  return obj;
}
function maybeDeepFreeze(obj) {
  if (globalThis.__DEV__ !== false) {
    deepFreeze(obj);
  }
  return obj;
}
},{"./objects.js":"../node_modules/@apollo/client/utilities/common/objects.js"}],"../node_modules/@apollo/client/utilities/observables/iteration.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iterateObserversSafely = iterateObserversSafely;
function iterateObserversSafely(observers, method, argument) {
  // In case observers is modified during iteration, we need to commit to the
  // original elements, which also provides an opportunity to filter them down
  // to just the observers with the given method.
  var observersWithMethod = [];
  observers.forEach(function (obs) {
    return obs[method] && observersWithMethod.push(obs);
  });
  observersWithMethod.forEach(function (obs) {
    return obs[method](argument);
  });
}
},{}],"../node_modules/@apollo/client/utilities/observables/asyncMap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asyncMap = asyncMap;
var _Observable = require("./Observable.js");
// Like Observable.prototype.map, except that the mapping function can
// optionally return a Promise (or be async).
function asyncMap(observable, mapFn, catchFn) {
  return new _Observable.Observable(function (observer) {
    var promiseQueue = {
      // Normally we would initialize promiseQueue to Promise.resolve(), but
      // in this case, for backwards compatibility, we need to be careful to
      // invoke the first callback synchronously.
      then: function (callback) {
        return new Promise(function (resolve) {
          return resolve(callback());
        });
      }
    };
    function makeCallback(examiner, key) {
      return function (arg) {
        if (examiner) {
          var both = function () {
            // If the observer is closed, we don't want to continue calling the
            // mapping function - it's result will be swallowed anyways.
            return observer.closed ? /* will be swallowed */0 : examiner(arg);
          };
          promiseQueue = promiseQueue.then(both, both).then(function (result) {
            return observer.next(result);
          }, function (error) {
            return observer.error(error);
          });
        } else {
          observer[key](arg);
        }
      };
    }
    var handler = {
      next: makeCallback(mapFn, "next"),
      error: makeCallback(catchFn, "error"),
      complete: function () {
        // no need to reassign `promiseQueue`, after `observer.complete`,
        // the observer will be closed and short-circuit everything anyways
        /*promiseQueue = */
        promiseQueue.then(function () {
          return observer.complete();
        });
      }
    };
    var sub = observable.subscribe(handler);
    return function () {
      return sub.unsubscribe();
    };
  });
}
},{"./Observable.js":"../node_modules/@apollo/client/utilities/observables/Observable.js"}],"../node_modules/@apollo/client/utilities/observables/subclassing.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fixObservableSubclass = fixObservableSubclass;
var _Observable = require("./Observable.js");
var _canUse = require("../common/canUse.js");
// Generic implementations of Observable.prototype methods like map and
// filter need to know how to create a new Observable from an Observable
// subclass (like Concast or ObservableQuery). Those methods assume
// (perhaps unwisely?) that they can call the subtype's constructor with a
// Subscriber function, even though the subclass constructor might expect
// different parameters. Defining this static Symbol.species property on
// the subclass is a hint to generic Observable code to use the default
// constructor instead of trying to do `new Subclass(observer => ...)`.
function fixObservableSubclass(subclass) {
  function set(key) {
    // Object.defineProperty is necessary because the Symbol.species
    // property is a getter by default in modern JS environments, so we
    // can't assign to it with a normal assignment expression.
    Object.defineProperty(subclass, key, {
      value: _Observable.Observable
    });
  }
  if (_canUse.canUseSymbol && Symbol.species) {
    set(Symbol.species);
  }
  // The "@@species" string is used as a fake Symbol.species value in some
  // polyfill systems (including the SymbolSpecies variable used by
  // zen-observable), so we should set it as well, to be safe.
  set("@@species");
  return subclass;
}
},{"./Observable.js":"../node_modules/@apollo/client/utilities/observables/Observable.js","../common/canUse.js":"../node_modules/@apollo/client/utilities/common/canUse.js"}],"../node_modules/@apollo/client/utilities/observables/Concast.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Concast = void 0;
var _tslib = require("tslib");
var _Observable = require("./Observable.js");
var _iteration = require("./iteration.js");
var _subclassing = require("./subclassing.js");
function isPromiseLike(value) {
  return value && typeof value.then === "function";
}
// A Concast<T> observable concatenates the given sources into a single
// non-overlapping sequence of Ts, automatically unwrapping any promises,
// and broadcasts the T elements of that sequence to any number of
// subscribers, all without creating a bunch of intermediary Observable
// wrapper objects.
//
// Even though any number of observers can subscribe to the Concast, each
// source observable is guaranteed to receive at most one subscribe call,
// and the results are multicast to all observers.
//
// In addition to broadcasting every next/error message to this.observers,
// the Concast stores the most recent message using this.latest, so any
// new observers can immediately receive the latest message, even if it
// was originally delivered in the past. This behavior means we can assume
// every active observer in this.observers has received the same most
// recent message.
//
// With the exception of this.latest replay, a Concast is a "hot"
// observable in the sense that it does not replay past results from the
// beginning of time for each new observer.
//
// Could we have used some existing RxJS class instead? Concast<T> is
// similar to a BehaviorSubject<T>, because it is multicast and redelivers
// the latest next/error message to new subscribers. Unlike Subject<T>,
// Concast<T> does not expose an Observer<T> interface (this.handlers is
// intentionally private), since Concast<T> gets its inputs from the
// concatenated sources. If we ever switch to RxJS, there may be some
// value in reusing their code, but for now we use zen-observable, which
// does not contain any Subject implementations.
var Concast = exports.Concast = /** @class */function (_super) {
  (0, _tslib.__extends)(Concast, _super);
  // Not only can the individual elements of the iterable be promises, but
  // also the iterable itself can be wrapped in a promise.
  function Concast(sources) {
    var _this = _super.call(this, function (observer) {
      _this.addObserver(observer);
      return function () {
        return _this.removeObserver(observer);
      };
    }) || this;
    // Active observers receiving broadcast messages. Thanks to this.latest,
    // we can assume all observers in this Set have received the same most
    // recent message, though possibly at different times in the past.
    _this.observers = new Set();
    _this.promise = new Promise(function (resolve, reject) {
      _this.resolve = resolve;
      _this.reject = reject;
    });
    // Bound handler functions that can be reused for every internal
    // subscription.
    _this.handlers = {
      next: function (result) {
        if (_this.sub !== null) {
          _this.latest = ["next", result];
          _this.notify("next", result);
          (0, _iteration.iterateObserversSafely)(_this.observers, "next", result);
        }
      },
      error: function (error) {
        var sub = _this.sub;
        if (sub !== null) {
          // Delay unsubscribing from the underlying subscription slightly,
          // so that immediately subscribing another observer can keep the
          // subscription active.
          if (sub) setTimeout(function () {
            return sub.unsubscribe();
          });
          _this.sub = null;
          _this.latest = ["error", error];
          _this.reject(error);
          _this.notify("error", error);
          (0, _iteration.iterateObserversSafely)(_this.observers, "error", error);
        }
      },
      complete: function () {
        var _a = _this,
          sub = _a.sub,
          _b = _a.sources,
          sources = _b === void 0 ? [] : _b;
        if (sub !== null) {
          // If complete is called before concast.start, this.sources may be
          // undefined, so we use a default value of [] for sources. That works
          // here because it falls into the if (!value) {...} block, which
          // appropriately terminates the Concast, even if this.sources might
          // eventually have been initialized to a non-empty array.
          var value = sources.shift();
          if (!value) {
            if (sub) setTimeout(function () {
              return sub.unsubscribe();
            });
            _this.sub = null;
            if (_this.latest && _this.latest[0] === "next") {
              _this.resolve(_this.latest[1]);
            } else {
              _this.resolve();
            }
            _this.notify("complete");
            // We do not store this.latest = ["complete"], because doing so
            // discards useful information about the previous next (or
            // error) message. Instead, if new observers subscribe after
            // this Concast has completed, they will receive the final
            // 'next' message (unless there was an error) immediately
            // followed by a 'complete' message (see addObserver).
            (0, _iteration.iterateObserversSafely)(_this.observers, "complete");
          } else if (isPromiseLike(value)) {
            value.then(function (obs) {
              return _this.sub = obs.subscribe(_this.handlers);
            });
          } else {
            _this.sub = value.subscribe(_this.handlers);
          }
        }
      }
    };
    _this.nextResultListeners = new Set();
    // A public way to abort observation and broadcast.
    _this.cancel = function (reason) {
      _this.reject(reason);
      _this.sources = [];
      _this.handlers.complete();
    };
    // Suppress rejection warnings for this.promise, since it's perfectly
    // acceptable to pay no attention to this.promise if you're consuming
    // the results through the normal observable API.
    _this.promise.catch(function (_) {});
    // If someone accidentally tries to create a Concast using a subscriber
    // function, recover by creating an Observable from that subscriber and
    // using it as the source.
    if (typeof sources === "function") {
      sources = [new _Observable.Observable(sources)];
    }
    if (isPromiseLike(sources)) {
      sources.then(function (iterable) {
        return _this.start(iterable);
      }, _this.handlers.error);
    } else {
      _this.start(sources);
    }
    return _this;
  }
  Concast.prototype.start = function (sources) {
    if (this.sub !== void 0) return;
    // In practice, sources is most often simply an Array of observables.
    // TODO Consider using sources[Symbol.iterator]() to take advantage
    // of the laziness of non-Array iterables.
    this.sources = Array.from(sources);
    // Calling this.handlers.complete() kicks off consumption of the first
    // source observable. It's tempting to do this step lazily in
    // addObserver, but this.promise can be accessed without calling
    // addObserver, so consumption needs to begin eagerly.
    this.handlers.complete();
  };
  Concast.prototype.deliverLastMessage = function (observer) {
    if (this.latest) {
      var nextOrError = this.latest[0];
      var method = observer[nextOrError];
      if (method) {
        method.call(observer, this.latest[1]);
      }
      // If the subscription is already closed, and the last message was
      // a 'next' message, simulate delivery of the final 'complete'
      // message again.
      if (this.sub === null && nextOrError === "next" && observer.complete) {
        observer.complete();
      }
    }
  };
  Concast.prototype.addObserver = function (observer) {
    if (!this.observers.has(observer)) {
      // Immediately deliver the most recent message, so we can always
      // be sure all observers have the latest information.
      this.deliverLastMessage(observer);
      this.observers.add(observer);
    }
  };
  Concast.prototype.removeObserver = function (observer) {
    if (this.observers.delete(observer) && this.observers.size < 1) {
      // In case there are still any listeners in this.nextResultListeners, and
      // no error or completion has been broadcast yet, make sure those
      // observers have a chance to run and then remove themselves from
      // this.observers.
      this.handlers.complete();
    }
  };
  Concast.prototype.notify = function (method, arg) {
    var nextResultListeners = this.nextResultListeners;
    if (nextResultListeners.size) {
      // Replacing this.nextResultListeners first ensures it does not grow while
      // we are iterating over it, potentially leading to infinite loops.
      this.nextResultListeners = new Set();
      nextResultListeners.forEach(function (listener) {
        return listener(method, arg);
      });
    }
  };
  // We need a way to run callbacks just *before* the next result (or error or
  // completion) is delivered by this Concast, so we can be sure any code that
  // runs as a result of delivering that result/error observes the effects of
  // running the callback(s). It was tempting to reuse the Observer type instead
  // of introducing NextResultListener, but that messes with the sizing and
  // maintenance of this.observers, and ends up being more code overall.
  Concast.prototype.beforeNext = function (callback) {
    var called = false;
    this.nextResultListeners.add(function (method, arg) {
      if (!called) {
        called = true;
        callback(method, arg);
      }
    });
  };
  return Concast;
}(_Observable.Observable);
// Necessary because the Concast constructor has a different signature
// than the Observable constructor.
(0, _subclassing.fixObservableSubclass)(Concast);
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","./Observable.js":"../node_modules/@apollo/client/utilities/observables/Observable.js","./iteration.js":"../node_modules/@apollo/client/utilities/observables/iteration.js","./subclassing.js":"../node_modules/@apollo/client/utilities/observables/subclassing.js"}],"../node_modules/@apollo/client/utilities/common/incrementalResult.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isApolloPayloadResult = isApolloPayloadResult;
exports.isExecutionPatchIncrementalResult = isExecutionPatchIncrementalResult;
exports.isExecutionPatchInitialResult = isExecutionPatchInitialResult;
exports.isExecutionPatchResult = isExecutionPatchResult;
exports.mergeIncrementalData = mergeIncrementalData;
var _objects = require("./objects.js");
var _arrays = require("./arrays.js");
var _mergeDeep = require("./mergeDeep.js");
function isExecutionPatchIncrementalResult(value) {
  return "incremental" in value;
}
function isExecutionPatchInitialResult(value) {
  return "hasNext" in value && "data" in value;
}
function isExecutionPatchResult(value) {
  return isExecutionPatchIncrementalResult(value) || isExecutionPatchInitialResult(value);
}
// This function detects an Apollo payload result before it is transformed
// into a FetchResult via HttpLink; it cannot detect an ApolloPayloadResult
// once it leaves the link chain.
function isApolloPayloadResult(value) {
  return (0, _objects.isNonNullObject)(value) && "payload" in value;
}
function mergeIncrementalData(prevResult, result) {
  var mergedData = prevResult;
  var merger = new _mergeDeep.DeepMerger();
  if (isExecutionPatchIncrementalResult(result) && (0, _arrays.isNonEmptyArray)(result.incremental)) {
    result.incremental.forEach(function (_a) {
      var data = _a.data,
        path = _a.path;
      for (var i = path.length - 1; i >= 0; --i) {
        var key = path[i];
        var isNumericKey = !isNaN(+key);
        var parent_1 = isNumericKey ? [] : {};
        parent_1[key] = data;
        data = parent_1;
      }
      mergedData = merger.merge(mergedData, data);
    });
  }
  return mergedData;
}
},{"./objects.js":"../node_modules/@apollo/client/utilities/common/objects.js","./arrays.js":"../node_modules/@apollo/client/utilities/common/arrays.js","./mergeDeep.js":"../node_modules/@apollo/client/utilities/common/mergeDeep.js"}],"../node_modules/@apollo/client/utilities/common/errorHandling.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getGraphQLErrorsFromResult = getGraphQLErrorsFromResult;
exports.graphQLResultHasError = graphQLResultHasError;
var _arrays = require("./arrays.js");
var _incrementalResult = require("./incrementalResult.js");
function graphQLResultHasError(result) {
  var errors = getGraphQLErrorsFromResult(result);
  return (0, _arrays.isNonEmptyArray)(errors);
}
function getGraphQLErrorsFromResult(result) {
  var graphQLErrors = (0, _arrays.isNonEmptyArray)(result.errors) ? result.errors.slice(0) : [];
  if ((0, _incrementalResult.isExecutionPatchIncrementalResult)(result) && (0, _arrays.isNonEmptyArray)(result.incremental)) {
    result.incremental.forEach(function (incrementalResult) {
      if (incrementalResult.errors) {
        graphQLErrors.push.apply(graphQLErrors, incrementalResult.errors);
      }
    });
  }
  return graphQLErrors;
}
},{"./arrays.js":"../node_modules/@apollo/client/utilities/common/arrays.js","./incrementalResult.js":"../node_modules/@apollo/client/utilities/common/incrementalResult.js"}],"../node_modules/@apollo/client/utilities/common/compact.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compact = compact;
/**
 * Merges the provided objects shallowly and removes
 * all properties with an `undefined` value
 */
function compact() {
  var objects = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    objects[_i] = arguments[_i];
  }
  var result = Object.create(null);
  objects.forEach(function (obj) {
    if (!obj) return;
    Object.keys(obj).forEach(function (key) {
      var value = obj[key];
      if (value !== void 0) {
        result[key] = value;
      }
    });
  });
  return result;
}
},{}],"../node_modules/@apollo/client/utilities/common/mergeOptions.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeOptions = mergeOptions;
var _tslib = require("tslib");
var _compact = require("./compact.js");
function mergeOptions(defaults, options) {
  return (0, _compact.compact)(defaults, options, options.variables && {
    variables: (0, _compact.compact)((0, _tslib.__assign)((0, _tslib.__assign)({}, defaults && defaults.variables), options.variables))
  });
}
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","./compact.js":"../node_modules/@apollo/client/utilities/common/compact.js"}],"../node_modules/@apollo/client/utilities/common/omitDeep.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.omitDeep = omitDeep;
var _objects = require("./objects.js");
function omitDeep(value, key) {
  return __omitDeep(value, key);
}
function __omitDeep(value, key, known) {
  if (known === void 0) {
    known = new Map();
  }
  if (known.has(value)) {
    return known.get(value);
  }
  var modified = false;
  if (Array.isArray(value)) {
    var array_1 = [];
    known.set(value, array_1);
    value.forEach(function (value, index) {
      var result = __omitDeep(value, key, known);
      modified || (modified = result !== value);
      array_1[index] = result;
    });
    if (modified) {
      return array_1;
    }
  } else if ((0, _objects.isPlainObject)(value)) {
    var obj_1 = Object.create(Object.getPrototypeOf(value));
    known.set(value, obj_1);
    Object.keys(value).forEach(function (k) {
      if (k === key) {
        modified = true;
        return;
      }
      var result = __omitDeep(value[k], key, known);
      modified || (modified = result !== value[k]);
      obj_1[k] = result;
    });
    if (modified) {
      return obj_1;
    }
  }
  return value;
}
},{"./objects.js":"../node_modules/@apollo/client/utilities/common/objects.js"}],"../node_modules/@apollo/client/utilities/common/stripTypename.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stripTypename = stripTypename;
var _omitDeep = require("./omitDeep.js");
function stripTypename(value) {
  return (0, _omitDeep.omitDeep)(value, "__typename");
}
},{"./omitDeep.js":"../node_modules/@apollo/client/utilities/common/omitDeep.js"}],"../node_modules/@apollo/client/utilities/types/IsStrictlyAny.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"../node_modules/@apollo/client/utilities/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  DEV: true,
  maybe: true,
  shouldInclude: true,
  hasDirectives: true,
  hasAnyDirectives: true,
  hasAllDirectives: true,
  hasClientExports: true,
  getDirectiveNames: true,
  getInclusionDirectives: true,
  DocumentTransform: true,
  createFragmentMap: true,
  getFragmentQueryDocument: true,
  getFragmentFromSelection: true,
  checkDocument: true,
  getOperationDefinition: true,
  getOperationName: true,
  getFragmentDefinitions: true,
  getQueryDefinition: true,
  getFragmentDefinition: true,
  getMainDefinition: true,
  getDefaultValues: true,
  print: true,
  makeReference: true,
  isDocumentNode: true,
  isReference: true,
  isField: true,
  isInlineFragment: true,
  valueToObjectRepresentation: true,
  storeKeyNameFromField: true,
  argumentsObjectFromField: true,
  resultKeyNameFromField: true,
  getStoreKeyName: true,
  getTypenameFromResult: true,
  addTypenameToDocument: true,
  buildQueryFromSelectionSet: true,
  removeDirectivesFromDocument: true,
  removeConnectionDirectiveFromDocument: true,
  removeArgumentsFromDocument: true,
  removeFragmentSpreadFromDocument: true,
  removeClientSetsFromDocument: true,
  isMutationOperation: true,
  isQueryOperation: true,
  isSubscriptionOperation: true,
  concatPagination: true,
  offsetLimitPagination: true,
  relayStylePagination: true,
  Observable: true,
  isStatefulPromise: true,
  createFulfilledPromise: true,
  createRejectedPromise: true,
  wrapPromiseWithState: true,
  omitDeep: true,
  stripTypename: true
};
Object.defineProperty(exports, "DEV", {
  enumerable: true,
  get: function () {
    return _index.DEV;
  }
});
Object.defineProperty(exports, "DocumentTransform", {
  enumerable: true,
  get: function () {
    return _DocumentTransform.DocumentTransform;
  }
});
Object.defineProperty(exports, "Observable", {
  enumerable: true,
  get: function () {
    return _Observable.Observable;
  }
});
Object.defineProperty(exports, "addTypenameToDocument", {
  enumerable: true,
  get: function () {
    return _transform.addTypenameToDocument;
  }
});
Object.defineProperty(exports, "argumentsObjectFromField", {
  enumerable: true,
  get: function () {
    return _storeUtils.argumentsObjectFromField;
  }
});
Object.defineProperty(exports, "buildQueryFromSelectionSet", {
  enumerable: true,
  get: function () {
    return _transform.buildQueryFromSelectionSet;
  }
});
Object.defineProperty(exports, "checkDocument", {
  enumerable: true,
  get: function () {
    return _getFromAST.checkDocument;
  }
});
Object.defineProperty(exports, "concatPagination", {
  enumerable: true,
  get: function () {
    return _pagination.concatPagination;
  }
});
Object.defineProperty(exports, "createFragmentMap", {
  enumerable: true,
  get: function () {
    return _fragments.createFragmentMap;
  }
});
Object.defineProperty(exports, "createFulfilledPromise", {
  enumerable: true,
  get: function () {
    return _decoration.createFulfilledPromise;
  }
});
Object.defineProperty(exports, "createRejectedPromise", {
  enumerable: true,
  get: function () {
    return _decoration.createRejectedPromise;
  }
});
Object.defineProperty(exports, "getDefaultValues", {
  enumerable: true,
  get: function () {
    return _getFromAST.getDefaultValues;
  }
});
Object.defineProperty(exports, "getDirectiveNames", {
  enumerable: true,
  get: function () {
    return _directives.getDirectiveNames;
  }
});
Object.defineProperty(exports, "getFragmentDefinition", {
  enumerable: true,
  get: function () {
    return _getFromAST.getFragmentDefinition;
  }
});
Object.defineProperty(exports, "getFragmentDefinitions", {
  enumerable: true,
  get: function () {
    return _getFromAST.getFragmentDefinitions;
  }
});
Object.defineProperty(exports, "getFragmentFromSelection", {
  enumerable: true,
  get: function () {
    return _fragments.getFragmentFromSelection;
  }
});
Object.defineProperty(exports, "getFragmentQueryDocument", {
  enumerable: true,
  get: function () {
    return _fragments.getFragmentQueryDocument;
  }
});
Object.defineProperty(exports, "getInclusionDirectives", {
  enumerable: true,
  get: function () {
    return _directives.getInclusionDirectives;
  }
});
Object.defineProperty(exports, "getMainDefinition", {
  enumerable: true,
  get: function () {
    return _getFromAST.getMainDefinition;
  }
});
Object.defineProperty(exports, "getOperationDefinition", {
  enumerable: true,
  get: function () {
    return _getFromAST.getOperationDefinition;
  }
});
Object.defineProperty(exports, "getOperationName", {
  enumerable: true,
  get: function () {
    return _getFromAST.getOperationName;
  }
});
Object.defineProperty(exports, "getQueryDefinition", {
  enumerable: true,
  get: function () {
    return _getFromAST.getQueryDefinition;
  }
});
Object.defineProperty(exports, "getStoreKeyName", {
  enumerable: true,
  get: function () {
    return _storeUtils.getStoreKeyName;
  }
});
Object.defineProperty(exports, "getTypenameFromResult", {
  enumerable: true,
  get: function () {
    return _storeUtils.getTypenameFromResult;
  }
});
Object.defineProperty(exports, "hasAllDirectives", {
  enumerable: true,
  get: function () {
    return _directives.hasAllDirectives;
  }
});
Object.defineProperty(exports, "hasAnyDirectives", {
  enumerable: true,
  get: function () {
    return _directives.hasAnyDirectives;
  }
});
Object.defineProperty(exports, "hasClientExports", {
  enumerable: true,
  get: function () {
    return _directives.hasClientExports;
  }
});
Object.defineProperty(exports, "hasDirectives", {
  enumerable: true,
  get: function () {
    return _directives.hasDirectives;
  }
});
Object.defineProperty(exports, "isDocumentNode", {
  enumerable: true,
  get: function () {
    return _storeUtils.isDocumentNode;
  }
});
Object.defineProperty(exports, "isField", {
  enumerable: true,
  get: function () {
    return _storeUtils.isField;
  }
});
Object.defineProperty(exports, "isInlineFragment", {
  enumerable: true,
  get: function () {
    return _storeUtils.isInlineFragment;
  }
});
Object.defineProperty(exports, "isMutationOperation", {
  enumerable: true,
  get: function () {
    return _operations.isMutationOperation;
  }
});
Object.defineProperty(exports, "isQueryOperation", {
  enumerable: true,
  get: function () {
    return _operations.isQueryOperation;
  }
});
Object.defineProperty(exports, "isReference", {
  enumerable: true,
  get: function () {
    return _storeUtils.isReference;
  }
});
Object.defineProperty(exports, "isStatefulPromise", {
  enumerable: true,
  get: function () {
    return _decoration.isStatefulPromise;
  }
});
Object.defineProperty(exports, "isSubscriptionOperation", {
  enumerable: true,
  get: function () {
    return _operations.isSubscriptionOperation;
  }
});
Object.defineProperty(exports, "makeReference", {
  enumerable: true,
  get: function () {
    return _storeUtils.makeReference;
  }
});
Object.defineProperty(exports, "maybe", {
  enumerable: true,
  get: function () {
    return _index.maybe;
  }
});
Object.defineProperty(exports, "offsetLimitPagination", {
  enumerable: true,
  get: function () {
    return _pagination.offsetLimitPagination;
  }
});
Object.defineProperty(exports, "omitDeep", {
  enumerable: true,
  get: function () {
    return _omitDeep.omitDeep;
  }
});
Object.defineProperty(exports, "print", {
  enumerable: true,
  get: function () {
    return _print.print;
  }
});
Object.defineProperty(exports, "relayStylePagination", {
  enumerable: true,
  get: function () {
    return _pagination.relayStylePagination;
  }
});
Object.defineProperty(exports, "removeArgumentsFromDocument", {
  enumerable: true,
  get: function () {
    return _transform.removeArgumentsFromDocument;
  }
});
Object.defineProperty(exports, "removeClientSetsFromDocument", {
  enumerable: true,
  get: function () {
    return _transform.removeClientSetsFromDocument;
  }
});
Object.defineProperty(exports, "removeConnectionDirectiveFromDocument", {
  enumerable: true,
  get: function () {
    return _transform.removeConnectionDirectiveFromDocument;
  }
});
Object.defineProperty(exports, "removeDirectivesFromDocument", {
  enumerable: true,
  get: function () {
    return _transform.removeDirectivesFromDocument;
  }
});
Object.defineProperty(exports, "removeFragmentSpreadFromDocument", {
  enumerable: true,
  get: function () {
    return _transform.removeFragmentSpreadFromDocument;
  }
});
Object.defineProperty(exports, "resultKeyNameFromField", {
  enumerable: true,
  get: function () {
    return _storeUtils.resultKeyNameFromField;
  }
});
Object.defineProperty(exports, "shouldInclude", {
  enumerable: true,
  get: function () {
    return _directives.shouldInclude;
  }
});
Object.defineProperty(exports, "storeKeyNameFromField", {
  enumerable: true,
  get: function () {
    return _storeUtils.storeKeyNameFromField;
  }
});
Object.defineProperty(exports, "stripTypename", {
  enumerable: true,
  get: function () {
    return _stripTypename.stripTypename;
  }
});
Object.defineProperty(exports, "valueToObjectRepresentation", {
  enumerable: true,
  get: function () {
    return _storeUtils.valueToObjectRepresentation;
  }
});
Object.defineProperty(exports, "wrapPromiseWithState", {
  enumerable: true,
  get: function () {
    return _decoration.wrapPromiseWithState;
  }
});
var _index = require("./globals/index.js");
var _directives = require("./graphql/directives.js");
var _DocumentTransform = require("./graphql/DocumentTransform.js");
var _fragments = require("./graphql/fragments.js");
var _getFromAST = require("./graphql/getFromAST.js");
var _print = require("./graphql/print.js");
var _storeUtils = require("./graphql/storeUtils.js");
var _transform = require("./graphql/transform.js");
var _operations = require("./graphql/operations.js");
var _pagination = require("./policies/pagination.js");
var _Observable = require("./observables/Observable.js");
var _decoration = require("./promises/decoration.js");
var _mergeDeep = require("./common/mergeDeep.js");
Object.keys(_mergeDeep).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _mergeDeep[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mergeDeep[key];
    }
  });
});
var _cloneDeep = require("./common/cloneDeep.js");
Object.keys(_cloneDeep).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _cloneDeep[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _cloneDeep[key];
    }
  });
});
var _maybeDeepFreeze = require("./common/maybeDeepFreeze.js");
Object.keys(_maybeDeepFreeze).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _maybeDeepFreeze[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _maybeDeepFreeze[key];
    }
  });
});
var _iteration = require("./observables/iteration.js");
Object.keys(_iteration).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _iteration[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _iteration[key];
    }
  });
});
var _asyncMap = require("./observables/asyncMap.js");
Object.keys(_asyncMap).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _asyncMap[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _asyncMap[key];
    }
  });
});
var _Concast = require("./observables/Concast.js");
Object.keys(_Concast).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Concast[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Concast[key];
    }
  });
});
var _subclassing = require("./observables/subclassing.js");
Object.keys(_subclassing).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _subclassing[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _subclassing[key];
    }
  });
});
var _arrays = require("./common/arrays.js");
Object.keys(_arrays).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _arrays[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _arrays[key];
    }
  });
});
var _objects = require("./common/objects.js");
Object.keys(_objects).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _objects[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _objects[key];
    }
  });
});
var _errorHandling = require("./common/errorHandling.js");
Object.keys(_errorHandling).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _errorHandling[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _errorHandling[key];
    }
  });
});
var _canUse = require("./common/canUse.js");
Object.keys(_canUse).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _canUse[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _canUse[key];
    }
  });
});
var _compact = require("./common/compact.js");
Object.keys(_compact).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _compact[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _compact[key];
    }
  });
});
var _makeUniqueId = require("./common/makeUniqueId.js");
Object.keys(_makeUniqueId).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _makeUniqueId[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _makeUniqueId[key];
    }
  });
});
var _stringifyForDisplay = require("./common/stringifyForDisplay.js");
Object.keys(_stringifyForDisplay).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _stringifyForDisplay[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _stringifyForDisplay[key];
    }
  });
});
var _mergeOptions = require("./common/mergeOptions.js");
Object.keys(_mergeOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _mergeOptions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mergeOptions[key];
    }
  });
});
var _incrementalResult = require("./common/incrementalResult.js");
Object.keys(_incrementalResult).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _incrementalResult[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _incrementalResult[key];
    }
  });
});
var _omitDeep = require("./common/omitDeep.js");
var _stripTypename = require("./common/stripTypename.js");
var _IsStrictlyAny = require("./types/IsStrictlyAny.js");
Object.keys(_IsStrictlyAny).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _IsStrictlyAny[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _IsStrictlyAny[key];
    }
  });
});
},{"./globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","./graphql/directives.js":"../node_modules/@apollo/client/utilities/graphql/directives.js","./graphql/DocumentTransform.js":"../node_modules/@apollo/client/utilities/graphql/DocumentTransform.js","./graphql/fragments.js":"../node_modules/@apollo/client/utilities/graphql/fragments.js","./graphql/getFromAST.js":"../node_modules/@apollo/client/utilities/graphql/getFromAST.js","./graphql/print.js":"../node_modules/@apollo/client/utilities/graphql/print.js","./graphql/storeUtils.js":"../node_modules/@apollo/client/utilities/graphql/storeUtils.js","./graphql/transform.js":"../node_modules/@apollo/client/utilities/graphql/transform.js","./graphql/operations.js":"../node_modules/@apollo/client/utilities/graphql/operations.js","./policies/pagination.js":"../node_modules/@apollo/client/utilities/policies/pagination.js","./observables/Observable.js":"../node_modules/@apollo/client/utilities/observables/Observable.js","./promises/decoration.js":"../node_modules/@apollo/client/utilities/promises/decoration.js","./common/mergeDeep.js":"../node_modules/@apollo/client/utilities/common/mergeDeep.js","./common/cloneDeep.js":"../node_modules/@apollo/client/utilities/common/cloneDeep.js","./common/maybeDeepFreeze.js":"../node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js","./observables/iteration.js":"../node_modules/@apollo/client/utilities/observables/iteration.js","./observables/asyncMap.js":"../node_modules/@apollo/client/utilities/observables/asyncMap.js","./observables/Concast.js":"../node_modules/@apollo/client/utilities/observables/Concast.js","./observables/subclassing.js":"../node_modules/@apollo/client/utilities/observables/subclassing.js","./common/arrays.js":"../node_modules/@apollo/client/utilities/common/arrays.js","./common/objects.js":"../node_modules/@apollo/client/utilities/common/objects.js","./common/errorHandling.js":"../node_modules/@apollo/client/utilities/common/errorHandling.js","./common/canUse.js":"../node_modules/@apollo/client/utilities/common/canUse.js","./common/compact.js":"../node_modules/@apollo/client/utilities/common/compact.js","./common/makeUniqueId.js":"../node_modules/@apollo/client/utilities/common/makeUniqueId.js","./common/stringifyForDisplay.js":"../node_modules/@apollo/client/utilities/common/stringifyForDisplay.js","./common/mergeOptions.js":"../node_modules/@apollo/client/utilities/common/mergeOptions.js","./common/incrementalResult.js":"../node_modules/@apollo/client/utilities/common/incrementalResult.js","./common/omitDeep.js":"../node_modules/@apollo/client/utilities/common/omitDeep.js","./common/stripTypename.js":"../node_modules/@apollo/client/utilities/common/stripTypename.js","./types/IsStrictlyAny.js":"../node_modules/@apollo/client/utilities/types/IsStrictlyAny.js"}],"../node_modules/@apollo/client/link/utils/fromError.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromError = fromError;
var _index = require("../../utilities/index.js");
function fromError(errorValue) {
  return new _index.Observable(function (observer) {
    observer.error(errorValue);
  });
}
},{"../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js"}],"../node_modules/@apollo/client/link/utils/toPromise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toPromise = toPromise;
var _index = require("../../utilities/globals/index.js");
function toPromise(observable) {
  var completed = false;
  return new Promise(function (resolve, reject) {
    observable.subscribe({
      next: function (data) {
        if (completed) {
          globalThis.__DEV__ !== false && _index.invariant.warn(42);
        } else {
          completed = true;
          resolve(data);
        }
      },
      error: reject
    });
  });
}
},{"../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js"}],"../node_modules/@apollo/client/link/utils/fromPromise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromPromise = fromPromise;
var _index = require("../../utilities/index.js");
function fromPromise(promise) {
  return new _index.Observable(function (observer) {
    promise.then(function (value) {
      observer.next(value);
      observer.complete();
    }).catch(observer.error.bind(observer));
  });
}
},{"../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js"}],"../node_modules/@apollo/client/link/utils/throwServerError.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.throwServerError = void 0;
var throwServerError = function (response, result, message) {
  var error = new Error(message);
  error.name = "ServerError";
  error.response = response;
  error.statusCode = response.status;
  error.result = result;
  throw error;
};
exports.throwServerError = throwServerError;
},{}],"../node_modules/@apollo/client/link/utils/validateOperation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateOperation = validateOperation;
var _index = require("../../utilities/globals/index.js");
function validateOperation(operation) {
  var OPERATION_FIELDS = ["query", "operationName", "variables", "extensions", "context"];
  for (var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++) {
    var key = _a[_i];
    if (OPERATION_FIELDS.indexOf(key) < 0) {
      throw (0, _index.newInvariantError)(43, key);
    }
  }
  return operation;
}
},{"../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js"}],"../node_modules/@apollo/client/link/utils/createOperation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createOperation = createOperation;
var _tslib = require("tslib");
function createOperation(starting, operation) {
  var context = (0, _tslib.__assign)({}, starting);
  var setContext = function (next) {
    if (typeof next === "function") {
      context = (0, _tslib.__assign)((0, _tslib.__assign)({}, context), next(context));
    } else {
      context = (0, _tslib.__assign)((0, _tslib.__assign)({}, context), next);
    }
  };
  var getContext = function () {
    return (0, _tslib.__assign)({}, context);
  };
  Object.defineProperty(operation, "setContext", {
    enumerable: false,
    value: setContext
  });
  Object.defineProperty(operation, "getContext", {
    enumerable: false,
    value: getContext
  });
  return operation;
}
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js"}],"../node_modules/@apollo/client/link/utils/transformOperation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformOperation = transformOperation;
var _index = require("../../utilities/index.js");
function transformOperation(operation) {
  var transformedOperation = {
    variables: operation.variables || {},
    extensions: operation.extensions || {},
    operationName: operation.operationName,
    query: operation.query
  };
  // Best guess at an operation name
  if (!transformedOperation.operationName) {
    transformedOperation.operationName = typeof transformedOperation.query !== "string" ? (0, _index.getOperationName)(transformedOperation.query) || undefined : "";
  }
  return transformedOperation;
}
},{"../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js"}],"../node_modules/@apollo/client/link/utils/filterOperationVariables.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filterOperationVariables = filterOperationVariables;
var _tslib = require("tslib");
var _graphql = require("graphql");
function filterOperationVariables(variables, query) {
  var result = (0, _tslib.__assign)({}, variables);
  var unusedNames = new Set(Object.keys(variables));
  (0, _graphql.visit)(query, {
    Variable: function (node, _key, parent) {
      // A variable type definition at the top level of a query is not
      // enough to silence server-side errors about the variable being
      // unused, so variable definitions do not count as usage.
      // https://spec.graphql.org/draft/#sec-All-Variables-Used
      if (parent && parent.kind !== "VariableDefinition") {
        unusedNames.delete(node.name.value);
      }
    }
  });
  unusedNames.forEach(function (name) {
    delete result[name];
  });
  return result;
}
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","graphql":"../node_modules/graphql/index.mjs"}],"../node_modules/@apollo/client/link/utils/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "createOperation", {
  enumerable: true,
  get: function () {
    return _createOperation.createOperation;
  }
});
Object.defineProperty(exports, "filterOperationVariables", {
  enumerable: true,
  get: function () {
    return _filterOperationVariables.filterOperationVariables;
  }
});
Object.defineProperty(exports, "fromError", {
  enumerable: true,
  get: function () {
    return _fromError.fromError;
  }
});
Object.defineProperty(exports, "fromPromise", {
  enumerable: true,
  get: function () {
    return _fromPromise.fromPromise;
  }
});
Object.defineProperty(exports, "throwServerError", {
  enumerable: true,
  get: function () {
    return _throwServerError.throwServerError;
  }
});
Object.defineProperty(exports, "toPromise", {
  enumerable: true,
  get: function () {
    return _toPromise.toPromise;
  }
});
Object.defineProperty(exports, "transformOperation", {
  enumerable: true,
  get: function () {
    return _transformOperation.transformOperation;
  }
});
Object.defineProperty(exports, "validateOperation", {
  enumerable: true,
  get: function () {
    return _validateOperation.validateOperation;
  }
});
require("../../utilities/globals/index.js");
var _fromError = require("./fromError.js");
var _toPromise = require("./toPromise.js");
var _fromPromise = require("./fromPromise.js");
var _throwServerError = require("./throwServerError.js");
var _validateOperation = require("./validateOperation.js");
var _createOperation = require("./createOperation.js");
var _transformOperation = require("./transformOperation.js");
var _filterOperationVariables = require("./filterOperationVariables.js");
},{"../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","./fromError.js":"../node_modules/@apollo/client/link/utils/fromError.js","./toPromise.js":"../node_modules/@apollo/client/link/utils/toPromise.js","./fromPromise.js":"../node_modules/@apollo/client/link/utils/fromPromise.js","./throwServerError.js":"../node_modules/@apollo/client/link/utils/throwServerError.js","./validateOperation.js":"../node_modules/@apollo/client/link/utils/validateOperation.js","./createOperation.js":"../node_modules/@apollo/client/link/utils/createOperation.js","./transformOperation.js":"../node_modules/@apollo/client/link/utils/transformOperation.js","./filterOperationVariables.js":"../node_modules/@apollo/client/link/utils/filterOperationVariables.js"}],"../node_modules/@apollo/client/link/core/ApolloLink.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApolloLink = void 0;
var _index = require("../../utilities/globals/index.js");
var _index2 = require("../../utilities/index.js");
var _index3 = require("../utils/index.js");
function passthrough(op, forward) {
  return forward ? forward(op) : _index2.Observable.of();
}
function toLink(handler) {
  return typeof handler === "function" ? new ApolloLink(handler) : handler;
}
function isTerminating(link) {
  return link.request.length <= 1;
}
var ApolloLink = exports.ApolloLink = /** @class */function () {
  function ApolloLink(request) {
    if (request) this.request = request;
  }
  ApolloLink.empty = function () {
    return new ApolloLink(function () {
      return _index2.Observable.of();
    });
  };
  ApolloLink.from = function (links) {
    if (links.length === 0) return ApolloLink.empty();
    return links.map(toLink).reduce(function (x, y) {
      return x.concat(y);
    });
  };
  ApolloLink.split = function (test, left, right) {
    var leftLink = toLink(left);
    var rightLink = toLink(right || new ApolloLink(passthrough));
    if (isTerminating(leftLink) && isTerminating(rightLink)) {
      return new ApolloLink(function (operation) {
        return test(operation) ? leftLink.request(operation) || _index2.Observable.of() : rightLink.request(operation) || _index2.Observable.of();
      });
    } else {
      return new ApolloLink(function (operation, forward) {
        return test(operation) ? leftLink.request(operation, forward) || _index2.Observable.of() : rightLink.request(operation, forward) || _index2.Observable.of();
      });
    }
  };
  ApolloLink.execute = function (link, operation) {
    return link.request((0, _index3.createOperation)(operation.context, (0, _index3.transformOperation)((0, _index3.validateOperation)(operation)))) || _index2.Observable.of();
  };
  ApolloLink.concat = function (first, second) {
    var firstLink = toLink(first);
    if (isTerminating(firstLink)) {
      globalThis.__DEV__ !== false && _index.invariant.warn(35, firstLink);
      return firstLink;
    }
    var nextLink = toLink(second);
    if (isTerminating(nextLink)) {
      return new ApolloLink(function (operation) {
        return firstLink.request(operation, function (op) {
          return nextLink.request(op) || _index2.Observable.of();
        }) || _index2.Observable.of();
      });
    } else {
      return new ApolloLink(function (operation, forward) {
        return firstLink.request(operation, function (op) {
          return nextLink.request(op, forward) || _index2.Observable.of();
        }) || _index2.Observable.of();
      });
    }
  };
  ApolloLink.prototype.split = function (test, left, right) {
    return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));
  };
  ApolloLink.prototype.concat = function (next) {
    return ApolloLink.concat(this, next);
  };
  ApolloLink.prototype.request = function (operation, forward) {
    throw (0, _index.newInvariantError)(36);
  };
  ApolloLink.prototype.onError = function (error, observer) {
    if (observer && observer.error) {
      observer.error(error);
      // Returning false indicates that observer.error does not need to be
      // called again, since it was already called (on the previous line).
      // Calling observer.error again would not cause any real problems,
      // since only the first call matters, but custom onError functions
      // might have other reasons for wanting to prevent the default
      // behavior by returning false.
      return false;
    }
    // Throw errors will be passed to observer.error.
    throw error;
  };
  ApolloLink.prototype.setOnError = function (fn) {
    this.onError = fn;
    return this;
  };
  return ApolloLink;
}();
},{"../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js","../utils/index.js":"../node_modules/@apollo/client/link/utils/index.js"}],"../node_modules/@apollo/client/link/core/empty.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.empty = void 0;
var _ApolloLink = require("./ApolloLink.js");
var empty = exports.empty = _ApolloLink.ApolloLink.empty;
},{"./ApolloLink.js":"../node_modules/@apollo/client/link/core/ApolloLink.js"}],"../node_modules/@apollo/client/link/core/from.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.from = void 0;
var _ApolloLink = require("./ApolloLink.js");
var from = exports.from = _ApolloLink.ApolloLink.from;
},{"./ApolloLink.js":"../node_modules/@apollo/client/link/core/ApolloLink.js"}],"../node_modules/@apollo/client/link/core/split.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.split = void 0;
var _ApolloLink = require("./ApolloLink.js");
var split = exports.split = _ApolloLink.ApolloLink.split;
},{"./ApolloLink.js":"../node_modules/@apollo/client/link/core/ApolloLink.js"}],"../node_modules/@apollo/client/link/core/concat.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concat = void 0;
var _ApolloLink = require("./ApolloLink.js");
var concat = exports.concat = _ApolloLink.ApolloLink.concat;
},{"./ApolloLink.js":"../node_modules/@apollo/client/link/core/ApolloLink.js"}],"../node_modules/@apollo/client/link/core/execute.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.execute = void 0;
var _ApolloLink = require("./ApolloLink.js");
var execute = exports.execute = _ApolloLink.ApolloLink.execute;
},{"./ApolloLink.js":"../node_modules/@apollo/client/link/core/ApolloLink.js"}],"../node_modules/@apollo/client/link/core/types.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"../node_modules/@apollo/client/link/core/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  empty: true,
  from: true,
  split: true,
  concat: true,
  execute: true,
  ApolloLink: true
};
Object.defineProperty(exports, "ApolloLink", {
  enumerable: true,
  get: function () {
    return _ApolloLink.ApolloLink;
  }
});
Object.defineProperty(exports, "concat", {
  enumerable: true,
  get: function () {
    return _concat.concat;
  }
});
Object.defineProperty(exports, "empty", {
  enumerable: true,
  get: function () {
    return _empty.empty;
  }
});
Object.defineProperty(exports, "execute", {
  enumerable: true,
  get: function () {
    return _execute.execute;
  }
});
Object.defineProperty(exports, "from", {
  enumerable: true,
  get: function () {
    return _from.from;
  }
});
Object.defineProperty(exports, "split", {
  enumerable: true,
  get: function () {
    return _split.split;
  }
});
require("../../utilities/globals/index.js");
var _empty = require("./empty.js");
var _from = require("./from.js");
var _split = require("./split.js");
var _concat = require("./concat.js");
var _execute = require("./execute.js");
var _ApolloLink = require("./ApolloLink.js");
var _types = require("./types.js");
Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _types[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types[key];
    }
  });
});
},{"../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","./empty.js":"../node_modules/@apollo/client/link/core/empty.js","./from.js":"../node_modules/@apollo/client/link/core/from.js","./split.js":"../node_modules/@apollo/client/link/core/split.js","./concat.js":"../node_modules/@apollo/client/link/core/concat.js","./execute.js":"../node_modules/@apollo/client/link/core/execute.js","./ApolloLink.js":"../node_modules/@apollo/client/link/core/ApolloLink.js","./types.js":"../node_modules/@apollo/client/link/core/types.js"}],"../node_modules/@apollo/client/link/http/iterators/async.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = asyncIterator;
/**
 * Original source:
 * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/async.ts
 */
function asyncIterator(source) {
  var _a;
  var iterator = source[Symbol.asyncIterator]();
  return _a = {
    next: function () {
      return iterator.next();
    }
  }, _a[Symbol.asyncIterator] = function () {
    return this;
  }, _a;
}
},{}],"../node_modules/@apollo/client/link/http/iterators/nodeStream.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = nodeStreamIterator;
var _index = require("../../../utilities/index.js");
/**
 * Original source:
 * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/nodeStream.ts
 */

function nodeStreamIterator(stream) {
  var cleanup = null;
  var error = null;
  var done = false;
  var data = [];
  var waiting = [];
  function onData(chunk) {
    if (error) return;
    if (waiting.length) {
      var shiftedArr = waiting.shift();
      if (Array.isArray(shiftedArr) && shiftedArr[0]) {
        return shiftedArr[0]({
          value: chunk,
          done: false
        });
      }
    }
    data.push(chunk);
  }
  function onError(err) {
    error = err;
    var all = waiting.slice();
    all.forEach(function (pair) {
      pair[1](err);
    });
    !cleanup || cleanup();
  }
  function onEnd() {
    done = true;
    var all = waiting.slice();
    all.forEach(function (pair) {
      pair[0]({
        value: undefined,
        done: true
      });
    });
    !cleanup || cleanup();
  }
  cleanup = function () {
    cleanup = null;
    stream.removeListener("data", onData);
    stream.removeListener("error", onError);
    stream.removeListener("end", onEnd);
    stream.removeListener("finish", onEnd);
    stream.removeListener("close", onEnd);
  };
  stream.on("data", onData);
  stream.on("error", onError);
  stream.on("end", onEnd);
  stream.on("finish", onEnd);
  stream.on("close", onEnd);
  function getNext() {
    return new Promise(function (resolve, reject) {
      if (error) return reject(error);
      if (data.length) return resolve({
        value: data.shift(),
        done: false
      });
      if (done) return resolve({
        value: undefined,
        done: true
      });
      waiting.push([resolve, reject]);
    });
  }
  var iterator = {
    next: function () {
      return getNext();
    }
  };
  if (_index.canUseAsyncIteratorSymbol) {
    iterator[Symbol.asyncIterator] = function () {
      return this;
    };
  }
  return iterator;
}
},{"../../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js"}],"../node_modules/@apollo/client/link/http/iterators/promise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = promiseIterator;
var _index = require("../../../utilities/index.js");
/**
 * Original source:
 * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/promise.ts
 */

function promiseIterator(promise) {
  var resolved = false;
  var iterator = {
    next: function () {
      if (resolved) return Promise.resolve({
        value: undefined,
        done: true
      });
      resolved = true;
      return new Promise(function (resolve, reject) {
        promise.then(function (value) {
          resolve({
            value: value,
            done: false
          });
        }).catch(reject);
      });
    }
  };
  if (_index.canUseAsyncIteratorSymbol) {
    iterator[Symbol.asyncIterator] = function () {
      return this;
    };
  }
  return iterator;
}
},{"../../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js"}],"../node_modules/@apollo/client/link/http/iterators/reader.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = readerIterator;
var _index = require("../../../utilities/index.js");
/**
 * Original source:
 * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/reader.ts
 */

function readerIterator(reader) {
  var iterator = {
    next: function () {
      return reader.read();
    }
  };
  if (_index.canUseAsyncIteratorSymbol) {
    iterator[Symbol.asyncIterator] = function () {
      return this;
    };
  }
  return iterator;
}
},{"../../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js"}],"../node_modules/@apollo/client/link/http/responseIterator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.responseIterator = responseIterator;
var _index = require("../../utilities/index.js");
var _async = _interopRequireDefault(require("./iterators/async.js"));
var _nodeStream = _interopRequireDefault(require("./iterators/nodeStream.js"));
var _promise = _interopRequireDefault(require("./iterators/promise.js"));
var _reader = _interopRequireDefault(require("./iterators/reader.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Original source:
 * https://github.com/kmalakoff/response-iterator/blob/master/src/index.ts
 */

function isNodeResponse(value) {
  return !!value.body;
}
function isReadableStream(value) {
  return !!value.getReader;
}
function isAsyncIterableIterator(value) {
  return !!(_index.canUseAsyncIteratorSymbol && value[Symbol.asyncIterator]);
}
function isStreamableBlob(value) {
  return !!value.stream;
}
function isBlob(value) {
  return !!value.arrayBuffer;
}
function isNodeReadableStream(value) {
  return !!value.pipe;
}
function responseIterator(response) {
  var body = response;
  if (isNodeResponse(response)) body = response.body;
  if (isAsyncIterableIterator(body)) return (0, _async.default)(body);
  if (isReadableStream(body)) return (0, _reader.default)(body.getReader());
  // this errors without casting to ReadableStream<T>
  // because Blob.stream() returns a NodeJS ReadableStream
  if (isStreamableBlob(body)) {
    return (0, _reader.default)(body.stream().getReader());
  }
  if (isBlob(body)) return (0, _promise.default)(body.arrayBuffer());
  if (isNodeReadableStream(body)) return (0, _nodeStream.default)(body);
  throw new Error("Unknown body type for responseIterator. Please pass a streamable response.");
}
},{"../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js","./iterators/async.js":"../node_modules/@apollo/client/link/http/iterators/async.js","./iterators/nodeStream.js":"../node_modules/@apollo/client/link/http/iterators/nodeStream.js","./iterators/promise.js":"../node_modules/@apollo/client/link/http/iterators/promise.js","./iterators/reader.js":"../node_modules/@apollo/client/link/http/iterators/reader.js"}],"../node_modules/@apollo/client/errors/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PROTOCOL_ERRORS_SYMBOL = exports.ApolloError = void 0;
exports.graphQLResultHasProtocolErrors = graphQLResultHasProtocolErrors;
exports.isApolloError = isApolloError;
var _tslib = require("tslib");
require("../utilities/globals/index.js");
var _index2 = require("../utilities/index.js");
// This Symbol allows us to pass transport-specific errors from the link chain
// into QueryManager/client internals without risking a naming collision within
// extensions (which implementers can use as they see fit).
var PROTOCOL_ERRORS_SYMBOL = exports.PROTOCOL_ERRORS_SYMBOL = Symbol();
function graphQLResultHasProtocolErrors(result) {
  if (result.extensions) {
    return Array.isArray(result.extensions[PROTOCOL_ERRORS_SYMBOL]);
  }
  return false;
}
function isApolloError(err) {
  return err.hasOwnProperty("graphQLErrors");
}
// Sets the error message on this error according to the
// the GraphQL and network errors that are present.
// If the error message has already been set through the
// constructor or otherwise, this function is a nop.
var generateErrorMessage = function (err) {
  var errors = (0, _tslib.__spreadArray)((0, _tslib.__spreadArray)((0, _tslib.__spreadArray)([], err.graphQLErrors, true), err.clientErrors, true), err.protocolErrors, true);
  if (err.networkError) errors.push(err.networkError);
  return errors
  // The rest of the code sometimes unsafely types non-Error objects as GraphQLErrors
  .map(function (err) {
    return (0, _index2.isNonNullObject)(err) && err.message || "Error message not found.";
  }).join("\n");
};
var ApolloError = exports.ApolloError = /** @class */function (_super) {
  (0, _tslib.__extends)(ApolloError, _super);
  // Constructs an instance of ApolloError given a GraphQLError
  // or a network error. Note that one of these has to be a valid
  // value or the constructed error will be meaningless.
  function ApolloError(_a) {
    var graphQLErrors = _a.graphQLErrors,
      protocolErrors = _a.protocolErrors,
      clientErrors = _a.clientErrors,
      networkError = _a.networkError,
      errorMessage = _a.errorMessage,
      extraInfo = _a.extraInfo;
    var _this = _super.call(this, errorMessage) || this;
    _this.name = "ApolloError";
    _this.graphQLErrors = graphQLErrors || [];
    _this.protocolErrors = protocolErrors || [];
    _this.clientErrors = clientErrors || [];
    _this.networkError = networkError || null;
    _this.message = errorMessage || generateErrorMessage(_this);
    _this.extraInfo = extraInfo;
    // We're not using `Object.setPrototypeOf` here as it isn't fully
    // supported on Android (see issue #3236).
    _this.__proto__ = ApolloError.prototype;
    return _this;
  }
  return ApolloError;
}(Error);
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js"}],"../node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleError = handleError;
exports.parseAndCheckHttpResponse = parseAndCheckHttpResponse;
exports.parseHeaders = parseHeaders;
exports.parseJsonBody = parseJsonBody;
exports.readMultipartBody = readMultipartBody;
var _tslib = require("tslib");
var _responseIterator = require("./responseIterator.js");
var _index = require("../utils/index.js");
var _index2 = require("../../errors/index.js");
var _incrementalResult = require("../../utilities/common/incrementalResult.js");
var hasOwnProperty = Object.prototype.hasOwnProperty;
function readMultipartBody(response, nextValue) {
  var _a;
  return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
    var decoder, contentType, delimiter, boundaryVal, boundary, buffer, iterator, running, _b, value, done, chunk, searchFrom, bi, message, i, headers, contentType_1, body, result, next;
    var _c, _d;
    return (0, _tslib.__generator)(this, function (_e) {
      switch (_e.label) {
        case 0:
          if (TextDecoder === undefined) {
            throw new Error("TextDecoder must be defined in the environment: please import a polyfill.");
          }
          decoder = new TextDecoder("utf-8");
          contentType = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get("content-type");
          delimiter = "boundary=";
          boundaryVal = (contentType === null || contentType === void 0 ? void 0 : contentType.includes(delimiter)) ? contentType === null || contentType === void 0 ? void 0 : contentType.substring((contentType === null || contentType === void 0 ? void 0 : contentType.indexOf(delimiter)) + delimiter.length).replace(/['"]/g, "").replace(/\;(.*)/gm, "").trim() : "-";
          boundary = "\r\n--".concat(boundaryVal);
          buffer = "";
          iterator = (0, _responseIterator.responseIterator)(response);
          running = true;
          _e.label = 1;
        case 1:
          if (!running) return [3 /*break*/, 3];
          return [4 /*yield*/, iterator.next()];
        case 2:
          _b = _e.sent(), value = _b.value, done = _b.done;
          chunk = typeof value === "string" ? value : decoder.decode(value);
          searchFrom = buffer.length - boundary.length + 1;
          running = !done;
          buffer += chunk;
          bi = buffer.indexOf(boundary, searchFrom);
          while (bi > -1) {
            message = void 0;
            _c = [buffer.slice(0, bi), buffer.slice(bi + boundary.length)], message = _c[0], buffer = _c[1];
            i = message.indexOf("\r\n\r\n");
            headers = parseHeaders(message.slice(0, i));
            contentType_1 = headers["content-type"];
            if (contentType_1 && contentType_1.toLowerCase().indexOf("application/json") === -1) {
              throw new Error("Unsupported patch content type: application/json is required.");
            }
            body = message.slice(i);
            if (body) {
              result = parseJsonBody(response, body);
              if (Object.keys(result).length > 1 || "data" in result || "incremental" in result || "errors" in result || "payload" in result) {
                if ((0, _incrementalResult.isApolloPayloadResult)(result)) {
                  next = {};
                  if ("payload" in result) {
                    next = (0, _tslib.__assign)({}, result.payload);
                  }
                  if ("errors" in result) {
                    next = (0, _tslib.__assign)((0, _tslib.__assign)({}, next), {
                      extensions: (0, _tslib.__assign)((0, _tslib.__assign)({}, "extensions" in next ? next.extensions : null), (_d = {}, _d[_index2.PROTOCOL_ERRORS_SYMBOL] = result.errors, _d))
                    });
                  }
                  nextValue(next);
                } else {
                  // for the last chunk with only `hasNext: false`
                  // we don't need to call observer.next as there is no data/errors
                  nextValue(result);
                }
              } else if (
              // If the chunk contains only a "hasNext: false", we can call
              // observer.complete() immediately.
              Object.keys(result).length === 1 && "hasNext" in result && !result.hasNext) {
                return [2 /*return*/];
              }
            }
            bi = buffer.indexOf(boundary);
          }
          return [3 /*break*/, 1];
        case 3:
          return [2 /*return*/];
      }
    });
  });
}
function parseHeaders(headerText) {
  var headersInit = {};
  headerText.split("\n").forEach(function (line) {
    var i = line.indexOf(":");
    if (i > -1) {
      // normalize headers to lowercase
      var name_1 = line.slice(0, i).trim().toLowerCase();
      var value = line.slice(i + 1).trim();
      headersInit[name_1] = value;
    }
  });
  return headersInit;
}
function parseJsonBody(response, bodyText) {
  if (response.status >= 300) {
    // Network error
    var getResult = function () {
      try {
        return JSON.parse(bodyText);
      } catch (err) {
        return bodyText;
      }
    };
    (0, _index.throwServerError)(response, getResult(), "Response not successful: Received status code ".concat(response.status));
  }
  try {
    return JSON.parse(bodyText);
  } catch (err) {
    var parseError = err;
    parseError.name = "ServerParseError";
    parseError.response = response;
    parseError.statusCode = response.status;
    parseError.bodyText = bodyText;
    throw parseError;
  }
}
function handleError(err, observer) {
  // if it is a network error, BUT there is graphql result info fire
  // the next observer before calling error this gives apollo-client
  // (and react-apollo) the `graphqlErrors` and `networkErrors` to
  // pass to UI this should only happen if we *also* have data as
  // part of the response key per the spec
  if (err.result && err.result.errors && err.result.data) {
    // if we don't call next, the UI can only show networkError
    // because AC didn't get any graphqlErrors this is graphql
    // execution result info (i.e errors and possibly data) this is
    // because there is no formal spec how errors should translate to
    // http status codes. So an auth error (401) could have both data
    // from a public field, errors from a private field, and a status
    // of 401
    // {
    //  user { // this will have errors
    //    firstName
    //  }
    //  products { // this is public so will have data
    //    cost
    //  }
    // }
    //
    // the result of above *could* look like this:
    // {
    //   data: { products: [{ cost: "$10" }] },
    //   errors: [{
    //      message: 'your session has timed out',
    //      path: []
    //   }]
    // }
    // status code of above would be a 401
    // in the UI you want to show data where you can, errors as data where you can
    // and use correct http status codes
    observer.next(err.result);
  }
  observer.error(err);
}
function parseAndCheckHttpResponse(operations) {
  return function (response) {
    return response.text().then(function (bodyText) {
      return parseJsonBody(response, bodyText);
    }).then(function (result) {
      if (response.status >= 300) {
        // Network error
        (0, _index.throwServerError)(response, result, "Response not successful: Received status code ".concat(response.status));
      }
      if (!Array.isArray(result) && !hasOwnProperty.call(result, "data") && !hasOwnProperty.call(result, "errors")) {
        // Data error
        (0, _index.throwServerError)(response, result, "Server response was missing for query '".concat(Array.isArray(operations) ? operations.map(function (op) {
          return op.operationName;
        }) : operations.operationName, "'."));
      }
      return result;
    });
  };
}
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","./responseIterator.js":"../node_modules/@apollo/client/link/http/responseIterator.js","../utils/index.js":"../node_modules/@apollo/client/link/utils/index.js","../../errors/index.js":"../node_modules/@apollo/client/errors/index.js","../../utilities/common/incrementalResult.js":"../node_modules/@apollo/client/utilities/common/incrementalResult.js"}],"../node_modules/@apollo/client/link/http/serializeFetchParameter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serializeFetchParameter = void 0;
var _index = require("../../utilities/globals/index.js");
var serializeFetchParameter = function (p, label) {
  var serialized;
  try {
    serialized = JSON.stringify(p);
  } catch (e) {
    var parseError = (0, _index.newInvariantError)(39, label, e.message);
    parseError.parseError = e;
    throw parseError;
  }
  return serialized;
};
exports.serializeFetchParameter = serializeFetchParameter;
},{"../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js"}],"../node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fallbackHttpConfig = exports.defaultPrinter = void 0;
exports.selectHttpOptionsAndBody = selectHttpOptionsAndBody;
exports.selectHttpOptionsAndBodyInternal = selectHttpOptionsAndBodyInternal;
var _tslib = require("tslib");
var _index = require("../../utilities/index.js");
var defaultHttpOptions = {
  includeQuery: true,
  includeExtensions: false,
  preserveHeaderCase: false
};
var defaultHeaders = {
  // headers are case insensitive (https://stackoverflow.com/a/5259004)
  accept: "*/*",
  // The content-type header describes the type of the body of the request, and
  // so it typically only is sent with requests that actually have bodies. One
  // could imagine that Apollo Client would remove this header when constructing
  // a GET request (which has no body), but we historically have not done that.
  // This means that browsers will preflight all Apollo Client requests (even
  // GET requests). Apollo Server's CSRF prevention feature (introduced in
  // AS3.7) takes advantage of this fact and does not block requests with this
  // header. If you want to drop this header from GET requests, then you should
  // probably replace it with a `apollo-require-preflight` header, or servers
  // with CSRF prevention enabled might block your GET request. See
  // https://www.apollographql.com/docs/apollo-server/security/cors/#preventing-cross-site-request-forgery-csrf
  // for more details.
  "content-type": "application/json"
};
var defaultOptions = {
  method: "POST"
};
var fallbackHttpConfig = exports.fallbackHttpConfig = {
  http: defaultHttpOptions,
  headers: defaultHeaders,
  options: defaultOptions
};
var defaultPrinter = function (ast, printer) {
  return printer(ast);
};
exports.defaultPrinter = defaultPrinter;
function selectHttpOptionsAndBody(operation, fallbackConfig) {
  var configs = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    configs[_i - 2] = arguments[_i];
  }
  configs.unshift(fallbackConfig);
  return selectHttpOptionsAndBodyInternal.apply(void 0, (0, _tslib.__spreadArray)([operation, defaultPrinter], configs, false));
}
function selectHttpOptionsAndBodyInternal(operation, printer) {
  var configs = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    configs[_i - 2] = arguments[_i];
  }
  var options = {};
  var http = {};
  configs.forEach(function (config) {
    options = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, options), config.options), {
      headers: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.headers), config.headers)
    });
    if (config.credentials) {
      options.credentials = config.credentials;
    }
    http = (0, _tslib.__assign)((0, _tslib.__assign)({}, http), config.http);
  });
  if (options.headers) {
    options.headers = removeDuplicateHeaders(options.headers, http.preserveHeaderCase);
  }
  //The body depends on the http options
  var operationName = operation.operationName,
    extensions = operation.extensions,
    variables = operation.variables,
    query = operation.query;
  var body = {
    operationName: operationName,
    variables: variables
  };
  if (http.includeExtensions) body.extensions = extensions;
  // not sending the query (i.e persisted queries)
  if (http.includeQuery) body.query = printer(query, _index.print);
  return {
    options: options,
    body: body
  };
}
// Remove potential duplicate header names, preserving last (by insertion order).
// This is done to prevent unintentionally duplicating a header instead of
// overwriting it (See #8447 and #8449).
function removeDuplicateHeaders(headers, preserveHeaderCase) {
  // If we're not preserving the case, just remove duplicates w/ normalization.
  if (!preserveHeaderCase) {
    var normalizedHeaders_1 = Object.create(null);
    Object.keys(Object(headers)).forEach(function (name) {
      normalizedHeaders_1[name.toLowerCase()] = headers[name];
    });
    return normalizedHeaders_1;
  }
  // If we are preserving the case, remove duplicates w/ normalization,
  // preserving the original name.
  // This allows for non-http-spec-compliant servers that expect intentionally
  // capitalized header names (See #6741).
  var headerData = Object.create(null);
  Object.keys(Object(headers)).forEach(function (name) {
    headerData[name.toLowerCase()] = {
      originalName: name,
      value: headers[name]
    };
  });
  var normalizedHeaders = Object.create(null);
  Object.keys(headerData).forEach(function (name) {
    normalizedHeaders[headerData[name].originalName] = headerData[name].value;
  });
  return normalizedHeaders;
}
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js"}],"../node_modules/@apollo/client/link/http/checkFetcher.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkFetcher = void 0;
var _index = require("../../utilities/globals/index.js");
var checkFetcher = function (fetcher) {
  if (!fetcher && typeof fetch === "undefined") {
    throw (0, _index.newInvariantError)(37);
  }
};
exports.checkFetcher = checkFetcher;
},{"../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js"}],"../node_modules/@apollo/client/link/http/createSignalIfSupported.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSignalIfSupported = void 0;
/**
 * @deprecated
 * This is not used internally any more and will be removed in
 * the next major version of Apollo Client.
 */
var createSignalIfSupported = function () {
  if (typeof AbortController === "undefined") return {
    controller: false,
    signal: false
  };
  var controller = new AbortController();
  var signal = controller.signal;
  return {
    controller: controller,
    signal: signal
  };
};
exports.createSignalIfSupported = createSignalIfSupported;
},{}],"../node_modules/@apollo/client/link/http/selectURI.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selectURI = void 0;
var selectURI = function (operation, fallbackURI) {
  var context = operation.getContext();
  var contextURI = context.uri;
  if (contextURI) {
    return contextURI;
  } else if (typeof fallbackURI === "function") {
    return fallbackURI(operation);
  } else {
    return fallbackURI || "/graphql";
  }
};
exports.selectURI = selectURI;
},{}],"../node_modules/@apollo/client/link/http/rewriteURIForGET.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rewriteURIForGET = rewriteURIForGET;
var _serializeFetchParameter = require("./serializeFetchParameter.js");
// For GET operations, returns the given URI rewritten with parameters, or a
// parse error.
function rewriteURIForGET(chosenURI, body) {
  // Implement the standard HTTP GET serialization, plus 'extensions'. Note
  // the extra level of JSON serialization!
  var queryParams = [];
  var addQueryParam = function (key, value) {
    queryParams.push("".concat(key, "=").concat(encodeURIComponent(value)));
  };
  if ("query" in body) {
    addQueryParam("query", body.query);
  }
  if (body.operationName) {
    addQueryParam("operationName", body.operationName);
  }
  if (body.variables) {
    var serializedVariables = void 0;
    try {
      serializedVariables = (0, _serializeFetchParameter.serializeFetchParameter)(body.variables, "Variables map");
    } catch (parseError) {
      return {
        parseError: parseError
      };
    }
    addQueryParam("variables", serializedVariables);
  }
  if (body.extensions) {
    var serializedExtensions = void 0;
    try {
      serializedExtensions = (0, _serializeFetchParameter.serializeFetchParameter)(body.extensions, "Extensions map");
    } catch (parseError) {
      return {
        parseError: parseError
      };
    }
    addQueryParam("extensions", serializedExtensions);
  }
  // Reconstruct the URI with added query params.
  // XXX This assumes that the URI is well-formed and that it doesn't
  //     already contain any of these query params. We could instead use the
  //     URL API and take a polyfill (whatwg-url@6) for older browsers that
  //     don't support URLSearchParams. Note that some browsers (and
  //     versions of whatwg-url) support URL but not URLSearchParams!
  var fragment = "",
    preFragment = chosenURI;
  var fragmentStart = chosenURI.indexOf("#");
  if (fragmentStart !== -1) {
    fragment = chosenURI.substr(fragmentStart);
    preFragment = chosenURI.substr(0, fragmentStart);
  }
  var queryParamsPrefix = preFragment.indexOf("?") === -1 ? "?" : "&";
  var newURI = preFragment + queryParamsPrefix + queryParams.join("&") + fragment;
  return {
    newURI: newURI
  };
}
},{"./serializeFetchParameter.js":"../node_modules/@apollo/client/link/http/serializeFetchParameter.js"}],"../node_modules/@apollo/client/link/http/createHttpLink.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createHttpLink = void 0;
var _tslib = require("tslib");
var _index = require("../../utilities/globals/index.js");
var _index2 = require("../core/index.js");
var _index3 = require("../../utilities/index.js");
var _serializeFetchParameter = require("./serializeFetchParameter.js");
var _selectURI = require("./selectURI.js");
var _parseAndCheckHttpResponse = require("./parseAndCheckHttpResponse.js");
var _checkFetcher = require("./checkFetcher.js");
var _selectHttpOptionsAndBody = require("./selectHttpOptionsAndBody.js");
var _rewriteURIForGET = require("./rewriteURIForGET.js");
var _index4 = require("../utils/index.js");
var backupFetch = (0, _index3.maybe)(function () {
  return fetch;
});
var createHttpLink = function (linkOptions) {
  if (linkOptions === void 0) {
    linkOptions = {};
  }
  var _a = linkOptions.uri,
    uri = _a === void 0 ? "/graphql" : _a,
    // use default global fetch if nothing passed in
    preferredFetch = linkOptions.fetch,
    _b = linkOptions.print,
    print = _b === void 0 ? _selectHttpOptionsAndBody.defaultPrinter : _b,
    includeExtensions = linkOptions.includeExtensions,
    preserveHeaderCase = linkOptions.preserveHeaderCase,
    useGETForQueries = linkOptions.useGETForQueries,
    _c = linkOptions.includeUnusedVariables,
    includeUnusedVariables = _c === void 0 ? false : _c,
    requestOptions = (0, _tslib.__rest)(linkOptions, ["uri", "fetch", "print", "includeExtensions", "preserveHeaderCase", "useGETForQueries", "includeUnusedVariables"]);
  if (globalThis.__DEV__ !== false) {
    // Make sure at least one of preferredFetch, window.fetch, or backupFetch is
    // defined, so requests won't fail at runtime.
    (0, _checkFetcher.checkFetcher)(preferredFetch || backupFetch);
  }
  var linkConfig = {
    http: {
      includeExtensions: includeExtensions,
      preserveHeaderCase: preserveHeaderCase
    },
    options: requestOptions.fetchOptions,
    credentials: requestOptions.credentials,
    headers: requestOptions.headers
  };
  return new _index2.ApolloLink(function (operation) {
    var chosenURI = (0, _selectURI.selectURI)(operation, uri);
    var context = operation.getContext();
    // `apollographql-client-*` headers are automatically set if a
    // `clientAwareness` object is found in the context. These headers are
    // set first, followed by the rest of the headers pulled from
    // `context.headers`. If desired, `apollographql-client-*` headers set by
    // the `clientAwareness` object can be overridden by
    // `apollographql-client-*` headers set in `context.headers`.
    var clientAwarenessHeaders = {};
    if (context.clientAwareness) {
      var _a = context.clientAwareness,
        name_1 = _a.name,
        version = _a.version;
      if (name_1) {
        clientAwarenessHeaders["apollographql-client-name"] = name_1;
      }
      if (version) {
        clientAwarenessHeaders["apollographql-client-version"] = version;
      }
    }
    var contextHeaders = (0, _tslib.__assign)((0, _tslib.__assign)({}, clientAwarenessHeaders), context.headers);
    var contextConfig = {
      http: context.http,
      options: context.fetchOptions,
      credentials: context.credentials,
      headers: contextHeaders
    };
    if ((0, _index3.hasDirectives)(["client"], operation.query)) {
      var transformedQuery = (0, _index3.removeClientSetsFromDocument)(operation.query);
      if (!transformedQuery) {
        return (0, _index4.fromError)(new Error("HttpLink: Trying to send a client-only query to the server. To send to the server, ensure a non-client field is added to the query or set the `transformOptions.removeClientFields` option to `true`."));
      }
      operation.query = transformedQuery;
    }
    //uses fallback, link, and then context to build options
    var _b = (0, _selectHttpOptionsAndBody.selectHttpOptionsAndBodyInternal)(operation, print, _selectHttpOptionsAndBody.fallbackHttpConfig, linkConfig, contextConfig),
      options = _b.options,
      body = _b.body;
    if (body.variables && !includeUnusedVariables) {
      body.variables = (0, _index4.filterOperationVariables)(body.variables, operation.query);
    }
    var controller;
    if (!options.signal && typeof AbortController !== "undefined") {
      controller = new AbortController();
      options.signal = controller.signal;
    }
    // If requested, set method to GET if there are no mutations.
    var definitionIsMutation = function (d) {
      return d.kind === "OperationDefinition" && d.operation === "mutation";
    };
    var definitionIsSubscription = function (d) {
      return d.kind === "OperationDefinition" && d.operation === "subscription";
    };
    var isSubscription = definitionIsSubscription((0, _index3.getMainDefinition)(operation.query));
    // does not match custom directives beginning with @defer
    var hasDefer = (0, _index3.hasDirectives)(["defer"], operation.query);
    if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {
      options.method = "GET";
    }
    if (hasDefer || isSubscription) {
      options.headers = options.headers || {};
      var acceptHeader = "multipart/mixed;";
      // Omit defer-specific headers if the user attempts to defer a selection
      // set on a subscription and log a warning.
      if (isSubscription && hasDefer) {
        globalThis.__DEV__ !== false && _index.invariant.warn(38);
      }
      if (isSubscription) {
        acceptHeader += "boundary=graphql;subscriptionSpec=1.0,application/json";
      } else if (hasDefer) {
        acceptHeader += "deferSpec=20220824,application/json";
      }
      options.headers.accept = acceptHeader;
    }
    if (options.method === "GET") {
      var _c = (0, _rewriteURIForGET.rewriteURIForGET)(chosenURI, body),
        newURI = _c.newURI,
        parseError = _c.parseError;
      if (parseError) {
        return (0, _index4.fromError)(parseError);
      }
      chosenURI = newURI;
    } else {
      try {
        options.body = (0, _serializeFetchParameter.serializeFetchParameter)(body, "Payload");
      } catch (parseError) {
        return (0, _index4.fromError)(parseError);
      }
    }
    return new _index3.Observable(function (observer) {
      // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise
      // fall back to the *current* global window.fetch function (see issue
      // #7832), or (if all else fails) the backupFetch function we saved when
      // this module was first evaluated. This last option protects against the
      // removal of window.fetch, which is unlikely but not impossible.
      var currentFetch = preferredFetch || (0, _index3.maybe)(function () {
        return fetch;
      }) || backupFetch;
      var observerNext = observer.next.bind(observer);
      currentFetch(chosenURI, options).then(function (response) {
        var _a;
        operation.setContext({
          response: response
        });
        var ctype = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get("content-type");
        if (ctype !== null && /^multipart\/mixed/i.test(ctype)) {
          return (0, _parseAndCheckHttpResponse.readMultipartBody)(response, observerNext);
        } else {
          return (0, _parseAndCheckHttpResponse.parseAndCheckHttpResponse)(operation)(response).then(observerNext);
        }
      }).then(function () {
        controller = undefined;
        observer.complete();
      }).catch(function (err) {
        controller = undefined;
        (0, _parseAndCheckHttpResponse.handleError)(err, observer);
      });
      return function () {
        // XXX support canceling this request
        // https://developers.google.com/web/updates/2017/09/abortable-fetch
        if (controller) controller.abort();
      };
    });
  });
};
exports.createHttpLink = createHttpLink;
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","../core/index.js":"../node_modules/@apollo/client/link/core/index.js","../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js","./serializeFetchParameter.js":"../node_modules/@apollo/client/link/http/serializeFetchParameter.js","./selectURI.js":"../node_modules/@apollo/client/link/http/selectURI.js","./parseAndCheckHttpResponse.js":"../node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js","./checkFetcher.js":"../node_modules/@apollo/client/link/http/checkFetcher.js","./selectHttpOptionsAndBody.js":"../node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js","./rewriteURIForGET.js":"../node_modules/@apollo/client/link/http/rewriteURIForGET.js","../utils/index.js":"../node_modules/@apollo/client/link/utils/index.js"}],"../node_modules/@apollo/client/link/http/HttpLink.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HttpLink = void 0;
var _tslib = require("tslib");
var _index = require("../core/index.js");
var _createHttpLink = require("./createHttpLink.js");
var HttpLink = exports.HttpLink = /** @class */function (_super) {
  (0, _tslib.__extends)(HttpLink, _super);
  function HttpLink(options) {
    if (options === void 0) {
      options = {};
    }
    var _this = _super.call(this, (0, _createHttpLink.createHttpLink)(options).request) || this;
    _this.options = options;
    return _this;
  }
  return HttpLink;
}(_index.ApolloLink);
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","../core/index.js":"../node_modules/@apollo/client/link/core/index.js","./createHttpLink.js":"../node_modules/@apollo/client/link/http/createHttpLink.js"}],"../node_modules/@apollo/client/link/http/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "HttpLink", {
  enumerable: true,
  get: function () {
    return _HttpLink.HttpLink;
  }
});
Object.defineProperty(exports, "checkFetcher", {
  enumerable: true,
  get: function () {
    return _checkFetcher.checkFetcher;
  }
});
Object.defineProperty(exports, "createHttpLink", {
  enumerable: true,
  get: function () {
    return _createHttpLink.createHttpLink;
  }
});
Object.defineProperty(exports, "createSignalIfSupported", {
  enumerable: true,
  get: function () {
    return _createSignalIfSupported.createSignalIfSupported;
  }
});
Object.defineProperty(exports, "defaultPrinter", {
  enumerable: true,
  get: function () {
    return _selectHttpOptionsAndBody.defaultPrinter;
  }
});
Object.defineProperty(exports, "fallbackHttpConfig", {
  enumerable: true,
  get: function () {
    return _selectHttpOptionsAndBody.fallbackHttpConfig;
  }
});
Object.defineProperty(exports, "parseAndCheckHttpResponse", {
  enumerable: true,
  get: function () {
    return _parseAndCheckHttpResponse.parseAndCheckHttpResponse;
  }
});
Object.defineProperty(exports, "rewriteURIForGET", {
  enumerable: true,
  get: function () {
    return _rewriteURIForGET.rewriteURIForGET;
  }
});
Object.defineProperty(exports, "selectHttpOptionsAndBody", {
  enumerable: true,
  get: function () {
    return _selectHttpOptionsAndBody.selectHttpOptionsAndBody;
  }
});
Object.defineProperty(exports, "selectHttpOptionsAndBodyInternal", {
  enumerable: true,
  get: function () {
    return _selectHttpOptionsAndBody.selectHttpOptionsAndBodyInternal;
  }
});
Object.defineProperty(exports, "selectURI", {
  enumerable: true,
  get: function () {
    return _selectURI.selectURI;
  }
});
Object.defineProperty(exports, "serializeFetchParameter", {
  enumerable: true,
  get: function () {
    return _serializeFetchParameter.serializeFetchParameter;
  }
});
require("../../utilities/globals/index.js");
var _parseAndCheckHttpResponse = require("./parseAndCheckHttpResponse.js");
var _serializeFetchParameter = require("./serializeFetchParameter.js");
var _selectHttpOptionsAndBody = require("./selectHttpOptionsAndBody.js");
var _checkFetcher = require("./checkFetcher.js");
var _createSignalIfSupported = require("./createSignalIfSupported.js");
var _selectURI = require("./selectURI.js");
var _createHttpLink = require("./createHttpLink.js");
var _HttpLink = require("./HttpLink.js");
var _rewriteURIForGET = require("./rewriteURIForGET.js");
},{"../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","./parseAndCheckHttpResponse.js":"../node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js","./serializeFetchParameter.js":"../node_modules/@apollo/client/link/http/serializeFetchParameter.js","./selectHttpOptionsAndBody.js":"../node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js","./checkFetcher.js":"../node_modules/@apollo/client/link/http/checkFetcher.js","./createSignalIfSupported.js":"../node_modules/@apollo/client/link/http/createSignalIfSupported.js","./selectURI.js":"../node_modules/@apollo/client/link/http/selectURI.js","./createHttpLink.js":"../node_modules/@apollo/client/link/http/createHttpLink.js","./HttpLink.js":"../node_modules/@apollo/client/link/http/HttpLink.js","./rewriteURIForGET.js":"../node_modules/@apollo/client/link/http/rewriteURIForGET.js"}],"../node_modules/@wry/equality/lib/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.equal = equal;
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var _Object$prototype = Object.prototype,
  toString = _Object$prototype.toString,
  hasOwnProperty = _Object$prototype.hasOwnProperty;
var fnToStr = Function.prototype.toString;
var previousComparisons = new Map();
/**
 * Performs a deep equality check on two JavaScript values, tolerating cycles.
 */
function equal(a, b) {
  try {
    return check(a, b);
  } finally {
    previousComparisons.clear();
  }
}
// Allow default imports as well.
var _default = exports.default = equal;
function check(a, b) {
  // If the two values are strictly equal, our job is easy.
  if (a === b) {
    return true;
  }
  // Object.prototype.toString returns a representation of the runtime type of
  // the given value that is considerably more precise than typeof.
  var aTag = toString.call(a);
  var bTag = toString.call(b);
  // If the runtime types of a and b are different, they could maybe be equal
  // under some interpretation of equality, but for simplicity and performance
  // we just return false instead.
  if (aTag !== bTag) {
    return false;
  }
  switch (aTag) {
    case '[object Array]':
      // Arrays are a lot like other objects, but we can cheaply compare their
      // lengths as a short-cut before comparing their elements.
      if (a.length !== b.length) return false;
    // Fall through to object case...
    case '[object Object]':
      {
        if (previouslyCompared(a, b)) return true;
        var aKeys = definedKeys(a);
        var bKeys = definedKeys(b);
        // If `a` and `b` have a different number of enumerable keys, they
        // must be different.
        var keyCount = aKeys.length;
        if (keyCount !== bKeys.length) return false;
        // Now make sure they have the same keys.
        for (var k = 0; k < keyCount; ++k) {
          if (!hasOwnProperty.call(b, aKeys[k])) {
            return false;
          }
        }
        // Finally, check deep equality of all child properties.
        for (var _k = 0; _k < keyCount; ++_k) {
          var key = aKeys[_k];
          if (!check(a[key], b[key])) {
            return false;
          }
        }
        return true;
      }
    case '[object Error]':
      return a.name === b.name && a.message === b.message;
    case '[object Number]':
      // Handle NaN, which is !== itself.
      if (a !== a) return b !== b;
    // Fall through to shared +a === +b case...
    case '[object Boolean]':
    case '[object Date]':
      return +a === +b;
    case '[object RegExp]':
    case '[object String]':
      return a == "".concat(b);
    case '[object Map]':
    case '[object Set]':
      {
        if (a.size !== b.size) return false;
        if (previouslyCompared(a, b)) return true;
        var aIterator = a.entries();
        var isMap = aTag === '[object Map]';
        while (true) {
          var info = aIterator.next();
          if (info.done) break;
          // If a instanceof Set, aValue === aKey.
          var _info$value = _slicedToArray(info.value, 2),
            aKey = _info$value[0],
            aValue = _info$value[1];
          // So this works the same way for both Set and Map.
          if (!b.has(aKey)) {
            return false;
          }
          // However, we care about deep equality of values only when dealing
          // with Map structures.
          if (isMap && !check(aValue, b.get(aKey))) {
            return false;
          }
        }
        return true;
      }
    case '[object Uint16Array]':
    case '[object Uint8Array]': // Buffer, in Node.js.
    case '[object Uint32Array]':
    case '[object Int32Array]':
    case '[object Int8Array]':
    case '[object Int16Array]':
    case '[object ArrayBuffer]':
      // DataView doesn't need these conversions, but the equality check is
      // otherwise the same.
      a = new Uint8Array(a);
      b = new Uint8Array(b);
    // Fall through...
    case '[object DataView]':
      {
        var len = a.byteLength;
        if (len === b.byteLength) {
          while (len-- && a[len] === b[len]) {
            // Keep looping as long as the bytes are equal.
          }
        }
        return len === -1;
      }
    case '[object AsyncFunction]':
    case '[object GeneratorFunction]':
    case '[object AsyncGeneratorFunction]':
    case '[object Function]':
      {
        var aCode = fnToStr.call(a);
        if (aCode !== fnToStr.call(b)) {
          return false;
        }
        // We consider non-native functions equal if they have the same code
        // (native functions require === because their code is censored).
        // Note that this behavior is not entirely sound, since !== function
        // objects with the same code can behave differently depending on
        // their closure scope. However, any function can behave differently
        // depending on the values of its input arguments (including this)
        // and its calling context (including its closure scope), even
        // though the function object is === to itself; and it is entirely
        // possible for functions that are not === to behave exactly the
        // same under all conceivable circumstances. Because none of these
        // factors are statically decidable in JavaScript, JS function
        // equality is not well-defined. This ambiguity allows us to
        // consider the best possible heuristic among various imperfect
        // options, and equating non-native functions that have the same
        // code has enormous practical benefits, such as when comparing
        // functions that are repeatedly passed as fresh function
        // expressions within objects that are otherwise deeply equal. Since
        // any function created from the same syntactic expression (in the
        // same code location) will always stringify to the same code
        // according to fnToStr.call, we can reasonably expect these
        // repeatedly passed function expressions to have the same code, and
        // thus behave "the same" (with all the caveats mentioned above),
        // even though the runtime function objects are !== to one another.
        return !endsWith(aCode, nativeCodeSuffix);
      }
  }
  // Otherwise the values are not equal.
  return false;
}
function definedKeys(obj) {
  // Remember that the second argument to Array.prototype.filter will be
  // used as `this` within the callback function.
  return Object.keys(obj).filter(isDefinedKey, obj);
}
function isDefinedKey(key) {
  return this[key] !== void 0;
}
var nativeCodeSuffix = "{ [native code] }";
function endsWith(full, suffix) {
  var fromIndex = full.length - suffix.length;
  return fromIndex >= 0 && full.indexOf(suffix, fromIndex) === fromIndex;
}
function previouslyCompared(a, b) {
  // Though cyclic references can make an object graph appear infinite from the
  // perspective of a depth-first traversal, the graph still contains a finite
  // number of distinct object references. We use the previousComparisons cache
  // to avoid comparing the same pair of object references more than once, which
  // guarantees termination (even if we end up comparing every object in one
  // graph to every object in the other graph, which is extremely unlikely),
  // while still allowing weird isomorphic structures (like rings with different
  // lengths) a chance to pass the equality test.
  var bSet = previousComparisons.get(a);
  if (bSet) {
    // Return true here because we can be sure false will be returned somewhere
    // else if the objects are not equivalent.
    if (bSet.has(b)) return true;
  } else {
    previousComparisons.set(a, bSet = new Set());
  }
  bSet.add(b);
  return false;
}
},{}],"../node_modules/optimism/node_modules/@wry/trie/lib/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Trie = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds
// object keys weakly, yet can also hold non-object keys, unlike the
// native `WeakMap`.
// If no makeData function is supplied, the looked-up data will be an empty,
// null-prototype Object.
var defaultMakeData = function defaultMakeData() {
  return Object.create(null);
};
// Useful for processing arguments objects as well as arrays.
var _Array$prototype = Array.prototype,
  forEach = _Array$prototype.forEach,
  slice = _Array$prototype.slice;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var Trie = exports.Trie = /*#__PURE__*/function () {
  function Trie() {
    var weakness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    var makeData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultMakeData;
    _classCallCheck(this, Trie);
    this.weakness = weakness;
    this.makeData = makeData;
  }
  _createClass(Trie, [{
    key: "lookup",
    value: function lookup() {
      for (var _len = arguments.length, array = new Array(_len), _key = 0; _key < _len; _key++) {
        array[_key] = arguments[_key];
      }
      return this.lookupArray(array);
    }
  }, {
    key: "lookupArray",
    value: function lookupArray(array) {
      var node = this;
      forEach.call(array, function (key) {
        return node = node.getChildTrie(key);
      });
      return hasOwnProperty.call(node, "data") ? node.data : node.data = this.makeData(slice.call(array));
    }
  }, {
    key: "peek",
    value: function peek() {
      for (var _len2 = arguments.length, array = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        array[_key2] = arguments[_key2];
      }
      return this.peekArray(array);
    }
  }, {
    key: "peekArray",
    value: function peekArray(array) {
      var node = this;
      for (var i = 0, len = array.length; node && i < len; ++i) {
        var map = this.weakness && isObjRef(array[i]) ? node.weak : node.strong;
        node = map && map.get(array[i]);
      }
      return node && node.data;
    }
  }, {
    key: "getChildTrie",
    value: function getChildTrie(key) {
      var map = this.weakness && isObjRef(key) ? this.weak || (this.weak = new WeakMap()) : this.strong || (this.strong = new Map());
      var child = map.get(key);
      if (!child) map.set(key, child = new Trie(this.weakness, this.makeData));
      return child;
    }
  }]);
  return Trie;
}();
function isObjRef(value) {
  switch (_typeof(value)) {
    case "object":
      if (value === null) break;
    // Fall through to return true...
    case "function":
      return true;
  }
  return false;
}
},{}],"../node_modules/@wry/caches/lib/strong.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StrongCache = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function defaultDispose() {}
var StrongCache = exports.StrongCache = /*#__PURE__*/function () {
  function StrongCache() {
    var max = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
    var dispose = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDispose;
    _classCallCheck(this, StrongCache);
    this.max = max;
    this.dispose = dispose;
    this.map = new Map();
    this.newest = null;
    this.oldest = null;
  }
  _createClass(StrongCache, [{
    key: "has",
    value: function has(key) {
      return this.map.has(key);
    }
  }, {
    key: "get",
    value: function get(key) {
      var node = this.getNode(key);
      return node && node.value;
    }
  }, {
    key: "size",
    get: function get() {
      return this.map.size;
    }
  }, {
    key: "getNode",
    value: function getNode(key) {
      var node = this.map.get(key);
      if (node && node !== this.newest) {
        var older = node.older,
          newer = node.newer;
        if (newer) {
          newer.older = older;
        }
        if (older) {
          older.newer = newer;
        }
        node.older = this.newest;
        node.older.newer = node;
        node.newer = null;
        this.newest = node;
        if (node === this.oldest) {
          this.oldest = newer;
        }
      }
      return node;
    }
  }, {
    key: "set",
    value: function set(key, value) {
      var node = this.getNode(key);
      if (node) {
        return node.value = value;
      }
      node = {
        key: key,
        value: value,
        newer: null,
        older: this.newest
      };
      if (this.newest) {
        this.newest.newer = node;
      }
      this.newest = node;
      this.oldest = this.oldest || node;
      this.map.set(key, node);
      return node.value;
    }
  }, {
    key: "clean",
    value: function clean() {
      while (this.oldest && this.map.size > this.max) {
        this.delete(this.oldest.key);
      }
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      var node = this.map.get(key);
      if (node) {
        if (node === this.newest) {
          this.newest = node.older;
        }
        if (node === this.oldest) {
          this.oldest = node.newer;
        }
        if (node.newer) {
          node.newer.older = node.older;
        }
        if (node.older) {
          node.older.newer = node.newer;
        }
        this.map.delete(key);
        this.dispose(node.value, key);
        return true;
      }
      return false;
    }
  }]);
  return StrongCache;
}();
},{}],"../node_modules/@wry/caches/lib/weak.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WeakCache = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function noop() {}
var defaultDispose = noop;
var _WeakRef = typeof WeakRef !== "undefined" ? WeakRef : function (value) {
  return {
    deref: function deref() {
      return value;
    }
  };
};
var _WeakMap = typeof WeakMap !== "undefined" ? WeakMap : Map;
var _FinalizationRegistry = typeof FinalizationRegistry !== "undefined" ? FinalizationRegistry : function () {
  return {
    register: noop,
    unregister: noop
  };
};
var finalizationBatchSize = 10024;
var WeakCache = exports.WeakCache = /*#__PURE__*/function () {
  function WeakCache() {
    var _this = this;
    var max = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
    var dispose = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDispose;
    _classCallCheck(this, WeakCache);
    this.max = max;
    this.dispose = dispose;
    this.map = new _WeakMap();
    this.newest = null;
    this.oldest = null;
    this.unfinalizedNodes = new Set();
    this.finalizationScheduled = false;
    this.size = 0;
    this.finalize = function () {
      var iterator = _this.unfinalizedNodes.values();
      for (var i = 0; i < finalizationBatchSize; i++) {
        var node = iterator.next().value;
        if (!node) break;
        _this.unfinalizedNodes.delete(node);
        var key = node.key;
        delete node.key;
        node.keyRef = new _WeakRef(key);
        _this.registry.register(key, node, node);
      }
      if (_this.unfinalizedNodes.size > 0) {
        queueMicrotask(_this.finalize);
      } else {
        _this.finalizationScheduled = false;
      }
    };
    this.registry = new _FinalizationRegistry(this.deleteNode.bind(this));
  }
  _createClass(WeakCache, [{
    key: "has",
    value: function has(key) {
      return this.map.has(key);
    }
  }, {
    key: "get",
    value: function get(key) {
      var node = this.getNode(key);
      return node && node.value;
    }
  }, {
    key: "getNode",
    value: function getNode(key) {
      var node = this.map.get(key);
      if (node && node !== this.newest) {
        var older = node.older,
          newer = node.newer;
        if (newer) {
          newer.older = older;
        }
        if (older) {
          older.newer = newer;
        }
        node.older = this.newest;
        node.older.newer = node;
        node.newer = null;
        this.newest = node;
        if (node === this.oldest) {
          this.oldest = newer;
        }
      }
      return node;
    }
  }, {
    key: "set",
    value: function set(key, value) {
      var node = this.getNode(key);
      if (node) {
        return node.value = value;
      }
      node = {
        key: key,
        value: value,
        newer: null,
        older: this.newest
      };
      if (this.newest) {
        this.newest.newer = node;
      }
      this.newest = node;
      this.oldest = this.oldest || node;
      this.scheduleFinalization(node);
      this.map.set(key, node);
      this.size++;
      return node.value;
    }
  }, {
    key: "clean",
    value: function clean() {
      while (this.oldest && this.size > this.max) {
        this.deleteNode(this.oldest);
      }
    }
  }, {
    key: "deleteNode",
    value: function deleteNode(node) {
      if (node === this.newest) {
        this.newest = node.older;
      }
      if (node === this.oldest) {
        this.oldest = node.newer;
      }
      if (node.newer) {
        node.newer.older = node.older;
      }
      if (node.older) {
        node.older.newer = node.newer;
      }
      this.size--;
      var key = node.key || node.keyRef && node.keyRef.deref();
      this.dispose(node.value, key);
      if (!node.keyRef) {
        this.unfinalizedNodes.delete(node);
      } else {
        this.registry.unregister(node);
      }
      if (key) this.map.delete(key);
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      var node = this.map.get(key);
      if (node) {
        this.deleteNode(node);
        return true;
      }
      return false;
    }
  }, {
    key: "scheduleFinalization",
    value: function scheduleFinalization(node) {
      this.unfinalizedNodes.add(node);
      if (!this.finalizationScheduled) {
        this.finalizationScheduled = true;
        queueMicrotask(this.finalize);
      }
    }
  }]);
  return WeakCache;
}();
},{}],"../node_modules/@wry/caches/lib/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "StrongCache", {
  enumerable: true,
  get: function () {
    return _strong.StrongCache;
  }
});
Object.defineProperty(exports, "WeakCache", {
  enumerable: true,
  get: function () {
    return _weak.WeakCache;
  }
});
var _strong = require("./strong.js");
var _weak = require("./weak.js");
},{"./strong.js":"../node_modules/@wry/caches/lib/strong.js","./weak.js":"../node_modules/@wry/caches/lib/weak.js"}],"../node_modules/@wry/context/lib/slot.js":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Slot = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// This currentContext variable will only be used if the makeSlotClass
// function is called, which happens only if this is the first copy of the
// @wry/context package to be imported.
var currentContext = null;
// This unique internal object is used to denote the absence of a value
// for a given Slot, and is never exposed to outside code.
var MISSING_VALUE = {};
var idCounter = 1;
// Although we can't do anything about the cost of duplicated code from
// accidentally bundling multiple copies of the @wry/context package, we can
// avoid creating the Slot class more than once using makeSlotClass.
var makeSlotClass = function makeSlotClass() {
  return /*#__PURE__*/function () {
    function Slot() {
      _classCallCheck(this, Slot);
      // If you have a Slot object, you can find out its slot.id, but you cannot
      // guess the slot.id of a Slot you don't have access to, thanks to the
      // randomized suffix.
      this.id = ["slot", idCounter++, Date.now(), Math.random().toString(36).slice(2)].join(":");
    }
    _createClass(Slot, [{
      key: "hasValue",
      value: function hasValue() {
        for (var context = currentContext; context; context = context.parent) {
          // We use the Slot object iself as a key to its value, which means the
          // value cannot be obtained without a reference to the Slot object.
          if (this.id in context.slots) {
            var value = context.slots[this.id];
            if (value === MISSING_VALUE) break;
            if (context !== currentContext) {
              // Cache the value in currentContext.slots so the next lookup will
              // be faster. This caching is safe because the tree of contexts and
              // the values of the slots are logically immutable.
              currentContext.slots[this.id] = value;
            }
            return true;
          }
        }
        if (currentContext) {
          // If a value was not found for this Slot, it's never going to be found
          // no matter how many times we look it up, so we might as well cache
          // the absence of the value, too.
          currentContext.slots[this.id] = MISSING_VALUE;
        }
        return false;
      }
    }, {
      key: "getValue",
      value: function getValue() {
        if (this.hasValue()) {
          return currentContext.slots[this.id];
        }
      }
    }, {
      key: "withValue",
      value: function withValue(value, callback,
      // Given the prevalence of arrow functions, specifying arguments is likely
      // to be much more common than specifying `this`, hence this ordering:
      args, thisArg) {
        var slots = _defineProperty({
          __proto__: null
        }, this.id, value);
        var parent = currentContext;
        currentContext = {
          parent: parent,
          slots: slots
        };
        try {
          // Function.prototype.apply allows the arguments array argument to be
          // omitted or undefined, so args! is fine here.
          return callback.apply(thisArg, args);
        } finally {
          currentContext = parent;
        }
      }
      // Capture the current context and wrap a callback function so that it
      // reestablishes the captured context when called.
    }], [{
      key: "bind",
      value: function bind(callback) {
        var context = currentContext;
        return function () {
          var saved = currentContext;
          try {
            currentContext = context;
            return callback.apply(this, arguments);
          } finally {
            currentContext = saved;
          }
        };
      }
      // Immediately run a callback function without any captured context.
    }, {
      key: "noContext",
      value: function noContext(callback,
      // Given the prevalence of arrow functions, specifying arguments is likely
      // to be much more common than specifying `this`, hence this ordering:
      args, thisArg) {
        if (currentContext) {
          var saved = currentContext;
          try {
            currentContext = null;
            // Function.prototype.apply allows the arguments array argument to be
            // omitted or undefined, so args! is fine here.
            return callback.apply(thisArg, args);
          } finally {
            currentContext = saved;
          }
        } else {
          return callback.apply(thisArg, args);
        }
      }
    }]);
    return Slot;
  }();
};
function maybe(fn) {
  try {
    return fn();
  } catch (ignored) {}
}
// We store a single global implementation of the Slot class as a permanent
// non-enumerable property of the globalThis object. This obfuscation does
// nothing to prevent access to the Slot class, but at least it ensures the
// implementation (i.e. currentContext) cannot be tampered with, and all copies
// of the @wry/context package (hopefully just one) will share the same Slot
// implementation. Since the first copy of the @wry/context package to be
// imported wins, this technique imposes a steep cost for any future breaking
// changes to the Slot class.
var globalKey = "@wry/context:Slot";
var host =
// Prefer globalThis when available.
// https://github.com/benjamn/wryware/issues/347
maybe(function () {
  return globalThis;
}) ||
// Fall back to global, which works in Node.js and may be converted by some
// bundlers to the appropriate identifier (window, self, ...) depending on the
// bundling target. https://github.com/endojs/endo/issues/576#issuecomment-1178515224
maybe(function () {
  return global;
}) ||
// Otherwise, use a dummy host that's local to this module. We used to fall
// back to using the Array constructor as a namespace, but that was flagged in
// https://github.com/benjamn/wryware/issues/347, and can be avoided.
Object.create(null);
// Whichever globalHost we're using, make TypeScript happy about the additional
// globalKey property.
var globalHost = host;
var Slot = exports.Slot = globalHost[globalKey] ||
// Earlier versions of this package stored the globalKey property on the Array
// constructor, so we check there as well, to prevent Slot class duplication.
Array[globalKey] || function (Slot) {
  try {
    Object.defineProperty(globalHost, globalKey, {
      value: Slot,
      enumerable: false,
      writable: false,
      // When it was possible for globalHost to be the Array constructor (a
      // legacy Slot dedup strategy), it was important for the property to be
      // configurable:true so it could be deleted. That does not seem to be as
      // important when globalHost is the global object, but I don't want to
      // cause similar problems again, and configurable:true seems safest.
      // https://github.com/endojs/endo/issues/576#issuecomment-1178274008
      configurable: true
    });
  } finally {
    return Slot;
  }
}(makeSlotClass());
},{}],"../node_modules/@wry/context/lib/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Slot", {
  enumerable: true,
  get: function () {
    return _slot.Slot;
  }
});
exports.asyncFromGen = asyncFromGen;
exports.noContext = exports.bind = void 0;
exports.setTimeout = setTimeoutWithContext;
exports.wrapYieldingFiberMethods = wrapYieldingFiberMethods;
var _slot = require("./slot.js");
var bind = exports.bind = _slot.Slot.bind,
  noContext = exports.noContext = _slot.Slot.noContext;
// Like global.setTimeout, except the callback runs with captured context.

function setTimeoutWithContext(callback, delay) {
  return setTimeout(bind(callback), delay);
}
// Turn any generator function into an async function (using yield instead
// of await), with context automatically preserved across yields.
function asyncFromGen(genFn) {
  return function () {
    var gen = genFn.apply(this, arguments);
    var boundNext = bind(gen.next);
    var boundThrow = bind(gen.throw);
    return new Promise(function (resolve, reject) {
      function invoke(method, argument) {
        try {
          var result = method.call(gen, argument);
        } catch (error) {
          return reject(error);
        }
        var next = result.done ? resolve : invokeNext;
        if (isPromiseLike(result.value)) {
          result.value.then(next, result.done ? reject : invokeThrow);
        } else {
          next(result.value);
        }
      }
      var invokeNext = function invokeNext(value) {
        return invoke(boundNext, value);
      };
      var invokeThrow = function invokeThrow(error) {
        return invoke(boundThrow, error);
      };
      invokeNext();
    });
  };
}
function isPromiseLike(value) {
  return value && typeof value.then === "function";
}
// If you use the fibers npm package to implement coroutines in Node.js,
// you should call this function at least once to ensure context management
// remains coherent across any yields.
var wrappedFibers = [];
function wrapYieldingFiberMethods(Fiber) {
  // There can be only one implementation of Fiber per process, so this array
  // should never grow longer than one element.
  if (wrappedFibers.indexOf(Fiber) < 0) {
    var wrap = function wrap(obj, method) {
      var fn = obj[method];
      obj[method] = function () {
        return noContext(fn, arguments, this);
      };
    };
    // These methods can yield, according to
    // https://github.com/laverdet/node-fibers/blob/ddebed9b8ae3883e57f822e2108e6943e5c8d2a8/fibers.js#L97-L100
    wrap(Fiber, "yield");
    wrap(Fiber.prototype, "run");
    wrap(Fiber.prototype, "throwInto");
    wrappedFibers.push(Fiber);
  }
  return Fiber;
}
},{"./slot.js":"../node_modules/@wry/context/lib/slot.js"}],"../node_modules/optimism/lib/context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Slot", {
  enumerable: true,
  get: function () {
    return _context.Slot;
  }
});
Object.defineProperty(exports, "asyncFromGen", {
  enumerable: true,
  get: function () {
    return _context.asyncFromGen;
  }
});
Object.defineProperty(exports, "bindContext", {
  enumerable: true,
  get: function () {
    return _context.bind;
  }
});
Object.defineProperty(exports, "noContext", {
  enumerable: true,
  get: function () {
    return _context.noContext;
  }
});
exports.nonReactive = nonReactive;
exports.parentEntrySlot = void 0;
Object.defineProperty(exports, "setTimeout", {
  enumerable: true,
  get: function () {
    return _context.setTimeout;
  }
});
var _context = require("@wry/context");
const parentEntrySlot = exports.parentEntrySlot = new _context.Slot();
function nonReactive(fn) {
  return parentEntrySlot.withValue(void 0, fn);
}
},{"@wry/context":"../node_modules/@wry/context/lib/index.js"}],"../node_modules/optimism/lib/helpers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasOwnProperty = exports.arrayFromSet = void 0;
exports.maybeUnsubscribe = maybeUnsubscribe;
const {
  hasOwnProperty
} = Object.prototype;
exports.hasOwnProperty = hasOwnProperty;
const arrayFromSet = exports.arrayFromSet = Array.from || function (set) {
  const array = [];
  set.forEach(item => array.push(item));
  return array;
};
function maybeUnsubscribe(entryOrDep) {
  const {
    unsubscribe
  } = entryOrDep;
  if (typeof unsubscribe === "function") {
    entryOrDep.unsubscribe = void 0;
    unsubscribe();
  }
}
},{}],"../node_modules/optimism/lib/entry.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Entry = void 0;
var _context = require("./context.js");
var _helpers = require("./helpers.js");
const emptySetPool = [];
const POOL_TARGET_SIZE = 100;
// Since this package might be used browsers, we should avoid using the
// Node built-in assert module.
function assert(condition, optionalMessage) {
  if (!condition) {
    throw new Error(optionalMessage || "assertion failure");
  }
}
function valueIs(a, b) {
  const len = a.length;
  return (
    // Unknown values are not equal to each other.
    len > 0 &&
    // Both values must be ordinary (or both exceptional) to be equal.
    len === b.length &&
    // The underlying value or exception must be the same.
    a[len - 1] === b[len - 1]
  );
}
function valueGet(value) {
  switch (value.length) {
    case 0:
      throw new Error("unknown value");
    case 1:
      return value[0];
    case 2:
      throw value[1];
  }
}
function valueCopy(value) {
  return value.slice(0);
}
class Entry {
  constructor(fn) {
    this.fn = fn;
    this.parents = new Set();
    this.childValues = new Map();
    // When this Entry has children that are dirty, this property becomes
    // a Set containing other Entry objects, borrowed from emptySetPool.
    // When the set becomes empty, it gets recycled back to emptySetPool.
    this.dirtyChildren = null;
    this.dirty = true;
    this.recomputing = false;
    this.value = [];
    this.deps = null;
    ++Entry.count;
  }
  peek() {
    if (this.value.length === 1 && !mightBeDirty(this)) {
      rememberParent(this);
      return this.value[0];
    }
  }
  // This is the most important method of the Entry API, because it
  // determines whether the cached this.value can be returned immediately,
  // or must be recomputed. The overall performance of the caching system
  // depends on the truth of the following observations: (1) this.dirty is
  // usually false, (2) this.dirtyChildren is usually null/empty, and thus
  // (3) valueGet(this.value) is usually returned without recomputation.
  recompute(args) {
    assert(!this.recomputing, "already recomputing");
    rememberParent(this);
    return mightBeDirty(this) ? reallyRecompute(this, args) : valueGet(this.value);
  }
  setDirty() {
    if (this.dirty) return;
    this.dirty = true;
    reportDirty(this);
    // We can go ahead and unsubscribe here, since any further dirty
    // notifications we receive will be redundant, and unsubscribing may
    // free up some resources, e.g. file watchers.
    (0, _helpers.maybeUnsubscribe)(this);
  }
  dispose() {
    this.setDirty();
    // Sever any dependency relationships with our own children, so those
    // children don't retain this parent Entry in their child.parents sets,
    // thereby preventing it from being fully garbage collected.
    forgetChildren(this);
    // Because this entry has been kicked out of the cache (in index.js),
    // we've lost the ability to find out if/when this entry becomes dirty,
    // whether that happens through a subscription, because of a direct call
    // to entry.setDirty(), or because one of its children becomes dirty.
    // Because of this loss of future information, we have to assume the
    // worst (that this entry might have become dirty very soon), so we must
    // immediately mark this entry's parents as dirty. Normally we could
    // just call entry.setDirty() rather than calling parent.setDirty() for
    // each parent, but that would leave this entry in parent.childValues
    // and parent.dirtyChildren, which would prevent the child from being
    // truly forgotten.
    eachParent(this, (parent, child) => {
      parent.setDirty();
      forgetChild(parent, this);
    });
  }
  forget() {
    // The code that creates Entry objects in index.ts will replace this method
    // with one that actually removes the Entry from the cache, which will also
    // trigger the entry.dispose method.
    this.dispose();
  }
  dependOn(dep) {
    dep.add(this);
    if (!this.deps) {
      this.deps = emptySetPool.pop() || new Set();
    }
    this.deps.add(dep);
  }
  forgetDeps() {
    if (this.deps) {
      (0, _helpers.arrayFromSet)(this.deps).forEach(dep => dep.delete(this));
      this.deps.clear();
      emptySetPool.push(this.deps);
      this.deps = null;
    }
  }
}
exports.Entry = Entry;
Entry.count = 0;
function rememberParent(child) {
  const parent = _context.parentEntrySlot.getValue();
  if (parent) {
    child.parents.add(parent);
    if (!parent.childValues.has(child)) {
      parent.childValues.set(child, []);
    }
    if (mightBeDirty(child)) {
      reportDirtyChild(parent, child);
    } else {
      reportCleanChild(parent, child);
    }
    return parent;
  }
}
function reallyRecompute(entry, args) {
  forgetChildren(entry);
  // Set entry as the parent entry while calling recomputeNewValue(entry).
  _context.parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);
  if (maybeSubscribe(entry, args)) {
    // If we successfully recomputed entry.value and did not fail to
    // (re)subscribe, then this Entry is no longer explicitly dirty.
    setClean(entry);
  }
  return valueGet(entry.value);
}
function recomputeNewValue(entry, args) {
  entry.recomputing = true;
  const {
    normalizeResult
  } = entry;
  let oldValueCopy;
  if (normalizeResult && entry.value.length === 1) {
    oldValueCopy = valueCopy(entry.value);
  }
  // Make entry.value an empty array, representing an unknown value.
  entry.value.length = 0;
  try {
    // If entry.fn succeeds, entry.value will become a normal Value.
    entry.value[0] = entry.fn.apply(null, args);
    // If we have a viable oldValueCopy to compare with the (successfully
    // recomputed) new entry.value, and they are not already === identical, give
    // normalizeResult a chance to pick/choose/reuse parts of oldValueCopy[0]
    // and/or entry.value[0] to determine the final cached entry.value.
    if (normalizeResult && oldValueCopy && !valueIs(oldValueCopy, entry.value)) {
      try {
        entry.value[0] = normalizeResult(entry.value[0], oldValueCopy[0]);
      } catch (_a) {
        // If normalizeResult throws, just use the newer value, rather than
        // saving the exception as entry.value[1].
      }
    }
  } catch (e) {
    // If entry.fn throws, entry.value will hold that exception.
    entry.value[1] = e;
  }
  // Either way, this line is always reached.
  entry.recomputing = false;
}
function mightBeDirty(entry) {
  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);
}
function setClean(entry) {
  entry.dirty = false;
  if (mightBeDirty(entry)) {
    // This Entry may still have dirty children, in which case we can't
    // let our parents know we're clean just yet.
    return;
  }
  reportClean(entry);
}
function reportDirty(child) {
  eachParent(child, reportDirtyChild);
}
function reportClean(child) {
  eachParent(child, reportCleanChild);
}
function eachParent(child, callback) {
  const parentCount = child.parents.size;
  if (parentCount) {
    const parents = (0, _helpers.arrayFromSet)(child.parents);
    for (let i = 0; i < parentCount; ++i) {
      callback(parents[i], child);
    }
  }
}
// Let a parent Entry know that one of its children may be dirty.
function reportDirtyChild(parent, child) {
  // Must have called rememberParent(child) before calling
  // reportDirtyChild(parent, child).
  assert(parent.childValues.has(child));
  assert(mightBeDirty(child));
  const parentWasClean = !mightBeDirty(parent);
  if (!parent.dirtyChildren) {
    parent.dirtyChildren = emptySetPool.pop() || new Set();
  } else if (parent.dirtyChildren.has(child)) {
    // If we already know this child is dirty, then we must have already
    // informed our own parents that we are dirty, so we can terminate
    // the recursion early.
    return;
  }
  parent.dirtyChildren.add(child);
  // If parent was clean before, it just became (possibly) dirty (according to
  // mightBeDirty), since we just added child to parent.dirtyChildren.
  if (parentWasClean) {
    reportDirty(parent);
  }
}
// Let a parent Entry know that one of its children is no longer dirty.
function reportCleanChild(parent, child) {
  // Must have called rememberChild(child) before calling
  // reportCleanChild(parent, child).
  assert(parent.childValues.has(child));
  assert(!mightBeDirty(child));
  const childValue = parent.childValues.get(child);
  if (childValue.length === 0) {
    parent.childValues.set(child, valueCopy(child.value));
  } else if (!valueIs(childValue, child.value)) {
    parent.setDirty();
  }
  removeDirtyChild(parent, child);
  if (mightBeDirty(parent)) {
    return;
  }
  reportClean(parent);
}
function removeDirtyChild(parent, child) {
  const dc = parent.dirtyChildren;
  if (dc) {
    dc.delete(child);
    if (dc.size === 0) {
      if (emptySetPool.length < POOL_TARGET_SIZE) {
        emptySetPool.push(dc);
      }
      parent.dirtyChildren = null;
    }
  }
}
// Removes all children from this entry and returns an array of the
// removed children.
function forgetChildren(parent) {
  if (parent.childValues.size > 0) {
    parent.childValues.forEach((_value, child) => {
      forgetChild(parent, child);
    });
  }
  // Remove this parent Entry from any sets to which it was added by the
  // addToSet method.
  parent.forgetDeps();
  // After we forget all our children, this.dirtyChildren must be empty
  // and therefore must have been reset to null.
  assert(parent.dirtyChildren === null);
}
function forgetChild(parent, child) {
  child.parents.delete(parent);
  parent.childValues.delete(child);
  removeDirtyChild(parent, child);
}
function maybeSubscribe(entry, args) {
  if (typeof entry.subscribe === "function") {
    try {
      (0, _helpers.maybeUnsubscribe)(entry); // Prevent double subscriptions.
      entry.unsubscribe = entry.subscribe.apply(null, args);
    } catch (e) {
      // If this Entry has a subscribe function and it threw an exception
      // (or an unsubscribe function it previously returned now throws),
      // return false to indicate that we were not able to subscribe (or
      // unsubscribe), and this Entry should remain dirty.
      entry.setDirty();
      return false;
    }
  }
  // Returning true indicates either that there was no entry.subscribe
  // function or that it succeeded.
  return true;
}
},{"./context.js":"../node_modules/optimism/lib/context.js","./helpers.js":"../node_modules/optimism/lib/helpers.js"}],"../node_modules/optimism/lib/dep.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dep = dep;
var _context = require("./context.js");
var _helpers = require("./helpers.js");
const EntryMethods = {
  setDirty: true,
  dispose: true,
  forget: true // Fully remove parent Entry from LRU cache and computation graph
};
function dep(options) {
  const depsByKey = new Map();
  const subscribe = options && options.subscribe;
  function depend(key) {
    const parent = _context.parentEntrySlot.getValue();
    if (parent) {
      let dep = depsByKey.get(key);
      if (!dep) {
        depsByKey.set(key, dep = new Set());
      }
      parent.dependOn(dep);
      if (typeof subscribe === "function") {
        (0, _helpers.maybeUnsubscribe)(dep);
        dep.unsubscribe = subscribe(key);
      }
    }
  }
  depend.dirty = function dirty(key, entryMethodName) {
    const dep = depsByKey.get(key);
    if (dep) {
      const m = entryMethodName && _helpers.hasOwnProperty.call(EntryMethods, entryMethodName) ? entryMethodName : "setDirty";
      // We have to use arrayFromSet(dep).forEach instead of dep.forEach,
      // because modifying a Set while iterating over it can cause elements in
      // the Set to be removed from the Set before they've been iterated over.
      (0, _helpers.arrayFromSet)(dep).forEach(entry => entry[m]());
      depsByKey.delete(key);
      (0, _helpers.maybeUnsubscribe)(dep);
    }
  };
  return depend;
}
},{"./context.js":"../node_modules/optimism/lib/context.js","./helpers.js":"../node_modules/optimism/lib/helpers.js"}],"../node_modules/optimism/lib/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "KeyTrie", {
  enumerable: true,
  get: function () {
    return _trie.Trie;
  }
});
Object.defineProperty(exports, "Slot", {
  enumerable: true,
  get: function () {
    return _context.Slot;
  }
});
Object.defineProperty(exports, "asyncFromGen", {
  enumerable: true,
  get: function () {
    return _context.asyncFromGen;
  }
});
Object.defineProperty(exports, "bindContext", {
  enumerable: true,
  get: function () {
    return _context.bindContext;
  }
});
exports.defaultMakeCacheKey = defaultMakeCacheKey;
Object.defineProperty(exports, "dep", {
  enumerable: true,
  get: function () {
    return _dep.dep;
  }
});
Object.defineProperty(exports, "noContext", {
  enumerable: true,
  get: function () {
    return _context.noContext;
  }
});
Object.defineProperty(exports, "nonReactive", {
  enumerable: true,
  get: function () {
    return _context.nonReactive;
  }
});
Object.defineProperty(exports, "setTimeout", {
  enumerable: true,
  get: function () {
    return _context.setTimeout;
  }
});
exports.wrap = wrap;
var _trie = require("@wry/trie");
var _caches = require("@wry/caches");
var _entry = require("./entry.js");
var _context = require("./context.js");
var _dep = require("./dep.js");
// These helper functions are important for making optimism work with
// asynchronous code. In order to register parent-child dependencies,
// optimism needs to know about any currently active parent computations.
// In ordinary synchronous code, the parent context is implicit in the
// execution stack, but asynchronous code requires some extra guidance in
// order to propagate context from one async task segment to the next.

// A lighter-weight dependency, similar to OptimisticWrapperFunction, except
// with only one argument, no makeCacheKey, no wrapped function to recompute,
// and no result value. Useful for representing dependency leaves in the graph
// of computation. Subscriptions are supported.

// The defaultMakeCacheKey function is remarkably powerful, because it gives
// a unique object for any shallow-identical list of arguments. If you need
// to implement a custom makeCacheKey function, you may find it helpful to
// delegate the final work to defaultMakeCacheKey, which is why we export it
// here. However, you may want to avoid defaultMakeCacheKey if your runtime
// does not support WeakMap, or you have the ability to return a string key.
// In those cases, just write your own custom makeCacheKey functions.
let defaultKeyTrie;
function defaultMakeCacheKey(...args) {
  const trie = defaultKeyTrie || (defaultKeyTrie = new _trie.Trie(typeof WeakMap === "function"));
  return trie.lookupArray(args);
}
// If you're paranoid about memory leaks, or you want to avoid using WeakMap
// under the hood, but you still need the behavior of defaultMakeCacheKey,
// import this constructor to create your own tries.

;
const caches = new Set();
function wrap(originalFunction, {
  max = Math.pow(2, 16),
  keyArgs,
  makeCacheKey = defaultMakeCacheKey,
  normalizeResult,
  subscribe,
  cache: cacheOption = _caches.StrongCache
} = Object.create(null)) {
  const cache = typeof cacheOption === "function" ? new cacheOption(max, entry => entry.dispose()) : cacheOption;
  const optimistic = function () {
    const key = makeCacheKey.apply(null, keyArgs ? keyArgs.apply(null, arguments) : arguments);
    if (key === void 0) {
      return originalFunction.apply(null, arguments);
    }
    let entry = cache.get(key);
    if (!entry) {
      cache.set(key, entry = new _entry.Entry(originalFunction));
      entry.normalizeResult = normalizeResult;
      entry.subscribe = subscribe;
      // Give the Entry the ability to trigger cache.delete(key), even though
      // the Entry itself does not know about key or cache.
      entry.forget = () => cache.delete(key);
    }
    const value = entry.recompute(Array.prototype.slice.call(arguments));
    // Move this entry to the front of the least-recently used queue,
    // since we just finished computing its value.
    cache.set(key, entry);
    caches.add(cache);
    // Clean up any excess entries in the cache, but only if there is no
    // active parent entry, meaning we're not in the middle of a larger
    // computation that might be flummoxed by the cleaning.
    if (!_context.parentEntrySlot.hasValue()) {
      caches.forEach(cache => cache.clean());
      caches.clear();
    }
    return value;
  };
  Object.defineProperty(optimistic, "size", {
    get: () => cache.size,
    configurable: false,
    enumerable: false
  });
  Object.freeze(optimistic.options = {
    max,
    keyArgs,
    makeCacheKey,
    normalizeResult,
    subscribe,
    cache
  });
  function dirtyKey(key) {
    const entry = key && cache.get(key);
    if (entry) {
      entry.setDirty();
    }
  }
  optimistic.dirtyKey = dirtyKey;
  optimistic.dirty = function dirty() {
    dirtyKey(makeCacheKey.apply(null, arguments));
  };
  function peekKey(key) {
    const entry = key && cache.get(key);
    if (entry) {
      return entry.peek();
    }
  }
  optimistic.peekKey = peekKey;
  optimistic.peek = function peek() {
    return peekKey(makeCacheKey.apply(null, arguments));
  };
  function forgetKey(key) {
    return key ? cache.delete(key) : false;
  }
  optimistic.forgetKey = forgetKey;
  optimistic.forget = function forget() {
    return forgetKey(makeCacheKey.apply(null, arguments));
  };
  optimistic.makeCacheKey = makeCacheKey;
  optimistic.getKey = keyArgs ? function getKey() {
    return makeCacheKey.apply(null, keyArgs.apply(null, arguments));
  } : makeCacheKey;
  return Object.freeze(optimistic);
}
},{"@wry/trie":"../node_modules/optimism/node_modules/@wry/trie/lib/index.js","@wry/caches":"../node_modules/@wry/caches/lib/index.js","./entry.js":"../node_modules/optimism/lib/entry.js","./context.js":"../node_modules/optimism/lib/context.js","./dep.js":"../node_modules/optimism/lib/dep.js"}],"../node_modules/@apollo/client/cache/core/cache.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApolloCache = void 0;
var _tslib = require("tslib");
var _optimism = require("optimism");
var _index = require("../../utilities/index.js");
var ApolloCache = exports.ApolloCache = /** @class */function () {
  function ApolloCache() {
    this.assumeImmutableResults = false;
    // Make sure we compute the same (===) fragment query document every
    // time we receive the same fragment in readFragment.
    this.getFragmentDoc = (0, _optimism.wrap)(_index.getFragmentQueryDocument);
  }
  // Transactional API
  // The batch method is intended to replace/subsume both performTransaction
  // and recordOptimisticTransaction, but performTransaction came first, so we
  // provide a default batch implementation that's just another way of calling
  // performTransaction. Subclasses of ApolloCache (such as InMemoryCache) can
  // override the batch method to do more interesting things with its options.
  ApolloCache.prototype.batch = function (options) {
    var _this = this;
    var optimisticId = typeof options.optimistic === "string" ? options.optimistic : options.optimistic === false ? null : void 0;
    var updateResult;
    this.performTransaction(function () {
      return updateResult = options.update(_this);
    }, optimisticId);
    return updateResult;
  };
  ApolloCache.prototype.recordOptimisticTransaction = function (transaction, optimisticId) {
    this.performTransaction(transaction, optimisticId);
  };
  // Optional API
  // Called once per input document, allowing the cache to make static changes
  // to the query, such as adding __typename fields.
  ApolloCache.prototype.transformDocument = function (document) {
    return document;
  };
  // Called before each ApolloLink request, allowing the cache to make dynamic
  // changes to the query, such as filling in missing fragment definitions.
  ApolloCache.prototype.transformForLink = function (document) {
    return document;
  };
  ApolloCache.prototype.identify = function (object) {
    return;
  };
  ApolloCache.prototype.gc = function () {
    return [];
  };
  ApolloCache.prototype.modify = function (options) {
    return false;
  };
  // DataProxy API
  ApolloCache.prototype.readQuery = function (options, optimistic) {
    if (optimistic === void 0) {
      optimistic = !!options.optimistic;
    }
    return this.read((0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
      rootId: options.id || "ROOT_QUERY",
      optimistic: optimistic
    }));
  };
  ApolloCache.prototype.readFragment = function (options, optimistic) {
    if (optimistic === void 0) {
      optimistic = !!options.optimistic;
    }
    return this.read((0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
      query: this.getFragmentDoc(options.fragment, options.fragmentName),
      rootId: options.id,
      optimistic: optimistic
    }));
  };
  ApolloCache.prototype.writeQuery = function (_a) {
    var id = _a.id,
      data = _a.data,
      options = (0, _tslib.__rest)(_a, ["id", "data"]);
    return this.write(Object.assign(options, {
      dataId: id || "ROOT_QUERY",
      result: data
    }));
  };
  ApolloCache.prototype.writeFragment = function (_a) {
    var id = _a.id,
      data = _a.data,
      fragment = _a.fragment,
      fragmentName = _a.fragmentName,
      options = (0, _tslib.__rest)(_a, ["id", "data", "fragment", "fragmentName"]);
    return this.write(Object.assign(options, {
      query: this.getFragmentDoc(fragment, fragmentName),
      dataId: id,
      result: data
    }));
  };
  ApolloCache.prototype.updateQuery = function (options, update) {
    return this.batch({
      update: function (cache) {
        var value = cache.readQuery(options);
        var data = update(value);
        if (data === void 0 || data === null) return value;
        cache.writeQuery((0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
          data: data
        }));
        return data;
      }
    });
  };
  ApolloCache.prototype.updateFragment = function (options, update) {
    return this.batch({
      update: function (cache) {
        var value = cache.readFragment(options);
        var data = update(value);
        if (data === void 0 || data === null) return value;
        cache.writeFragment((0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
          data: data
        }));
        return data;
      }
    });
  };
  return ApolloCache;
}();
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","optimism":"../node_modules/optimism/lib/index.js","../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js"}],"../node_modules/@apollo/client/cache/core/types/Cache.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Cache = void 0;
var Cache;
(function (Cache) {})(Cache || (exports.Cache = Cache = {}));
},{}],"../node_modules/@apollo/client/cache/core/types/common.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MissingFieldError = void 0;
var _tslib = require("tslib");
var MissingFieldError = exports.MissingFieldError = /** @class */function (_super) {
  (0, _tslib.__extends)(MissingFieldError, _super);
  function MissingFieldError(message, path, query, variables) {
    var _a;
    // 'Error' breaks prototype chain here
    var _this = _super.call(this, message) || this;
    _this.message = message;
    _this.path = path;
    _this.query = query;
    _this.variables = variables;
    if (Array.isArray(_this.path)) {
      _this.missing = _this.message;
      for (var i = _this.path.length - 1; i >= 0; --i) {
        _this.missing = (_a = {}, _a[_this.path[i]] = _this.missing, _a);
      }
    } else {
      _this.missing = _this.path;
    }
    // We're not using `Object.setPrototypeOf` here as it isn't fully supported
    // on Android (see issue #3236).
    _this.__proto__ = MissingFieldError.prototype;
    return _this;
  }
  return MissingFieldError;
}(Error);
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js"}],"../node_modules/@apollo/client/cache/inmemory/helpers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TypeOrFieldNameRegExp = void 0;
exports.defaultDataIdFromObject = defaultDataIdFromObject;
exports.extractFragmentContext = extractFragmentContext;
exports.fieldNameFromStoreName = fieldNameFromStoreName;
exports.getTypenameFromStoreObject = getTypenameFromStoreObject;
exports.hasOwn = void 0;
Object.defineProperty(exports, "isArray", {
  enumerable: true,
  get: function () {
    return _index.isArray;
  }
});
exports.isNullish = isNullish;
exports.makeProcessedFieldsMerger = makeProcessedFieldsMerger;
exports.normalizeConfig = normalizeConfig;
exports.selectionSetMatchesResult = selectionSetMatchesResult;
exports.shouldCanonizeResults = shouldCanonizeResults;
exports.storeValueIsStoreObject = storeValueIsStoreObject;
var _index = require("../../utilities/index.js");
var hasOwn = exports.hasOwn = Object.prototype.hasOwnProperty;
function isNullish(value) {
  return value === null || value === void 0;
}
function defaultDataIdFromObject(_a, context) {
  var __typename = _a.__typename,
    id = _a.id,
    _id = _a._id;
  if (typeof __typename === "string") {
    if (context) {
      context.keyObject = !isNullish(id) ? {
        id: id
      } : !isNullish(_id) ? {
        _id: _id
      } : void 0;
    }
    // If there is no object.id, fall back to object._id.
    if (isNullish(id) && !isNullish(_id)) {
      id = _id;
    }
    if (!isNullish(id)) {
      return "".concat(__typename, ":").concat(typeof id === "number" || typeof id === "string" ? id : JSON.stringify(id));
    }
  }
}
var defaultConfig = {
  dataIdFromObject: defaultDataIdFromObject,
  addTypename: true,
  resultCaching: true,
  // Thanks to the shouldCanonizeResults helper, this should be the only line
  // you have to change to reenable canonization by default in the future.
  canonizeResults: false
};
function normalizeConfig(config) {
  return (0, _index.compact)(defaultConfig, config);
}
function shouldCanonizeResults(config) {
  var value = config.canonizeResults;
  return value === void 0 ? defaultConfig.canonizeResults : value;
}
function getTypenameFromStoreObject(store, objectOrReference) {
  return (0, _index.isReference)(objectOrReference) ? store.get(objectOrReference.__ref, "__typename") : objectOrReference && objectOrReference.__typename;
}
var TypeOrFieldNameRegExp = exports.TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;
function fieldNameFromStoreName(storeFieldName) {
  var match = storeFieldName.match(TypeOrFieldNameRegExp);
  return match ? match[0] : storeFieldName;
}
function selectionSetMatchesResult(selectionSet, result, variables) {
  if ((0, _index.isNonNullObject)(result)) {
    return (0, _index.isArray)(result) ? result.every(function (item) {
      return selectionSetMatchesResult(selectionSet, item, variables);
    }) : selectionSet.selections.every(function (field) {
      if ((0, _index.isField)(field) && (0, _index.shouldInclude)(field, variables)) {
        var key = (0, _index.resultKeyNameFromField)(field);
        return hasOwn.call(result, key) && (!field.selectionSet || selectionSetMatchesResult(field.selectionSet, result[key], variables));
      }
      // If the selection has been skipped with @skip(true) or
      // @include(false), it should not count against the matching. If
      // the selection is not a field, it must be a fragment (inline or
      // named). We will determine if selectionSetMatchesResult for that
      // fragment when we get to it, so for now we return true.
      return true;
    });
  }
  return false;
}
function storeValueIsStoreObject(value) {
  return (0, _index.isNonNullObject)(value) && !(0, _index.isReference)(value) && !(0, _index.isArray)(value);
}
function makeProcessedFieldsMerger() {
  return new _index.DeepMerger();
}
function extractFragmentContext(document, fragments) {
  // FragmentMap consisting only of fragments defined directly in document, not
  // including other fragments registered in the FragmentRegistry.
  var fragmentMap = (0, _index.createFragmentMap)((0, _index.getFragmentDefinitions)(document));
  return {
    fragmentMap: fragmentMap,
    lookupFragment: function (name) {
      var def = fragmentMap[name];
      if (!def && fragments) {
        def = fragments.lookup(name);
      }
      return def || null;
    }
  };
}
},{"../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js"}],"../node_modules/@apollo/client/cache/inmemory/entityStore.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EntityStore = void 0;
exports.maybeDependOnExistenceOfEntity = maybeDependOnExistenceOfEntity;
exports.supportsResultCaching = supportsResultCaching;
var _tslib = require("tslib");
var _index = require("../../utilities/globals/index.js");
var _optimism = require("optimism");
var _equality = require("@wry/equality");
var _trie = require("@wry/trie");
var _index2 = require("../../utilities/index.js");
var _helpers = require("./helpers.js");
var DELETE = Object.create(null);
var delModifier = function () {
  return DELETE;
};
var INVALIDATE = Object.create(null);
var EntityStore = exports.EntityStore = /** @class */function () {
  function EntityStore(policies, group) {
    var _this = this;
    this.policies = policies;
    this.group = group;
    this.data = Object.create(null);
    // Maps root entity IDs to the number of times they have been retained, minus
    // the number of times they have been released. Retained entities keep other
    // entities they reference (even indirectly) from being garbage collected.
    this.rootIds = Object.create(null);
    // Lazily tracks { __ref: <dataId> } strings contained by this.data[dataId].
    this.refs = Object.create(null);
    // Bound function that can be passed around to provide easy access to fields
    // of Reference objects as well as ordinary objects.
    this.getFieldValue = function (objectOrReference, storeFieldName) {
      return (0, _index2.maybeDeepFreeze)((0, _index2.isReference)(objectOrReference) ? _this.get(objectOrReference.__ref, storeFieldName) : objectOrReference && objectOrReference[storeFieldName]);
    };
    // Returns true for non-normalized StoreObjects and non-dangling
    // References, indicating that readField(name, objOrRef) has a chance of
    // working. Useful for filtering out dangling references from lists.
    this.canRead = function (objOrRef) {
      return (0, _index2.isReference)(objOrRef) ? _this.has(objOrRef.__ref) : typeof objOrRef === "object";
    };
    // Bound function that converts an id or an object with a __typename and
    // primary key fields to a Reference object. If called with a Reference object,
    // that same Reference object is returned. Pass true for mergeIntoStore to persist
    // an object into the store.
    this.toReference = function (objOrIdOrRef, mergeIntoStore) {
      if (typeof objOrIdOrRef === "string") {
        return (0, _index2.makeReference)(objOrIdOrRef);
      }
      if ((0, _index2.isReference)(objOrIdOrRef)) {
        return objOrIdOrRef;
      }
      var id = _this.policies.identify(objOrIdOrRef)[0];
      if (id) {
        var ref = (0, _index2.makeReference)(id);
        if (mergeIntoStore) {
          _this.merge(id, objOrIdOrRef);
        }
        return ref;
      }
    };
  }
  // Although the EntityStore class is abstract, it contains concrete
  // implementations of the various NormalizedCache interface methods that
  // are inherited by the Root and Layer subclasses.
  EntityStore.prototype.toObject = function () {
    return (0, _tslib.__assign)({}, this.data);
  };
  EntityStore.prototype.has = function (dataId) {
    return this.lookup(dataId, true) !== void 0;
  };
  EntityStore.prototype.get = function (dataId, fieldName) {
    this.group.depend(dataId, fieldName);
    if (_helpers.hasOwn.call(this.data, dataId)) {
      var storeObject = this.data[dataId];
      if (storeObject && _helpers.hasOwn.call(storeObject, fieldName)) {
        return storeObject[fieldName];
      }
    }
    if (fieldName === "__typename" && _helpers.hasOwn.call(this.policies.rootTypenamesById, dataId)) {
      return this.policies.rootTypenamesById[dataId];
    }
    if (this instanceof Layer) {
      return this.parent.get(dataId, fieldName);
    }
  };
  EntityStore.prototype.lookup = function (dataId, dependOnExistence) {
    // The has method (above) calls lookup with dependOnExistence = true, so
    // that it can later be invalidated when we add or remove a StoreObject for
    // this dataId. Any consumer who cares about the contents of the StoreObject
    // should not rely on this dependency, since the contents could change
    // without the object being added or removed.
    if (dependOnExistence) this.group.depend(dataId, "__exists");
    if (_helpers.hasOwn.call(this.data, dataId)) {
      return this.data[dataId];
    }
    if (this instanceof Layer) {
      return this.parent.lookup(dataId, dependOnExistence);
    }
    if (this.policies.rootTypenamesById[dataId]) {
      return Object.create(null);
    }
  };
  EntityStore.prototype.merge = function (older, newer) {
    var _this = this;
    var dataId;
    // Convert unexpected references to ID strings.
    if ((0, _index2.isReference)(older)) older = older.__ref;
    if ((0, _index2.isReference)(newer)) newer = newer.__ref;
    var existing = typeof older === "string" ? this.lookup(dataId = older) : older;
    var incoming = typeof newer === "string" ? this.lookup(dataId = newer) : newer;
    // If newer was a string ID, but that ID was not defined in this store,
    // then there are no fields to be merged, so we're done.
    if (!incoming) return;
    (0, _index.invariant)(typeof dataId === "string", 1);
    var merged = new _index2.DeepMerger(storeObjectReconciler).merge(existing, incoming);
    // Even if merged === existing, existing may have come from a lower
    // layer, so we always need to set this.data[dataId] on this level.
    this.data[dataId] = merged;
    if (merged !== existing) {
      delete this.refs[dataId];
      if (this.group.caching) {
        var fieldsToDirty_1 = Object.create(null);
        // If we added a new StoreObject where there was previously none, dirty
        // anything that depended on the existence of this dataId, such as the
        // EntityStore#has method.
        if (!existing) fieldsToDirty_1.__exists = 1;
        // Now invalidate dependents who called getFieldValue for any fields
        // that are changing as a result of this merge.
        Object.keys(incoming).forEach(function (storeFieldName) {
          if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {
            // Always dirty the full storeFieldName, which may include
            // serialized arguments following the fieldName prefix.
            fieldsToDirty_1[storeFieldName] = 1;
            // Also dirty fieldNameFromStoreName(storeFieldName) if it's
            // different from storeFieldName and this field does not have
            // keyArgs configured, because that means the cache can't make
            // any assumptions about how field values with the same field
            // name but different arguments might be interrelated, so it
            // must err on the side of invalidating all field values that
            // share the same short fieldName, regardless of arguments.
            var fieldName = (0, _helpers.fieldNameFromStoreName)(storeFieldName);
            if (fieldName !== storeFieldName && !_this.policies.hasKeyArgs(merged.__typename, fieldName)) {
              fieldsToDirty_1[fieldName] = 1;
            }
            // If merged[storeFieldName] has become undefined, and this is the
            // Root layer, actually delete the property from the merged object,
            // which is guaranteed to have been created fresh in this method.
            if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {
              delete merged[storeFieldName];
            }
          }
        });
        if (fieldsToDirty_1.__typename && !(existing && existing.__typename) &&
        // Since we return default root __typename strings
        // automatically from store.get, we don't need to dirty the
        // ROOT_QUERY.__typename field if merged.__typename is equal
        // to the default string (usually "Query").
        this.policies.rootTypenamesById[dataId] === merged.__typename) {
          delete fieldsToDirty_1.__typename;
        }
        Object.keys(fieldsToDirty_1).forEach(function (fieldName) {
          return _this.group.dirty(dataId, fieldName);
        });
      }
    }
  };
  EntityStore.prototype.modify = function (dataId, fields) {
    var _this = this;
    var storeObject = this.lookup(dataId);
    if (storeObject) {
      var changedFields_1 = Object.create(null);
      var needToMerge_1 = false;
      var allDeleted_1 = true;
      var sharedDetails_1 = {
        DELETE: DELETE,
        INVALIDATE: INVALIDATE,
        isReference: _index2.isReference,
        toReference: this.toReference,
        canRead: this.canRead,
        readField: function (fieldNameOrOptions, from) {
          return _this.policies.readField(typeof fieldNameOrOptions === "string" ? {
            fieldName: fieldNameOrOptions,
            from: from || (0, _index2.makeReference)(dataId)
          } : fieldNameOrOptions, {
            store: _this
          });
        }
      };
      Object.keys(storeObject).forEach(function (storeFieldName) {
        var fieldName = (0, _helpers.fieldNameFromStoreName)(storeFieldName);
        var fieldValue = storeObject[storeFieldName];
        if (fieldValue === void 0) return;
        var modify = typeof fields === "function" ? fields : fields[storeFieldName] || fields[fieldName];
        if (modify) {
          var newValue = modify === delModifier ? DELETE : modify((0, _index2.maybeDeepFreeze)(fieldValue), (0, _tslib.__assign)((0, _tslib.__assign)({}, sharedDetails_1), {
            fieldName: fieldName,
            storeFieldName: storeFieldName,
            storage: _this.getStorage(dataId, storeFieldName)
          }));
          if (newValue === INVALIDATE) {
            _this.group.dirty(dataId, storeFieldName);
          } else {
            if (newValue === DELETE) newValue = void 0;
            if (newValue !== fieldValue) {
              changedFields_1[storeFieldName] = newValue;
              needToMerge_1 = true;
              fieldValue = newValue;
              if (globalThis.__DEV__ !== false) {
                var checkReference = function (ref) {
                  if (_this.lookup(ref.__ref) === undefined) {
                    globalThis.__DEV__ !== false && _index.invariant.warn(2, ref);
                    return true;
                  }
                };
                if ((0, _index2.isReference)(newValue)) {
                  checkReference(newValue);
                } else if (Array.isArray(newValue)) {
                  // Warn about writing "mixed" arrays of Reference and non-Reference objects
                  var seenReference = false;
                  var someNonReference = void 0;
                  for (var _i = 0, newValue_1 = newValue; _i < newValue_1.length; _i++) {
                    var value = newValue_1[_i];
                    if ((0, _index2.isReference)(value)) {
                      seenReference = true;
                      if (checkReference(value)) break;
                    } else {
                      // Do not warn on primitive values, since those could never be represented
                      // by a reference. This is a valid (albeit uncommon) use case.
                      if (typeof value === "object" && !!value) {
                        var id = _this.policies.identify(value)[0];
                        // check if object could even be referenced, otherwise we are not interested in it for this warning
                        if (id) {
                          someNonReference = value;
                        }
                      }
                    }
                    if (seenReference && someNonReference !== undefined) {
                      globalThis.__DEV__ !== false && _index.invariant.warn(3, someNonReference);
                      break;
                    }
                  }
                }
              }
            }
          }
        }
        if (fieldValue !== void 0) {
          allDeleted_1 = false;
        }
      });
      if (needToMerge_1) {
        this.merge(dataId, changedFields_1);
        if (allDeleted_1) {
          if (this instanceof Layer) {
            this.data[dataId] = void 0;
          } else {
            delete this.data[dataId];
          }
          this.group.dirty(dataId, "__exists");
        }
        return true;
      }
    }
    return false;
  };
  // If called with only one argument, removes the entire entity
  // identified by dataId. If called with a fieldName as well, removes all
  // fields of that entity whose names match fieldName according to the
  // fieldNameFromStoreName helper function. If called with a fieldName
  // and variables, removes all fields of that entity whose names match fieldName
  // and whose arguments when cached exactly match the variables passed.
  EntityStore.prototype.delete = function (dataId, fieldName, args) {
    var _a;
    var storeObject = this.lookup(dataId);
    if (storeObject) {
      var typename = this.getFieldValue(storeObject, "__typename");
      var storeFieldName = fieldName && args ? this.policies.getStoreFieldName({
        typename: typename,
        fieldName: fieldName,
        args: args
      }) : fieldName;
      return this.modify(dataId, storeFieldName ? (_a = {}, _a[storeFieldName] = delModifier, _a) : delModifier);
    }
    return false;
  };
  EntityStore.prototype.evict = function (options, limit) {
    var evicted = false;
    if (options.id) {
      if (_helpers.hasOwn.call(this.data, options.id)) {
        evicted = this.delete(options.id, options.fieldName, options.args);
      }
      if (this instanceof Layer && this !== limit) {
        evicted = this.parent.evict(options, limit) || evicted;
      }
      // Always invalidate the field to trigger rereading of watched
      // queries, even if no cache data was modified by the eviction,
      // because queries may depend on computed fields with custom read
      // functions, whose values are not stored in the EntityStore.
      if (options.fieldName || evicted) {
        this.group.dirty(options.id, options.fieldName || "__exists");
      }
    }
    return evicted;
  };
  EntityStore.prototype.clear = function () {
    this.replace(null);
  };
  EntityStore.prototype.extract = function () {
    var _this = this;
    var obj = this.toObject();
    var extraRootIds = [];
    this.getRootIdSet().forEach(function (id) {
      if (!_helpers.hasOwn.call(_this.policies.rootTypenamesById, id)) {
        extraRootIds.push(id);
      }
    });
    if (extraRootIds.length) {
      obj.__META = {
        extraRootIds: extraRootIds.sort()
      };
    }
    return obj;
  };
  EntityStore.prototype.replace = function (newData) {
    var _this = this;
    Object.keys(this.data).forEach(function (dataId) {
      if (!(newData && _helpers.hasOwn.call(newData, dataId))) {
        _this.delete(dataId);
      }
    });
    if (newData) {
      var __META = newData.__META,
        rest_1 = (0, _tslib.__rest)(newData, ["__META"]);
      Object.keys(rest_1).forEach(function (dataId) {
        _this.merge(dataId, rest_1[dataId]);
      });
      if (__META) {
        __META.extraRootIds.forEach(this.retain, this);
      }
    }
  };
  EntityStore.prototype.retain = function (rootId) {
    return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;
  };
  EntityStore.prototype.release = function (rootId) {
    if (this.rootIds[rootId] > 0) {
      var count = --this.rootIds[rootId];
      if (!count) delete this.rootIds[rootId];
      return count;
    }
    return 0;
  };
  // Return a Set<string> of all the ID strings that have been retained by
  // this layer/root *and* any layers/roots beneath it.
  EntityStore.prototype.getRootIdSet = function (ids) {
    if (ids === void 0) {
      ids = new Set();
    }
    Object.keys(this.rootIds).forEach(ids.add, ids);
    if (this instanceof Layer) {
      this.parent.getRootIdSet(ids);
    } else {
      // Official singleton IDs like ROOT_QUERY and ROOT_MUTATION are
      // always considered roots for garbage collection, regardless of
      // their retainment counts in this.rootIds.
      Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);
    }
    return ids;
  };
  // The goal of garbage collection is to remove IDs from the Root layer of the
  // store that are no longer reachable starting from any IDs that have been
  // explicitly retained (see retain and release, above). Returns an array of
  // dataId strings that were removed from the store.
  EntityStore.prototype.gc = function () {
    var _this = this;
    var ids = this.getRootIdSet();
    var snapshot = this.toObject();
    ids.forEach(function (id) {
      if (_helpers.hasOwn.call(snapshot, id)) {
        // Because we are iterating over an ECMAScript Set, the IDs we add here
        // will be visited in later iterations of the forEach loop only if they
        // were not previously contained by the Set.
        Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);
        // By removing IDs from the snapshot object here, we protect them from
        // getting removed from the root store layer below.
        delete snapshot[id];
      }
    });
    var idsToRemove = Object.keys(snapshot);
    if (idsToRemove.length) {
      var root_1 = this;
      while (root_1 instanceof Layer) root_1 = root_1.parent;
      idsToRemove.forEach(function (id) {
        return root_1.delete(id);
      });
    }
    return idsToRemove;
  };
  EntityStore.prototype.findChildRefIds = function (dataId) {
    if (!_helpers.hasOwn.call(this.refs, dataId)) {
      var found_1 = this.refs[dataId] = Object.create(null);
      var root = this.data[dataId];
      if (!root) return found_1;
      var workSet_1 = new Set([root]);
      // Within the store, only arrays and objects can contain child entity
      // references, so we can prune the traversal using this predicate:
      workSet_1.forEach(function (obj) {
        if ((0, _index2.isReference)(obj)) {
          found_1[obj.__ref] = true;
          // In rare cases, a { __ref } Reference object may have other fields.
          // This often indicates a mismerging of References with StoreObjects,
          // but garbage collection should not be fooled by a stray __ref
          // property in a StoreObject (ignoring all the other fields just
          // because the StoreObject looks like a Reference). To avoid this
          // premature termination of findChildRefIds recursion, we fall through
          // to the code below, which will handle any other properties of obj.
        }
        if ((0, _index2.isNonNullObject)(obj)) {
          Object.keys(obj).forEach(function (key) {
            var child = obj[key];
            // No need to add primitive values to the workSet, since they cannot
            // contain reference objects.
            if ((0, _index2.isNonNullObject)(child)) {
              workSet_1.add(child);
            }
          });
        }
      });
    }
    return this.refs[dataId];
  };
  EntityStore.prototype.makeCacheKey = function () {
    return this.group.keyMaker.lookupArray(arguments);
  };
  return EntityStore;
}();
// A single CacheGroup represents a set of one or more EntityStore objects,
// typically the Root store in a CacheGroup by itself, and all active Layer
// stores in a group together. A single EntityStore object belongs to only
// one CacheGroup, store.group. The CacheGroup is responsible for tracking
// dependencies, so store.group is helpful for generating unique keys for
// cached results that need to be invalidated when/if those dependencies
// change. If we used the EntityStore objects themselves as cache keys (that
// is, store rather than store.group), the cache would become unnecessarily
// fragmented by all the different Layer objects. Instead, the CacheGroup
// approach allows all optimistic Layer objects in the same linked list to
// belong to one CacheGroup, with the non-optimistic Root object belonging
// to another CacheGroup, allowing resultCaching dependencies to be tracked
// separately for optimistic and non-optimistic entity data.
var CacheGroup = /** @class */function () {
  function CacheGroup(caching, parent) {
    if (parent === void 0) {
      parent = null;
    }
    this.caching = caching;
    this.parent = parent;
    this.d = null;
    this.resetCaching();
  }
  CacheGroup.prototype.resetCaching = function () {
    this.d = this.caching ? (0, _optimism.dep)() : null;
    this.keyMaker = new _trie.Trie(_index2.canUseWeakMap);
  };
  CacheGroup.prototype.depend = function (dataId, storeFieldName) {
    if (this.d) {
      this.d(makeDepKey(dataId, storeFieldName));
      var fieldName = (0, _helpers.fieldNameFromStoreName)(storeFieldName);
      if (fieldName !== storeFieldName) {
        // Fields with arguments that contribute extra identifying
        // information to the fieldName (thus forming the storeFieldName)
        // depend not only on the full storeFieldName but also on the
        // short fieldName, so the field can be invalidated using either
        // level of specificity.
        this.d(makeDepKey(dataId, fieldName));
      }
      if (this.parent) {
        this.parent.depend(dataId, storeFieldName);
      }
    }
  };
  CacheGroup.prototype.dirty = function (dataId, storeFieldName) {
    if (this.d) {
      this.d.dirty(makeDepKey(dataId, storeFieldName),
      // When storeFieldName === "__exists", that means the entity identified
      // by dataId has either disappeared from the cache or was newly added,
      // so the result caching system would do well to "forget everything it
      // knows" about that object. To achieve that kind of invalidation, we
      // not only dirty the associated result cache entry, but also remove it
      // completely from the dependency graph. For the optimism implementation
      // details, see https://github.com/benjamn/optimism/pull/195.
      storeFieldName === "__exists" ? "forget" : "setDirty");
    }
  };
  return CacheGroup;
}();
function makeDepKey(dataId, storeFieldName) {
  // Since field names cannot have '#' characters in them, this method
  // of joining the field name and the ID should be unambiguous, and much
  // cheaper than JSON.stringify([dataId, fieldName]).
  return storeFieldName + "#" + dataId;
}
function maybeDependOnExistenceOfEntity(store, entityId) {
  if (supportsResultCaching(store)) {
    // We use this pseudo-field __exists elsewhere in the EntityStore code to
    // represent changes in the existence of the entity object identified by
    // entityId. This dependency gets reliably dirtied whenever an object with
    // this ID is deleted (or newly created) within this group, so any result
    // cache entries (for example, StoreReader#executeSelectionSet results) that
    // depend on __exists for this entityId will get dirtied as well, leading to
    // the eventual recomputation (instead of reuse) of those result objects the
    // next time someone reads them from the cache.
    store.group.depend(entityId, "__exists");
  }
}
(function (EntityStore) {
  // Refer to this class as EntityStore.Root outside this namespace.
  var Root = /** @class */function (_super) {
    (0, _tslib.__extends)(Root, _super);
    function Root(_a) {
      var policies = _a.policies,
        _b = _a.resultCaching,
        resultCaching = _b === void 0 ? true : _b,
        seed = _a.seed;
      var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;
      _this.stump = new Stump(_this);
      _this.storageTrie = new _trie.Trie(_index2.canUseWeakMap);
      if (seed) _this.replace(seed);
      return _this;
    }
    Root.prototype.addLayer = function (layerId, replay) {
      // Adding an optimistic Layer on top of the Root actually adds the Layer
      // on top of the Stump, so the Stump always comes between the Root and
      // any Layer objects that we've added.
      return this.stump.addLayer(layerId, replay);
    };
    Root.prototype.removeLayer = function () {
      // Never remove the root layer.
      return this;
    };
    Root.prototype.getStorage = function () {
      return this.storageTrie.lookupArray(arguments);
    };
    return Root;
  }(EntityStore);
  EntityStore.Root = Root;
})(EntityStore || (exports.EntityStore = EntityStore = {}));
// Not exported, since all Layer instances are created by the addLayer method
// of the EntityStore.Root class.
var Layer = /** @class */function (_super) {
  (0, _tslib.__extends)(Layer, _super);
  function Layer(id, parent, replay, group) {
    var _this = _super.call(this, parent.policies, group) || this;
    _this.id = id;
    _this.parent = parent;
    _this.replay = replay;
    _this.group = group;
    replay(_this);
    return _this;
  }
  Layer.prototype.addLayer = function (layerId, replay) {
    return new Layer(layerId, this, replay, this.group);
  };
  Layer.prototype.removeLayer = function (layerId) {
    var _this = this;
    // Remove all instances of the given id, not just the first one.
    var parent = this.parent.removeLayer(layerId);
    if (layerId === this.id) {
      if (this.group.caching) {
        // Dirty every ID we're removing. Technically we might be able to avoid
        // dirtying fields that have values in higher layers, but we don't have
        // easy access to higher layers here, and we're about to recreate those
        // layers anyway (see parent.addLayer below).
        Object.keys(this.data).forEach(function (dataId) {
          var ownStoreObject = _this.data[dataId];
          var parentStoreObject = parent["lookup"](dataId);
          if (!parentStoreObject) {
            // The StoreObject identified by dataId was defined in this layer
            // but will be undefined in the parent layer, so we can delete the
            // whole entity using this.delete(dataId). Since we're about to
            // throw this layer away, the only goal of this deletion is to dirty
            // the removed fields.
            _this.delete(dataId);
          } else if (!ownStoreObject) {
            // This layer had an entry for dataId but it was undefined, which
            // means the entity was deleted in this layer, and it's about to
            // become undeleted when we remove this layer, so we need to dirty
            // all fields that are about to be reexposed.
            _this.group.dirty(dataId, "__exists");
            Object.keys(parentStoreObject).forEach(function (storeFieldName) {
              _this.group.dirty(dataId, storeFieldName);
            });
          } else if (ownStoreObject !== parentStoreObject) {
            // If ownStoreObject is not exactly the same as parentStoreObject,
            // dirty any fields whose values will change as a result of this
            // removal.
            Object.keys(ownStoreObject).forEach(function (storeFieldName) {
              if (!(0, _equality.equal)(ownStoreObject[storeFieldName], parentStoreObject[storeFieldName])) {
                _this.group.dirty(dataId, storeFieldName);
              }
            });
          }
        });
      }
      return parent;
    }
    // No changes are necessary if the parent chain remains identical.
    if (parent === this.parent) return this;
    // Recreate this layer on top of the new parent.
    return parent.addLayer(this.id, this.replay);
  };
  Layer.prototype.toObject = function () {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, this.parent.toObject()), this.data);
  };
  Layer.prototype.findChildRefIds = function (dataId) {
    var fromParent = this.parent.findChildRefIds(dataId);
    return _helpers.hasOwn.call(this.data, dataId) ? (0, _tslib.__assign)((0, _tslib.__assign)({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;
  };
  Layer.prototype.getStorage = function () {
    var p = this.parent;
    while (p.parent) p = p.parent;
    return p.getStorage.apply(p,
    // @ts-expect-error
    arguments);
  };
  return Layer;
}(EntityStore);
// Represents a Layer permanently installed just above the Root, which allows
// reading optimistically (and registering optimistic dependencies) even when
// no optimistic layers are currently active. The stump.group CacheGroup object
// is shared by any/all Layer objects added on top of the Stump.
var Stump = /** @class */function (_super) {
  (0, _tslib.__extends)(Stump, _super);
  function Stump(root) {
    return _super.call(this, "EntityStore.Stump", root, function () {}, new CacheGroup(root.group.caching, root.group)) || this;
  }
  Stump.prototype.removeLayer = function () {
    // Never remove the Stump layer.
    return this;
  };
  Stump.prototype.merge = function (older, newer) {
    // We never want to write any data into the Stump, so we forward any merge
    // calls to the Root instead. Another option here would be to throw an
    // exception, but the toReference(object, true) function can sometimes
    // trigger Stump writes (which used to be Root writes, before the Stump
    // concept was introduced).
    return this.parent.merge(older, newer);
  };
  return Stump;
}(Layer);
function storeObjectReconciler(existingObject, incomingObject, property) {
  var existingValue = existingObject[property];
  var incomingValue = incomingObject[property];
  // Wherever there is a key collision, prefer the incoming value, unless
  // it is deeply equal to the existing value. It's worth checking deep
  // equality here (even though blindly returning incoming would be
  // logically correct) because preserving the referential identity of
  // existing data can prevent needless rereading and rerendering.
  return (0, _equality.equal)(existingValue, incomingValue) ? existingValue : incomingValue;
}
function supportsResultCaching(store) {
  // When result caching is disabled, store.depend will be null.
  return !!(store instanceof EntityStore && store.group.caching);
}
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","optimism":"../node_modules/optimism/lib/index.js","@wry/equality":"../node_modules/@wry/equality/lib/index.js","@wry/trie":"../node_modules/@wry/trie/lib/index.js","../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js","./helpers.js":"../node_modules/@apollo/client/cache/inmemory/helpers.js"}],"../node_modules/@apollo/client/cache/inmemory/fixPolyfills.js":[function(require,module,exports) {
"use strict";
// Most JavaScript environments do not need the workarounds implemented in
// fixPolyfills.native.ts, so importing fixPolyfills.ts merely imports
// this empty module, adding nothing to bundle sizes or execution times.
// When bundling for React Native, we substitute fixPolyfills.native.js
// for fixPolyfills.js (see the "react-native" section of package.json),
// to work around problems with Map and Set polyfills in older versions of
// React Native (which should have been fixed in react-native@0.59.0):
// https://github.com/apollographql/apollo-client/pull/5962

},{}],"../node_modules/@apollo/client/cache/inmemory/object-canon.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.canonicalStringify = exports.ObjectCanon = void 0;
var _tslib = require("tslib");
var _trie = require("@wry/trie");
var _index = require("../../utilities/index.js");
var _helpers = require("./helpers.js");
function shallowCopy(value) {
  if ((0, _index.isNonNullObject)(value)) {
    return (0, _helpers.isArray)(value) ? value.slice(0) : (0, _tslib.__assign)({
      __proto__: Object.getPrototypeOf(value)
    }, value);
  }
  return value;
}
// When programmers talk about the "canonical form" of an object, they
// usually have the following meaning in mind, which I've copied from
// https://en.wiktionary.org/wiki/canonical_form:
//
// 1. A standard or normal presentation of a mathematical entity [or
//    object]. A canonical form is an element of a set of representatives
//    of equivalence classes of forms such that there is a function or
//    procedure which projects every element of each equivalence class
//    onto that one element, the canonical form of that equivalence
//    class. The canonical form is expected to be simpler than the rest of
//    the forms in some way.
//
// That's a long-winded way of saying any two objects that have the same
// canonical form may be considered equivalent, even if they are !==,
// which usually means the objects are structurally equivalent (deeply
// equal), but don't necessarily use the same memory.
//
// Like a literary or musical canon, this ObjectCanon class represents a
// collection of unique canonical items (JavaScript objects), with the
// important property that canon.admit(a) === canon.admit(b) if a and b
// are deeply equal to each other. In terms of the definition above, the
// canon.admit method is the "function or procedure which projects every"
// object "onto that one element, the canonical form."
//
// In the worst case, the canonicalization process may involve looking at
// every property in the provided object tree, so it takes the same order
// of time as deep equality checking. Fortunately, already-canonicalized
// objects are returned immediately from canon.admit, so the presence of
// canonical subtrees tends to speed up canonicalization.
//
// Since consumers of canonical objects can check for deep equality in
// constant time, canonicalizing cache results can massively improve the
// performance of application code that skips re-rendering unchanged
// results, such as "pure" UI components in a framework like React.
//
// Of course, since canonical objects may be shared widely between
// unrelated consumers, it's important to think of them as immutable, even
// though they are not actually frozen with Object.freeze in production,
// due to the extra performance overhead that comes with frozen objects.
//
// Custom scalar objects whose internal class name is neither Array nor
// Object can be included safely in the admitted tree, but they will not
// be replaced with a canonical version (to put it another way, they are
// assumed to be canonical already).
//
// If we ignore custom objects, no detection of cycles or repeated object
// references is currently required by the StoreReader class, since
// GraphQL result objects are JSON-serializable trees (and thus contain
// neither cycles nor repeated subtrees), so we can avoid the complexity
// of keeping track of objects we've already seen during the recursion of
// the admit method.
//
// In the future, we may consider adding additional cases to the switch
// statement to handle other common object types, such as "[object Date]"
// objects, as needed.
var ObjectCanon = exports.ObjectCanon = /** @class */function () {
  function ObjectCanon() {
    // Set of all canonical objects this ObjectCanon has admitted, allowing
    // canon.admit to return previously-canonicalized objects immediately.
    this.known = new (_index.canUseWeakSet ? WeakSet : Set)();
    // Efficient storage/lookup structure for canonical objects.
    this.pool = new _trie.Trie(_index.canUseWeakMap);
    // Make the ObjectCanon assume this value has already been
    // canonicalized.
    this.passes = new WeakMap();
    // Arrays that contain the same elements in a different order can share
    // the same SortedKeysInfo object, to save memory.
    this.keysByJSON = new Map();
    // This has to come last because it depends on keysByJSON.
    this.empty = this.admit({});
  }
  ObjectCanon.prototype.isKnown = function (value) {
    return (0, _index.isNonNullObject)(value) && this.known.has(value);
  };
  ObjectCanon.prototype.pass = function (value) {
    if ((0, _index.isNonNullObject)(value)) {
      var copy = shallowCopy(value);
      this.passes.set(copy, value);
      return copy;
    }
    return value;
  };
  ObjectCanon.prototype.admit = function (value) {
    var _this = this;
    if ((0, _index.isNonNullObject)(value)) {
      var original = this.passes.get(value);
      if (original) return original;
      var proto = Object.getPrototypeOf(value);
      switch (proto) {
        case Array.prototype:
          {
            if (this.known.has(value)) return value;
            var array = value.map(this.admit, this);
            // Arrays are looked up in the Trie using their recursively
            // canonicalized elements, and the known version of the array is
            // preserved as node.array.
            var node = this.pool.lookupArray(array);
            if (!node.array) {
              this.known.add(node.array = array);
              // Since canonical arrays may be shared widely between
              // unrelated consumers, it's important to regard them as
              // immutable, even if they are not frozen in production.
              if (globalThis.__DEV__ !== false) {
                Object.freeze(array);
              }
            }
            return node.array;
          }
        case null:
        case Object.prototype:
          {
            if (this.known.has(value)) return value;
            var proto_1 = Object.getPrototypeOf(value);
            var array_1 = [proto_1];
            var keys = this.sortedKeys(value);
            array_1.push(keys.json);
            var firstValueIndex_1 = array_1.length;
            keys.sorted.forEach(function (key) {
              array_1.push(_this.admit(value[key]));
            });
            // Objects are looked up in the Trie by their prototype (which
            // is *not* recursively canonicalized), followed by a JSON
            // representation of their (sorted) keys, followed by the
            // sequence of recursively canonicalized values corresponding to
            // those keys. To keep the final results unambiguous with other
            // sequences (such as arrays that just happen to contain [proto,
            // keys.json, value1, value2, ...]), the known version of the
            // object is stored as node.object.
            var node = this.pool.lookupArray(array_1);
            if (!node.object) {
              var obj_1 = node.object = Object.create(proto_1);
              this.known.add(obj_1);
              keys.sorted.forEach(function (key, i) {
                obj_1[key] = array_1[firstValueIndex_1 + i];
              });
              // Since canonical objects may be shared widely between
              // unrelated consumers, it's important to regard them as
              // immutable, even if they are not frozen in production.
              if (globalThis.__DEV__ !== false) {
                Object.freeze(obj_1);
              }
            }
            return node.object;
          }
      }
    }
    return value;
  };
  // It's worthwhile to cache the sorting of arrays of strings, since the
  // same initial unsorted arrays tend to be encountered many times.
  // Fortunately, we can reuse the Trie machinery to look up the sorted
  // arrays in linear time (which is faster than sorting large arrays).
  ObjectCanon.prototype.sortedKeys = function (obj) {
    var keys = Object.keys(obj);
    var node = this.pool.lookupArray(keys);
    if (!node.keys) {
      keys.sort();
      var json = JSON.stringify(keys);
      if (!(node.keys = this.keysByJSON.get(json))) {
        this.keysByJSON.set(json, node.keys = {
          sorted: keys,
          json: json
        });
      }
    }
    return node.keys;
  };
  return ObjectCanon;
}();
// Since the keys of canonical objects are always created in lexicographically
// sorted order, we can use the ObjectCanon to implement a fast and stable
// version of JSON.stringify, which automatically sorts object keys.
var canonicalStringify = exports.canonicalStringify = Object.assign(function (value) {
  if ((0, _index.isNonNullObject)(value)) {
    if (stringifyCanon === void 0) {
      resetCanonicalStringify();
    }
    var canonical = stringifyCanon.admit(value);
    var json = stringifyCache.get(canonical);
    if (json === void 0) {
      stringifyCache.set(canonical, json = JSON.stringify(canonical));
    }
    return json;
  }
  return JSON.stringify(value);
}, {
  reset: resetCanonicalStringify
});
// Can be reset by calling canonicalStringify.reset().
var stringifyCanon;
var stringifyCache;
function resetCanonicalStringify() {
  stringifyCanon = new ObjectCanon();
  stringifyCache = new (_index.canUseWeakMap ? WeakMap : Map)();
}
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","@wry/trie":"../node_modules/@wry/trie/lib/index.js","../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js","./helpers.js":"../node_modules/@apollo/client/cache/inmemory/helpers.js"}],"../node_modules/@apollo/client/cache/inmemory/readFromStore.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StoreReader = void 0;
var _tslib = require("tslib");
var _index = require("../../utilities/globals/index.js");
var _graphql = require("graphql");
var _optimism = require("optimism");
var _index2 = require("../../utilities/index.js");
var _entityStore = require("./entityStore.js");
var _helpers = require("./helpers.js");
var _common = require("../core/types/common.js");
var _objectCanon = require("./object-canon.js");
function execSelectionSetKeyArgs(options) {
  return [options.selectionSet, options.objectOrReference, options.context,
  // We split out this property so we can pass different values
  // independently without modifying options.context itself.
  options.context.canonizeResults];
}
var StoreReader = exports.StoreReader = /** @class */function () {
  function StoreReader(config) {
    var _this = this;
    this.knownResults = new (_index2.canUseWeakMap ? WeakMap : Map)();
    this.config = (0, _index2.compact)(config, {
      addTypename: config.addTypename !== false,
      canonizeResults: (0, _helpers.shouldCanonizeResults)(config)
    });
    this.canon = config.canon || new _objectCanon.ObjectCanon();
    this.executeSelectionSet = (0, _optimism.wrap)(function (options) {
      var _a;
      var canonizeResults = options.context.canonizeResults;
      var peekArgs = execSelectionSetKeyArgs(options);
      // Negate this boolean option so we can find out if we've already read
      // this result using the other boolean value.
      peekArgs[3] = !canonizeResults;
      var other = (_a = _this.executeSelectionSet).peek.apply(_a, peekArgs);
      if (other) {
        if (canonizeResults) {
          return (0, _tslib.__assign)((0, _tslib.__assign)({}, other), {
            // If we previously read this result without canonizing it, we can
            // reuse that result simply by canonizing it now.
            result: _this.canon.admit(other.result)
          });
        }
        // If we previously read this result with canonization enabled, we can
        // return that canonized result as-is.
        return other;
      }
      (0, _entityStore.maybeDependOnExistenceOfEntity)(options.context.store, options.enclosingRef.__ref);
      // Finally, if we didn't find any useful previous results, run the real
      // execSelectionSetImpl method with the given options.
      return _this.execSelectionSetImpl(options);
    }, {
      max: this.config.resultCacheMaxSize,
      keyArgs: execSelectionSetKeyArgs,
      // Note that the parameters of makeCacheKey are determined by the
      // array returned by keyArgs.
      makeCacheKey: function (selectionSet, parent, context, canonizeResults) {
        if ((0, _entityStore.supportsResultCaching)(context.store)) {
          return context.store.makeCacheKey(selectionSet, (0, _index2.isReference)(parent) ? parent.__ref : parent, context.varString, canonizeResults);
        }
      }
    });
    this.executeSubSelectedArray = (0, _optimism.wrap)(function (options) {
      (0, _entityStore.maybeDependOnExistenceOfEntity)(options.context.store, options.enclosingRef.__ref);
      return _this.execSubSelectedArrayImpl(options);
    }, {
      max: this.config.resultCacheMaxSize,
      makeCacheKey: function (_a) {
        var field = _a.field,
          array = _a.array,
          context = _a.context;
        if ((0, _entityStore.supportsResultCaching)(context.store)) {
          return context.store.makeCacheKey(field, array, context.varString);
        }
      }
    });
  }
  StoreReader.prototype.resetCanon = function () {
    this.canon = new _objectCanon.ObjectCanon();
  };
  /**
   * Given a store and a query, return as much of the result as possible and
   * identify if any data was missing from the store.
   */
  StoreReader.prototype.diffQueryAgainstStore = function (_a) {
    var store = _a.store,
      query = _a.query,
      _b = _a.rootId,
      rootId = _b === void 0 ? "ROOT_QUERY" : _b,
      variables = _a.variables,
      _c = _a.returnPartialData,
      returnPartialData = _c === void 0 ? true : _c,
      _d = _a.canonizeResults,
      canonizeResults = _d === void 0 ? this.config.canonizeResults : _d;
    var policies = this.config.cache.policies;
    variables = (0, _tslib.__assign)((0, _tslib.__assign)({}, (0, _index2.getDefaultValues)((0, _index2.getQueryDefinition)(query))), variables);
    var rootRef = (0, _index2.makeReference)(rootId);
    var execResult = this.executeSelectionSet({
      selectionSet: (0, _index2.getMainDefinition)(query).selectionSet,
      objectOrReference: rootRef,
      enclosingRef: rootRef,
      context: (0, _tslib.__assign)({
        store: store,
        query: query,
        policies: policies,
        variables: variables,
        varString: (0, _objectCanon.canonicalStringify)(variables),
        canonizeResults: canonizeResults
      }, (0, _helpers.extractFragmentContext)(query, this.config.fragments))
    });
    var missing;
    if (execResult.missing) {
      // For backwards compatibility we still report an array of
      // MissingFieldError objects, even though there will only ever be at most
      // one of them, now that all missing field error messages are grouped
      // together in the execResult.missing tree.
      missing = [new _common.MissingFieldError(firstMissing(execResult.missing), execResult.missing, query, variables)];
      if (!returnPartialData) {
        throw missing[0];
      }
    }
    return {
      result: execResult.result,
      complete: !missing,
      missing: missing
    };
  };
  StoreReader.prototype.isFresh = function (result, parent, selectionSet, context) {
    if ((0, _entityStore.supportsResultCaching)(context.store) && this.knownResults.get(result) === selectionSet) {
      var latest = this.executeSelectionSet.peek(selectionSet, parent, context,
      // If result is canonical, then it could only have been previously
      // cached by the canonizing version of executeSelectionSet, so we can
      // avoid checking both possibilities here.
      this.canon.isKnown(result));
      if (latest && result === latest.result) {
        return true;
      }
    }
    return false;
  };
  // Uncached version of executeSelectionSet.
  StoreReader.prototype.execSelectionSetImpl = function (_a) {
    var _this = this;
    var selectionSet = _a.selectionSet,
      objectOrReference = _a.objectOrReference,
      enclosingRef = _a.enclosingRef,
      context = _a.context;
    if ((0, _index2.isReference)(objectOrReference) && !context.policies.rootTypenamesById[objectOrReference.__ref] && !context.store.has(objectOrReference.__ref)) {
      return {
        result: this.canon.empty,
        missing: "Dangling reference to missing ".concat(objectOrReference.__ref, " object")
      };
    }
    var variables = context.variables,
      policies = context.policies,
      store = context.store;
    var typename = store.getFieldValue(objectOrReference, "__typename");
    var objectsToMerge = [];
    var missing;
    var missingMerger = new _index2.DeepMerger();
    if (this.config.addTypename && typeof typename === "string" && !policies.rootIdsByTypename[typename]) {
      // Ensure we always include a default value for the __typename
      // field, if we have one, and this.config.addTypename is true. Note
      // that this field can be overridden by other merged objects.
      objectsToMerge.push({
        __typename: typename
      });
    }
    function handleMissing(result, resultName) {
      var _a;
      if (result.missing) {
        missing = missingMerger.merge(missing, (_a = {}, _a[resultName] = result.missing, _a));
      }
      return result.result;
    }
    var workSet = new Set(selectionSet.selections);
    workSet.forEach(function (selection) {
      var _a, _b;
      // Omit fields with directives @skip(if: <truthy value>) or
      // @include(if: <falsy value>).
      if (!(0, _index2.shouldInclude)(selection, variables)) return;
      if ((0, _index2.isField)(selection)) {
        var fieldValue = policies.readField({
          fieldName: selection.name.value,
          field: selection,
          variables: context.variables,
          from: objectOrReference
        }, context);
        var resultName = (0, _index2.resultKeyNameFromField)(selection);
        if (fieldValue === void 0) {
          if (!_index2.addTypenameToDocument.added(selection)) {
            missing = missingMerger.merge(missing, (_a = {}, _a[resultName] = "Can't find field '".concat(selection.name.value, "' on ").concat((0, _index2.isReference)(objectOrReference) ? objectOrReference.__ref + " object" : "object " + JSON.stringify(objectOrReference, null, 2)), _a));
          }
        } else if ((0, _helpers.isArray)(fieldValue)) {
          fieldValue = handleMissing(_this.executeSubSelectedArray({
            field: selection,
            array: fieldValue,
            enclosingRef: enclosingRef,
            context: context
          }), resultName);
        } else if (!selection.selectionSet) {
          // If the field does not have a selection set, then we handle it
          // as a scalar value. To keep this.canon from canonicalizing
          // this value, we use this.canon.pass to wrap fieldValue in a
          // Pass object that this.canon.admit will later unwrap as-is.
          if (context.canonizeResults) {
            fieldValue = _this.canon.pass(fieldValue);
          }
        } else if (fieldValue != null) {
          // In this case, because we know the field has a selection set,
          // it must be trying to query a GraphQLObjectType, which is why
          // fieldValue must be != null.
          fieldValue = handleMissing(_this.executeSelectionSet({
            selectionSet: selection.selectionSet,
            objectOrReference: fieldValue,
            enclosingRef: (0, _index2.isReference)(fieldValue) ? fieldValue : enclosingRef,
            context: context
          }), resultName);
        }
        if (fieldValue !== void 0) {
          objectsToMerge.push((_b = {}, _b[resultName] = fieldValue, _b));
        }
      } else {
        var fragment = (0, _index2.getFragmentFromSelection)(selection, context.lookupFragment);
        if (!fragment && selection.kind === _graphql.Kind.FRAGMENT_SPREAD) {
          throw (0, _index.newInvariantError)(9, selection.name.value);
        }
        if (fragment && policies.fragmentMatches(fragment, typename)) {
          fragment.selectionSet.selections.forEach(workSet.add, workSet);
        }
      }
    });
    var result = (0, _index2.mergeDeepArray)(objectsToMerge);
    var finalResult = {
      result: result,
      missing: missing
    };
    var frozen = context.canonizeResults ? this.canon.admit(finalResult)
    // Since this.canon is normally responsible for freezing results (only in
    // development), freeze them manually if canonization is disabled.
    : (0, _index2.maybeDeepFreeze)(finalResult);
    // Store this result with its selection set so that we can quickly
    // recognize it again in the StoreReader#isFresh method.
    if (frozen.result) {
      this.knownResults.set(frozen.result, selectionSet);
    }
    return frozen;
  };
  // Uncached version of executeSubSelectedArray.
  StoreReader.prototype.execSubSelectedArrayImpl = function (_a) {
    var _this = this;
    var field = _a.field,
      array = _a.array,
      enclosingRef = _a.enclosingRef,
      context = _a.context;
    var missing;
    var missingMerger = new _index2.DeepMerger();
    function handleMissing(childResult, i) {
      var _a;
      if (childResult.missing) {
        missing = missingMerger.merge(missing, (_a = {}, _a[i] = childResult.missing, _a));
      }
      return childResult.result;
    }
    if (field.selectionSet) {
      array = array.filter(context.store.canRead);
    }
    array = array.map(function (item, i) {
      // null value in array
      if (item === null) {
        return null;
      }
      // This is a nested array, recurse
      if ((0, _helpers.isArray)(item)) {
        return handleMissing(_this.executeSubSelectedArray({
          field: field,
          array: item,
          enclosingRef: enclosingRef,
          context: context
        }), i);
      }
      // This is an object, run the selection set on it
      if (field.selectionSet) {
        return handleMissing(_this.executeSelectionSet({
          selectionSet: field.selectionSet,
          objectOrReference: item,
          enclosingRef: (0, _index2.isReference)(item) ? item : enclosingRef,
          context: context
        }), i);
      }
      if (globalThis.__DEV__ !== false) {
        assertSelectionSetForIdValue(context.store, field, item);
      }
      return item;
    });
    return {
      result: context.canonizeResults ? this.canon.admit(array) : array,
      missing: missing
    };
  };
  return StoreReader;
}();
function firstMissing(tree) {
  try {
    JSON.stringify(tree, function (_, value) {
      if (typeof value === "string") throw value;
      return value;
    });
  } catch (result) {
    return result;
  }
}
function assertSelectionSetForIdValue(store, field, fieldValue) {
  if (!field.selectionSet) {
    var workSet_1 = new Set([fieldValue]);
    workSet_1.forEach(function (value) {
      if ((0, _index2.isNonNullObject)(value)) {
        (0, _index.invariant)(!(0, _index2.isReference)(value), 10, (0, _helpers.getTypenameFromStoreObject)(store, value), field.name.value);
        Object.values(value).forEach(workSet_1.add, workSet_1);
      }
    });
  }
}
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","graphql":"../node_modules/graphql/index.mjs","optimism":"../node_modules/optimism/lib/index.js","../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js","./entityStore.js":"../node_modules/@apollo/client/cache/inmemory/entityStore.js","./helpers.js":"../node_modules/@apollo/client/cache/inmemory/helpers.js","../core/types/common.js":"../node_modules/@apollo/client/cache/core/types/common.js","./object-canon.js":"../node_modules/@apollo/client/cache/inmemory/object-canon.js"}],"../node_modules/@apollo/client/cache/inmemory/reactiveVars.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cacheSlot = void 0;
exports.forgetCache = forgetCache;
exports.makeVar = makeVar;
exports.recallCache = recallCache;
var _optimism = require("optimism");
// Contextual Slot that acquires its value when custom read functions are
// called in Policies#readField.
var cacheSlot = exports.cacheSlot = new _optimism.Slot();
var cacheInfoMap = new WeakMap();
function getCacheInfo(cache) {
  var info = cacheInfoMap.get(cache);
  if (!info) {
    cacheInfoMap.set(cache, info = {
      vars: new Set(),
      dep: (0, _optimism.dep)()
    });
  }
  return info;
}
function forgetCache(cache) {
  getCacheInfo(cache).vars.forEach(function (rv) {
    return rv.forgetCache(cache);
  });
}
// Calling forgetCache(cache) serves to silence broadcasts and allows the
// cache to be garbage collected. However, the varsByCache WeakMap
// preserves the set of reactive variables that were previously associated
// with this cache, which makes it possible to "recall" the cache at a
// later time, by reattaching it to those variables. If the cache has been
// garbage collected in the meantime, because it is no longer reachable,
// you won't be able to call recallCache(cache), and the cache will
// automatically disappear from the varsByCache WeakMap.
function recallCache(cache) {
  getCacheInfo(cache).vars.forEach(function (rv) {
    return rv.attachCache(cache);
  });
}
function makeVar(value) {
  var caches = new Set();
  var listeners = new Set();
  var rv = function (newValue) {
    if (arguments.length > 0) {
      if (value !== newValue) {
        value = newValue;
        caches.forEach(function (cache) {
          // Invalidate any fields with custom read functions that
          // consumed this variable, so query results involving those
          // fields will be recomputed the next time we read them.
          getCacheInfo(cache).dep.dirty(rv);
          // Broadcast changes to any caches that have previously read
          // from this variable.
          broadcast(cache);
        });
        // Finally, notify any listeners added via rv.onNextChange.
        var oldListeners = Array.from(listeners);
        listeners.clear();
        oldListeners.forEach(function (listener) {
          return listener(value);
        });
      }
    } else {
      // When reading from the variable, obtain the current cache from
      // context via cacheSlot. This isn't entirely foolproof, but it's
      // the same system that powers varDep.
      var cache = cacheSlot.getValue();
      if (cache) {
        attach(cache);
        getCacheInfo(cache).dep(rv);
      }
    }
    return value;
  };
  rv.onNextChange = function (listener) {
    listeners.add(listener);
    return function () {
      listeners.delete(listener);
    };
  };
  var attach = rv.attachCache = function (cache) {
    caches.add(cache);
    getCacheInfo(cache).vars.add(rv);
    return rv;
  };
  rv.forgetCache = function (cache) {
    return caches.delete(cache);
  };
  return rv;
}
function broadcast(cache) {
  if (cache.broadcastWatches) {
    cache.broadcastWatches();
  }
}
},{"optimism":"../node_modules/optimism/lib/index.js"}],"../node_modules/@apollo/client/cache/inmemory/key-extractor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.collectSpecifierPaths = collectSpecifierPaths;
exports.extractKeyPath = extractKeyPath;
exports.getSpecifierPaths = getSpecifierPaths;
exports.keyArgsFnFromSpecifier = keyArgsFnFromSpecifier;
exports.keyFieldsFnFromSpecifier = keyFieldsFnFromSpecifier;
var _index = require("../../utilities/globals/index.js");
var _index2 = require("../../utilities/index.js");
var _helpers = require("./helpers.js");
// Mapping from JSON-encoded KeySpecifier strings to associated information.
var specifierInfoCache = Object.create(null);
function lookupSpecifierInfo(spec) {
  // It's safe to encode KeySpecifier arrays with JSON.stringify, since they're
  // just arrays of strings or nested KeySpecifier arrays, and the order of the
  // array elements is important (and suitably preserved by JSON.stringify).
  var cacheKey = JSON.stringify(spec);
  return specifierInfoCache[cacheKey] || (specifierInfoCache[cacheKey] = Object.create(null));
}
function keyFieldsFnFromSpecifier(specifier) {
  var info = lookupSpecifierInfo(specifier);
  return info.keyFieldsFn || (info.keyFieldsFn = function (object, context) {
    var extract = function (from, key) {
      return context.readField(key, from);
    };
    var keyObject = context.keyObject = collectSpecifierPaths(specifier, function (schemaKeyPath) {
      var extracted = extractKeyPath(context.storeObject, schemaKeyPath,
      // Using context.readField to extract paths from context.storeObject
      // allows the extraction to see through Reference objects and respect
      // custom read functions.
      extract);
      if (extracted === void 0 && object !== context.storeObject && _helpers.hasOwn.call(object, schemaKeyPath[0])) {
        // If context.storeObject fails to provide a value for the requested
        // path, fall back to the raw result object, if it has a top-level key
        // matching the first key in the path (schemaKeyPath[0]). This allows
        // key fields included in the written data to be saved in the cache
        // even if they are not selected explicitly in context.selectionSet.
        // Not being mentioned by context.selectionSet is convenient here,
        // since it means these extra fields cannot be affected by field
        // aliasing, which is why we can use extractKey instead of
        // context.readField for this extraction.
        extracted = extractKeyPath(object, schemaKeyPath, extractKey);
      }
      (0, _index.invariant)(extracted !== void 0, 4, schemaKeyPath.join("."), object);
      return extracted;
    });
    return "".concat(context.typename, ":").concat(JSON.stringify(keyObject));
  });
}
// The keyArgs extraction process is roughly analogous to keyFields extraction,
// but there are no aliases involved, missing fields are tolerated (by merely
// omitting them from the key), and drawing from field.directives or variables
// is allowed (in addition to drawing from the field's arguments object).
// Concretely, these differences mean passing a different key path extractor
// function to collectSpecifierPaths, reusing the shared extractKeyPath helper
// wherever possible.
function keyArgsFnFromSpecifier(specifier) {
  var info = lookupSpecifierInfo(specifier);
  return info.keyArgsFn || (info.keyArgsFn = function (args, _a) {
    var field = _a.field,
      variables = _a.variables,
      fieldName = _a.fieldName;
    var collected = collectSpecifierPaths(specifier, function (keyPath) {
      var firstKey = keyPath[0];
      var firstChar = firstKey.charAt(0);
      if (firstChar === "@") {
        if (field && (0, _index2.isNonEmptyArray)(field.directives)) {
          var directiveName_1 = firstKey.slice(1);
          // If the directive appears multiple times, only the first
          // occurrence's arguments will be used. TODO Allow repetition?
          // TODO Cache this work somehow, a la aliasMap?
          var d = field.directives.find(function (d) {
            return d.name.value === directiveName_1;
          });
          // Fortunately argumentsObjectFromField works for DirectiveNode!
          var directiveArgs = d && (0, _index2.argumentsObjectFromField)(d, variables);
          // For directives without arguments (d defined, but directiveArgs ===
          // null), the presence or absence of the directive still counts as
          // part of the field key, so we return null in those cases. If no
          // directive with this name was found for this field (d undefined and
          // thus directiveArgs undefined), we return undefined, which causes
          // this value to be omitted from the key object returned by
          // collectSpecifierPaths.
          return directiveArgs && extractKeyPath(directiveArgs,
          // If keyPath.length === 1, this code calls extractKeyPath with an
          // empty path, which works because it uses directiveArgs as the
          // extracted value.
          keyPath.slice(1));
        }
        // If the key started with @ but there was no corresponding directive,
        // we want to omit this value from the key object, not fall through to
        // treating @whatever as a normal argument name.
        return;
      }
      if (firstChar === "$") {
        var variableName = firstKey.slice(1);
        if (variables && _helpers.hasOwn.call(variables, variableName)) {
          var varKeyPath = keyPath.slice(0);
          varKeyPath[0] = variableName;
          return extractKeyPath(variables, varKeyPath);
        }
        // If the key started with $ but there was no corresponding variable, we
        // want to omit this value from the key object, not fall through to
        // treating $whatever as a normal argument name.
        return;
      }
      if (args) {
        return extractKeyPath(args, keyPath);
      }
    });
    var suffix = JSON.stringify(collected);
    // If no arguments were passed to this field, and it didn't have any other
    // field key contributions from directives or variables, hide the empty
    // :{} suffix from the field key. However, a field passed no arguments can
    // still end up with a non-empty :{...} suffix if its key configuration
    // refers to directives or variables.
    if (args || suffix !== "{}") {
      fieldName += ":" + suffix;
    }
    return fieldName;
  });
}
function collectSpecifierPaths(specifier, extractor) {
  // For each path specified by specifier, invoke the extractor, and repeatedly
  // merge the results together, with appropriate ancestor context.
  var merger = new _index2.DeepMerger();
  return getSpecifierPaths(specifier).reduce(function (collected, path) {
    var _a;
    var toMerge = extractor(path);
    if (toMerge !== void 0) {
      // This path is not expected to contain array indexes, so the toMerge
      // reconstruction will not contain arrays. TODO Fix this?
      for (var i = path.length - 1; i >= 0; --i) {
        toMerge = (_a = {}, _a[path[i]] = toMerge, _a);
      }
      collected = merger.merge(collected, toMerge);
    }
    return collected;
  }, Object.create(null));
}
function getSpecifierPaths(spec) {
  var info = lookupSpecifierInfo(spec);
  if (!info.paths) {
    var paths_1 = info.paths = [];
    var currentPath_1 = [];
    spec.forEach(function (s, i) {
      if ((0, _helpers.isArray)(s)) {
        getSpecifierPaths(s).forEach(function (p) {
          return paths_1.push(currentPath_1.concat(p));
        });
        currentPath_1.length = 0;
      } else {
        currentPath_1.push(s);
        if (!(0, _helpers.isArray)(spec[i + 1])) {
          paths_1.push(currentPath_1.slice(0));
          currentPath_1.length = 0;
        }
      }
    });
  }
  return info.paths;
}
function extractKey(object, key) {
  return object[key];
}
function extractKeyPath(object, path, extract) {
  // For each key in path, extract the corresponding child property from obj,
  // flattening arrays if encountered (uncommon for keyFields and keyArgs, but
  // possible). The final result of path.reduce is normalized so unexpected leaf
  // objects have their keys safely sorted. That final result is difficult to
  // type as anything other than any. You're welcome to try to improve the
  // return type, but keep in mind extractKeyPath is not a public function
  // (exported only for testing), so the effort may not be worthwhile unless the
  // limited set of actual callers (see above) pass arguments that TypeScript
  // can statically type. If we know only that path is some array of strings
  // (and not, say, a specific tuple of statically known strings), any (or
  // possibly unknown) is the honest answer.
  extract = extract || extractKey;
  return normalize(path.reduce(function reducer(obj, key) {
    return (0, _helpers.isArray)(obj) ? obj.map(function (child) {
      return reducer(child, key);
    }) : obj && extract(obj, key);
  }, object));
}
function normalize(value) {
  // Usually the extracted value will be a scalar value, since most primary
  // key fields are scalar, but just in case we get an object or an array, we
  // need to do some normalization of the order of (nested) keys.
  if ((0, _index2.isNonNullObject)(value)) {
    if ((0, _helpers.isArray)(value)) {
      return value.map(normalize);
    }
    return collectSpecifierPaths(Object.keys(value).sort(), function (path) {
      return extractKeyPath(value, path);
    });
  }
  return value;
}
},{"../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js","./helpers.js":"../node_modules/@apollo/client/cache/inmemory/helpers.js"}],"../node_modules/@apollo/client/cache/inmemory/policies.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Policies = void 0;
exports.normalizeReadFieldOptions = normalizeReadFieldOptions;
var _tslib = require("tslib");
var _index = require("../../utilities/globals/index.js");
var _index2 = require("../../utilities/index.js");
var _helpers = require("./helpers.js");
var _reactiveVars = require("./reactiveVars.js");
var _objectCanon = require("./object-canon.js");
var _keyExtractor = require("./key-extractor.js");
// Upgrade to a faster version of the default stable JSON.stringify function
// used by getStoreKeyName. This function is used when computing storeFieldName
// strings (when no keyArgs has been configured for a field).

_index2.getStoreKeyName.setStringify(_objectCanon.canonicalStringify);
function argsFromFieldSpecifier(spec) {
  return spec.args !== void 0 ? spec.args : spec.field ? (0, _index2.argumentsObjectFromField)(spec.field, spec.variables) : null;
}
var nullKeyFieldsFn = function () {
  return void 0;
};
var simpleKeyArgsFn = function (_args, context) {
  return context.fieldName;
};
// These merge functions can be selected by specifying merge:true or
// merge:false in a field policy.
var mergeTrueFn = function (existing, incoming, _a) {
  var mergeObjects = _a.mergeObjects;
  return mergeObjects(existing, incoming);
};
var mergeFalseFn = function (_, incoming) {
  return incoming;
};
var Policies = exports.Policies = /** @class */function () {
  function Policies(config) {
    this.config = config;
    this.typePolicies = Object.create(null);
    this.toBeAdded = Object.create(null);
    // Map from subtype names to sets of supertype names. Note that this
    // representation inverts the structure of possibleTypes (whose keys are
    // supertypes and whose values are arrays of subtypes) because it tends
    // to be much more efficient to search upwards than downwards.
    this.supertypeMap = new Map();
    // Any fuzzy subtypes specified by possibleTypes will be converted to
    // RegExp objects and recorded here. Every key of this map can also be
    // found in supertypeMap. In many cases this Map will be empty, which
    // means no fuzzy subtype checking will happen in fragmentMatches.
    this.fuzzySubtypes = new Map();
    this.rootIdsByTypename = Object.create(null);
    this.rootTypenamesById = Object.create(null);
    this.usingPossibleTypes = false;
    this.config = (0, _tslib.__assign)({
      dataIdFromObject: _helpers.defaultDataIdFromObject
    }, config);
    this.cache = this.config.cache;
    this.setRootTypename("Query");
    this.setRootTypename("Mutation");
    this.setRootTypename("Subscription");
    if (config.possibleTypes) {
      this.addPossibleTypes(config.possibleTypes);
    }
    if (config.typePolicies) {
      this.addTypePolicies(config.typePolicies);
    }
  }
  Policies.prototype.identify = function (object, partialContext) {
    var _a;
    var policies = this;
    var typename = partialContext && (partialContext.typename || ((_a = partialContext.storeObject) === null || _a === void 0 ? void 0 : _a.__typename)) || object.__typename;
    // It should be possible to write root Query fields with writeFragment,
    // using { __typename: "Query", ... } as the data, but it does not make
    // sense to allow the same identification behavior for the Mutation and
    // Subscription types, since application code should never be writing
    // directly to (or reading directly from) those root objects.
    if (typename === this.rootTypenamesById.ROOT_QUERY) {
      return ["ROOT_QUERY"];
    }
    // Default context.storeObject to object if not otherwise provided.
    var storeObject = partialContext && partialContext.storeObject || object;
    var context = (0, _tslib.__assign)((0, _tslib.__assign)({}, partialContext), {
      typename: typename,
      storeObject: storeObject,
      readField: partialContext && partialContext.readField || function () {
        var options = normalizeReadFieldOptions(arguments, storeObject);
        return policies.readField(options, {
          store: policies.cache["data"],
          variables: options.variables
        });
      }
    });
    var id;
    var policy = typename && this.getTypePolicy(typename);
    var keyFn = policy && policy.keyFn || this.config.dataIdFromObject;
    while (keyFn) {
      var specifierOrId = keyFn((0, _tslib.__assign)((0, _tslib.__assign)({}, object), storeObject), context);
      if ((0, _helpers.isArray)(specifierOrId)) {
        keyFn = (0, _keyExtractor.keyFieldsFnFromSpecifier)(specifierOrId);
      } else {
        id = specifierOrId;
        break;
      }
    }
    id = id ? String(id) : void 0;
    return context.keyObject ? [id, context.keyObject] : [id];
  };
  Policies.prototype.addTypePolicies = function (typePolicies) {
    var _this = this;
    Object.keys(typePolicies).forEach(function (typename) {
      var _a = typePolicies[typename],
        queryType = _a.queryType,
        mutationType = _a.mutationType,
        subscriptionType = _a.subscriptionType,
        incoming = (0, _tslib.__rest)(_a, ["queryType", "mutationType", "subscriptionType"]);
      // Though {query,mutation,subscription}Type configurations are rare,
      // it's important to call setRootTypename as early as possible,
      // since these configurations should apply consistently for the
      // entire lifetime of the cache. Also, since only one __typename can
      // qualify as one of these root types, these three properties cannot
      // be inherited, unlike the rest of the incoming properties. That
      // restriction is convenient, because the purpose of this.toBeAdded
      // is to delay the processing of type/field policies until the first
      // time they're used, allowing policies to be added in any order as
      // long as all relevant policies (including policies for supertypes)
      // have been added by the time a given policy is used for the first
      // time. In other words, since inheritance doesn't matter for these
      // properties, there's also no need to delay their processing using
      // the this.toBeAdded queue.
      if (queryType) _this.setRootTypename("Query", typename);
      if (mutationType) _this.setRootTypename("Mutation", typename);
      if (subscriptionType) _this.setRootTypename("Subscription", typename);
      if (_helpers.hasOwn.call(_this.toBeAdded, typename)) {
        _this.toBeAdded[typename].push(incoming);
      } else {
        _this.toBeAdded[typename] = [incoming];
      }
    });
  };
  Policies.prototype.updateTypePolicy = function (typename, incoming) {
    var _this = this;
    var existing = this.getTypePolicy(typename);
    var keyFields = incoming.keyFields,
      fields = incoming.fields;
    function setMerge(existing, merge) {
      existing.merge = typeof merge === "function" ? merge
      // Pass merge:true as a shorthand for a merge implementation
      // that returns options.mergeObjects(existing, incoming).
      : merge === true ? mergeTrueFn
      // Pass merge:false to make incoming always replace existing
      // without any warnings about data clobbering.
      : merge === false ? mergeFalseFn : existing.merge;
    }
    // Type policies can define merge functions, as an alternative to
    // using field policies to merge child objects.
    setMerge(existing, incoming.merge);
    existing.keyFn =
    // Pass false to disable normalization for this typename.
    keyFields === false ? nullKeyFieldsFn
    // Pass an array of strings to use those fields to compute a
    // composite ID for objects of this typename.
    : (0, _helpers.isArray)(keyFields) ? (0, _keyExtractor.keyFieldsFnFromSpecifier)(keyFields)
    // Pass a function to take full control over identification.
    : typeof keyFields === "function" ? keyFields
    // Leave existing.keyFn unchanged if above cases fail.
    : existing.keyFn;
    if (fields) {
      Object.keys(fields).forEach(function (fieldName) {
        var existing = _this.getFieldPolicy(typename, fieldName, true);
        var incoming = fields[fieldName];
        if (typeof incoming === "function") {
          existing.read = incoming;
        } else {
          var keyArgs = incoming.keyArgs,
            read = incoming.read,
            merge = incoming.merge;
          existing.keyFn =
          // Pass false to disable argument-based differentiation of
          // field identities.
          keyArgs === false ? simpleKeyArgsFn
          // Pass an array of strings to use named arguments to
          // compute a composite identity for the field.
          : (0, _helpers.isArray)(keyArgs) ? (0, _keyExtractor.keyArgsFnFromSpecifier)(keyArgs)
          // Pass a function to take full control over field identity.
          : typeof keyArgs === "function" ? keyArgs
          // Leave existing.keyFn unchanged if above cases fail.
          : existing.keyFn;
          if (typeof read === "function") {
            existing.read = read;
          }
          setMerge(existing, merge);
        }
        if (existing.read && existing.merge) {
          // If we have both a read and a merge function, assume
          // keyArgs:false, because read and merge together can take
          // responsibility for interpreting arguments in and out. This
          // default assumption can always be overridden by specifying
          // keyArgs explicitly in the FieldPolicy.
          existing.keyFn = existing.keyFn || simpleKeyArgsFn;
        }
      });
    }
  };
  Policies.prototype.setRootTypename = function (which, typename) {
    if (typename === void 0) {
      typename = which;
    }
    var rootId = "ROOT_" + which.toUpperCase();
    var old = this.rootTypenamesById[rootId];
    if (typename !== old) {
      (0, _index.invariant)(!old || old === which, 5, which);
      // First, delete any old __typename associated with this rootId from
      // rootIdsByTypename.
      if (old) delete this.rootIdsByTypename[old];
      // Now make this the only __typename that maps to this rootId.
      this.rootIdsByTypename[typename] = rootId;
      // Finally, update the __typename associated with this rootId.
      this.rootTypenamesById[rootId] = typename;
    }
  };
  Policies.prototype.addPossibleTypes = function (possibleTypes) {
    var _this = this;
    this.usingPossibleTypes = true;
    Object.keys(possibleTypes).forEach(function (supertype) {
      // Make sure all types have an entry in this.supertypeMap, even if
      // their supertype set is empty, so we can return false immediately
      // from policies.fragmentMatches for unknown supertypes.
      _this.getSupertypeSet(supertype, true);
      possibleTypes[supertype].forEach(function (subtype) {
        _this.getSupertypeSet(subtype, true).add(supertype);
        var match = subtype.match(_helpers.TypeOrFieldNameRegExp);
        if (!match || match[0] !== subtype) {
          // TODO Don't interpret just any invalid typename as a RegExp.
          _this.fuzzySubtypes.set(subtype, new RegExp(subtype));
        }
      });
    });
  };
  Policies.prototype.getTypePolicy = function (typename) {
    var _this = this;
    if (!_helpers.hasOwn.call(this.typePolicies, typename)) {
      var policy_1 = this.typePolicies[typename] = Object.create(null);
      policy_1.fields = Object.create(null);
      // When the TypePolicy for typename is first accessed, instead of
      // starting with an empty policy object, inherit any properties or
      // fields from the type policies of the supertypes of typename.
      //
      // Any properties or fields defined explicitly within the TypePolicy
      // for typename will take precedence, and if there are multiple
      // supertypes, the properties of policies whose types were added
      // later via addPossibleTypes will take precedence over those of
      // earlier supertypes. TODO Perhaps we should warn about these
      // conflicts in development, and recommend defining the property
      // explicitly in the subtype policy?
      //
      // Field policy inheritance is atomic/shallow: you can't inherit a
      // field policy and then override just its read function, since read
      // and merge functions often need to cooperate, so changing only one
      // of them would be a recipe for inconsistency.
      //
      // Once the TypePolicy for typename has been accessed, its properties can
      // still be updated directly using addTypePolicies, but future changes to
      // inherited supertype policies will not be reflected in this subtype
      // policy, because this code runs at most once per typename.
      var supertypes_1 = this.supertypeMap.get(typename);
      if (!supertypes_1 && this.fuzzySubtypes.size) {
        // To make the inheritance logic work for unknown typename strings that
        // may have fuzzy supertypes, we give this typename an empty supertype
        // set and then populate it with any fuzzy supertypes that match.
        supertypes_1 = this.getSupertypeSet(typename, true);
        // This only works for typenames that are directly matched by a fuzzy
        // supertype. What if there is an intermediate chain of supertypes?
        // While possible, that situation can only be solved effectively by
        // specifying the intermediate relationships via possibleTypes, manually
        // and in a non-fuzzy way.
        this.fuzzySubtypes.forEach(function (regExp, fuzzy) {
          if (regExp.test(typename)) {
            // The fuzzy parameter is just the original string version of regExp
            // (not a valid __typename string), but we can look up the
            // associated supertype(s) in this.supertypeMap.
            var fuzzySupertypes = _this.supertypeMap.get(fuzzy);
            if (fuzzySupertypes) {
              fuzzySupertypes.forEach(function (supertype) {
                return supertypes_1.add(supertype);
              });
            }
          }
        });
      }
      if (supertypes_1 && supertypes_1.size) {
        supertypes_1.forEach(function (supertype) {
          var _a = _this.getTypePolicy(supertype),
            fields = _a.fields,
            rest = (0, _tslib.__rest)(_a, ["fields"]);
          Object.assign(policy_1, rest);
          Object.assign(policy_1.fields, fields);
        });
      }
    }
    var inbox = this.toBeAdded[typename];
    if (inbox && inbox.length) {
      // Merge the pending policies into this.typePolicies, in the order they
      // were originally passed to addTypePolicy.
      inbox.splice(0).forEach(function (policy) {
        _this.updateTypePolicy(typename, policy);
      });
    }
    return this.typePolicies[typename];
  };
  Policies.prototype.getFieldPolicy = function (typename, fieldName, createIfMissing) {
    if (typename) {
      var fieldPolicies = this.getTypePolicy(typename).fields;
      return fieldPolicies[fieldName] || createIfMissing && (fieldPolicies[fieldName] = Object.create(null));
    }
  };
  Policies.prototype.getSupertypeSet = function (subtype, createIfMissing) {
    var supertypeSet = this.supertypeMap.get(subtype);
    if (!supertypeSet && createIfMissing) {
      this.supertypeMap.set(subtype, supertypeSet = new Set());
    }
    return supertypeSet;
  };
  Policies.prototype.fragmentMatches = function (fragment, typename, result, variables) {
    var _this = this;
    if (!fragment.typeCondition) return true;
    // If the fragment has a type condition but the object we're matching
    // against does not have a __typename, the fragment cannot match.
    if (!typename) return false;
    var supertype = fragment.typeCondition.name.value;
    // Common case: fragment type condition and __typename are the same.
    if (typename === supertype) return true;
    if (this.usingPossibleTypes && this.supertypeMap.has(supertype)) {
      var typenameSupertypeSet = this.getSupertypeSet(typename, true);
      var workQueue_1 = [typenameSupertypeSet];
      var maybeEnqueue_1 = function (subtype) {
        var supertypeSet = _this.getSupertypeSet(subtype, false);
        if (supertypeSet && supertypeSet.size && workQueue_1.indexOf(supertypeSet) < 0) {
          workQueue_1.push(supertypeSet);
        }
      };
      // We need to check fuzzy subtypes only if we encountered fuzzy
      // subtype strings in addPossibleTypes, and only while writing to
      // the cache, since that's when selectionSetMatchesResult gives a
      // strong signal of fragment matching. The StoreReader class calls
      // policies.fragmentMatches without passing a result object, so
      // needToCheckFuzzySubtypes is always false while reading.
      var needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);
      var checkingFuzzySubtypes = false;
      // It's important to keep evaluating workQueue.length each time through
      // the loop, because the queue can grow while we're iterating over it.
      for (var i = 0; i < workQueue_1.length; ++i) {
        var supertypeSet = workQueue_1[i];
        if (supertypeSet.has(supertype)) {
          if (!typenameSupertypeSet.has(supertype)) {
            if (checkingFuzzySubtypes) {
              globalThis.__DEV__ !== false && _index.invariant.warn(6, typename, supertype);
            }
            // Record positive results for faster future lookup.
            // Unfortunately, we cannot safely cache negative results,
            // because new possibleTypes data could always be added to the
            // Policies class.
            typenameSupertypeSet.add(supertype);
          }
          return true;
        }
        supertypeSet.forEach(maybeEnqueue_1);
        if (needToCheckFuzzySubtypes &&
        // Start checking fuzzy subtypes only after exhausting all
        // non-fuzzy subtypes (after the final iteration of the loop).
        i === workQueue_1.length - 1 &&
        // We could wait to compare fragment.selectionSet to result
        // after we verify the supertype, but this check is often less
        // expensive than that search, and we will have to do the
        // comparison anyway whenever we find a potential match.
        (0, _helpers.selectionSetMatchesResult)(fragment.selectionSet, result, variables)) {
          // We don't always need to check fuzzy subtypes (if no result
          // was provided, or !this.fuzzySubtypes.size), but, when we do,
          // we only want to check them once.
          needToCheckFuzzySubtypes = false;
          checkingFuzzySubtypes = true;
          // If we find any fuzzy subtypes that match typename, extend the
          // workQueue to search through the supertypes of those fuzzy
          // subtypes. Otherwise the for-loop will terminate and we'll
          // return false below.
          this.fuzzySubtypes.forEach(function (regExp, fuzzyString) {
            var match = typename.match(regExp);
            if (match && match[0] === typename) {
              maybeEnqueue_1(fuzzyString);
            }
          });
        }
      }
    }
    return false;
  };
  Policies.prototype.hasKeyArgs = function (typename, fieldName) {
    var policy = this.getFieldPolicy(typename, fieldName, false);
    return !!(policy && policy.keyFn);
  };
  Policies.prototype.getStoreFieldName = function (fieldSpec) {
    var typename = fieldSpec.typename,
      fieldName = fieldSpec.fieldName;
    var policy = this.getFieldPolicy(typename, fieldName, false);
    var storeFieldName;
    var keyFn = policy && policy.keyFn;
    if (keyFn && typename) {
      var context = {
        typename: typename,
        fieldName: fieldName,
        field: fieldSpec.field || null,
        variables: fieldSpec.variables
      };
      var args = argsFromFieldSpecifier(fieldSpec);
      while (keyFn) {
        var specifierOrString = keyFn(args, context);
        if ((0, _helpers.isArray)(specifierOrString)) {
          keyFn = (0, _keyExtractor.keyArgsFnFromSpecifier)(specifierOrString);
        } else {
          // If the custom keyFn returns a falsy value, fall back to
          // fieldName instead.
          storeFieldName = specifierOrString || fieldName;
          break;
        }
      }
    }
    if (storeFieldName === void 0) {
      storeFieldName = fieldSpec.field ? (0, _index2.storeKeyNameFromField)(fieldSpec.field, fieldSpec.variables) : (0, _index2.getStoreKeyName)(fieldName, argsFromFieldSpecifier(fieldSpec));
    }
    // Returning false from a keyArgs function is like configuring
    // keyArgs: false, but more dynamic.
    if (storeFieldName === false) {
      return fieldName;
    }
    // Make sure custom field names start with the actual field.name.value
    // of the field, so we can always figure out which properties of a
    // StoreObject correspond to which original field names.
    return fieldName === (0, _helpers.fieldNameFromStoreName)(storeFieldName) ? storeFieldName : fieldName + ":" + storeFieldName;
  };
  Policies.prototype.readField = function (options, context) {
    var objectOrReference = options.from;
    if (!objectOrReference) return;
    var nameOrField = options.field || options.fieldName;
    if (!nameOrField) return;
    if (options.typename === void 0) {
      var typename = context.store.getFieldValue(objectOrReference, "__typename");
      if (typename) options.typename = typename;
    }
    var storeFieldName = this.getStoreFieldName(options);
    var fieldName = (0, _helpers.fieldNameFromStoreName)(storeFieldName);
    var existing = context.store.getFieldValue(objectOrReference, storeFieldName);
    var policy = this.getFieldPolicy(options.typename, fieldName, false);
    var read = policy && policy.read;
    if (read) {
      var readOptions = makeFieldFunctionOptions(this, objectOrReference, options, context, context.store.getStorage((0, _index2.isReference)(objectOrReference) ? objectOrReference.__ref : objectOrReference, storeFieldName));
      // Call read(existing, readOptions) with cacheSlot holding this.cache.
      return _reactiveVars.cacheSlot.withValue(this.cache, read, [existing, readOptions]);
    }
    return existing;
  };
  Policies.prototype.getReadFunction = function (typename, fieldName) {
    var policy = this.getFieldPolicy(typename, fieldName, false);
    return policy && policy.read;
  };
  Policies.prototype.getMergeFunction = function (parentTypename, fieldName, childTypename) {
    var policy = this.getFieldPolicy(parentTypename, fieldName, false);
    var merge = policy && policy.merge;
    if (!merge && childTypename) {
      policy = this.getTypePolicy(childTypename);
      merge = policy && policy.merge;
    }
    return merge;
  };
  Policies.prototype.runMergeFunction = function (existing, incoming, _a, context, storage) {
    var field = _a.field,
      typename = _a.typename,
      merge = _a.merge;
    if (merge === mergeTrueFn) {
      // Instead of going to the trouble of creating a full
      // FieldFunctionOptions object and calling mergeTrueFn, we can
      // simply call mergeObjects, as mergeTrueFn would.
      return makeMergeObjectsFunction(context.store)(existing, incoming);
    }
    if (merge === mergeFalseFn) {
      // Likewise for mergeFalseFn, whose implementation is even simpler.
      return incoming;
    }
    // If cache.writeQuery or cache.writeFragment was called with
    // options.overwrite set to true, we still call merge functions, but
    // the existing data is always undefined, so the merge function will
    // not attempt to combine the incoming data with the existing data.
    if (context.overwrite) {
      existing = void 0;
    }
    return merge(existing, incoming, makeFieldFunctionOptions(this,
    // Unlike options.readField for read functions, we do not fall
    // back to the current object if no foreignObjOrRef is provided,
    // because it's not clear what the current object should be for
    // merge functions: the (possibly undefined) existing object, or
    // the incoming object? If you think your merge function needs
    // to read sibling fields in order to produce a new value for
    // the current field, you might want to rethink your strategy,
    // because that's a recipe for making merge behavior sensitive
    // to the order in which fields are written into the cache.
    // However, readField(name, ref) is useful for merge functions
    // that need to deduplicate child objects and references.
    void 0, {
      typename: typename,
      fieldName: field.name.value,
      field: field,
      variables: context.variables
    }, context, storage || Object.create(null)));
  };
  return Policies;
}();
function makeFieldFunctionOptions(policies, objectOrReference, fieldSpec, context, storage) {
  var storeFieldName = policies.getStoreFieldName(fieldSpec);
  var fieldName = (0, _helpers.fieldNameFromStoreName)(storeFieldName);
  var variables = fieldSpec.variables || context.variables;
  var _a = context.store,
    toReference = _a.toReference,
    canRead = _a.canRead;
  return {
    args: argsFromFieldSpecifier(fieldSpec),
    field: fieldSpec.field || null,
    fieldName: fieldName,
    storeFieldName: storeFieldName,
    variables: variables,
    isReference: _index2.isReference,
    toReference: toReference,
    storage: storage,
    cache: policies.cache,
    canRead: canRead,
    readField: function () {
      return policies.readField(normalizeReadFieldOptions(arguments, objectOrReference, variables), context);
    },
    mergeObjects: makeMergeObjectsFunction(context.store)
  };
}
function normalizeReadFieldOptions(readFieldArgs, objectOrReference, variables) {
  var fieldNameOrOptions = readFieldArgs[0],
    from = readFieldArgs[1],
    argc = readFieldArgs.length;
  var options;
  if (typeof fieldNameOrOptions === "string") {
    options = {
      fieldName: fieldNameOrOptions,
      // Default to objectOrReference only when no second argument was
      // passed for the from parameter, not when undefined is explicitly
      // passed as the second argument.
      from: argc > 1 ? from : objectOrReference
    };
  } else {
    options = (0, _tslib.__assign)({}, fieldNameOrOptions);
    // Default to objectOrReference only when fieldNameOrOptions.from is
    // actually omitted, rather than just undefined.
    if (!_helpers.hasOwn.call(options, "from")) {
      options.from = objectOrReference;
    }
  }
  if (globalThis.__DEV__ !== false && options.from === void 0) {
    globalThis.__DEV__ !== false && _index.invariant.warn(7, (0, _index2.stringifyForDisplay)(Array.from(readFieldArgs)));
  }
  if (void 0 === options.variables) {
    options.variables = variables;
  }
  return options;
}
function makeMergeObjectsFunction(store) {
  return function mergeObjects(existing, incoming) {
    if ((0, _helpers.isArray)(existing) || (0, _helpers.isArray)(incoming)) {
      throw (0, _index.newInvariantError)(8);
    }
    // These dynamic checks are necessary because the parameters of a
    // custom merge function can easily have the any type, so the type
    // system cannot always enforce the StoreObject | Reference parameter
    // types of options.mergeObjects.
    if ((0, _index2.isNonNullObject)(existing) && (0, _index2.isNonNullObject)(incoming)) {
      var eType = store.getFieldValue(existing, "__typename");
      var iType = store.getFieldValue(incoming, "__typename");
      var typesDiffer = eType && iType && eType !== iType;
      if (typesDiffer) {
        return incoming;
      }
      if ((0, _index2.isReference)(existing) && (0, _helpers.storeValueIsStoreObject)(incoming)) {
        // Update the normalized EntityStore for the entity identified by
        // existing.__ref, preferring/overwriting any fields contributed by the
        // newer incoming StoreObject.
        store.merge(existing.__ref, incoming);
        return existing;
      }
      if ((0, _helpers.storeValueIsStoreObject)(existing) && (0, _index2.isReference)(incoming)) {
        // Update the normalized EntityStore for the entity identified by
        // incoming.__ref, taking fields from the older existing object only if
        // those fields are not already present in the newer StoreObject
        // identified by incoming.__ref.
        store.merge(existing, incoming.__ref);
        return incoming;
      }
      if ((0, _helpers.storeValueIsStoreObject)(existing) && (0, _helpers.storeValueIsStoreObject)(incoming)) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, existing), incoming);
      }
    }
    return incoming;
  };
}
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js","./helpers.js":"../node_modules/@apollo/client/cache/inmemory/helpers.js","./reactiveVars.js":"../node_modules/@apollo/client/cache/inmemory/reactiveVars.js","./object-canon.js":"../node_modules/@apollo/client/cache/inmemory/object-canon.js","./key-extractor.js":"../node_modules/@apollo/client/cache/inmemory/key-extractor.js"}],"../node_modules/@apollo/client/cache/inmemory/writeToStore.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StoreWriter = void 0;
var _tslib = require("tslib");
var _index = require("../../utilities/globals/index.js");
var _equality = require("@wry/equality");
var _trie = require("@wry/trie");
var _graphql = require("graphql");
var _index2 = require("../../utilities/index.js");
var _helpers = require("./helpers.js");
var _objectCanon = require("./object-canon.js");
var _policies = require("./policies.js");
// Since there are only four possible combinations of context.clientOnly and
// context.deferred values, we should need at most four "flavors" of any given
// WriteContext. To avoid creating multiple copies of the same context, we cache
// the contexts in the context.flavors Map (shared by all flavors) according to
// their clientOnly and deferred values (always in that order).
function getContextFlavor(context, clientOnly, deferred) {
  var key = "".concat(clientOnly).concat(deferred);
  var flavored = context.flavors.get(key);
  if (!flavored) {
    context.flavors.set(key, flavored = context.clientOnly === clientOnly && context.deferred === deferred ? context : (0, _tslib.__assign)((0, _tslib.__assign)({}, context), {
      clientOnly: clientOnly,
      deferred: deferred
    }));
  }
  return flavored;
}
var StoreWriter = exports.StoreWriter = /** @class */function () {
  function StoreWriter(cache, reader, fragments) {
    this.cache = cache;
    this.reader = reader;
    this.fragments = fragments;
  }
  StoreWriter.prototype.writeToStore = function (store, _a) {
    var _this = this;
    var query = _a.query,
      result = _a.result,
      dataId = _a.dataId,
      variables = _a.variables,
      overwrite = _a.overwrite;
    var operationDefinition = (0, _index2.getOperationDefinition)(query);
    var merger = (0, _helpers.makeProcessedFieldsMerger)();
    variables = (0, _tslib.__assign)((0, _tslib.__assign)({}, (0, _index2.getDefaultValues)(operationDefinition)), variables);
    var context = (0, _tslib.__assign)((0, _tslib.__assign)({
      store: store,
      written: Object.create(null),
      merge: function (existing, incoming) {
        return merger.merge(existing, incoming);
      },
      variables: variables,
      varString: (0, _objectCanon.canonicalStringify)(variables)
    }, (0, _helpers.extractFragmentContext)(query, this.fragments)), {
      overwrite: !!overwrite,
      incomingById: new Map(),
      clientOnly: false,
      deferred: false,
      flavors: new Map()
    });
    var ref = this.processSelectionSet({
      result: result || Object.create(null),
      dataId: dataId,
      selectionSet: operationDefinition.selectionSet,
      mergeTree: {
        map: new Map()
      },
      context: context
    });
    if (!(0, _index2.isReference)(ref)) {
      throw (0, _index.newInvariantError)(11, result);
    }
    // So far, the store has not been modified, so now it's time to process
    // context.incomingById and merge those incoming fields into context.store.
    context.incomingById.forEach(function (_a, dataId) {
      var storeObject = _a.storeObject,
        mergeTree = _a.mergeTree,
        fieldNodeSet = _a.fieldNodeSet;
      var entityRef = (0, _index2.makeReference)(dataId);
      if (mergeTree && mergeTree.map.size) {
        var applied = _this.applyMerges(mergeTree, entityRef, storeObject, context);
        if ((0, _index2.isReference)(applied)) {
          // Assume References returned by applyMerges have already been merged
          // into the store. See makeMergeObjectsFunction in policies.ts for an
          // example of how this can happen.
          return;
        }
        // Otherwise, applyMerges returned a StoreObject, whose fields we should
        // merge into the store (see store.merge statement below).
        storeObject = applied;
      }
      if (globalThis.__DEV__ !== false && !context.overwrite) {
        var fieldsWithSelectionSets_1 = Object.create(null);
        fieldNodeSet.forEach(function (field) {
          if (field.selectionSet) {
            fieldsWithSelectionSets_1[field.name.value] = true;
          }
        });
        var hasSelectionSet_1 = function (storeFieldName) {
          return fieldsWithSelectionSets_1[(0, _helpers.fieldNameFromStoreName)(storeFieldName)] === true;
        };
        var hasMergeFunction_1 = function (storeFieldName) {
          var childTree = mergeTree && mergeTree.map.get(storeFieldName);
          return Boolean(childTree && childTree.info && childTree.info.merge);
        };
        Object.keys(storeObject).forEach(function (storeFieldName) {
          // If a merge function was defined for this field, trust that it
          // did the right thing about (not) clobbering data. If the field
          // has no selection set, it's a scalar field, so it doesn't need
          // a merge function (even if it's an object, like JSON data).
          if (hasSelectionSet_1(storeFieldName) && !hasMergeFunction_1(storeFieldName)) {
            warnAboutDataLoss(entityRef, storeObject, storeFieldName, context.store);
          }
        });
      }
      store.merge(dataId, storeObject);
    });
    // Any IDs written explicitly to the cache will be retained as
    // reachable root IDs for garbage collection purposes. Although this
    // logic includes root IDs like ROOT_QUERY and ROOT_MUTATION, their
    // retainment counts are effectively ignored because cache.gc() always
    // includes them in its root ID set.
    store.retain(ref.__ref);
    return ref;
  };
  StoreWriter.prototype.processSelectionSet = function (_a) {
    var _this = this;
    var dataId = _a.dataId,
      result = _a.result,
      selectionSet = _a.selectionSet,
      context = _a.context,
      // This object allows processSelectionSet to report useful information
      // to its callers without explicitly returning that information.
      mergeTree = _a.mergeTree;
    var policies = this.cache.policies;
    // This variable will be repeatedly updated using context.merge to
    // accumulate all fields that need to be written into the store.
    var incoming = Object.create(null);
    // If typename was not passed in, infer it. Note that typename is
    // always passed in for tricky-to-infer cases such as "Query" for
    // ROOT_QUERY.
    var typename = dataId && policies.rootTypenamesById[dataId] || (0, _index2.getTypenameFromResult)(result, selectionSet, context.fragmentMap) || dataId && context.store.get(dataId, "__typename");
    if ("string" === typeof typename) {
      incoming.__typename = typename;
    }
    // This readField function will be passed as context.readField in the
    // KeyFieldsContext object created within policies.identify (called below).
    // In addition to reading from the existing context.store (thanks to the
    // policies.readField(options, context) line at the very bottom), this
    // version of readField can read from Reference objects that are currently
    // pending in context.incomingById, which is important whenever keyFields
    // need to be extracted from a child object that processSelectionSet has
    // turned into a Reference.
    var readField = function () {
      var options = (0, _policies.normalizeReadFieldOptions)(arguments, incoming, context.variables);
      if ((0, _index2.isReference)(options.from)) {
        var info = context.incomingById.get(options.from.__ref);
        if (info) {
          var result_1 = policies.readField((0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
            from: info.storeObject
          }), context);
          if (result_1 !== void 0) {
            return result_1;
          }
        }
      }
      return policies.readField(options, context);
    };
    var fieldNodeSet = new Set();
    this.flattenFields(selectionSet, result,
    // This WriteContext will be the default context value for fields returned
    // by the flattenFields method, but some fields may be assigned a modified
    // context, depending on the presence of @client and other directives.
    context, typename).forEach(function (context, field) {
      var _a;
      var resultFieldKey = (0, _index2.resultKeyNameFromField)(field);
      var value = result[resultFieldKey];
      fieldNodeSet.add(field);
      if (value !== void 0) {
        var storeFieldName = policies.getStoreFieldName({
          typename: typename,
          fieldName: field.name.value,
          field: field,
          variables: context.variables
        });
        var childTree = getChildMergeTree(mergeTree, storeFieldName);
        var incomingValue = _this.processFieldValue(value, field,
        // Reset context.clientOnly and context.deferred to their default
        // values before processing nested selection sets.
        field.selectionSet ? getContextFlavor(context, false, false) : context, childTree);
        // To determine if this field holds a child object with a merge function
        // defined in its type policy (see PR #7070), we need to figure out the
        // child object's __typename.
        var childTypename = void 0;
        // The field's value can be an object that has a __typename only if the
        // field has a selection set. Otherwise incomingValue is scalar.
        if (field.selectionSet && ((0, _index2.isReference)(incomingValue) || (0, _helpers.storeValueIsStoreObject)(incomingValue))) {
          childTypename = readField("__typename", incomingValue);
        }
        var merge = policies.getMergeFunction(typename, field.name.value, childTypename);
        if (merge) {
          childTree.info = {
            // TODO Check compatibility against any existing childTree.field?
            field: field,
            typename: typename,
            merge: merge
          };
        } else {
          maybeRecycleChildMergeTree(mergeTree, storeFieldName);
        }
        incoming = context.merge(incoming, (_a = {}, _a[storeFieldName] = incomingValue, _a));
      } else if (globalThis.__DEV__ !== false && !context.clientOnly && !context.deferred && !_index2.addTypenameToDocument.added(field) &&
      // If the field has a read function, it may be a synthetic field or
      // provide a default value, so its absence from the written data should
      // not be cause for alarm.
      !policies.getReadFunction(typename, field.name.value)) {
        globalThis.__DEV__ !== false && _index.invariant.error(12, (0, _index2.resultKeyNameFromField)(field), result);
      }
    });
    // Identify the result object, even if dataId was already provided,
    // since we always need keyObject below.
    try {
      var _b = policies.identify(result, {
          typename: typename,
          selectionSet: selectionSet,
          fragmentMap: context.fragmentMap,
          storeObject: incoming,
          readField: readField
        }),
        id = _b[0],
        keyObject = _b[1];
      // If dataId was not provided, fall back to the id just generated by
      // policies.identify.
      dataId = dataId || id;
      // Write any key fields that were used during identification, even if
      // they were not mentioned in the original query.
      if (keyObject) {
        // TODO Reverse the order of the arguments?
        incoming = context.merge(incoming, keyObject);
      }
    } catch (e) {
      // If dataId was provided, tolerate failure of policies.identify.
      if (!dataId) throw e;
    }
    if ("string" === typeof dataId) {
      var dataRef = (0, _index2.makeReference)(dataId);
      // Avoid processing the same entity object using the same selection
      // set more than once. We use an array instead of a Set since most
      // entity IDs will be written using only one selection set, so the
      // size of this array is likely to be very small, meaning indexOf is
      // likely to be faster than Set.prototype.has.
      var sets = context.written[dataId] || (context.written[dataId] = []);
      if (sets.indexOf(selectionSet) >= 0) return dataRef;
      sets.push(selectionSet);
      // If we're about to write a result object into the store, but we
      // happen to know that the exact same (===) result object would be
      // returned if we were to reread the result with the same inputs,
      // then we can skip the rest of the processSelectionSet work for
      // this object, and immediately return a Reference to it.
      if (this.reader && this.reader.isFresh(result, dataRef, selectionSet, context)) {
        return dataRef;
      }
      var previous_1 = context.incomingById.get(dataId);
      if (previous_1) {
        previous_1.storeObject = context.merge(previous_1.storeObject, incoming);
        previous_1.mergeTree = mergeMergeTrees(previous_1.mergeTree, mergeTree);
        fieldNodeSet.forEach(function (field) {
          return previous_1.fieldNodeSet.add(field);
        });
      } else {
        context.incomingById.set(dataId, {
          storeObject: incoming,
          // Save a reference to mergeTree only if it is not empty, because
          // empty MergeTrees may be recycled by maybeRecycleChildMergeTree and
          // reused for entirely different parts of the result tree.
          mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,
          fieldNodeSet: fieldNodeSet
        });
      }
      return dataRef;
    }
    return incoming;
  };
  StoreWriter.prototype.processFieldValue = function (value, field, context, mergeTree) {
    var _this = this;
    if (!field.selectionSet || value === null) {
      // In development, we need to clone scalar values so that they can be
      // safely frozen with maybeDeepFreeze in readFromStore.ts. In production,
      // it's cheaper to store the scalar values directly in the cache.
      return globalThis.__DEV__ !== false ? (0, _index2.cloneDeep)(value) : value;
    }
    if ((0, _helpers.isArray)(value)) {
      return value.map(function (item, i) {
        var value = _this.processFieldValue(item, field, context, getChildMergeTree(mergeTree, i));
        maybeRecycleChildMergeTree(mergeTree, i);
        return value;
      });
    }
    return this.processSelectionSet({
      result: value,
      selectionSet: field.selectionSet,
      context: context,
      mergeTree: mergeTree
    });
  };
  // Implements https://spec.graphql.org/draft/#sec-Field-Collection, but with
  // some additions for tracking @client and @defer directives.
  StoreWriter.prototype.flattenFields = function (selectionSet, result, context, typename) {
    if (typename === void 0) {
      typename = (0, _index2.getTypenameFromResult)(result, selectionSet, context.fragmentMap);
    }
    var fieldMap = new Map();
    var policies = this.cache.policies;
    var limitingTrie = new _trie.Trie(false); // No need for WeakMap, since limitingTrie does not escape.
    (function flatten(selectionSet, inheritedContext) {
      var visitedNode = limitingTrie.lookup(selectionSet,
      // Because we take inheritedClientOnly and inheritedDeferred into
      // consideration here (in addition to selectionSet), it's possible for
      // the same selection set to be flattened more than once, if it appears
      // in the query with different @client and/or @directive configurations.
      inheritedContext.clientOnly, inheritedContext.deferred);
      if (visitedNode.visited) return;
      visitedNode.visited = true;
      selectionSet.selections.forEach(function (selection) {
        if (!(0, _index2.shouldInclude)(selection, context.variables)) return;
        var clientOnly = inheritedContext.clientOnly,
          deferred = inheritedContext.deferred;
        if (
        // Since the presence of @client or @defer on this field can only
        // cause clientOnly or deferred to become true, we can skip the
        // forEach loop if both clientOnly and deferred are already true.
        !(clientOnly && deferred) && (0, _index2.isNonEmptyArray)(selection.directives)) {
          selection.directives.forEach(function (dir) {
            var name = dir.name.value;
            if (name === "client") clientOnly = true;
            if (name === "defer") {
              var args = (0, _index2.argumentsObjectFromField)(dir, context.variables);
              // The @defer directive takes an optional args.if boolean
              // argument, similar to @include(if: boolean). Note that
              // @defer(if: false) does not make context.deferred false, but
              // instead behaves as if there was no @defer directive.
              if (!args || args.if !== false) {
                deferred = true;
              }
              // TODO In the future, we may want to record args.label using
              // context.deferred, if a label is specified.
            }
          });
        }
        if ((0, _index2.isField)(selection)) {
          var existing = fieldMap.get(selection);
          if (existing) {
            // If this field has been visited along another recursive path
            // before, the final context should have clientOnly or deferred set
            // to true only if *all* paths have the directive (hence the &&).
            clientOnly = clientOnly && existing.clientOnly;
            deferred = deferred && existing.deferred;
          }
          fieldMap.set(selection, getContextFlavor(context, clientOnly, deferred));
        } else {
          var fragment = (0, _index2.getFragmentFromSelection)(selection, context.lookupFragment);
          if (!fragment && selection.kind === _graphql.Kind.FRAGMENT_SPREAD) {
            throw (0, _index.newInvariantError)(13, selection.name.value);
          }
          if (fragment && policies.fragmentMatches(fragment, typename, result, context.variables)) {
            flatten(fragment.selectionSet, getContextFlavor(context, clientOnly, deferred));
          }
        }
      });
    })(selectionSet, context);
    return fieldMap;
  };
  StoreWriter.prototype.applyMerges = function (mergeTree, existing, incoming, context, getStorageArgs) {
    var _a;
    var _this = this;
    if (mergeTree.map.size && !(0, _index2.isReference)(incoming)) {
      var e_1 =
      // Items in the same position in different arrays are not
      // necessarily related to each other, so when incoming is an array
      // we process its elements as if there was no existing data.
      !(0, _helpers.isArray)(incoming) && (
      // Likewise, existing must be either a Reference or a StoreObject
      // in order for its fields to be safe to merge with the fields of
      // the incoming object.
      (0, _index2.isReference)(existing) || (0, _helpers.storeValueIsStoreObject)(existing)) ? existing : void 0;
      // This narrowing is implied by mergeTree.map.size > 0 and
      // !isReference(incoming), though TypeScript understandably cannot
      // hope to infer this type.
      var i_1 = incoming;
      // The options.storage objects provided to read and merge functions
      // are derived from the identity of the parent object plus a
      // sequence of storeFieldName strings/numbers identifying the nested
      // field name path of each field value to be merged.
      if (e_1 && !getStorageArgs) {
        getStorageArgs = [(0, _index2.isReference)(e_1) ? e_1.__ref : e_1];
      }
      // It's possible that applying merge functions to this subtree will
      // not change the incoming data, so this variable tracks the fields
      // that did change, so we can create a new incoming object when (and
      // only when) at least one incoming field has changed. We use a Map
      // to preserve the type of numeric keys.
      var changedFields_1;
      var getValue_1 = function (from, name) {
        return (0, _helpers.isArray)(from) ? typeof name === "number" ? from[name] : void 0 : context.store.getFieldValue(from, String(name));
      };
      mergeTree.map.forEach(function (childTree, storeFieldName) {
        var eVal = getValue_1(e_1, storeFieldName);
        var iVal = getValue_1(i_1, storeFieldName);
        // If we have no incoming data, leave any existing data untouched.
        if (void 0 === iVal) return;
        if (getStorageArgs) {
          getStorageArgs.push(storeFieldName);
        }
        var aVal = _this.applyMerges(childTree, eVal, iVal, context, getStorageArgs);
        if (aVal !== iVal) {
          changedFields_1 = changedFields_1 || new Map();
          changedFields_1.set(storeFieldName, aVal);
        }
        if (getStorageArgs) {
          (0, _index.invariant)(getStorageArgs.pop() === storeFieldName);
        }
      });
      if (changedFields_1) {
        // Shallow clone i so we can add changed fields to it.
        incoming = (0, _helpers.isArray)(i_1) ? i_1.slice(0) : (0, _tslib.__assign)({}, i_1);
        changedFields_1.forEach(function (value, name) {
          incoming[name] = value;
        });
      }
    }
    if (mergeTree.info) {
      return this.cache.policies.runMergeFunction(existing, incoming, mergeTree.info, context, getStorageArgs && (_a = context.store).getStorage.apply(_a, getStorageArgs));
    }
    return incoming;
  };
  return StoreWriter;
}();
var emptyMergeTreePool = [];
function getChildMergeTree(_a, name) {
  var map = _a.map;
  if (!map.has(name)) {
    map.set(name, emptyMergeTreePool.pop() || {
      map: new Map()
    });
  }
  return map.get(name);
}
function mergeMergeTrees(left, right) {
  if (left === right || !right || mergeTreeIsEmpty(right)) return left;
  if (!left || mergeTreeIsEmpty(left)) return right;
  var info = left.info && right.info ? (0, _tslib.__assign)((0, _tslib.__assign)({}, left.info), right.info) : left.info || right.info;
  var needToMergeMaps = left.map.size && right.map.size;
  var map = needToMergeMaps ? new Map() : left.map.size ? left.map : right.map;
  var merged = {
    info: info,
    map: map
  };
  if (needToMergeMaps) {
    var remainingRightKeys_1 = new Set(right.map.keys());
    left.map.forEach(function (leftTree, key) {
      merged.map.set(key, mergeMergeTrees(leftTree, right.map.get(key)));
      remainingRightKeys_1.delete(key);
    });
    remainingRightKeys_1.forEach(function (key) {
      merged.map.set(key, mergeMergeTrees(right.map.get(key), left.map.get(key)));
    });
  }
  return merged;
}
function mergeTreeIsEmpty(tree) {
  return !tree || !(tree.info || tree.map.size);
}
function maybeRecycleChildMergeTree(_a, name) {
  var map = _a.map;
  var childTree = map.get(name);
  if (childTree && mergeTreeIsEmpty(childTree)) {
    emptyMergeTreePool.push(childTree);
    map.delete(name);
  }
}
var warnings = new Set();
// Note that this function is unused in production, and thus should be
// pruned by any well-configured minifier.
function warnAboutDataLoss(existingRef, incomingObj, storeFieldName, store) {
  var getChild = function (objOrRef) {
    var child = store.getFieldValue(objOrRef, storeFieldName);
    return typeof child === "object" && child;
  };
  var existing = getChild(existingRef);
  if (!existing) return;
  var incoming = getChild(incomingObj);
  if (!incoming) return;
  // It's always safe to replace a reference, since it refers to data
  // safely stored elsewhere.
  if ((0, _index2.isReference)(existing)) return;
  // If the values are structurally equivalent, we do not need to worry
  // about incoming replacing existing.
  if ((0, _equality.equal)(existing, incoming)) return;
  // If we're replacing every key of the existing object, then the
  // existing data would be overwritten even if the objects were
  // normalized, so warning would not be helpful here.
  if (Object.keys(existing).every(function (key) {
    return store.getFieldValue(incoming, key) !== void 0;
  })) {
    return;
  }
  var parentType = store.getFieldValue(existingRef, "__typename") || store.getFieldValue(incomingObj, "__typename");
  var fieldName = (0, _helpers.fieldNameFromStoreName)(storeFieldName);
  var typeDotName = "".concat(parentType, ".").concat(fieldName);
  // Avoid warning more than once for the same type and field name.
  if (warnings.has(typeDotName)) return;
  warnings.add(typeDotName);
  var childTypenames = [];
  // Arrays do not have __typename fields, and always need a custom merge
  // function, even if their elements are normalized entities.
  if (!(0, _helpers.isArray)(existing) && !(0, _helpers.isArray)(incoming)) {
    [existing, incoming].forEach(function (child) {
      var typename = store.getFieldValue(child, "__typename");
      if (typeof typename === "string" && !childTypenames.includes(typename)) {
        childTypenames.push(typename);
      }
    });
  }
  globalThis.__DEV__ !== false && _index.invariant.warn(14, fieldName, parentType, childTypenames.length ? "either ensure all objects of type " + childTypenames.join(" and ") + " have an ID or a custom merge function, or " : "", typeDotName, existing, incoming);
}
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","@wry/equality":"../node_modules/@wry/equality/lib/index.js","@wry/trie":"../node_modules/@wry/trie/lib/index.js","graphql":"../node_modules/graphql/index.mjs","../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js","./helpers.js":"../node_modules/@apollo/client/cache/inmemory/helpers.js","./object-canon.js":"../node_modules/@apollo/client/cache/inmemory/object-canon.js","./policies.js":"../node_modules/@apollo/client/cache/inmemory/policies.js"}],"../node_modules/@apollo/client/cache/inmemory/inMemoryCache.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InMemoryCache = void 0;
var _tslib = require("tslib");
var _index = require("../../utilities/globals/index.js");
require("./fixPolyfills.js");
var _optimism = require("optimism");
var _equality = require("@wry/equality");
var _cache = require("../core/cache.js");
var _common = require("../core/types/common.js");
var _index2 = require("../../utilities/index.js");
var _readFromStore = require("./readFromStore.js");
var _writeToStore = require("./writeToStore.js");
var _entityStore = require("./entityStore.js");
var _reactiveVars = require("./reactiveVars.js");
var _policies = require("./policies.js");
var _helpers = require("./helpers.js");
var _objectCanon = require("./object-canon.js");
// Make builtins like Map and Set safe to use with non-extensible objects.

var InMemoryCache = exports.InMemoryCache = /** @class */function (_super) {
  (0, _tslib.__extends)(InMemoryCache, _super);
  function InMemoryCache(config) {
    if (config === void 0) {
      config = {};
    }
    var _this = _super.call(this) || this;
    _this.watches = new Set();
    _this.addTypenameTransform = new _index2.DocumentTransform(_index2.addTypenameToDocument);
    // Override the default value, since InMemoryCache result objects are frozen
    // in development and expected to remain logically immutable in production.
    _this.assumeImmutableResults = true;
    _this.makeVar = _reactiveVars.makeVar;
    _this.txCount = 0;
    _this.config = (0, _helpers.normalizeConfig)(config);
    _this.addTypename = !!_this.config.addTypename;
    _this.policies = new _policies.Policies({
      cache: _this,
      dataIdFromObject: _this.config.dataIdFromObject,
      possibleTypes: _this.config.possibleTypes,
      typePolicies: _this.config.typePolicies
    });
    _this.init();
    return _this;
  }
  InMemoryCache.prototype.init = function () {
    // Passing { resultCaching: false } in the InMemoryCache constructor options
    // will completely disable dependency tracking, which will improve memory
    // usage but worsen the performance of repeated reads.
    var rootStore = this.data = new _entityStore.EntityStore.Root({
      policies: this.policies,
      resultCaching: this.config.resultCaching
    });
    // When no optimistic writes are currently active, cache.optimisticData ===
    // cache.data, so there are no additional layers on top of the actual data.
    // When an optimistic update happens, this.optimisticData will become a
    // linked list of EntityStore Layer objects that terminates with the
    // original this.data cache object.
    this.optimisticData = rootStore.stump;
    this.resetResultCache();
  };
  InMemoryCache.prototype.resetResultCache = function (resetResultIdentities) {
    var _this = this;
    var previousReader = this.storeReader;
    var fragments = this.config.fragments;
    // The StoreWriter is mostly stateless and so doesn't really need to be
    // reset, but it does need to have its writer.storeReader reference updated,
    // so it's simpler to update this.storeWriter as well.
    this.storeWriter = new _writeToStore.StoreWriter(this, this.storeReader = new _readFromStore.StoreReader({
      cache: this,
      addTypename: this.addTypename,
      resultCacheMaxSize: this.config.resultCacheMaxSize,
      canonizeResults: (0, _helpers.shouldCanonizeResults)(this.config),
      canon: resetResultIdentities ? void 0 : previousReader && previousReader.canon,
      fragments: fragments
    }), fragments);
    this.maybeBroadcastWatch = (0, _optimism.wrap)(function (c, options) {
      return _this.broadcastWatch(c, options);
    }, {
      max: this.config.resultCacheMaxSize,
      makeCacheKey: function (c) {
        // Return a cache key (thus enabling result caching) only if we're
        // currently using a data store that can track cache dependencies.
        var store = c.optimistic ? _this.optimisticData : _this.data;
        if ((0, _entityStore.supportsResultCaching)(store)) {
          var optimistic = c.optimistic,
            id = c.id,
            variables = c.variables;
          return store.makeCacheKey(c.query,
          // Different watches can have the same query, optimistic
          // status, rootId, and variables, but if their callbacks are
          // different, the (identical) result needs to be delivered to
          // each distinct callback. The easiest way to achieve that
          // separation is to include c.callback in the cache key for
          // maybeBroadcastWatch calls. See issue #5733.
          c.callback, (0, _objectCanon.canonicalStringify)({
            optimistic: optimistic,
            id: id,
            variables: variables
          }));
        }
      }
    });
    // Since we have thrown away all the cached functions that depend on the
    // CacheGroup dependencies maintained by EntityStore, we should also reset
    // all CacheGroup dependency information.
    new Set([this.data.group, this.optimisticData.group]).forEach(function (group) {
      return group.resetCaching();
    });
  };
  InMemoryCache.prototype.restore = function (data) {
    this.init();
    // Since calling this.init() discards/replaces the entire StoreReader, along
    // with the result caches it maintains, this.data.replace(data) won't have
    // to bother deleting the old data.
    if (data) this.data.replace(data);
    return this;
  };
  InMemoryCache.prototype.extract = function (optimistic) {
    if (optimistic === void 0) {
      optimistic = false;
    }
    return (optimistic ? this.optimisticData : this.data).extract();
  };
  InMemoryCache.prototype.read = function (options) {
    var
      // Since read returns data or null, without any additional metadata
      // about whether/where there might have been missing fields, the
      // default behavior cannot be returnPartialData = true (like it is
      // for the diff method), since defaulting to true would violate the
      // integrity of the T in the return type. However, partial data may
      // be useful in some cases, so returnPartialData:true may be
      // specified explicitly.
      _a = options.returnPartialData,
      // Since read returns data or null, without any additional metadata
      // about whether/where there might have been missing fields, the
      // default behavior cannot be returnPartialData = true (like it is
      // for the diff method), since defaulting to true would violate the
      // integrity of the T in the return type. However, partial data may
      // be useful in some cases, so returnPartialData:true may be
      // specified explicitly.
      returnPartialData = _a === void 0 ? false : _a;
    try {
      return this.storeReader.diffQueryAgainstStore((0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
        store: options.optimistic ? this.optimisticData : this.data,
        config: this.config,
        returnPartialData: returnPartialData
      })).result || null;
    } catch (e) {
      if (e instanceof _common.MissingFieldError) {
        // Swallow MissingFieldError and return null, so callers do not need to
        // worry about catching "normal" exceptions resulting from incomplete
        // cache data. Unexpected errors will be re-thrown. If you need more
        // information about which fields were missing, use cache.diff instead,
        // and examine diffResult.missing.
        return null;
      }
      throw e;
    }
  };
  InMemoryCache.prototype.write = function (options) {
    try {
      ++this.txCount;
      return this.storeWriter.writeToStore(this.data, options);
    } finally {
      if (! --this.txCount && options.broadcast !== false) {
        this.broadcastWatches();
      }
    }
  };
  InMemoryCache.prototype.modify = function (options) {
    if (_helpers.hasOwn.call(options, "id") && !options.id) {
      // To my knowledge, TypeScript does not currently provide a way to
      // enforce that an optional property?:type must *not* be undefined
      // when present. That ability would be useful here, because we want
      // options.id to default to ROOT_QUERY only when no options.id was
      // provided. If the caller attempts to pass options.id with a
      // falsy/undefined value (perhaps because cache.identify failed), we
      // should not assume the goal was to modify the ROOT_QUERY object.
      // We could throw, but it seems natural to return false to indicate
      // that nothing was modified.
      return false;
    }
    var store = options.optimistic // Defaults to false.
    ? this.optimisticData : this.data;
    try {
      ++this.txCount;
      return store.modify(options.id || "ROOT_QUERY", options.fields);
    } finally {
      if (! --this.txCount && options.broadcast !== false) {
        this.broadcastWatches();
      }
    }
  };
  InMemoryCache.prototype.diff = function (options) {
    return this.storeReader.diffQueryAgainstStore((0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
      store: options.optimistic ? this.optimisticData : this.data,
      rootId: options.id || "ROOT_QUERY",
      config: this.config
    }));
  };
  InMemoryCache.prototype.watch = function (watch) {
    var _this = this;
    if (!this.watches.size) {
      // In case we previously called forgetCache(this) because
      // this.watches became empty (see below), reattach this cache to any
      // reactive variables on which it previously depended. It might seem
      // paradoxical that we're able to recall something we supposedly
      // forgot, but the point of calling forgetCache(this) is to silence
      // useless broadcasts while this.watches is empty, and to allow the
      // cache to be garbage collected. If, however, we manage to call
      // recallCache(this) here, this cache object must not have been
      // garbage collected yet, and should resume receiving updates from
      // reactive variables, now that it has a watcher to notify.
      (0, _reactiveVars.recallCache)(this);
    }
    this.watches.add(watch);
    if (watch.immediate) {
      this.maybeBroadcastWatch(watch);
    }
    return function () {
      // Once we remove the last watch from this.watches, cache.broadcastWatches
      // no longer does anything, so we preemptively tell the reactive variable
      // system to exclude this cache from future broadcasts.
      if (_this.watches.delete(watch) && !_this.watches.size) {
        (0, _reactiveVars.forgetCache)(_this);
      }
      // Remove this watch from the LRU cache managed by the
      // maybeBroadcastWatch OptimisticWrapperFunction, to prevent memory
      // leaks involving the closure of watch.callback.
      _this.maybeBroadcastWatch.forget(watch);
    };
  };
  InMemoryCache.prototype.gc = function (options) {
    _objectCanon.canonicalStringify.reset();
    var ids = this.optimisticData.gc();
    if (options && !this.txCount) {
      if (options.resetResultCache) {
        this.resetResultCache(options.resetResultIdentities);
      } else if (options.resetResultIdentities) {
        this.storeReader.resetCanon();
      }
    }
    return ids;
  };
  // Call this method to ensure the given root ID remains in the cache after
  // garbage collection, along with its transitive child entities. Note that
  // the cache automatically retains all directly written entities. By default,
  // the retainment persists after optimistic updates are removed. Pass true
  // for the optimistic argument if you would prefer for the retainment to be
  // discarded when the top-most optimistic layer is removed. Returns the
  // resulting (non-negative) retainment count.
  InMemoryCache.prototype.retain = function (rootId, optimistic) {
    return (optimistic ? this.optimisticData : this.data).retain(rootId);
  };
  // Call this method to undo the effect of the retain method, above. Once the
  // retainment count falls to zero, the given ID will no longer be preserved
  // during garbage collection, though it may still be preserved by other safe
  // entities that refer to it. Returns the resulting (non-negative) retainment
  // count, in case that's useful.
  InMemoryCache.prototype.release = function (rootId, optimistic) {
    return (optimistic ? this.optimisticData : this.data).release(rootId);
  };
  // Returns the canonical ID for a given StoreObject, obeying typePolicies
  // and keyFields (and dataIdFromObject, if you still use that). At minimum,
  // the object must contain a __typename and any primary key fields required
  // to identify entities of that type. If you pass a query result object, be
  // sure that none of the primary key fields have been renamed by aliasing.
  // If you pass a Reference object, its __ref ID string will be returned.
  InMemoryCache.prototype.identify = function (object) {
    if ((0, _index2.isReference)(object)) return object.__ref;
    try {
      return this.policies.identify(object)[0];
    } catch (e) {
      globalThis.__DEV__ !== false && _index.invariant.warn(e);
    }
  };
  InMemoryCache.prototype.evict = function (options) {
    if (!options.id) {
      if (_helpers.hasOwn.call(options, "id")) {
        // See comment in modify method about why we return false when
        // options.id exists but is falsy/undefined.
        return false;
      }
      options = (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
        id: "ROOT_QUERY"
      });
    }
    try {
      // It's unlikely that the eviction will end up invoking any other
      // cache update operations while it's running, but {in,de}crementing
      // this.txCount still seems like a good idea, for uniformity with
      // the other update methods.
      ++this.txCount;
      // Pass this.data as a limit on the depth of the eviction, so evictions
      // during optimistic updates (when this.data is temporarily set equal to
      // this.optimisticData) do not escape their optimistic Layer.
      return this.optimisticData.evict(options, this.data);
    } finally {
      if (! --this.txCount && options.broadcast !== false) {
        this.broadcastWatches();
      }
    }
  };
  InMemoryCache.prototype.reset = function (options) {
    var _this = this;
    this.init();
    _objectCanon.canonicalStringify.reset();
    if (options && options.discardWatches) {
      // Similar to what happens in the unsubscribe function returned by
      // cache.watch, applied to all current watches.
      this.watches.forEach(function (watch) {
        return _this.maybeBroadcastWatch.forget(watch);
      });
      this.watches.clear();
      (0, _reactiveVars.forgetCache)(this);
    } else {
      // Calling this.init() above unblocks all maybeBroadcastWatch caching, so
      // this.broadcastWatches() triggers a broadcast to every current watcher
      // (letting them know their data is now missing). This default behavior is
      // convenient because it means the watches do not have to be manually
      // reestablished after resetting the cache. To prevent this broadcast and
      // cancel all watches, pass true for options.discardWatches.
      this.broadcastWatches();
    }
    return Promise.resolve();
  };
  InMemoryCache.prototype.removeOptimistic = function (idToRemove) {
    var newOptimisticData = this.optimisticData.removeLayer(idToRemove);
    if (newOptimisticData !== this.optimisticData) {
      this.optimisticData = newOptimisticData;
      this.broadcastWatches();
    }
  };
  InMemoryCache.prototype.batch = function (options) {
    var _this = this;
    var update = options.update,
      _a = options.optimistic,
      optimistic = _a === void 0 ? true : _a,
      removeOptimistic = options.removeOptimistic,
      onWatchUpdated = options.onWatchUpdated;
    var updateResult;
    var perform = function (layer) {
      var _a = _this,
        data = _a.data,
        optimisticData = _a.optimisticData;
      ++_this.txCount;
      if (layer) {
        _this.data = _this.optimisticData = layer;
      }
      try {
        return updateResult = update(_this);
      } finally {
        --_this.txCount;
        _this.data = data;
        _this.optimisticData = optimisticData;
      }
    };
    var alreadyDirty = new Set();
    if (onWatchUpdated && !this.txCount) {
      // If an options.onWatchUpdated callback is provided, we want to call it
      // with only the Cache.WatchOptions objects affected by options.update,
      // but there might be dirty watchers already waiting to be broadcast that
      // have nothing to do with the update. To prevent including those watchers
      // in the post-update broadcast, we perform this initial broadcast to
      // collect the dirty watchers, so we can re-dirty them later, after the
      // post-update broadcast, allowing them to receive their pending
      // broadcasts the next time broadcastWatches is called, just as they would
      // if we never called cache.batch.
      this.broadcastWatches((0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
        onWatchUpdated: function (watch) {
          alreadyDirty.add(watch);
          return false;
        }
      }));
    }
    if (typeof optimistic === "string") {
      // Note that there can be multiple layers with the same optimistic ID.
      // When removeOptimistic(id) is called for that id, all matching layers
      // will be removed, and the remaining layers will be reapplied.
      this.optimisticData = this.optimisticData.addLayer(optimistic, perform);
    } else if (optimistic === false) {
      // Ensure both this.data and this.optimisticData refer to the root
      // (non-optimistic) layer of the cache during the update. Note that
      // this.data could be a Layer if we are currently executing an optimistic
      // update function, but otherwise will always be an EntityStore.Root
      // instance.
      perform(this.data);
    } else {
      // Otherwise, leave this.data and this.optimisticData unchanged and run
      // the update with broadcast batching.
      perform();
    }
    if (typeof removeOptimistic === "string") {
      this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);
    }
    // Note: if this.txCount > 0, then alreadyDirty.size === 0, so this code
    // takes the else branch and calls this.broadcastWatches(options), which
    // does nothing when this.txCount > 0.
    if (onWatchUpdated && alreadyDirty.size) {
      this.broadcastWatches((0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
        onWatchUpdated: function (watch, diff) {
          var result = onWatchUpdated.call(this, watch, diff);
          if (result !== false) {
            // Since onWatchUpdated did not return false, this diff is
            // about to be broadcast to watch.callback, so we don't need
            // to re-dirty it with the other alreadyDirty watches below.
            alreadyDirty.delete(watch);
          }
          return result;
        }
      }));
      // Silently re-dirty any watches that were already dirty before the update
      // was performed, and were not broadcast just now.
      if (alreadyDirty.size) {
        alreadyDirty.forEach(function (watch) {
          return _this.maybeBroadcastWatch.dirty(watch);
        });
      }
    } else {
      // If alreadyDirty is empty or we don't have an onWatchUpdated
      // function, we don't need to go to the trouble of wrapping
      // options.onWatchUpdated.
      this.broadcastWatches(options);
    }
    return updateResult;
  };
  InMemoryCache.prototype.performTransaction = function (update, optimisticId) {
    return this.batch({
      update: update,
      optimistic: optimisticId || optimisticId !== null
    });
  };
  InMemoryCache.prototype.transformDocument = function (document) {
    return this.addTypenameToDocument(this.addFragmentsToDocument(document));
  };
  InMemoryCache.prototype.broadcastWatches = function (options) {
    var _this = this;
    if (!this.txCount) {
      this.watches.forEach(function (c) {
        return _this.maybeBroadcastWatch(c, options);
      });
    }
  };
  InMemoryCache.prototype.addFragmentsToDocument = function (document) {
    var fragments = this.config.fragments;
    return fragments ? fragments.transform(document) : document;
  };
  InMemoryCache.prototype.addTypenameToDocument = function (document) {
    if (this.addTypename) {
      return this.addTypenameTransform.transformDocument(document);
    }
    return document;
  };
  // This method is wrapped by maybeBroadcastWatch, which is called by
  // broadcastWatches, so that we compute and broadcast results only when
  // the data that would be broadcast might have changed. It would be
  // simpler to check for changes after recomputing a result but before
  // broadcasting it, but this wrapping approach allows us to skip both
  // the recomputation and the broadcast, in most cases.
  InMemoryCache.prototype.broadcastWatch = function (c, options) {
    var lastDiff = c.lastDiff;
    // Both WatchOptions and DiffOptions extend ReadOptions, and DiffOptions
    // currently requires no additional properties, so we can use c (a
    // WatchOptions object) as DiffOptions, without having to allocate a new
    // object, and without having to enumerate the relevant properties (query,
    // variables, etc.) explicitly. There will be some additional properties
    // (lastDiff, callback, etc.), but cache.diff ignores them.
    var diff = this.diff(c);
    if (options) {
      if (c.optimistic && typeof options.optimistic === "string") {
        diff.fromOptimisticTransaction = true;
      }
      if (options.onWatchUpdated && options.onWatchUpdated.call(this, c, diff, lastDiff) === false) {
        // Returning false from the onWatchUpdated callback will prevent
        // calling c.callback(diff) for this watcher.
        return;
      }
    }
    if (!lastDiff || !(0, _equality.equal)(lastDiff.result, diff.result)) {
      c.callback(c.lastDiff = diff, lastDiff);
    }
  };
  return InMemoryCache;
}(_cache.ApolloCache);
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","./fixPolyfills.js":"../node_modules/@apollo/client/cache/inmemory/fixPolyfills.js","optimism":"../node_modules/optimism/lib/index.js","@wry/equality":"../node_modules/@wry/equality/lib/index.js","../core/cache.js":"../node_modules/@apollo/client/cache/core/cache.js","../core/types/common.js":"../node_modules/@apollo/client/cache/core/types/common.js","../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js","./readFromStore.js":"../node_modules/@apollo/client/cache/inmemory/readFromStore.js","./writeToStore.js":"../node_modules/@apollo/client/cache/inmemory/writeToStore.js","./entityStore.js":"../node_modules/@apollo/client/cache/inmemory/entityStore.js","./reactiveVars.js":"../node_modules/@apollo/client/cache/inmemory/reactiveVars.js","./policies.js":"../node_modules/@apollo/client/cache/inmemory/policies.js","./helpers.js":"../node_modules/@apollo/client/cache/inmemory/helpers.js","./object-canon.js":"../node_modules/@apollo/client/cache/inmemory/object-canon.js"}],"../node_modules/@apollo/client/cache/inmemory/fragmentRegistry.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFragmentRegistry = createFragmentRegistry;
var _tslib = require("tslib");
var _graphql = require("graphql");
var _optimism = require("optimism");
var _index = require("../../utilities/index.js");
// As long as createFragmentRegistry is not imported or used, the
// FragmentRegistry example implementation provided below should not be bundled
// (by tree-shaking bundlers like Rollup), because the implementation of
// InMemoryCache refers only to the TypeScript interface FragmentRegistryAPI,
// never the concrete implementation FragmentRegistry (which is deliberately not
// exported from this module).
function createFragmentRegistry() {
  var fragments = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    fragments[_i] = arguments[_i];
  }
  return new (FragmentRegistry.bind.apply(FragmentRegistry, (0, _tslib.__spreadArray)([void 0], fragments, false)))();
}
var FragmentRegistry = /** @class */function () {
  // Call `createFragmentRegistry` instead of invoking the
  // FragmentRegistry constructor directly. This reserves the constructor for
  // future configuration of the FragmentRegistry.
  function FragmentRegistry() {
    var fragments = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      fragments[_i] = arguments[_i];
    }
    this.registry = Object.create(null);
    this.resetCaches();
    if (fragments.length) {
      this.register.apply(this, fragments);
    }
  }
  FragmentRegistry.prototype.register = function () {
    var _this = this;
    var fragments = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      fragments[_i] = arguments[_i];
    }
    var definitions = new Map();
    fragments.forEach(function (doc) {
      (0, _index.getFragmentDefinitions)(doc).forEach(function (node) {
        definitions.set(node.name.value, node);
      });
    });
    definitions.forEach(function (node, name) {
      if (node !== _this.registry[name]) {
        _this.registry[name] = node;
        _this.invalidate(name);
      }
    });
    return this;
  };
  // Overridden in the resetCaches method below.
  FragmentRegistry.prototype.invalidate = function (name) {};
  FragmentRegistry.prototype.resetCaches = function () {
    this.invalidate = (this.lookup = this.cacheUnaryMethod(this.lookup)).dirty; // This dirty function is bound to the wrapped lookup method.
    this.transform = this.cacheUnaryMethod(this.transform);
    this.findFragmentSpreads = this.cacheUnaryMethod(this.findFragmentSpreads);
  };
  FragmentRegistry.prototype.cacheUnaryMethod = function (originalMethod) {
    return (0, _optimism.wrap)(originalMethod.bind(this), {
      makeCacheKey: function (arg) {
        return arg;
      }
    });
  };
  FragmentRegistry.prototype.lookup = function (fragmentName) {
    return this.registry[fragmentName] || null;
  };
  FragmentRegistry.prototype.transform = function (document) {
    var _this = this;
    var defined = new Map();
    (0, _index.getFragmentDefinitions)(document).forEach(function (def) {
      defined.set(def.name.value, def);
    });
    var unbound = new Set();
    var enqueue = function (spreadName) {
      if (!defined.has(spreadName)) {
        unbound.add(spreadName);
      }
    };
    var enqueueChildSpreads = function (node) {
      return Object.keys(_this.findFragmentSpreads(node)).forEach(enqueue);
    };
    enqueueChildSpreads(document);
    var missing = [];
    var map = Object.create(null);
    // This Set forEach loop can be extended during iteration by adding
    // additional strings to the unbound set.
    unbound.forEach(function (fragmentName) {
      var knownFragmentDef = defined.get(fragmentName);
      if (knownFragmentDef) {
        enqueueChildSpreads(map[fragmentName] = knownFragmentDef);
      } else {
        missing.push(fragmentName);
        var def = _this.lookup(fragmentName);
        if (def) {
          enqueueChildSpreads(map[fragmentName] = def);
        }
      }
    });
    if (missing.length) {
      var defsToAppend_1 = [];
      missing.forEach(function (name) {
        var def = map[name];
        if (def) {
          defsToAppend_1.push(def);
        }
      });
      if (defsToAppend_1.length) {
        document = (0, _tslib.__assign)((0, _tslib.__assign)({}, document), {
          definitions: document.definitions.concat(defsToAppend_1)
        });
      }
    }
    return document;
  };
  FragmentRegistry.prototype.findFragmentSpreads = function (root) {
    var spreads = Object.create(null);
    (0, _graphql.visit)(root, {
      FragmentSpread: function (node) {
        spreads[node.name.value] = node;
      }
    });
    return spreads;
  };
  return FragmentRegistry;
}();
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","graphql":"../node_modules/graphql/index.mjs","optimism":"../node_modules/optimism/lib/index.js","../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js"}],"../node_modules/@apollo/client/cache/inmemory/types.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"../node_modules/@apollo/client/cache/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  ApolloCache: true,
  Cache: true,
  MissingFieldError: true,
  isReference: true,
  makeReference: true,
  EntityStore: true,
  fieldNameFromStoreName: true,
  defaultDataIdFromObject: true,
  InMemoryCache: true,
  makeVar: true,
  cacheSlot: true,
  Policies: true,
  canonicalStringify: true,
  createFragmentRegistry: true
};
Object.defineProperty(exports, "ApolloCache", {
  enumerable: true,
  get: function () {
    return _cache.ApolloCache;
  }
});
Object.defineProperty(exports, "Cache", {
  enumerable: true,
  get: function () {
    return _Cache.Cache;
  }
});
Object.defineProperty(exports, "EntityStore", {
  enumerable: true,
  get: function () {
    return _entityStore.EntityStore;
  }
});
Object.defineProperty(exports, "InMemoryCache", {
  enumerable: true,
  get: function () {
    return _inMemoryCache.InMemoryCache;
  }
});
Object.defineProperty(exports, "MissingFieldError", {
  enumerable: true,
  get: function () {
    return _common.MissingFieldError;
  }
});
Object.defineProperty(exports, "Policies", {
  enumerable: true,
  get: function () {
    return _policies.Policies;
  }
});
Object.defineProperty(exports, "cacheSlot", {
  enumerable: true,
  get: function () {
    return _reactiveVars.cacheSlot;
  }
});
Object.defineProperty(exports, "canonicalStringify", {
  enumerable: true,
  get: function () {
    return _objectCanon.canonicalStringify;
  }
});
Object.defineProperty(exports, "createFragmentRegistry", {
  enumerable: true,
  get: function () {
    return _fragmentRegistry.createFragmentRegistry;
  }
});
Object.defineProperty(exports, "defaultDataIdFromObject", {
  enumerable: true,
  get: function () {
    return _helpers.defaultDataIdFromObject;
  }
});
Object.defineProperty(exports, "fieldNameFromStoreName", {
  enumerable: true,
  get: function () {
    return _helpers.fieldNameFromStoreName;
  }
});
Object.defineProperty(exports, "isReference", {
  enumerable: true,
  get: function () {
    return _index2.isReference;
  }
});
Object.defineProperty(exports, "makeReference", {
  enumerable: true,
  get: function () {
    return _index2.makeReference;
  }
});
Object.defineProperty(exports, "makeVar", {
  enumerable: true,
  get: function () {
    return _reactiveVars.makeVar;
  }
});
require("../utilities/globals/index.js");
var _cache = require("./core/cache.js");
var _Cache = require("./core/types/Cache.js");
var _common = require("./core/types/common.js");
var _index2 = require("../utilities/index.js");
var _entityStore = require("./inmemory/entityStore.js");
var _helpers = require("./inmemory/helpers.js");
var _inMemoryCache = require("./inmemory/inMemoryCache.js");
var _reactiveVars = require("./inmemory/reactiveVars.js");
var _policies = require("./inmemory/policies.js");
var _objectCanon = require("./inmemory/object-canon.js");
var _fragmentRegistry = require("./inmemory/fragmentRegistry.js");
var _types = require("./inmemory/types.js");
Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _types[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types[key];
    }
  });
});
},{"../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","./core/cache.js":"../node_modules/@apollo/client/cache/core/cache.js","./core/types/Cache.js":"../node_modules/@apollo/client/cache/core/types/Cache.js","./core/types/common.js":"../node_modules/@apollo/client/cache/core/types/common.js","../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js","./inmemory/entityStore.js":"../node_modules/@apollo/client/cache/inmemory/entityStore.js","./inmemory/helpers.js":"../node_modules/@apollo/client/cache/inmemory/helpers.js","./inmemory/inMemoryCache.js":"../node_modules/@apollo/client/cache/inmemory/inMemoryCache.js","./inmemory/reactiveVars.js":"../node_modules/@apollo/client/cache/inmemory/reactiveVars.js","./inmemory/policies.js":"../node_modules/@apollo/client/cache/inmemory/policies.js","./inmemory/object-canon.js":"../node_modules/@apollo/client/cache/inmemory/object-canon.js","./inmemory/fragmentRegistry.js":"../node_modules/@apollo/client/cache/inmemory/fragmentRegistry.js","./inmemory/types.js":"../node_modules/@apollo/client/cache/inmemory/types.js"}],"../node_modules/@apollo/client/core/networkStatus.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NetworkStatus = void 0;
exports.isNetworkRequestInFlight = isNetworkRequestInFlight;
exports.isNetworkRequestSettled = isNetworkRequestSettled;
/**
 * The current status of a query’s execution in our system.
 */
var NetworkStatus;
(function (NetworkStatus) {
  /**
   * The query has never been run before and the query is now currently running. A query will still
   * have this network status even if a partial data result was returned from the cache, but a
   * query was dispatched anyway.
   */
  NetworkStatus[NetworkStatus["loading"] = 1] = "loading";
  /**
   * If `setVariables` was called and a query was fired because of that then the network status
   * will be `setVariables` until the result of that query comes back.
   */
  NetworkStatus[NetworkStatus["setVariables"] = 2] = "setVariables";
  /**
   * Indicates that `fetchMore` was called on this query and that the query created is currently in
   * flight.
   */
  NetworkStatus[NetworkStatus["fetchMore"] = 3] = "fetchMore";
  /**
   * Similar to the `setVariables` network status. It means that `refetch` was called on a query
   * and the refetch request is currently in flight.
   */
  NetworkStatus[NetworkStatus["refetch"] = 4] = "refetch";
  /**
   * Indicates that a polling query is currently in flight. So for example if you are polling a
   * query every 10 seconds then the network status will switch to `poll` every 10 seconds whenever
   * a poll request has been sent but not resolved.
   */
  NetworkStatus[NetworkStatus["poll"] = 6] = "poll";
  /**
   * No request is in flight for this query, and no errors happened. Everything is OK.
   */
  NetworkStatus[NetworkStatus["ready"] = 7] = "ready";
  /**
   * No request is in flight for this query, but one or more errors were detected.
   */
  NetworkStatus[NetworkStatus["error"] = 8] = "error";
})(NetworkStatus || (exports.NetworkStatus = NetworkStatus = {}));
/**
 * Returns true if there is currently a network request in flight according to a given network
 * status.
 */
function isNetworkRequestInFlight(networkStatus) {
  return networkStatus ? networkStatus < 7 : false;
}
/**
 * Returns true if the network request is in ready or error state according to a given network
 * status.
 */
function isNetworkRequestSettled(networkStatus) {
  return networkStatus === 7 || networkStatus === 8;
}
},{}],"../node_modules/@apollo/client/core/equalByQuery.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.equalByQuery = equalByQuery;
var _tslib = require("tslib");
var _equality = _interopRequireDefault(require("@wry/equality"));
var _index = require("../utilities/index.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// Returns true if aResult and bResult are deeply equal according to the fields
// selected by the given query, ignoring any fields marked as @nonreactive.
function equalByQuery(query, _a, _b, variables) {
  var aData = _a.data,
    aRest = (0, _tslib.__rest)(_a, ["data"]);
  var bData = _b.data,
    bRest = (0, _tslib.__rest)(_b, ["data"]);
  return (0, _equality.default)(aRest, bRest) && equalBySelectionSet((0, _index.getMainDefinition)(query).selectionSet, aData, bData, {
    fragmentMap: (0, _index.createFragmentMap)((0, _index.getFragmentDefinitions)(query)),
    variables: variables
  });
}
function equalBySelectionSet(selectionSet, aResult, bResult, context) {
  if (aResult === bResult) {
    return true;
  }
  var seenSelections = new Set();
  // Returning true from this Array.prototype.every callback function skips the
  // current field/subtree. Returning false aborts the entire traversal
  // immediately, causing equalBySelectionSet to return false.
  return selectionSet.selections.every(function (selection) {
    // Avoid re-processing the same selection at the same level of recursion, in
    // case the same field gets included via multiple indirect fragment spreads.
    if (seenSelections.has(selection)) return true;
    seenSelections.add(selection);
    // Ignore @skip(if: true) and @include(if: false) fields.
    if (!(0, _index.shouldInclude)(selection, context.variables)) return true;
    // If the field or (named) fragment spread has a @nonreactive directive on
    // it, we don't care if it's different, so we pretend it's the same.
    if (selectionHasNonreactiveDirective(selection)) return true;
    if ((0, _index.isField)(selection)) {
      var resultKey = (0, _index.resultKeyNameFromField)(selection);
      var aResultChild = aResult && aResult[resultKey];
      var bResultChild = bResult && bResult[resultKey];
      var childSelectionSet = selection.selectionSet;
      if (!childSelectionSet) {
        // These are scalar values, so we can compare them with deep equal
        // without redoing the main recursive work.
        return (0, _equality.default)(aResultChild, bResultChild);
      }
      var aChildIsArray = Array.isArray(aResultChild);
      var bChildIsArray = Array.isArray(bResultChild);
      if (aChildIsArray !== bChildIsArray) return false;
      if (aChildIsArray && bChildIsArray) {
        var length_1 = aResultChild.length;
        if (bResultChild.length !== length_1) {
          return false;
        }
        for (var i = 0; i < length_1; ++i) {
          if (!equalBySelectionSet(childSelectionSet, aResultChild[i], bResultChild[i], context)) {
            return false;
          }
        }
        return true;
      }
      return equalBySelectionSet(childSelectionSet, aResultChild, bResultChild, context);
    } else {
      var fragment = (0, _index.getFragmentFromSelection)(selection, context.fragmentMap);
      if (fragment) {
        // The fragment might === selection if it's an inline fragment, but
        // could be !== if it's a named fragment ...spread.
        if (selectionHasNonreactiveDirective(fragment)) return true;
        return equalBySelectionSet(fragment.selectionSet,
        // Notice that we reuse the same aResult and bResult values here,
        // since the fragment ...spread does not specify a field name, but
        // consists of multiple fields (within the fragment's selection set)
        // that should be applied to the current result value(s).
        aResult, bResult, context);
      }
    }
  });
}
function selectionHasNonreactiveDirective(selection) {
  return !!selection.directives && selection.directives.some(directiveIsNonreactive);
}
function directiveIsNonreactive(dir) {
  return dir.name.value === "nonreactive";
}
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","@wry/equality":"../node_modules/@wry/equality/lib/index.js","../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js"}],"../node_modules/@apollo/client/core/ObservableQuery.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ObservableQuery = void 0;
exports.logMissingFieldErrors = logMissingFieldErrors;
exports.reobserveCacheFirst = reobserveCacheFirst;
var _tslib = require("tslib");
var _index = require("../utilities/globals/index.js");
var _equality = require("@wry/equality");
var _networkStatus = require("./networkStatus.js");
var _index2 = require("../utilities/index.js");
var _equalByQuery = require("./equalByQuery.js");
var assign = Object.assign,
  hasOwnProperty = Object.hasOwnProperty;
var ObservableQuery = exports.ObservableQuery = /** @class */function (_super) {
  (0, _tslib.__extends)(ObservableQuery, _super);
  function ObservableQuery(_a) {
    var queryManager = _a.queryManager,
      queryInfo = _a.queryInfo,
      options = _a.options;
    var _this = _super.call(this, function (observer) {
      // Zen Observable has its own error function, so in order to log correctly
      // we need to provide a custom error callback.
      try {
        var subObserver = observer._subscription._observer;
        if (subObserver && !subObserver.error) {
          subObserver.error = defaultSubscriptionObserverErrorCallback;
        }
      } catch (_a) {}
      var first = !_this.observers.size;
      _this.observers.add(observer);
      // Deliver most recent error or result.
      var last = _this.last;
      if (last && last.error) {
        observer.error && observer.error(last.error);
      } else if (last && last.result) {
        observer.next && observer.next(last.result);
      }
      // Initiate observation of this query if it hasn't been reported to
      // the QueryManager yet.
      if (first) {
        // Blindly catching here prevents unhandled promise rejections,
        // and is safe because the ObservableQuery handles this error with
        // this.observer.error, so we're not just swallowing the error by
        // ignoring it here.
        _this.reobserve().catch(function () {});
      }
      return function () {
        if (_this.observers.delete(observer) && !_this.observers.size) {
          _this.tearDownQuery();
        }
      };
    }) || this;
    _this.observers = new Set();
    _this.subscriptions = new Set();
    // related classes
    _this.queryInfo = queryInfo;
    _this.queryManager = queryManager;
    // active state
    _this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);
    _this.isTornDown = false;
    var _b = queryManager.defaultOptions.watchQuery,
      _c = _b === void 0 ? {} : _b,
      _d = _c.fetchPolicy,
      defaultFetchPolicy = _d === void 0 ? "cache-first" : _d;
    var _e = options.fetchPolicy,
      fetchPolicy = _e === void 0 ? defaultFetchPolicy : _e,
      // Make sure we don't store "standby" as the initialFetchPolicy.
      _f = options.initialFetchPolicy,
      // Make sure we don't store "standby" as the initialFetchPolicy.
      initialFetchPolicy = _f === void 0 ? fetchPolicy === "standby" ? defaultFetchPolicy : fetchPolicy : _f;
    _this.options = (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
      // Remember the initial options.fetchPolicy so we can revert back to this
      // policy when variables change. This information can also be specified
      // (or overridden) by providing options.initialFetchPolicy explicitly.
      initialFetchPolicy: initialFetchPolicy,
      // This ensures this.options.fetchPolicy always has a string value, in
      // case options.fetchPolicy was not provided.
      fetchPolicy: fetchPolicy
    });
    _this.queryId = queryInfo.queryId || queryManager.generateQueryId();
    var opDef = (0, _index2.getOperationDefinition)(_this.query);
    _this.queryName = opDef && opDef.name && opDef.name.value;
    return _this;
  }
  Object.defineProperty(ObservableQuery.prototype, "query", {
    // The `query` computed property will always reflect the document transformed
    // by the last run query. `this.options.query` will always reflect the raw
    // untransformed query to ensure document transforms with runtime conditionals
    // are run on the original document.
    get: function () {
      return this.lastQuery || this.options.query;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ObservableQuery.prototype, "variables", {
    // Computed shorthand for this.options.variables, preserved for
    // backwards compatibility.
    get: function () {
      return this.options.variables;
    },
    enumerable: false,
    configurable: true
  });
  ObservableQuery.prototype.result = function () {
    var _this = this;
    return new Promise(function (resolve, reject) {
      // TODO: this code doesn’t actually make sense insofar as the observer
      // will never exist in this.observers due how zen-observable wraps observables.
      // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169
      var observer = {
        next: function (result) {
          resolve(result);
          // Stop the query within the QueryManager if we can before
          // this function returns.
          //
          // We do this in order to prevent observers piling up within
          // the QueryManager. Notice that we only fully unsubscribe
          // from the subscription in a setTimeout(..., 0)  call. This call can
          // actually be handled by the browser at a much later time. If queries
          // are fired in the meantime, observers that should have been removed
          // from the QueryManager will continue to fire, causing an unnecessary
          // performance hit.
          _this.observers.delete(observer);
          if (!_this.observers.size) {
            _this.queryManager.removeQuery(_this.queryId);
          }
          setTimeout(function () {
            subscription.unsubscribe();
          }, 0);
        },
        error: reject
      };
      var subscription = _this.subscribe(observer);
    });
  };
  ObservableQuery.prototype.getCurrentResult = function (saveAsLastResult) {
    if (saveAsLastResult === void 0) {
      saveAsLastResult = true;
    }
    // Use the last result as long as the variables match this.variables.
    var lastResult = this.getLastResult(true);
    var networkStatus = this.queryInfo.networkStatus || lastResult && lastResult.networkStatus || _networkStatus.NetworkStatus.ready;
    var result = (0, _tslib.__assign)((0, _tslib.__assign)({}, lastResult), {
      loading: (0, _networkStatus.isNetworkRequestInFlight)(networkStatus),
      networkStatus: networkStatus
    });
    var _a = this.options.fetchPolicy,
      fetchPolicy = _a === void 0 ? "cache-first" : _a;
    if (
    // These fetch policies should never deliver data from the cache, unless
    // redelivering a previously delivered result.
    skipCacheDataFor(fetchPolicy) ||
    // If this.options.query has @client(always: true) fields, we cannot
    // trust diff.result, since it was read from the cache without running
    // local resolvers (and it's too late to run resolvers now, since we must
    // return a result synchronously).
    this.queryManager.getDocumentInfo(this.query).hasForcedResolvers) {
      // Fall through.
    } else if (this.waitForOwnResult) {
      // This would usually be a part of `QueryInfo.getDiff()`.
      // which we skip in the waitForOwnResult case since we are not
      // interested in the diff.
      this.queryInfo["updateWatch"]();
    } else {
      var diff = this.queryInfo.getDiff();
      if (diff.complete || this.options.returnPartialData) {
        result.data = diff.result;
      }
      if ((0, _equality.equal)(result.data, {})) {
        result.data = void 0;
      }
      if (diff.complete) {
        // Similar to setting result.partial to false, but taking advantage of the
        // falsiness of missing fields.
        delete result.partial;
        // If the diff is complete, and we're using a FetchPolicy that
        // terminates after a complete cache read, we can assume the next result
        // we receive will have NetworkStatus.ready and !loading.
        if (diff.complete && result.networkStatus === _networkStatus.NetworkStatus.loading && (fetchPolicy === "cache-first" || fetchPolicy === "cache-only")) {
          result.networkStatus = _networkStatus.NetworkStatus.ready;
          result.loading = false;
        }
      } else {
        result.partial = true;
      }
      if (globalThis.__DEV__ !== false && !diff.complete && !this.options.partialRefetch && !result.loading && !result.data && !result.error) {
        logMissingFieldErrors(diff.missing);
      }
    }
    if (saveAsLastResult) {
      this.updateLastResult(result);
    }
    return result;
  };
  // Compares newResult to the snapshot we took of this.lastResult when it was
  // first received.
  ObservableQuery.prototype.isDifferentFromLastResult = function (newResult, variables) {
    if (!this.last) {
      return true;
    }
    var resultIsDifferent = this.queryManager.getDocumentInfo(this.query).hasNonreactiveDirective ? !(0, _equalByQuery.equalByQuery)(this.query, this.last.result, newResult, this.variables) : !(0, _equality.equal)(this.last.result, newResult);
    return resultIsDifferent || variables && !(0, _equality.equal)(this.last.variables, variables);
  };
  ObservableQuery.prototype.getLast = function (key, variablesMustMatch) {
    var last = this.last;
    if (last && last[key] && (!variablesMustMatch || (0, _equality.equal)(last.variables, this.variables))) {
      return last[key];
    }
  };
  ObservableQuery.prototype.getLastResult = function (variablesMustMatch) {
    return this.getLast("result", variablesMustMatch);
  };
  ObservableQuery.prototype.getLastError = function (variablesMustMatch) {
    return this.getLast("error", variablesMustMatch);
  };
  ObservableQuery.prototype.resetLastResults = function () {
    delete this.last;
    this.isTornDown = false;
  };
  ObservableQuery.prototype.resetQueryStoreErrors = function () {
    this.queryManager.resetErrors(this.queryId);
  };
  /**
   * Update the variables of this observable query, and fetch the new results.
   * This method should be preferred over `setVariables` in most use cases.
   *
   * @param variables - The new set of variables. If there are missing variables,
   * the previous values of those variables will be used.
   */
  ObservableQuery.prototype.refetch = function (variables) {
    var _a;
    var reobserveOptions = {
      // Always disable polling for refetches.
      pollInterval: 0
    };
    // Unless the provided fetchPolicy always consults the network
    // (no-cache, network-only, or cache-and-network), override it with
    // network-only to force the refetch for this fetchQuery call.
    var fetchPolicy = this.options.fetchPolicy;
    if (fetchPolicy === "cache-and-network") {
      reobserveOptions.fetchPolicy = fetchPolicy;
    } else if (fetchPolicy === "no-cache") {
      reobserveOptions.fetchPolicy = "no-cache";
    } else {
      reobserveOptions.fetchPolicy = "network-only";
    }
    if (globalThis.__DEV__ !== false && variables && hasOwnProperty.call(variables, "variables")) {
      var queryDef = (0, _index2.getQueryDefinition)(this.query);
      var vars = queryDef.variableDefinitions;
      if (!vars || !vars.some(function (v) {
        return v.variable.name.value === "variables";
      })) {
        globalThis.__DEV__ !== false && _index.invariant.warn(20, variables, ((_a = queryDef.name) === null || _a === void 0 ? void 0 : _a.value) || queryDef);
      }
    }
    if (variables && !(0, _equality.equal)(this.options.variables, variables)) {
      // Update the existing options with new variables
      reobserveOptions.variables = this.options.variables = (0, _tslib.__assign)((0, _tslib.__assign)({}, this.options.variables), variables);
    }
    this.queryInfo.resetLastWrite();
    return this.reobserve(reobserveOptions, _networkStatus.NetworkStatus.refetch);
  };
  ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {
    var _this = this;
    var combinedOptions = (0, _tslib.__assign)((0, _tslib.__assign)({}, fetchMoreOptions.query ? fetchMoreOptions : (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, this.options), {
      query: this.options.query
    }), fetchMoreOptions), {
      variables: (0, _tslib.__assign)((0, _tslib.__assign)({}, this.options.variables), fetchMoreOptions.variables)
    })), {
      // The fetchMore request goes immediately to the network and does
      // not automatically write its result to the cache (hence no-cache
      // instead of network-only), because we allow the caller of
      // fetchMore to provide an updateQuery callback that determines how
      // the data gets written to the cache.
      fetchPolicy: "no-cache"
    });
    combinedOptions.query = this.transformDocument(combinedOptions.query);
    var qid = this.queryManager.generateQueryId();
    // If a temporary query is passed to `fetchMore`, we don't want to store
    // it as the last query result since it may be an optimized query for
    // pagination. We will however run the transforms on the original document
    // as well as the document passed in `fetchMoreOptions` to ensure the cache
    // uses the most up-to-date document which may rely on runtime conditionals.
    this.lastQuery = fetchMoreOptions.query ? this.transformDocument(this.options.query) : combinedOptions.query;
    // Simulate a loading result for the original query with
    // result.networkStatus === NetworkStatus.fetchMore.
    var queryInfo = this.queryInfo;
    var originalNetworkStatus = queryInfo.networkStatus;
    queryInfo.networkStatus = _networkStatus.NetworkStatus.fetchMore;
    if (combinedOptions.notifyOnNetworkStatusChange) {
      this.observe();
    }
    var updatedQuerySet = new Set();
    return this.queryManager.fetchQuery(qid, combinedOptions, _networkStatus.NetworkStatus.fetchMore).then(function (fetchMoreResult) {
      _this.queryManager.removeQuery(qid);
      if (queryInfo.networkStatus === _networkStatus.NetworkStatus.fetchMore) {
        queryInfo.networkStatus = originalNetworkStatus;
      }
      // Performing this cache update inside a cache.batch transaction ensures
      // any affected cache.watch watchers are notified at most once about any
      // updates. Most watchers will be using the QueryInfo class, which
      // responds to notifications by calling reobserveCacheFirst to deliver
      // fetchMore cache results back to this ObservableQuery.
      _this.queryManager.cache.batch({
        update: function (cache) {
          var updateQuery = fetchMoreOptions.updateQuery;
          if (updateQuery) {
            cache.updateQuery({
              query: _this.query,
              variables: _this.variables,
              returnPartialData: true,
              optimistic: false
            }, function (previous) {
              return updateQuery(previous, {
                fetchMoreResult: fetchMoreResult.data,
                variables: combinedOptions.variables
              });
            });
          } else {
            // If we're using a field policy instead of updateQuery, the only
            // thing we need to do is write the new data to the cache using
            // combinedOptions.variables (instead of this.variables, which is
            // what this.updateQuery uses, because it works by abusing the
            // original field value, keyed by the original variables).
            cache.writeQuery({
              query: combinedOptions.query,
              variables: combinedOptions.variables,
              data: fetchMoreResult.data
            });
          }
        },
        onWatchUpdated: function (watch) {
          // Record the DocumentNode associated with any watched query whose
          // data were updated by the cache writes above.
          updatedQuerySet.add(watch.query);
        }
      });
      return fetchMoreResult;
    }).finally(function () {
      // In case the cache writes above did not generate a broadcast
      // notification (which would have been intercepted by onWatchUpdated),
      // likely because the written data were the same as what was already in
      // the cache, we still want fetchMore to deliver its final loading:false
      // result with the unchanged data.
      if (!updatedQuerySet.has(_this.query)) {
        reobserveCacheFirst(_this);
      }
    });
  };
  // XXX the subscription variables are separate from the query variables.
  // if you want to update subscription variables, right now you have to do that separately,
  // and you can only do it by stopping the subscription and then subscribing again with new variables.
  ObservableQuery.prototype.subscribeToMore = function (options) {
    var _this = this;
    var subscription = this.queryManager.startGraphQLSubscription({
      query: options.document,
      variables: options.variables,
      context: options.context
    }).subscribe({
      next: function (subscriptionData) {
        var updateQuery = options.updateQuery;
        if (updateQuery) {
          _this.updateQuery(function (previous, _a) {
            var variables = _a.variables;
            return updateQuery(previous, {
              subscriptionData: subscriptionData,
              variables: variables
            });
          });
        }
      },
      error: function (err) {
        if (options.onError) {
          options.onError(err);
          return;
        }
        globalThis.__DEV__ !== false && _index.invariant.error(21, err);
      }
    });
    this.subscriptions.add(subscription);
    return function () {
      if (_this.subscriptions.delete(subscription)) {
        subscription.unsubscribe();
      }
    };
  };
  ObservableQuery.prototype.setOptions = function (newOptions) {
    return this.reobserve(newOptions);
  };
  ObservableQuery.prototype.silentSetOptions = function (newOptions) {
    var mergedOptions = (0, _index2.compact)(this.options, newOptions || {});
    assign(this.options, mergedOptions);
  };
  /**
   * Update the variables of this observable query, and fetch the new results
   * if they've changed. Most users should prefer `refetch` instead of
   * `setVariables` in order to to be properly notified of results even when
   * they come from the cache.
   *
   * Note: the `next` callback will *not* fire if the variables have not changed
   * or if the result is coming from cache.
   *
   * Note: the promise will return the old results immediately if the variables
   * have not changed.
   *
   * Note: the promise will return null immediately if the query is not active
   * (there are no subscribers).
   *
   * @param variables - The new set of variables. If there are missing variables,
   * the previous values of those variables will be used.
   */
  ObservableQuery.prototype.setVariables = function (variables) {
    if ((0, _equality.equal)(this.variables, variables)) {
      // If we have no observers, then we don't actually want to make a network
      // request. As soon as someone observes the query, the request will kick
      // off. For now, we just store any changes. (See #1077)
      return this.observers.size ? this.result() : Promise.resolve();
    }
    this.options.variables = variables;
    // See comment above
    if (!this.observers.size) {
      return Promise.resolve();
    }
    return this.reobserve({
      // Reset options.fetchPolicy to its original value.
      fetchPolicy: this.options.initialFetchPolicy,
      variables: variables
    }, _networkStatus.NetworkStatus.setVariables);
  };
  ObservableQuery.prototype.updateQuery = function (mapFn) {
    var queryManager = this.queryManager;
    var result = queryManager.cache.diff({
      query: this.options.query,
      variables: this.variables,
      returnPartialData: true,
      optimistic: false
    }).result;
    var newResult = mapFn(result, {
      variables: this.variables
    });
    if (newResult) {
      queryManager.cache.writeQuery({
        query: this.options.query,
        data: newResult,
        variables: this.variables
      });
      queryManager.broadcastQueries();
    }
  };
  ObservableQuery.prototype.startPolling = function (pollInterval) {
    this.options.pollInterval = pollInterval;
    this.updatePolling();
  };
  ObservableQuery.prototype.stopPolling = function () {
    this.options.pollInterval = 0;
    this.updatePolling();
  };
  // Update options.fetchPolicy according to options.nextFetchPolicy.
  ObservableQuery.prototype.applyNextFetchPolicy = function (reason,
  // It's possible to use this method to apply options.nextFetchPolicy to
  // options.fetchPolicy even if options !== this.options, though that happens
  // most often when the options are temporary, used for only one request and
  // then thrown away, so nextFetchPolicy may not end up mattering.
  options) {
    if (options.nextFetchPolicy) {
      var _a = options.fetchPolicy,
        fetchPolicy = _a === void 0 ? "cache-first" : _a,
        _b = options.initialFetchPolicy,
        initialFetchPolicy = _b === void 0 ? fetchPolicy : _b;
      if (fetchPolicy === "standby") {
        // Do nothing, leaving options.fetchPolicy unchanged.
      } else if (typeof options.nextFetchPolicy === "function") {
        // When someone chooses "cache-and-network" or "network-only" as their
        // initial FetchPolicy, they often do not want future cache updates to
        // trigger unconditional network requests, which is what repeatedly
        // applying the "cache-and-network" or "network-only" policies would
        // seem to imply. Instead, when the cache reports an update after the
        // initial network request, it may be desirable for subsequent network
        // requests to be triggered only if the cache result is incomplete. To
        // that end, the options.nextFetchPolicy option provides an easy way to
        // update options.fetchPolicy after the initial network request, without
        // having to call observableQuery.setOptions.
        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {
          reason: reason,
          options: options,
          observable: this,
          initialFetchPolicy: initialFetchPolicy
        });
      } else if (reason === "variables-changed") {
        options.fetchPolicy = initialFetchPolicy;
      } else {
        options.fetchPolicy = options.nextFetchPolicy;
      }
    }
    return options.fetchPolicy;
  };
  ObservableQuery.prototype.fetch = function (options, newNetworkStatus, query) {
    // TODO Make sure we update the networkStatus (and infer fetchVariables)
    // before actually committing to the fetch.
    this.queryManager.setObservableQuery(this);
    return this.queryManager["fetchConcastWithInfo"](this.queryId, options, newNetworkStatus, query);
  };
  // Turns polling on or off based on this.options.pollInterval.
  ObservableQuery.prototype.updatePolling = function () {
    var _this = this;
    // Avoid polling in SSR mode
    if (this.queryManager.ssrMode) {
      return;
    }
    var _a = this,
      pollingInfo = _a.pollingInfo,
      pollInterval = _a.options.pollInterval;
    if (!pollInterval) {
      if (pollingInfo) {
        clearTimeout(pollingInfo.timeout);
        delete this.pollingInfo;
      }
      return;
    }
    if (pollingInfo && pollingInfo.interval === pollInterval) {
      return;
    }
    (0, _index.invariant)(pollInterval, 22);
    var info = pollingInfo || (this.pollingInfo = {});
    info.interval = pollInterval;
    var maybeFetch = function () {
      if (_this.pollingInfo) {
        if (!(0, _networkStatus.isNetworkRequestInFlight)(_this.queryInfo.networkStatus)) {
          _this.reobserve({
            // Most fetchPolicy options don't make sense to use in a polling context, as
            // users wouldn't want to be polling the cache directly. However, network-only and
            // no-cache are both useful for when the user wants to control whether or not the
            // polled results are written to the cache.
            fetchPolicy: _this.options.initialFetchPolicy === "no-cache" ? "no-cache" : "network-only"
          }, _networkStatus.NetworkStatus.poll).then(poll, poll);
        } else {
          poll();
        }
      }
    };
    var poll = function () {
      var info = _this.pollingInfo;
      if (info) {
        clearTimeout(info.timeout);
        info.timeout = setTimeout(maybeFetch, info.interval);
      }
    };
    poll();
  };
  ObservableQuery.prototype.updateLastResult = function (newResult, variables) {
    if (variables === void 0) {
      variables = this.variables;
    }
    var error = this.getLastError();
    // Preserve this.last.error unless the variables have changed.
    if (error && this.last && !(0, _equality.equal)(variables, this.last.variables)) {
      error = void 0;
    }
    return this.last = (0, _tslib.__assign)({
      result: this.queryManager.assumeImmutableResults ? newResult : (0, _index2.cloneDeep)(newResult),
      variables: variables
    }, error ? {
      error: error
    } : null);
  };
  ObservableQuery.prototype.reobserveAsConcast = function (newOptions, newNetworkStatus) {
    var _this = this;
    this.isTornDown = false;
    var useDisposableConcast =
    // Refetching uses a disposable Concast to allow refetches using different
    // options/variables, without permanently altering the options of the
    // original ObservableQuery.
    newNetworkStatus === _networkStatus.NetworkStatus.refetch ||
    // The fetchMore method does not actually call the reobserve method, but,
    // if it did, it would definitely use a disposable Concast.
    newNetworkStatus === _networkStatus.NetworkStatus.fetchMore ||
    // Polling uses a disposable Concast so the polling options (which force
    // fetchPolicy to be "network-only" or "no-cache") won't override the original options.
    newNetworkStatus === _networkStatus.NetworkStatus.poll;
    // Save the old variables, since Object.assign may modify them below.
    var oldVariables = this.options.variables;
    var oldFetchPolicy = this.options.fetchPolicy;
    var mergedOptions = (0, _index2.compact)(this.options, newOptions || {});
    var options = useDisposableConcast ?
    // Disposable Concast fetches receive a shallow copy of this.options
    // (merged with newOptions), leaving this.options unmodified.
    mergedOptions : assign(this.options, mergedOptions);
    // Don't update options.query with the transformed query to avoid
    // overwriting this.options.query when we aren't using a disposable concast.
    // We want to ensure we can re-run the custom document transforms the next
    // time a request is made against the original query.
    var query = this.transformDocument(options.query);
    this.lastQuery = query;
    if (!useDisposableConcast) {
      // We can skip calling updatePolling if we're not changing this.options.
      this.updatePolling();
      // Reset options.fetchPolicy to its original value when variables change,
      // unless a new fetchPolicy was provided by newOptions.
      if (newOptions && newOptions.variables && !(0, _equality.equal)(newOptions.variables, oldVariables) &&
      // Don't mess with the fetchPolicy if it's currently "standby".
      options.fetchPolicy !== "standby" &&
      // If we're changing the fetchPolicy anyway, don't try to change it here
      // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.
      options.fetchPolicy === oldFetchPolicy) {
        this.applyNextFetchPolicy("variables-changed", options);
        if (newNetworkStatus === void 0) {
          newNetworkStatus = _networkStatus.NetworkStatus.setVariables;
        }
      }
    }
    this.waitForOwnResult && (this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy));
    var finishWaitingForOwnResult = function () {
      if (_this.concast === concast) {
        _this.waitForOwnResult = false;
      }
    };
    var variables = options.variables && (0, _tslib.__assign)({}, options.variables);
    var _a = this.fetch(options, newNetworkStatus, query),
      concast = _a.concast,
      fromLink = _a.fromLink;
    var observer = {
      next: function (result) {
        finishWaitingForOwnResult();
        _this.reportResult(result, variables);
      },
      error: function (error) {
        finishWaitingForOwnResult();
        _this.reportError(error, variables);
      }
    };
    if (!useDisposableConcast && (fromLink || !this.concast)) {
      // We use the {add,remove}Observer methods directly to avoid wrapping
      // observer with an unnecessary SubscriptionObserver object.
      if (this.concast && this.observer) {
        this.concast.removeObserver(this.observer);
      }
      this.concast = concast;
      this.observer = observer;
    }
    concast.addObserver(observer);
    return concast;
  };
  ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {
    return this.reobserveAsConcast(newOptions, newNetworkStatus).promise;
  };
  ObservableQuery.prototype.resubscribeAfterError = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    // If `lastError` is set in the current when the subscription is re-created,
    // the subscription will immediately receive the error, which will
    // cause it to terminate again. To avoid this, we first clear
    // the last error/result from the `observableQuery` before re-starting
    // the subscription, and restore the last value afterwards so that the
    // subscription has a chance to stay open.
    var last = this.last;
    this.resetLastResults();
    var subscription = this.subscribe.apply(this, args);
    this.last = last;
    return subscription;
  };
  // (Re)deliver the current result to this.observers without applying fetch
  // policies or making network requests.
  ObservableQuery.prototype.observe = function () {
    this.reportResult(
    // Passing false is important so that this.getCurrentResult doesn't
    // save the fetchMore result as this.lastResult, causing it to be
    // ignored due to the this.isDifferentFromLastResult check in
    // this.reportResult.
    this.getCurrentResult(false), this.variables);
  };
  ObservableQuery.prototype.reportResult = function (result, variables) {
    var lastError = this.getLastError();
    var isDifferent = this.isDifferentFromLastResult(result, variables);
    // Update the last result even when isDifferentFromLastResult returns false,
    // because the query may be using the @nonreactive directive, and we want to
    // save the the latest version of any nonreactive subtrees (in case
    // getCurrentResult is called), even though we skip broadcasting changes.
    if (lastError || !result.partial || this.options.returnPartialData) {
      this.updateLastResult(result, variables);
    }
    if (lastError || isDifferent) {
      (0, _index2.iterateObserversSafely)(this.observers, "next", result);
    }
  };
  ObservableQuery.prototype.reportError = function (error, variables) {
    // Since we don't get the current result on errors, only the error, we
    // must mirror the updates that occur in QueryStore.markQueryError here
    var errorResult = (0, _tslib.__assign)((0, _tslib.__assign)({}, this.getLastResult()), {
      error: error,
      errors: error.graphQLErrors,
      networkStatus: _networkStatus.NetworkStatus.error,
      loading: false
    });
    this.updateLastResult(errorResult, variables);
    (0, _index2.iterateObserversSafely)(this.observers, "error", this.last.error = error);
  };
  ObservableQuery.prototype.hasObservers = function () {
    return this.observers.size > 0;
  };
  ObservableQuery.prototype.tearDownQuery = function () {
    if (this.isTornDown) return;
    if (this.concast && this.observer) {
      this.concast.removeObserver(this.observer);
      delete this.concast;
      delete this.observer;
    }
    this.stopPolling();
    // stop all active GraphQL subscriptions
    this.subscriptions.forEach(function (sub) {
      return sub.unsubscribe();
    });
    this.subscriptions.clear();
    this.queryManager.stopQuery(this.queryId);
    this.observers.clear();
    this.isTornDown = true;
  };
  ObservableQuery.prototype.transformDocument = function (document) {
    return this.queryManager.transform(document);
  };
  return ObservableQuery;
}(_index2.Observable);
// Necessary because the ObservableQuery constructor has a different
// signature than the Observable constructor.
(0, _index2.fixObservableSubclass)(ObservableQuery);
// Reobserve with fetchPolicy effectively set to "cache-first", triggering
// delivery of any new data from the cache, possibly falling back to the network
// if any cache data are missing. This allows _complete_ cache results to be
// delivered without also kicking off unnecessary network requests when
// this.options.fetchPolicy is "cache-and-network" or "network-only". When
// this.options.fetchPolicy is any other policy ("cache-first", "cache-only",
// "standby", or "no-cache"), we call this.reobserve() as usual.
function reobserveCacheFirst(obsQuery) {
  var _a = obsQuery.options,
    fetchPolicy = _a.fetchPolicy,
    nextFetchPolicy = _a.nextFetchPolicy;
  if (fetchPolicy === "cache-and-network" || fetchPolicy === "network-only") {
    return obsQuery.reobserve({
      fetchPolicy: "cache-first",
      // Use a temporary nextFetchPolicy function that replaces itself with the
      // previous nextFetchPolicy value and returns the original fetchPolicy.
      nextFetchPolicy: function (currentFetchPolicy, context) {
        // Replace this nextFetchPolicy function in the options object with the
        // original this.options.nextFetchPolicy value.
        this.nextFetchPolicy = nextFetchPolicy;
        // If the original nextFetchPolicy value was a function, give it a
        // chance to decide what happens here.
        if (typeof this.nextFetchPolicy === "function") {
          return this.nextFetchPolicy(currentFetchPolicy, context);
        }
        // Otherwise go back to the original this.options.fetchPolicy.
        return fetchPolicy;
      }
    });
  }
  return obsQuery.reobserve();
}
function defaultSubscriptionObserverErrorCallback(error) {
  globalThis.__DEV__ !== false && _index.invariant.error(23, error.message, error.stack);
}
function logMissingFieldErrors(missing) {
  if (globalThis.__DEV__ !== false && missing) {
    globalThis.__DEV__ !== false && _index.invariant.debug(24, missing);
  }
}
function skipCacheDataFor(fetchPolicy /* `undefined` would mean `"cache-first"` */) {
  return fetchPolicy === "network-only" || fetchPolicy === "no-cache" || fetchPolicy === "standby";
}
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","@wry/equality":"../node_modules/@wry/equality/lib/index.js","./networkStatus.js":"../node_modules/@apollo/client/core/networkStatus.js","../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js","./equalByQuery.js":"../node_modules/@apollo/client/core/equalByQuery.js"}],"../node_modules/@apollo/client/core/LocalState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LocalState = void 0;
var _tslib = require("tslib");
var _index = require("../utilities/globals/index.js");
var _graphql = require("graphql");
var _index2 = require("../utilities/index.js");
var _index3 = require("../cache/index.js");
var LocalState = exports.LocalState = /** @class */function () {
  function LocalState(_a) {
    var cache = _a.cache,
      client = _a.client,
      resolvers = _a.resolvers,
      fragmentMatcher = _a.fragmentMatcher;
    this.selectionsToResolveCache = new WeakMap();
    this.cache = cache;
    if (client) {
      this.client = client;
    }
    if (resolvers) {
      this.addResolvers(resolvers);
    }
    if (fragmentMatcher) {
      this.setFragmentMatcher(fragmentMatcher);
    }
  }
  LocalState.prototype.addResolvers = function (resolvers) {
    var _this = this;
    this.resolvers = this.resolvers || {};
    if (Array.isArray(resolvers)) {
      resolvers.forEach(function (resolverGroup) {
        _this.resolvers = (0, _index2.mergeDeep)(_this.resolvers, resolverGroup);
      });
    } else {
      this.resolvers = (0, _index2.mergeDeep)(this.resolvers, resolvers);
    }
  };
  LocalState.prototype.setResolvers = function (resolvers) {
    this.resolvers = {};
    this.addResolvers(resolvers);
  };
  LocalState.prototype.getResolvers = function () {
    return this.resolvers || {};
  };
  // Run local client resolvers against the incoming query and remote data.
  // Locally resolved field values are merged with the incoming remote data,
  // and returned. Note that locally resolved fields will overwrite
  // remote data using the same field name.
  LocalState.prototype.runResolvers = function (_a) {
    var document = _a.document,
      remoteResult = _a.remoteResult,
      context = _a.context,
      variables = _a.variables,
      _b = _a.onlyRunForcedResolvers,
      onlyRunForcedResolvers = _b === void 0 ? false : _b;
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      return (0, _tslib.__generator)(this, function (_c) {
        if (document) {
          return [2 /*return*/, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) {
            return (0, _tslib.__assign)((0, _tslib.__assign)({}, remoteResult), {
              data: localResult.result
            });
          })];
        }
        return [2 /*return*/, remoteResult];
      });
    });
  };
  LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {
    this.fragmentMatcher = fragmentMatcher;
  };
  LocalState.prototype.getFragmentMatcher = function () {
    return this.fragmentMatcher;
  };
  // Client queries contain everything in the incoming document (if a @client
  // directive is found).
  LocalState.prototype.clientQuery = function (document) {
    if ((0, _index2.hasDirectives)(["client"], document)) {
      if (this.resolvers) {
        return document;
      }
    }
    return null;
  };
  // Server queries are stripped of all @client based selection sets.
  LocalState.prototype.serverQuery = function (document) {
    return (0, _index2.removeClientSetsFromDocument)(document);
  };
  LocalState.prototype.prepareContext = function (context) {
    var cache = this.cache;
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, context), {
      cache: cache,
      // Getting an entry's cache key is useful for local state resolvers.
      getCacheKey: function (obj) {
        return cache.identify(obj);
      }
    });
  };
  // To support `@client @export(as: "someVar")` syntax, we'll first resolve
  // @client @export fields locally, then pass the resolved values back to be
  // used alongside the original operation variables.
  LocalState.prototype.addExportedVariables = function (document, variables, context) {
    if (variables === void 0) {
      variables = {};
    }
    if (context === void 0) {
      context = {};
    }
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      return (0, _tslib.__generator)(this, function (_a) {
        if (document) {
          return [2 /*return*/, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) {
            return (0, _tslib.__assign)((0, _tslib.__assign)({}, variables), data.exportedVariables);
          })];
        }
        return [2 /*return*/, (0, _tslib.__assign)({}, variables)];
      });
    });
  };
  LocalState.prototype.shouldForceResolvers = function (document) {
    var forceResolvers = false;
    (0, _graphql.visit)(document, {
      Directive: {
        enter: function (node) {
          if (node.name.value === "client" && node.arguments) {
            forceResolvers = node.arguments.some(function (arg) {
              return arg.name.value === "always" && arg.value.kind === "BooleanValue" && arg.value.value === true;
            });
            if (forceResolvers) {
              return _graphql.BREAK;
            }
          }
        }
      }
    });
    return forceResolvers;
  };
  // Query the cache and return matching data.
  LocalState.prototype.buildRootValueFromCache = function (document, variables) {
    return this.cache.diff({
      query: (0, _index2.buildQueryFromSelectionSet)(document),
      variables: variables,
      returnPartialData: true,
      optimistic: false
    }).result;
  };
  LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {
    if (context === void 0) {
      context = {};
    }
    if (variables === void 0) {
      variables = {};
    }
    if (fragmentMatcher === void 0) {
      fragmentMatcher = function () {
        return true;
      };
    }
    if (onlyRunForcedResolvers === void 0) {
      onlyRunForcedResolvers = false;
    }
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var mainDefinition, fragments, fragmentMap, selectionsToResolve, definitionOperation, defaultOperationType, _a, cache, client, execContext, isClientFieldDescendant;
      return (0, _tslib.__generator)(this, function (_b) {
        mainDefinition = (0, _index2.getMainDefinition)(document);
        fragments = (0, _index2.getFragmentDefinitions)(document);
        fragmentMap = (0, _index2.createFragmentMap)(fragments);
        selectionsToResolve = this.collectSelectionsToResolve(mainDefinition, fragmentMap);
        definitionOperation = mainDefinition.operation;
        defaultOperationType = definitionOperation ? definitionOperation.charAt(0).toUpperCase() + definitionOperation.slice(1) : "Query";
        _a = this, cache = _a.cache, client = _a.client;
        execContext = {
          fragmentMap: fragmentMap,
          context: (0, _tslib.__assign)((0, _tslib.__assign)({}, context), {
            cache: cache,
            client: client
          }),
          variables: variables,
          fragmentMatcher: fragmentMatcher,
          defaultOperationType: defaultOperationType,
          exportedVariables: {},
          selectionsToResolve: selectionsToResolve,
          onlyRunForcedResolvers: onlyRunForcedResolvers
        };
        isClientFieldDescendant = false;
        return [2 /*return*/, this.resolveSelectionSet(mainDefinition.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function (result) {
          return {
            result: result,
            exportedVariables: execContext.exportedVariables
          };
        })];
      });
    });
  };
  LocalState.prototype.resolveSelectionSet = function (selectionSet, isClientFieldDescendant, rootValue, execContext) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var fragmentMap, context, variables, resultsToMerge, execute;
      var _this = this;
      return (0, _tslib.__generator)(this, function (_a) {
        fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;
        resultsToMerge = [rootValue];
        execute = function (selection) {
          return (0, _tslib.__awaiter)(_this, void 0, void 0, function () {
            var fragment, typeCondition;
            return (0, _tslib.__generator)(this, function (_a) {
              if (!isClientFieldDescendant && !execContext.selectionsToResolve.has(selection)) {
                // Skip selections without @client directives
                // (still processing if one of the ancestors or one of the child fields has @client directive)
                return [2 /*return*/];
              }
              if (!(0, _index2.shouldInclude)(selection, variables)) {
                // Skip this entirely.
                return [2 /*return*/];
              }
              if ((0, _index2.isField)(selection)) {
                return [2 /*return*/, this.resolveField(selection, isClientFieldDescendant, rootValue, execContext).then(function (fieldResult) {
                  var _a;
                  if (typeof fieldResult !== "undefined") {
                    resultsToMerge.push((_a = {}, _a[(0, _index2.resultKeyNameFromField)(selection)] = fieldResult, _a));
                  }
                })];
              }
              if ((0, _index2.isInlineFragment)(selection)) {
                fragment = selection;
              } else {
                // This is a named fragment.
                fragment = fragmentMap[selection.name.value];
                (0, _index.invariant)(fragment, 18, selection.name.value);
              }
              if (fragment && fragment.typeCondition) {
                typeCondition = fragment.typeCondition.name.value;
                if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {
                  return [2 /*return*/, this.resolveSelectionSet(fragment.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function (fragmentResult) {
                    resultsToMerge.push(fragmentResult);
                  })];
                }
              }
              return [2 /*return*/];
            });
          });
        };
        return [2 /*return*/, Promise.all(selectionSet.selections.map(execute)).then(function () {
          return (0, _index2.mergeDeepArray)(resultsToMerge);
        })];
      });
    });
  };
  LocalState.prototype.resolveField = function (field, isClientFieldDescendant, rootValue, execContext) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;
      var _this = this;
      return (0, _tslib.__generator)(this, function (_a) {
        if (!rootValue) {
          return [2 /*return*/, null];
        }
        variables = execContext.variables;
        fieldName = field.name.value;
        aliasedFieldName = (0, _index2.resultKeyNameFromField)(field);
        aliasUsed = fieldName !== aliasedFieldName;
        defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];
        resultPromise = Promise.resolve(defaultResult);
        // Usually all local resolvers are run when passing through here, but
        // if we've specifically identified that we only want to run forced
        // resolvers (that is, resolvers for fields marked with
        // `@client(always: true)`), then we'll skip running non-forced resolvers.
        if (!execContext.onlyRunForcedResolvers || this.shouldForceResolvers(field)) {
          resolverType = rootValue.__typename || execContext.defaultOperationType;
          resolverMap = this.resolvers && this.resolvers[resolverType];
          if (resolverMap) {
            resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];
            if (resolve) {
              resultPromise = Promise.resolve(
              // In case the resolve function accesses reactive variables,
              // set cacheSlot to the current cache instance.
              _index3.cacheSlot.withValue(this.cache, resolve, [rootValue, (0, _index2.argumentsObjectFromField)(field, variables), execContext.context, {
                field: field,
                fragmentMap: execContext.fragmentMap
              }]));
            }
          }
        }
        return [2 /*return*/, resultPromise.then(function (result) {
          var _a, _b;
          if (result === void 0) {
            result = defaultResult;
          }
          // If an @export directive is associated with the current field, store
          // the `as` export variable name and current result for later use.
          if (field.directives) {
            field.directives.forEach(function (directive) {
              if (directive.name.value === "export" && directive.arguments) {
                directive.arguments.forEach(function (arg) {
                  if (arg.name.value === "as" && arg.value.kind === "StringValue") {
                    execContext.exportedVariables[arg.value.value] = result;
                  }
                });
              }
            });
          }
          // Handle all scalar types here.
          if (!field.selectionSet) {
            return result;
          }
          // From here down, the field has a selection set, which means it's trying
          // to query a GraphQLObjectType.
          if (result == null) {
            // Basically any field in a GraphQL response can be null, or missing
            return result;
          }
          var isClientField = (_b = (_a = field.directives) === null || _a === void 0 ? void 0 : _a.some(function (d) {
            return d.name.value === "client";
          })) !== null && _b !== void 0 ? _b : false;
          if (Array.isArray(result)) {
            return _this.resolveSubSelectedArray(field, isClientFieldDescendant || isClientField, result, execContext);
          }
          // Returned value is an object, and the query has a sub-selection. Recurse.
          if (field.selectionSet) {
            return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant || isClientField, result, execContext);
          }
        })];
      });
    });
  };
  LocalState.prototype.resolveSubSelectedArray = function (field, isClientFieldDescendant, result, execContext) {
    var _this = this;
    return Promise.all(result.map(function (item) {
      if (item === null) {
        return null;
      }
      // This is a nested array, recurse.
      if (Array.isArray(item)) {
        return _this.resolveSubSelectedArray(field, isClientFieldDescendant, item, execContext);
      }
      // This is an object, run the selection set on it.
      if (field.selectionSet) {
        return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant, item, execContext);
      }
    }));
  };
  // Collect selection nodes on paths from document root down to all @client directives.
  // This function takes into account transitive fragment spreads.
  // Complexity equals to a single `visit` over the full document.
  LocalState.prototype.collectSelectionsToResolve = function (mainDefinition, fragmentMap) {
    var isSingleASTNode = function (node) {
      return !Array.isArray(node);
    };
    var selectionsToResolveCache = this.selectionsToResolveCache;
    function collectByDefinition(definitionNode) {
      if (!selectionsToResolveCache.has(definitionNode)) {
        var matches_1 = new Set();
        selectionsToResolveCache.set(definitionNode, matches_1);
        (0, _graphql.visit)(definitionNode, {
          Directive: function (node, _, __, ___, ancestors) {
            if (node.name.value === "client") {
              ancestors.forEach(function (node) {
                if (isSingleASTNode(node) && (0, _graphql.isSelectionNode)(node)) {
                  matches_1.add(node);
                }
              });
            }
          },
          FragmentSpread: function (spread, _, __, ___, ancestors) {
            var fragment = fragmentMap[spread.name.value];
            (0, _index.invariant)(fragment, 19, spread.name.value);
            var fragmentSelections = collectByDefinition(fragment);
            if (fragmentSelections.size > 0) {
              // Fragment for this spread contains @client directive (either directly or transitively)
              // Collect selection nodes on paths from the root down to fields with the @client directive
              ancestors.forEach(function (node) {
                if (isSingleASTNode(node) && (0, _graphql.isSelectionNode)(node)) {
                  matches_1.add(node);
                }
              });
              matches_1.add(spread);
              fragmentSelections.forEach(function (selection) {
                matches_1.add(selection);
              });
            }
          }
        });
      }
      return selectionsToResolveCache.get(definitionNode);
    }
    return collectByDefinition(mainDefinition);
  };
  return LocalState;
}();
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","graphql":"../node_modules/graphql/index.mjs","../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js","../cache/index.js":"../node_modules/@apollo/client/cache/index.js"}],"../node_modules/@apollo/client/core/QueryInfo.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QueryInfo = void 0;
exports.shouldWriteResult = shouldWriteResult;
var _tslib = require("tslib");
var _equality = require("@wry/equality");
var _index = require("../utilities/index.js");
var _ObservableQuery = require("./ObservableQuery.js");
var _networkStatus = require("./networkStatus.js");
var destructiveMethodCounts = new (_index.canUseWeakMap ? WeakMap : Map)();
function wrapDestructiveCacheMethod(cache, methodName) {
  var original = cache[methodName];
  if (typeof original === "function") {
    cache[methodName] = function () {
      destructiveMethodCounts.set(cache,
      // The %1e15 allows the count to wrap around to 0 safely every
      // quadrillion evictions, so there's no risk of overflow. To be
      // clear, this is more of a pedantic principle than something
      // that matters in any conceivable practical scenario.
      (destructiveMethodCounts.get(cache) + 1) % 1e15);
      // @ts-expect-error this is just too generic to be typed correctly
      return original.apply(this, arguments);
    };
  }
}
function cancelNotifyTimeout(info) {
  if (info["notifyTimeout"]) {
    clearTimeout(info["notifyTimeout"]);
    info["notifyTimeout"] = void 0;
  }
}
// A QueryInfo object represents a single query managed by the
// QueryManager, which tracks all QueryInfo objects by queryId in its
// this.queries Map. QueryInfo objects store the latest results and errors
// for the given query, and are responsible for reporting those results to
// the corresponding ObservableQuery, via the QueryInfo.notify method.
// Results are reported asynchronously whenever setDiff marks the
// QueryInfo object as dirty, though a call to the QueryManager's
// broadcastQueries method may trigger the notification before it happens
// automatically. This class used to be a simple interface type without
// any field privacy or meaningful methods, which is why it still has so
// many public fields. The effort to lock down and simplify the QueryInfo
// interface is ongoing, and further improvements are welcome.
var QueryInfo = exports.QueryInfo = /** @class */function () {
  function QueryInfo(queryManager, queryId) {
    if (queryId === void 0) {
      queryId = queryManager.generateQueryId();
    }
    this.queryId = queryId;
    this.listeners = new Set();
    this.document = null;
    this.lastRequestId = 1;
    this.stopped = false;
    this.dirty = false;
    this.observableQuery = null;
    var cache = this.cache = queryManager.cache;
    // Track how often cache.evict is called, since we want eviction to
    // override the feud-stopping logic in the markResult method, by
    // causing shouldWrite to return true. Wrapping the cache.evict method
    // is a bit of a hack, but it saves us from having to make eviction
    // counting an official part of the ApolloCache API.
    if (!destructiveMethodCounts.has(cache)) {
      destructiveMethodCounts.set(cache, 0);
      wrapDestructiveCacheMethod(cache, "evict");
      wrapDestructiveCacheMethod(cache, "modify");
      wrapDestructiveCacheMethod(cache, "reset");
    }
  }
  QueryInfo.prototype.init = function (query) {
    var networkStatus = query.networkStatus || _networkStatus.NetworkStatus.loading;
    if (this.variables && this.networkStatus !== _networkStatus.NetworkStatus.loading && !(0, _equality.equal)(this.variables, query.variables)) {
      networkStatus = _networkStatus.NetworkStatus.setVariables;
    }
    if (!(0, _equality.equal)(query.variables, this.variables)) {
      this.lastDiff = void 0;
    }
    Object.assign(this, {
      document: query.document,
      variables: query.variables,
      networkError: null,
      graphQLErrors: this.graphQLErrors || [],
      networkStatus: networkStatus
    });
    if (query.observableQuery) {
      this.setObservableQuery(query.observableQuery);
    }
    if (query.lastRequestId) {
      this.lastRequestId = query.lastRequestId;
    }
    return this;
  };
  QueryInfo.prototype.reset = function () {
    cancelNotifyTimeout(this);
    this.dirty = false;
  };
  QueryInfo.prototype.getDiff = function () {
    var options = this.getDiffOptions();
    if (this.lastDiff && (0, _equality.equal)(options, this.lastDiff.options)) {
      return this.lastDiff.diff;
    }
    this.updateWatch(this.variables);
    var oq = this.observableQuery;
    if (oq && oq.options.fetchPolicy === "no-cache") {
      return {
        complete: false
      };
    }
    var diff = this.cache.diff(options);
    this.updateLastDiff(diff, options);
    return diff;
  };
  QueryInfo.prototype.updateLastDiff = function (diff, options) {
    this.lastDiff = diff ? {
      diff: diff,
      options: options || this.getDiffOptions()
    } : void 0;
  };
  QueryInfo.prototype.getDiffOptions = function (variables) {
    var _a;
    if (variables === void 0) {
      variables = this.variables;
    }
    return {
      query: this.document,
      variables: variables,
      returnPartialData: true,
      optimistic: true,
      canonizeResults: (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a.options.canonizeResults
    };
  };
  QueryInfo.prototype.setDiff = function (diff) {
    var _this = this;
    var oldDiff = this.lastDiff && this.lastDiff.diff;
    this.updateLastDiff(diff);
    if (!this.dirty && !(0, _equality.equal)(oldDiff && oldDiff.result, diff && diff.result)) {
      this.dirty = true;
      if (!this.notifyTimeout) {
        this.notifyTimeout = setTimeout(function () {
          return _this.notify();
        }, 0);
      }
    }
  };
  QueryInfo.prototype.setObservableQuery = function (oq) {
    var _this = this;
    if (oq === this.observableQuery) return;
    if (this.oqListener) {
      this.listeners.delete(this.oqListener);
    }
    this.observableQuery = oq;
    if (oq) {
      oq["queryInfo"] = this;
      this.listeners.add(this.oqListener = function () {
        var diff = _this.getDiff();
        if (diff.fromOptimisticTransaction) {
          // If this diff came from an optimistic transaction, deliver the
          // current cache data to the ObservableQuery, but don't perform a
          // reobservation, since oq.reobserveCacheFirst might make a network
          // request, and we never want to trigger network requests in the
          // middle of optimistic updates.
          oq["observe"]();
        } else {
          // Otherwise, make the ObservableQuery "reobserve" the latest data
          // using a temporary fetch policy of "cache-first", so complete cache
          // results have a chance to be delivered without triggering additional
          // network requests, even when options.fetchPolicy is "network-only"
          // or "cache-and-network". All other fetch policies are preserved by
          // this method, and are handled by calling oq.reobserve(). If this
          // reobservation is spurious, isDifferentFromLastResult still has a
          // chance to catch it before delivery to ObservableQuery subscribers.
          (0, _ObservableQuery.reobserveCacheFirst)(oq);
        }
      });
    } else {
      delete this.oqListener;
    }
  };
  QueryInfo.prototype.notify = function () {
    var _this = this;
    cancelNotifyTimeout(this);
    if (this.shouldNotify()) {
      this.listeners.forEach(function (listener) {
        return listener(_this);
      });
    }
    this.dirty = false;
  };
  QueryInfo.prototype.shouldNotify = function () {
    if (!this.dirty || !this.listeners.size) {
      return false;
    }
    if ((0, _networkStatus.isNetworkRequestInFlight)(this.networkStatus) && this.observableQuery) {
      var fetchPolicy = this.observableQuery.options.fetchPolicy;
      if (fetchPolicy !== "cache-only" && fetchPolicy !== "cache-and-network") {
        return false;
      }
    }
    return true;
  };
  QueryInfo.prototype.stop = function () {
    if (!this.stopped) {
      this.stopped = true;
      // Cancel the pending notify timeout
      this.reset();
      this.cancel();
      // Revert back to the no-op version of cancel inherited from
      // QueryInfo.prototype.
      this.cancel = QueryInfo.prototype.cancel;
      var oq = this.observableQuery;
      if (oq) oq.stopPolling();
    }
  };
  // This method is a no-op by default, until/unless overridden by the
  // updateWatch method.
  QueryInfo.prototype.cancel = function () {};
  QueryInfo.prototype.updateWatch = function (variables) {
    var _this = this;
    if (variables === void 0) {
      variables = this.variables;
    }
    var oq = this.observableQuery;
    if (oq && oq.options.fetchPolicy === "no-cache") {
      return;
    }
    var watchOptions = (0, _tslib.__assign)((0, _tslib.__assign)({}, this.getDiffOptions(variables)), {
      watcher: this,
      callback: function (diff) {
        return _this.setDiff(diff);
      }
    });
    if (!this.lastWatch || !(0, _equality.equal)(watchOptions, this.lastWatch)) {
      this.cancel();
      this.cancel = this.cache.watch(this.lastWatch = watchOptions);
    }
  };
  QueryInfo.prototype.resetLastWrite = function () {
    this.lastWrite = void 0;
  };
  QueryInfo.prototype.shouldWrite = function (result, variables) {
    var lastWrite = this.lastWrite;
    return !(lastWrite &&
    // If cache.evict has been called since the last time we wrote this
    // data into the cache, there's a chance writing this result into
    // the cache will repair what was evicted.
    lastWrite.dmCount === destructiveMethodCounts.get(this.cache) && (0, _equality.equal)(variables, lastWrite.variables) && (0, _equality.equal)(result.data, lastWrite.result.data));
  };
  QueryInfo.prototype.markResult = function (result, document, options, cacheWriteBehavior) {
    var _this = this;
    var merger = new _index.DeepMerger();
    var graphQLErrors = (0, _index.isNonEmptyArray)(result.errors) ? result.errors.slice(0) : [];
    // Cancel the pending notify timeout (if it exists) to prevent extraneous network
    // requests. To allow future notify timeouts, diff and dirty are reset as well.
    this.reset();
    if ("incremental" in result && (0, _index.isNonEmptyArray)(result.incremental)) {
      var mergedData = (0, _index.mergeIncrementalData)(this.getDiff().result, result);
      result.data = mergedData;
      // Detect the first chunk of a deferred query and merge it with existing
      // cache data. This ensures a `cache-first` fetch policy that returns
      // partial cache data or a `cache-and-network` fetch policy that already
      // has full data in the cache does not complain when trying to merge the
      // initial deferred server data with existing cache data.
    } else if ("hasNext" in result && result.hasNext) {
      var diff = this.getDiff();
      result.data = merger.merge(diff.result, result.data);
    }
    this.graphQLErrors = graphQLErrors;
    if (options.fetchPolicy === "no-cache") {
      this.updateLastDiff({
        result: result.data,
        complete: true
      }, this.getDiffOptions(options.variables));
    } else if (cacheWriteBehavior !== 0 /* CacheWriteBehavior.FORBID */) {
      if (shouldWriteResult(result, options.errorPolicy)) {
        // Using a transaction here so we have a chance to read the result
        // back from the cache before the watch callback fires as a result
        // of writeQuery, so we can store the new diff quietly and ignore
        // it when we receive it redundantly from the watch callback.
        this.cache.performTransaction(function (cache) {
          if (_this.shouldWrite(result, options.variables)) {
            cache.writeQuery({
              query: document,
              data: result.data,
              variables: options.variables,
              overwrite: cacheWriteBehavior === 1 /* CacheWriteBehavior.OVERWRITE */
            });
            _this.lastWrite = {
              result: result,
              variables: options.variables,
              dmCount: destructiveMethodCounts.get(_this.cache)
            };
          } else {
            // If result is the same as the last result we received from
            // the network (and the variables match too), avoid writing
            // result into the cache again. The wisdom of skipping this
            // cache write is far from obvious, since any cache write
            // could be the one that puts the cache back into a desired
            // state, fixing corruption or missing data. However, if we
            // always write every network result into the cache, we enable
            // feuds between queries competing to update the same data in
            // incompatible ways, which can lead to an endless cycle of
            // cache broadcasts and useless network requests. As with any
            // feud, eventually one side must step back from the brink,
            // letting the other side(s) have the last word(s). There may
            // be other points where we could break this cycle, such as
            // silencing the broadcast for cache.writeQuery (not a good
            // idea, since it just delays the feud a bit) or somehow
            // avoiding the network request that just happened (also bad,
            // because the server could return useful new data). All
            // options considered, skipping this cache write seems to be
            // the least damaging place to break the cycle, because it
            // reflects the intuition that we recently wrote this exact
            // result into the cache, so the cache *should* already/still
            // contain this data. If some other query has clobbered that
            // data in the meantime, that's too bad, but there will be no
            // winners if every query blindly reverts to its own version
            // of the data. This approach also gives the network a chance
            // to return new data, which will be written into the cache as
            // usual, notifying only those queries that are directly
            // affected by the cache updates, as usual. In the future, an
            // even more sophisticated cache could perhaps prevent or
            // mitigate the clobbering somehow, but that would make this
            // particular cache write even less important, and thus
            // skipping it would be even safer than it is today.
            if (_this.lastDiff && _this.lastDiff.diff.complete) {
              // Reuse data from the last good (complete) diff that we
              // received, when possible.
              result.data = _this.lastDiff.diff.result;
              return;
            }
            // If the previous this.diff was incomplete, fall through to
            // re-reading the latest data with cache.diff, below.
          }
          var diffOptions = _this.getDiffOptions(options.variables);
          var diff = cache.diff(diffOptions);
          // In case the QueryManager stops this QueryInfo before its
          // results are delivered, it's important to avoid restarting the
          // cache watch when markResult is called. We also avoid updating
          // the watch if we are writing a result that doesn't match the current
          // variables to avoid race conditions from broadcasting the wrong
          // result.
          if (!_this.stopped && (0, _equality.equal)(_this.variables, options.variables)) {
            // Any time we're about to update this.diff, we need to make
            // sure we've started watching the cache.
            _this.updateWatch(options.variables);
          }
          // If we're allowed to write to the cache, and we can read a
          // complete result from the cache, update result.data to be the
          // result from the cache, rather than the raw network result.
          // Set without setDiff to avoid triggering a notify call, since
          // we have other ways of notifying for this result.
          _this.updateLastDiff(diff, diffOptions);
          if (diff.complete) {
            result.data = diff.result;
          }
        });
      } else {
        this.lastWrite = void 0;
      }
    }
  };
  QueryInfo.prototype.markReady = function () {
    this.networkError = null;
    return this.networkStatus = _networkStatus.NetworkStatus.ready;
  };
  QueryInfo.prototype.markError = function (error) {
    this.networkStatus = _networkStatus.NetworkStatus.error;
    this.lastWrite = void 0;
    this.reset();
    if (error.graphQLErrors) {
      this.graphQLErrors = error.graphQLErrors;
    }
    if (error.networkError) {
      this.networkError = error.networkError;
    }
    return error;
  };
  return QueryInfo;
}();
function shouldWriteResult(result, errorPolicy) {
  if (errorPolicy === void 0) {
    errorPolicy = "none";
  }
  var ignoreErrors = errorPolicy === "ignore" || errorPolicy === "all";
  var writeWithErrors = !(0, _index.graphQLResultHasError)(result);
  if (!writeWithErrors && ignoreErrors && result.data) {
    writeWithErrors = true;
  }
  return writeWithErrors;
}
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","@wry/equality":"../node_modules/@wry/equality/lib/index.js","../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js","./ObservableQuery.js":"../node_modules/@apollo/client/core/ObservableQuery.js","./networkStatus.js":"../node_modules/@apollo/client/core/networkStatus.js"}],"../node_modules/@apollo/client/core/QueryManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QueryManager = void 0;
var _tslib = require("tslib");
var _index = require("../utilities/globals/index.js");
var _equality = require("@wry/equality");
var _index2 = require("../link/core/index.js");
var _index3 = require("../utilities/index.js");
var _index4 = require("../cache/index.js");
var _incrementalResult = require("../utilities/common/incrementalResult.js");
var _index5 = require("../errors/index.js");
var _ObservableQuery = require("./ObservableQuery.js");
var _networkStatus = require("./networkStatus.js");
var _LocalState = require("./LocalState.js");
var _QueryInfo = require("./QueryInfo.js");
var hasOwnProperty = Object.prototype.hasOwnProperty;
var QueryManager = exports.QueryManager = /** @class */function () {
  function QueryManager(_a) {
    var cache = _a.cache,
      link = _a.link,
      defaultOptions = _a.defaultOptions,
      documentTransform = _a.documentTransform,
      _b = _a.queryDeduplication,
      queryDeduplication = _b === void 0 ? false : _b,
      onBroadcast = _a.onBroadcast,
      _c = _a.ssrMode,
      ssrMode = _c === void 0 ? false : _c,
      _d = _a.clientAwareness,
      clientAwareness = _d === void 0 ? {} : _d,
      localState = _a.localState,
      _e = _a.assumeImmutableResults,
      assumeImmutableResults = _e === void 0 ? !!cache.assumeImmutableResults : _e;
    var _this = this;
    this.clientAwareness = {};
    // All the queries that the QueryManager is currently managing (not
    // including mutations and subscriptions).
    this.queries = new Map();
    // Maps from queryId strings to Promise rejection functions for
    // currently active queries and fetches.
    // Use protected instead of private field so
    // @apollo/experimental-nextjs-app-support can access type info.
    this.fetchCancelFns = new Map();
    this.transformCache = new (_index3.canUseWeakMap ? WeakMap : Map)();
    this.queryIdCounter = 1;
    this.requestIdCounter = 1;
    this.mutationIdCounter = 1;
    // Use protected instead of private field so
    // @apollo/experimental-nextjs-app-support can access type info.
    this.inFlightLinkObservables = new Map();
    var defaultDocumentTransform = new _index3.DocumentTransform(function (document) {
      return _this.cache.transformDocument(document);
    },
    // Allow the apollo cache to manage its own transform caches
    {
      cache: false
    });
    this.cache = cache;
    this.link = link;
    this.defaultOptions = defaultOptions || Object.create(null);
    this.queryDeduplication = queryDeduplication;
    this.clientAwareness = clientAwareness;
    this.localState = localState || new _LocalState.LocalState({
      cache: cache
    });
    this.ssrMode = ssrMode;
    this.assumeImmutableResults = assumeImmutableResults;
    this.documentTransform = documentTransform ? defaultDocumentTransform.concat(documentTransform)
    // The custom document transform may add new fragment spreads or new
    // field selections, so we want to give the cache a chance to run
    // again. For example, the InMemoryCache adds __typename to field
    // selections and fragments from the fragment registry.
    .concat(defaultDocumentTransform) : defaultDocumentTransform;
    if (this.onBroadcast = onBroadcast) {
      this.mutationStore = Object.create(null);
    }
  }
  /**
   * Call this method to terminate any active query processes, making it safe
   * to dispose of this QueryManager instance.
   */
  QueryManager.prototype.stop = function () {
    var _this = this;
    this.queries.forEach(function (_info, queryId) {
      _this.stopQueryNoBroadcast(queryId);
    });
    this.cancelPendingFetches((0, _index.newInvariantError)(25));
  };
  QueryManager.prototype.cancelPendingFetches = function (error) {
    this.fetchCancelFns.forEach(function (cancel) {
      return cancel(error);
    });
    this.fetchCancelFns.clear();
  };
  QueryManager.prototype.mutate = function (_a) {
    var _b, _c;
    var mutation = _a.mutation,
      variables = _a.variables,
      optimisticResponse = _a.optimisticResponse,
      updateQueries = _a.updateQueries,
      _d = _a.refetchQueries,
      refetchQueries = _d === void 0 ? [] : _d,
      _e = _a.awaitRefetchQueries,
      awaitRefetchQueries = _e === void 0 ? false : _e,
      updateWithProxyFn = _a.update,
      onQueryUpdated = _a.onQueryUpdated,
      _f = _a.fetchPolicy,
      fetchPolicy = _f === void 0 ? ((_b = this.defaultOptions.mutate) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || "network-only" : _f,
      _g = _a.errorPolicy,
      errorPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.errorPolicy) || "none" : _g,
      keepRootFields = _a.keepRootFields,
      context = _a.context;
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var mutationId, hasClientExports, mutationStoreValue, self;
      return (0, _tslib.__generator)(this, function (_h) {
        switch (_h.label) {
          case 0:
            (0, _index.invariant)(mutation, 26);
            (0, _index.invariant)(fetchPolicy === "network-only" || fetchPolicy === "no-cache", 27);
            mutationId = this.generateMutationId();
            mutation = this.cache.transformForLink(this.transform(mutation));
            hasClientExports = this.getDocumentInfo(mutation).hasClientExports;
            variables = this.getVariables(mutation, variables);
            if (!hasClientExports) return [3 /*break*/, 2];
            return [4 /*yield*/, this.localState.addExportedVariables(mutation, variables, context)];
          case 1:
            variables = _h.sent();
            _h.label = 2;
          case 2:
            mutationStoreValue = this.mutationStore && (this.mutationStore[mutationId] = {
              mutation: mutation,
              variables: variables,
              loading: true,
              error: null
            });
            if (optimisticResponse) {
              this.markMutationOptimistic(optimisticResponse, {
                mutationId: mutationId,
                document: mutation,
                variables: variables,
                fetchPolicy: fetchPolicy,
                errorPolicy: errorPolicy,
                context: context,
                updateQueries: updateQueries,
                update: updateWithProxyFn,
                keepRootFields: keepRootFields
              });
            }
            this.broadcastQueries();
            self = this;
            return [2 /*return*/, new Promise(function (resolve, reject) {
              return (0, _index3.asyncMap)(self.getObservableFromLink(mutation, (0, _tslib.__assign)((0, _tslib.__assign)({}, context), {
                optimisticResponse: optimisticResponse
              }), variables, false), function (result) {
                if ((0, _index3.graphQLResultHasError)(result) && errorPolicy === "none") {
                  throw new _index5.ApolloError({
                    graphQLErrors: (0, _index3.getGraphQLErrorsFromResult)(result)
                  });
                }
                if (mutationStoreValue) {
                  mutationStoreValue.loading = false;
                  mutationStoreValue.error = null;
                }
                var storeResult = (0, _tslib.__assign)({}, result);
                if (typeof refetchQueries === "function") {
                  refetchQueries = refetchQueries(storeResult);
                }
                if (errorPolicy === "ignore" && (0, _index3.graphQLResultHasError)(storeResult)) {
                  delete storeResult.errors;
                }
                return self.markMutationResult({
                  mutationId: mutationId,
                  result: storeResult,
                  document: mutation,
                  variables: variables,
                  fetchPolicy: fetchPolicy,
                  errorPolicy: errorPolicy,
                  context: context,
                  update: updateWithProxyFn,
                  updateQueries: updateQueries,
                  awaitRefetchQueries: awaitRefetchQueries,
                  refetchQueries: refetchQueries,
                  removeOptimistic: optimisticResponse ? mutationId : void 0,
                  onQueryUpdated: onQueryUpdated,
                  keepRootFields: keepRootFields
                });
              }).subscribe({
                next: function (storeResult) {
                  self.broadcastQueries();
                  // Since mutations might receive multiple payloads from the
                  // ApolloLink chain (e.g. when used with @defer),
                  // we resolve with a SingleExecutionResult or after the final
                  // ExecutionPatchResult has arrived and we have assembled the
                  // multipart response into a single result.
                  if (!("hasNext" in storeResult) || storeResult.hasNext === false) {
                    resolve(storeResult);
                  }
                },
                error: function (err) {
                  if (mutationStoreValue) {
                    mutationStoreValue.loading = false;
                    mutationStoreValue.error = err;
                  }
                  if (optimisticResponse) {
                    self.cache.removeOptimistic(mutationId);
                  }
                  self.broadcastQueries();
                  reject(err instanceof _index5.ApolloError ? err : new _index5.ApolloError({
                    networkError: err
                  }));
                }
              });
            })];
        }
      });
    });
  };
  QueryManager.prototype.markMutationResult = function (mutation, cache) {
    var _this = this;
    if (cache === void 0) {
      cache = this.cache;
    }
    var result = mutation.result;
    var cacheWrites = [];
    var skipCache = mutation.fetchPolicy === "no-cache";
    if (!skipCache && (0, _QueryInfo.shouldWriteResult)(result, mutation.errorPolicy)) {
      if (!(0, _index3.isExecutionPatchIncrementalResult)(result)) {
        cacheWrites.push({
          result: result.data,
          dataId: "ROOT_MUTATION",
          query: mutation.document,
          variables: mutation.variables
        });
      }
      if ((0, _index3.isExecutionPatchIncrementalResult)(result) && (0, _index3.isNonEmptyArray)(result.incremental)) {
        var diff = cache.diff({
          id: "ROOT_MUTATION",
          // The cache complains if passed a mutation where it expects a
          // query, so we transform mutations and subscriptions to queries
          // (only once, thanks to this.transformCache).
          query: this.getDocumentInfo(mutation.document).asQuery,
          variables: mutation.variables,
          optimistic: false,
          returnPartialData: true
        });
        var mergedData = void 0;
        if (diff.result) {
          mergedData = (0, _incrementalResult.mergeIncrementalData)(diff.result, result);
        }
        if (typeof mergedData !== "undefined") {
          // cast the ExecutionPatchResult to FetchResult here since
          // ExecutionPatchResult never has `data` when returned from the server
          result.data = mergedData;
          cacheWrites.push({
            result: mergedData,
            dataId: "ROOT_MUTATION",
            query: mutation.document,
            variables: mutation.variables
          });
        }
      }
      var updateQueries_1 = mutation.updateQueries;
      if (updateQueries_1) {
        this.queries.forEach(function (_a, queryId) {
          var observableQuery = _a.observableQuery;
          var queryName = observableQuery && observableQuery.queryName;
          if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {
            return;
          }
          var updater = updateQueries_1[queryName];
          var _b = _this.queries.get(queryId),
            document = _b.document,
            variables = _b.variables;
          // Read the current query result from the store.
          var _c = cache.diff({
              query: document,
              variables: variables,
              returnPartialData: true,
              optimistic: false
            }),
            currentQueryResult = _c.result,
            complete = _c.complete;
          if (complete && currentQueryResult) {
            // Run our reducer using the current query result and the mutation result.
            var nextQueryResult = updater(currentQueryResult, {
              mutationResult: result,
              queryName: document && (0, _index3.getOperationName)(document) || void 0,
              queryVariables: variables
            });
            // Write the modified result back into the store if we got a new result.
            if (nextQueryResult) {
              cacheWrites.push({
                result: nextQueryResult,
                dataId: "ROOT_QUERY",
                query: document,
                variables: variables
              });
            }
          }
        });
      }
    }
    if (cacheWrites.length > 0 || mutation.refetchQueries || mutation.update || mutation.onQueryUpdated || mutation.removeOptimistic) {
      var results_1 = [];
      this.refetchQueries({
        updateCache: function (cache) {
          if (!skipCache) {
            cacheWrites.forEach(function (write) {
              return cache.write(write);
            });
          }
          // If the mutation has some writes associated with it then we need to
          // apply those writes to the store by running this reducer again with
          // a write action.
          var update = mutation.update;
          // Determine whether result is a SingleExecutionResult,
          // or the final ExecutionPatchResult.
          var isFinalResult = !(0, _index3.isExecutionPatchResult)(result) || (0, _index3.isExecutionPatchIncrementalResult)(result) && !result.hasNext;
          if (update) {
            if (!skipCache) {
              // Re-read the ROOT_MUTATION data we just wrote into the cache
              // (the first cache.write call in the cacheWrites.forEach loop
              // above), so field read functions have a chance to run for
              // fields within mutation result objects.
              var diff = cache.diff({
                id: "ROOT_MUTATION",
                // The cache complains if passed a mutation where it expects a
                // query, so we transform mutations and subscriptions to queries
                // (only once, thanks to this.transformCache).
                query: _this.getDocumentInfo(mutation.document).asQuery,
                variables: mutation.variables,
                optimistic: false,
                returnPartialData: true
              });
              if (diff.complete) {
                result = (0, _tslib.__assign)((0, _tslib.__assign)({}, result), {
                  data: diff.result
                });
                if ("incremental" in result) {
                  delete result.incremental;
                }
                if ("hasNext" in result) {
                  delete result.hasNext;
                }
              }
            }
            // If we've received the whole response,
            // either a SingleExecutionResult or the final ExecutionPatchResult,
            // call the update function.
            if (isFinalResult) {
              update(cache, result, {
                context: mutation.context,
                variables: mutation.variables
              });
            }
          }
          // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it
          // shallow to allow rolling back optimistic evictions.
          if (!skipCache && !mutation.keepRootFields && isFinalResult) {
            cache.modify({
              id: "ROOT_MUTATION",
              fields: function (value, _a) {
                var fieldName = _a.fieldName,
                  DELETE = _a.DELETE;
                return fieldName === "__typename" ? value : DELETE;
              }
            });
          }
        },
        include: mutation.refetchQueries,
        // Write the final mutation.result to the root layer of the cache.
        optimistic: false,
        // Remove the corresponding optimistic layer at the same time as we
        // write the final non-optimistic result.
        removeOptimistic: mutation.removeOptimistic,
        // Let the caller of client.mutate optionally determine the refetching
        // behavior for watched queries after the mutation.update function runs.
        // If no onQueryUpdated function was provided for this mutation, pass
        // null instead of undefined to disable the default refetching behavior.
        onQueryUpdated: mutation.onQueryUpdated || null
      }).forEach(function (result) {
        return results_1.push(result);
      });
      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {
        // Returning a promise here makes the mutation await that promise, so we
        // include results in that promise's work if awaitRefetchQueries or an
        // onQueryUpdated function was specified.
        return Promise.all(results_1).then(function () {
          return result;
        });
      }
    }
    return Promise.resolve(result);
  };
  QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {
    var _this = this;
    var data = typeof optimisticResponse === "function" ? optimisticResponse(mutation.variables) : optimisticResponse;
    return this.cache.recordOptimisticTransaction(function (cache) {
      try {
        _this.markMutationResult((0, _tslib.__assign)((0, _tslib.__assign)({}, mutation), {
          result: {
            data: data
          }
        }), cache);
      } catch (error) {
        globalThis.__DEV__ !== false && _index.invariant.error(error);
      }
    }, mutation.mutationId);
  };
  QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {
    return this.fetchConcastWithInfo(queryId, options, networkStatus).concast.promise;
  };
  QueryManager.prototype.getQueryStore = function () {
    var store = Object.create(null);
    this.queries.forEach(function (info, queryId) {
      store[queryId] = {
        variables: info.variables,
        networkStatus: info.networkStatus,
        networkError: info.networkError,
        graphQLErrors: info.graphQLErrors
      };
    });
    return store;
  };
  QueryManager.prototype.resetErrors = function (queryId) {
    var queryInfo = this.queries.get(queryId);
    if (queryInfo) {
      queryInfo.networkError = undefined;
      queryInfo.graphQLErrors = [];
    }
  };
  QueryManager.prototype.transform = function (document) {
    return this.documentTransform.transformDocument(document);
  };
  QueryManager.prototype.getDocumentInfo = function (document) {
    var transformCache = this.transformCache;
    if (!transformCache.has(document)) {
      var cacheEntry = {
        // TODO These three calls (hasClientExports, shouldForceResolvers, and
        // usesNonreactiveDirective) are performing independent full traversals
        // of the transformed document. We should consider merging these
        // traversals into a single pass in the future, though the work is
        // cached after the first time.
        hasClientExports: (0, _index3.hasClientExports)(document),
        hasForcedResolvers: this.localState.shouldForceResolvers(document),
        hasNonreactiveDirective: (0, _index3.hasDirectives)(["nonreactive"], document),
        clientQuery: this.localState.clientQuery(document),
        serverQuery: (0, _index3.removeDirectivesFromDocument)([{
          name: "client",
          remove: true
        }, {
          name: "connection"
        }, {
          name: "nonreactive"
        }], document),
        defaultVars: (0, _index3.getDefaultValues)((0, _index3.getOperationDefinition)(document)),
        // Transform any mutation or subscription operations to query operations
        // so we can read/write them from/to the cache.
        asQuery: (0, _tslib.__assign)((0, _tslib.__assign)({}, document), {
          definitions: document.definitions.map(function (def) {
            if (def.kind === "OperationDefinition" && def.operation !== "query") {
              return (0, _tslib.__assign)((0, _tslib.__assign)({}, def), {
                operation: "query"
              });
            }
            return def;
          })
        })
      };
      transformCache.set(document, cacheEntry);
    }
    return transformCache.get(document);
  };
  QueryManager.prototype.getVariables = function (document, variables) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, this.getDocumentInfo(document).defaultVars), variables);
  };
  QueryManager.prototype.watchQuery = function (options) {
    var query = this.transform(options.query);
    // assign variable default values if supplied
    // NOTE: We don't modify options.query here with the transformed query to
    // ensure observable.options.query is set to the raw untransformed query.
    options = (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
      variables: this.getVariables(query, options.variables)
    });
    if (typeof options.notifyOnNetworkStatusChange === "undefined") {
      options.notifyOnNetworkStatusChange = false;
    }
    var queryInfo = new _QueryInfo.QueryInfo(this);
    var observable = new _ObservableQuery.ObservableQuery({
      queryManager: this,
      queryInfo: queryInfo,
      options: options
    });
    observable["lastQuery"] = query;
    this.queries.set(observable.queryId, queryInfo);
    // We give queryInfo the transformed query to ensure the first cache diff
    // uses the transformed query instead of the raw query
    queryInfo.init({
      document: query,
      observableQuery: observable,
      variables: observable.variables
    });
    return observable;
  };
  QueryManager.prototype.query = function (options, queryId) {
    var _this = this;
    if (queryId === void 0) {
      queryId = this.generateQueryId();
    }
    (0, _index.invariant)(options.query, 28);
    (0, _index.invariant)(options.query.kind === "Document", 29);
    (0, _index.invariant)(!options.returnPartialData, 30);
    (0, _index.invariant)(!options.pollInterval, 31);
    return this.fetchQuery(queryId, (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
      query: this.transform(options.query)
    })).finally(function () {
      return _this.stopQuery(queryId);
    });
  };
  QueryManager.prototype.generateQueryId = function () {
    return String(this.queryIdCounter++);
  };
  QueryManager.prototype.generateRequestId = function () {
    return this.requestIdCounter++;
  };
  QueryManager.prototype.generateMutationId = function () {
    return String(this.mutationIdCounter++);
  };
  QueryManager.prototype.stopQueryInStore = function (queryId) {
    this.stopQueryInStoreNoBroadcast(queryId);
    this.broadcastQueries();
  };
  QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {
    var queryInfo = this.queries.get(queryId);
    if (queryInfo) queryInfo.stop();
  };
  QueryManager.prototype.clearStore = function (options) {
    if (options === void 0) {
      options = {
        discardWatches: true
      };
    }
    // Before we have sent the reset action to the store, we can no longer
    // rely on the results returned by in-flight requests since these may
    // depend on values that previously existed in the data portion of the
    // store. So, we cancel the promises and observers that we have issued
    // so far and not yet resolved (in the case of queries).
    this.cancelPendingFetches((0, _index.newInvariantError)(32));
    this.queries.forEach(function (queryInfo) {
      if (queryInfo.observableQuery) {
        // Set loading to true so listeners don't trigger unless they want
        // results with partial data.
        queryInfo.networkStatus = _networkStatus.NetworkStatus.loading;
      } else {
        queryInfo.stop();
      }
    });
    if (this.mutationStore) {
      this.mutationStore = Object.create(null);
    }
    // begin removing data from the store
    return this.cache.reset(options);
  };
  QueryManager.prototype.getObservableQueries = function (include) {
    var _this = this;
    if (include === void 0) {
      include = "active";
    }
    var queries = new Map();
    var queryNamesAndDocs = new Map();
    var legacyQueryOptions = new Set();
    if (Array.isArray(include)) {
      include.forEach(function (desc) {
        if (typeof desc === "string") {
          queryNamesAndDocs.set(desc, false);
        } else if ((0, _index3.isDocumentNode)(desc)) {
          queryNamesAndDocs.set(_this.transform(desc), false);
        } else if ((0, _index3.isNonNullObject)(desc) && desc.query) {
          legacyQueryOptions.add(desc);
        }
      });
    }
    this.queries.forEach(function (_a, queryId) {
      var oq = _a.observableQuery,
        document = _a.document;
      if (oq) {
        if (include === "all") {
          queries.set(queryId, oq);
          return;
        }
        var queryName = oq.queryName,
          fetchPolicy = oq.options.fetchPolicy;
        if (fetchPolicy === "standby" || include === "active" && !oq.hasObservers()) {
          return;
        }
        if (include === "active" || queryName && queryNamesAndDocs.has(queryName) || document && queryNamesAndDocs.has(document)) {
          queries.set(queryId, oq);
          if (queryName) queryNamesAndDocs.set(queryName, true);
          if (document) queryNamesAndDocs.set(document, true);
        }
      }
    });
    if (legacyQueryOptions.size) {
      legacyQueryOptions.forEach(function (options) {
        // We will be issuing a fresh network request for this query, so we
        // pre-allocate a new query ID here, using a special prefix to enable
        // cleaning up these temporary queries later, after fetching.
        var queryId = (0, _index3.makeUniqueId)("legacyOneTimeQuery");
        var queryInfo = _this.getQuery(queryId).init({
          document: options.query,
          variables: options.variables
        });
        var oq = new _ObservableQuery.ObservableQuery({
          queryManager: _this,
          queryInfo: queryInfo,
          options: (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
            fetchPolicy: "network-only"
          })
        });
        (0, _index.invariant)(oq.queryId === queryId);
        queryInfo.setObservableQuery(oq);
        queries.set(queryId, oq);
      });
    }
    if (globalThis.__DEV__ !== false && queryNamesAndDocs.size) {
      queryNamesAndDocs.forEach(function (included, nameOrDoc) {
        if (!included) {
          globalThis.__DEV__ !== false && _index.invariant.warn(typeof nameOrDoc === "string" ? 33 : 34, nameOrDoc);
        }
      });
    }
    return queries;
  };
  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {
    var _this = this;
    if (includeStandby === void 0) {
      includeStandby = false;
    }
    var observableQueryPromises = [];
    this.getObservableQueries(includeStandby ? "all" : "active").forEach(function (observableQuery, queryId) {
      var fetchPolicy = observableQuery.options.fetchPolicy;
      observableQuery.resetLastResults();
      if (includeStandby || fetchPolicy !== "standby" && fetchPolicy !== "cache-only") {
        observableQueryPromises.push(observableQuery.refetch());
      }
      _this.getQuery(queryId).setDiff(null);
    });
    this.broadcastQueries();
    return Promise.all(observableQueryPromises);
  };
  QueryManager.prototype.setObservableQuery = function (observableQuery) {
    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);
  };
  QueryManager.prototype.startGraphQLSubscription = function (_a) {
    var _this = this;
    var query = _a.query,
      fetchPolicy = _a.fetchPolicy,
      _b = _a.errorPolicy,
      errorPolicy = _b === void 0 ? "none" : _b,
      variables = _a.variables,
      _c = _a.context,
      context = _c === void 0 ? {} : _c;
    query = this.transform(query);
    variables = this.getVariables(query, variables);
    var makeObservable = function (variables) {
      return _this.getObservableFromLink(query, context, variables).map(function (result) {
        if (fetchPolicy !== "no-cache") {
          // the subscription interface should handle not sending us results we no longer subscribe to.
          // XXX I don't think we ever send in an object with errors, but we might in the future...
          if ((0, _QueryInfo.shouldWriteResult)(result, errorPolicy)) {
            _this.cache.write({
              query: query,
              result: result.data,
              dataId: "ROOT_SUBSCRIPTION",
              variables: variables
            });
          }
          _this.broadcastQueries();
        }
        var hasErrors = (0, _index3.graphQLResultHasError)(result);
        var hasProtocolErrors = (0, _index5.graphQLResultHasProtocolErrors)(result);
        if (hasErrors || hasProtocolErrors) {
          var errors = {};
          if (hasErrors) {
            errors.graphQLErrors = result.errors;
          }
          if (hasProtocolErrors) {
            errors.protocolErrors = result.extensions[_index5.PROTOCOL_ERRORS_SYMBOL];
          }
          // `errorPolicy` is a mechanism for handling GraphQL errors, according
          // to our documentation, so we throw protocol errors regardless of the
          // set error policy.
          if (errorPolicy === "none" || hasProtocolErrors) {
            throw new _index5.ApolloError(errors);
          }
        }
        if (errorPolicy === "ignore") {
          delete result.errors;
        }
        return result;
      });
    };
    if (this.getDocumentInfo(query).hasClientExports) {
      var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);
      return new _index3.Observable(function (observer) {
        var sub = null;
        observablePromise_1.then(function (observable) {
          return sub = observable.subscribe(observer);
        }, observer.error);
        return function () {
          return sub && sub.unsubscribe();
        };
      });
    }
    return makeObservable(variables);
  };
  QueryManager.prototype.stopQuery = function (queryId) {
    this.stopQueryNoBroadcast(queryId);
    this.broadcastQueries();
  };
  QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {
    this.stopQueryInStoreNoBroadcast(queryId);
    this.removeQuery(queryId);
  };
  QueryManager.prototype.removeQuery = function (queryId) {
    // teardown all links
    // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises
    // that each add their reject functions to fetchCancelFns.
    // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.
    // The same queryId could have two rejection fns for two promises
    this.fetchCancelFns.delete(queryId);
    if (this.queries.has(queryId)) {
      this.getQuery(queryId).stop();
      this.queries.delete(queryId);
    }
  };
  QueryManager.prototype.broadcastQueries = function () {
    if (this.onBroadcast) this.onBroadcast();
    this.queries.forEach(function (info) {
      return info.notify();
    });
  };
  QueryManager.prototype.getLocalState = function () {
    return this.localState;
  };
  QueryManager.prototype.getObservableFromLink = function (query, context, variables,
  // Prefer context.queryDeduplication if specified.
  deduplication) {
    var _this = this;
    var _a;
    if (deduplication === void 0) {
      deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication;
    }
    var observable;
    var _b = this.getDocumentInfo(query),
      serverQuery = _b.serverQuery,
      clientQuery = _b.clientQuery;
    if (serverQuery) {
      var _c = this,
        inFlightLinkObservables_1 = _c.inFlightLinkObservables,
        link = _c.link;
      var operation = {
        query: serverQuery,
        variables: variables,
        operationName: (0, _index3.getOperationName)(serverQuery) || void 0,
        context: this.prepareContext((0, _tslib.__assign)((0, _tslib.__assign)({}, context), {
          forceFetch: !deduplication
        }))
      };
      context = operation.context;
      if (deduplication) {
        var printedServerQuery_1 = (0, _index3.print)(serverQuery);
        var byVariables_1 = inFlightLinkObservables_1.get(printedServerQuery_1) || new Map();
        inFlightLinkObservables_1.set(printedServerQuery_1, byVariables_1);
        var varJson_1 = (0, _index4.canonicalStringify)(variables);
        observable = byVariables_1.get(varJson_1);
        if (!observable) {
          var concast = new _index3.Concast([(0, _index2.execute)(link, operation)]);
          byVariables_1.set(varJson_1, observable = concast);
          concast.beforeNext(function () {
            if (byVariables_1.delete(varJson_1) && byVariables_1.size < 1) {
              inFlightLinkObservables_1.delete(printedServerQuery_1);
            }
          });
        }
      } else {
        observable = new _index3.Concast([(0, _index2.execute)(link, operation)]);
      }
    } else {
      observable = new _index3.Concast([_index3.Observable.of({
        data: {}
      })]);
      context = this.prepareContext(context);
    }
    if (clientQuery) {
      observable = (0, _index3.asyncMap)(observable, function (result) {
        return _this.localState.runResolvers({
          document: clientQuery,
          remoteResult: result,
          context: context,
          variables: variables
        });
      });
    }
    return observable;
  };
  QueryManager.prototype.getResultsFromLink = function (queryInfo, cacheWriteBehavior, options) {
    var requestId = queryInfo.lastRequestId = this.generateRequestId();
    // Performing transformForLink here gives this.cache a chance to fill in
    // missing fragment definitions (for example) before sending this document
    // through the link chain.
    var linkDocument = this.cache.transformForLink(options.query);
    return (0, _index3.asyncMap)(this.getObservableFromLink(linkDocument, options.context, options.variables), function (result) {
      var graphQLErrors = (0, _index3.getGraphQLErrorsFromResult)(result);
      var hasErrors = graphQLErrors.length > 0;
      // If we interrupted this request by calling getResultsFromLink again
      // with the same QueryInfo object, we ignore the old results.
      if (requestId >= queryInfo.lastRequestId) {
        if (hasErrors && options.errorPolicy === "none") {
          // Throwing here effectively calls observer.error.
          throw queryInfo.markError(new _index5.ApolloError({
            graphQLErrors: graphQLErrors
          }));
        }
        // Use linkDocument rather than queryInfo.document so the
        // operation/fragments used to write the result are the same as the
        // ones used to obtain it from the link.
        queryInfo.markResult(result, linkDocument, options, cacheWriteBehavior);
        queryInfo.markReady();
      }
      var aqr = {
        data: result.data,
        loading: false,
        networkStatus: _networkStatus.NetworkStatus.ready
      };
      if (hasErrors && options.errorPolicy !== "ignore") {
        aqr.errors = graphQLErrors;
        aqr.networkStatus = _networkStatus.NetworkStatus.error;
      }
      return aqr;
    }, function (networkError) {
      var error = (0, _index5.isApolloError)(networkError) ? networkError : new _index5.ApolloError({
        networkError: networkError
      });
      // Avoid storing errors from older interrupted queries.
      if (requestId >= queryInfo.lastRequestId) {
        queryInfo.markError(error);
      }
      throw error;
    });
  };
  QueryManager.prototype.fetchConcastWithInfo = function (queryId, options,
  // The initial networkStatus for this fetch, most often
  // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,
  // or setVariables.
  networkStatus, query) {
    var _this = this;
    if (networkStatus === void 0) {
      networkStatus = _networkStatus.NetworkStatus.loading;
    }
    if (query === void 0) {
      query = options.query;
    }
    var variables = this.getVariables(query, options.variables);
    var queryInfo = this.getQuery(queryId);
    var defaults = this.defaultOptions.watchQuery;
    var _a = options.fetchPolicy,
      fetchPolicy = _a === void 0 ? defaults && defaults.fetchPolicy || "cache-first" : _a,
      _b = options.errorPolicy,
      errorPolicy = _b === void 0 ? defaults && defaults.errorPolicy || "none" : _b,
      _c = options.returnPartialData,
      returnPartialData = _c === void 0 ? false : _c,
      _d = options.notifyOnNetworkStatusChange,
      notifyOnNetworkStatusChange = _d === void 0 ? false : _d,
      _e = options.context,
      context = _e === void 0 ? {} : _e;
    var normalized = Object.assign({}, options, {
      query: query,
      variables: variables,
      fetchPolicy: fetchPolicy,
      errorPolicy: errorPolicy,
      returnPartialData: returnPartialData,
      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,
      context: context
    });
    var fromVariables = function (variables) {
      // Since normalized is always a fresh copy of options, it's safe to
      // modify its properties here, rather than creating yet another new
      // WatchQueryOptions object.
      normalized.variables = variables;
      var sourcesWithInfo = _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);
      if (
      // If we're in standby, postpone advancing options.fetchPolicy using
      // applyNextFetchPolicy.
      normalized.fetchPolicy !== "standby" &&
      // The "standby" policy currently returns [] from fetchQueryByPolicy, so
      // this is another way to detect when nothing was done/fetched.
      sourcesWithInfo.sources.length > 0 && queryInfo.observableQuery) {
        queryInfo.observableQuery["applyNextFetchPolicy"]("after-fetch", options);
      }
      return sourcesWithInfo;
    };
    // This cancel function needs to be set before the concast is created,
    // in case concast creation synchronously cancels the request.
    var cleanupCancelFn = function () {
      return _this.fetchCancelFns.delete(queryId);
    };
    this.fetchCancelFns.set(queryId, function (reason) {
      cleanupCancelFn();
      // This delay ensures the concast variable has been initialized.
      setTimeout(function () {
        return concast.cancel(reason);
      });
    });
    var concast, containsDataFromLink;
    // If the query has @export(as: ...) directives, then we need to
    // process those directives asynchronously. When there are no
    // @export directives (the common case), we deliberately avoid
    // wrapping the result of this.fetchQueryByPolicy in a Promise,
    // since the timing of result delivery is (unfortunately) important
    // for backwards compatibility. TODO This code could be simpler if
    // we deprecated and removed LocalState.
    if (this.getDocumentInfo(normalized.query).hasClientExports) {
      concast = new _index3.Concast(this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables).then(function (sourcesWithInfo) {
        return sourcesWithInfo.sources;
      }));
      // there is just no way we can synchronously get the *right* value here,
      // so we will assume `true`, which is the behaviour before the bug fix in
      // #10597. This means that bug is not fixed in that case, and is probably
      // un-fixable with reasonable effort for the edge case of @export as
      // directives.
      containsDataFromLink = true;
    } else {
      var sourcesWithInfo = fromVariables(normalized.variables);
      containsDataFromLink = sourcesWithInfo.fromLink;
      concast = new _index3.Concast(sourcesWithInfo.sources);
    }
    concast.promise.then(cleanupCancelFn, cleanupCancelFn);
    return {
      concast: concast,
      fromLink: containsDataFromLink
    };
  };
  QueryManager.prototype.refetchQueries = function (_a) {
    var _this = this;
    var updateCache = _a.updateCache,
      include = _a.include,
      _b = _a.optimistic,
      optimistic = _b === void 0 ? false : _b,
      _c = _a.removeOptimistic,
      removeOptimistic = _c === void 0 ? optimistic ? (0, _index3.makeUniqueId)("refetchQueries") : void 0 : _c,
      onQueryUpdated = _a.onQueryUpdated;
    var includedQueriesById = new Map();
    if (include) {
      this.getObservableQueries(include).forEach(function (oq, queryId) {
        includedQueriesById.set(queryId, {
          oq: oq,
          lastDiff: _this.getQuery(queryId).getDiff()
        });
      });
    }
    var results = new Map();
    if (updateCache) {
      this.cache.batch({
        update: updateCache,
        // Since you can perform any combination of cache reads and/or writes in
        // the cache.batch update function, its optimistic option can be either
        // a boolean or a string, representing three distinct modes of
        // operation:
        //
        // * false: read/write only the root layer
        // * true: read/write the topmost layer
        // * string: read/write a fresh optimistic layer with that ID string
        //
        // When typeof optimistic === "string", a new optimistic layer will be
        // temporarily created within cache.batch with that string as its ID. If
        // we then pass that same string as the removeOptimistic option, we can
        // make cache.batch immediately remove the optimistic layer after
        // running the updateCache function, triggering only one broadcast.
        //
        // However, the refetchQueries method accepts only true or false for its
        // optimistic option (not string). We interpret true to mean a temporary
        // optimistic layer should be created, to allow efficiently rolling back
        // the effect of the updateCache function, which involves passing a
        // string instead of true as the optimistic option to cache.batch, when
        // refetchQueries receives optimistic: true.
        //
        // In other words, we are deliberately not supporting the use case of
        // writing to an *existing* optimistic layer (using the refetchQueries
        // updateCache function), since that would potentially interfere with
        // other optimistic updates in progress. Instead, you can read/write
        // only the root layer by passing optimistic: false to refetchQueries,
        // or you can read/write a brand new optimistic layer that will be
        // automatically removed by passing optimistic: true.
        optimistic: optimistic && removeOptimistic || false,
        // The removeOptimistic option can also be provided by itself, even if
        // optimistic === false, to remove some previously-added optimistic
        // layer safely and efficiently, like we do in markMutationResult.
        //
        // If an explicit removeOptimistic string is provided with optimistic:
        // true, the removeOptimistic string will determine the ID of the
        // temporary optimistic layer, in case that ever matters.
        removeOptimistic: removeOptimistic,
        onWatchUpdated: function (watch, diff, lastDiff) {
          var oq = watch.watcher instanceof _QueryInfo.QueryInfo && watch.watcher.observableQuery;
          if (oq) {
            if (onQueryUpdated) {
              // Since we're about to handle this query now, remove it from
              // includedQueriesById, in case it was added earlier because of
              // options.include.
              includedQueriesById.delete(oq.queryId);
              var result = onQueryUpdated(oq, diff, lastDiff);
              if (result === true) {
                // The onQueryUpdated function requested the default refetching
                // behavior by returning true.
                result = oq.refetch();
              }
              // Record the result in the results Map, as long as onQueryUpdated
              // did not return false to skip/ignore this result.
              if (result !== false) {
                results.set(oq, result);
              }
              // Allow the default cache broadcast to happen, except when
              // onQueryUpdated returns false.
              return result;
            }
            if (onQueryUpdated !== null) {
              // If we don't have an onQueryUpdated function, and onQueryUpdated
              // was not disabled by passing null, make sure this query is
              // "included" like any other options.include-specified query.
              includedQueriesById.set(oq.queryId, {
                oq: oq,
                lastDiff: lastDiff,
                diff: diff
              });
            }
          }
        }
      });
    }
    if (includedQueriesById.size) {
      includedQueriesById.forEach(function (_a, queryId) {
        var oq = _a.oq,
          lastDiff = _a.lastDiff,
          diff = _a.diff;
        var result;
        // If onQueryUpdated is provided, we want to use it for all included
        // queries, even the QueryOptions ones.
        if (onQueryUpdated) {
          if (!diff) {
            var info = oq["queryInfo"];
            info.reset(); // Force info.getDiff() to read from cache.
            diff = info.getDiff();
          }
          result = onQueryUpdated(oq, diff, lastDiff);
        }
        // Otherwise, we fall back to refetching.
        if (!onQueryUpdated || result === true) {
          result = oq.refetch();
        }
        if (result !== false) {
          results.set(oq, result);
        }
        if (queryId.indexOf("legacyOneTimeQuery") >= 0) {
          _this.stopQueryNoBroadcast(queryId);
        }
      });
    }
    if (removeOptimistic) {
      // In case no updateCache callback was provided (so cache.batch was not
      // called above, and thus did not already remove the optimistic layer),
      // remove it here. Since this is a no-op when the layer has already been
      // removed, we do it even if we called cache.batch above, since it's
      // possible this.cache is an instance of some ApolloCache subclass other
      // than InMemoryCache, and does not fully support the removeOptimistic
      // option for cache.batch.
      this.cache.removeOptimistic(removeOptimistic);
    }
    return results;
  };
  QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, _a,
  // The initial networkStatus for this fetch, most often
  // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,
  // or setVariables.
  networkStatus) {
    var _this = this;
    var query = _a.query,
      variables = _a.variables,
      fetchPolicy = _a.fetchPolicy,
      refetchWritePolicy = _a.refetchWritePolicy,
      errorPolicy = _a.errorPolicy,
      returnPartialData = _a.returnPartialData,
      context = _a.context,
      notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;
    var oldNetworkStatus = queryInfo.networkStatus;
    queryInfo.init({
      document: query,
      variables: variables,
      networkStatus: networkStatus
    });
    var readCache = function () {
      return queryInfo.getDiff();
    };
    var resultsFromCache = function (diff, networkStatus) {
      if (networkStatus === void 0) {
        networkStatus = queryInfo.networkStatus || _networkStatus.NetworkStatus.loading;
      }
      var data = diff.result;
      if (globalThis.__DEV__ !== false && !returnPartialData && !(0, _equality.equal)(data, {})) {
        (0, _ObservableQuery.logMissingFieldErrors)(diff.missing);
      }
      var fromData = function (data) {
        return _index3.Observable.of((0, _tslib.__assign)({
          data: data,
          loading: (0, _networkStatus.isNetworkRequestInFlight)(networkStatus),
          networkStatus: networkStatus
        }, diff.complete ? null : {
          partial: true
        }));
      };
      if (data && _this.getDocumentInfo(query).hasForcedResolvers) {
        return _this.localState.runResolvers({
          document: query,
          remoteResult: {
            data: data
          },
          context: context,
          variables: variables,
          onlyRunForcedResolvers: true
        }).then(function (resolved) {
          return fromData(resolved.data || void 0);
        });
      }
      // Resolves https://github.com/apollographql/apollo-client/issues/10317.
      // If errorPolicy is 'none' and notifyOnNetworkStatusChange is true,
      // data was incorrectly returned from the cache on refetch:
      // if diff.missing exists, we should not return cache data.
      if (errorPolicy === "none" && networkStatus === _networkStatus.NetworkStatus.refetch && Array.isArray(diff.missing)) {
        return fromData(void 0);
      }
      return fromData(data);
    };
    var cacheWriteBehavior = fetchPolicy === "no-cache" ? 0 /* CacheWriteBehavior.FORBID */
    // Watched queries must opt into overwriting existing data on refetch,
    // by passing refetchWritePolicy: "overwrite" in their WatchQueryOptions.
    : networkStatus === _networkStatus.NetworkStatus.refetch && refetchWritePolicy !== "merge" ? 1 /* CacheWriteBehavior.OVERWRITE */ : 2 /* CacheWriteBehavior.MERGE */;
    var resultsFromLink = function () {
      return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {
        query: query,
        variables: variables,
        context: context,
        fetchPolicy: fetchPolicy,
        errorPolicy: errorPolicy
      });
    };
    var shouldNotify = notifyOnNetworkStatusChange && typeof oldNetworkStatus === "number" && oldNetworkStatus !== networkStatus && (0, _networkStatus.isNetworkRequestInFlight)(networkStatus);
    switch (fetchPolicy) {
      default:
      case "cache-first":
        {
          var diff = readCache();
          if (diff.complete) {
            return {
              fromLink: false,
              sources: [resultsFromCache(diff, queryInfo.markReady())]
            };
          }
          if (returnPartialData || shouldNotify) {
            return {
              fromLink: true,
              sources: [resultsFromCache(diff), resultsFromLink()]
            };
          }
          return {
            fromLink: true,
            sources: [resultsFromLink()]
          };
        }
      case "cache-and-network":
        {
          var diff = readCache();
          if (diff.complete || returnPartialData || shouldNotify) {
            return {
              fromLink: true,
              sources: [resultsFromCache(diff), resultsFromLink()]
            };
          }
          return {
            fromLink: true,
            sources: [resultsFromLink()]
          };
        }
      case "cache-only":
        return {
          fromLink: false,
          sources: [resultsFromCache(readCache(), queryInfo.markReady())]
        };
      case "network-only":
        if (shouldNotify) {
          return {
            fromLink: true,
            sources: [resultsFromCache(readCache()), resultsFromLink()]
          };
        }
        return {
          fromLink: true,
          sources: [resultsFromLink()]
        };
      case "no-cache":
        if (shouldNotify) {
          return {
            fromLink: true,
            // Note that queryInfo.getDiff() for no-cache queries does not call
            // cache.diff, but instead returns a { complete: false } stub result
            // when there is no queryInfo.diff already defined.
            sources: [resultsFromCache(queryInfo.getDiff()), resultsFromLink()]
          };
        }
        return {
          fromLink: true,
          sources: [resultsFromLink()]
        };
      case "standby":
        return {
          fromLink: false,
          sources: []
        };
    }
  };
  QueryManager.prototype.getQuery = function (queryId) {
    if (queryId && !this.queries.has(queryId)) {
      this.queries.set(queryId, new _QueryInfo.QueryInfo(this, queryId));
    }
    return this.queries.get(queryId);
  };
  QueryManager.prototype.prepareContext = function (context) {
    if (context === void 0) {
      context = {};
    }
    var newContext = this.localState.prepareContext(context);
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, newContext), {
      clientAwareness: this.clientAwareness
    });
  };
  return QueryManager;
}();
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","@wry/equality":"../node_modules/@wry/equality/lib/index.js","../link/core/index.js":"../node_modules/@apollo/client/link/core/index.js","../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js","../cache/index.js":"../node_modules/@apollo/client/cache/index.js","../utilities/common/incrementalResult.js":"../node_modules/@apollo/client/utilities/common/incrementalResult.js","../errors/index.js":"../node_modules/@apollo/client/errors/index.js","./ObservableQuery.js":"../node_modules/@apollo/client/core/ObservableQuery.js","./networkStatus.js":"../node_modules/@apollo/client/core/networkStatus.js","./LocalState.js":"../node_modules/@apollo/client/core/LocalState.js","./QueryInfo.js":"../node_modules/@apollo/client/core/QueryInfo.js"}],"../node_modules/@apollo/client/core/ApolloClient.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApolloClient = void 0;
Object.defineProperty(exports, "mergeOptions", {
  enumerable: true,
  get: function () {
    return _index4.mergeOptions;
  }
});
var _tslib = require("tslib");
var _index = require("../utilities/globals/index.js");
var _index2 = require("../link/core/index.js");
var _version = require("../version.js");
var _index3 = require("../link/http/index.js");
var _QueryManager = require("./QueryManager.js");
var _LocalState = require("./LocalState.js");
var _index4 = require("../utilities/index.js");
var hasSuggestedDevtools = false;
// Though mergeOptions now resides in @apollo/client/utilities, it was
// previously declared and exported from this module, and then reexported from
// @apollo/client/core. Since we need to preserve that API anyway, the easiest
// solution is to reexport mergeOptions where it was previously declared (here).

/**
 * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries
 * and mutations) to a GraphQL spec-compliant server over an {@link ApolloLink} instance,
 * receive results from the server and cache the results in a store. It also delivers updates
 * to GraphQL queries through {@link Observable} instances.
 */
var ApolloClient = exports.ApolloClient = /** @class */function () {
  /**
   * Constructs an instance of {@link ApolloClient}.
   *
   * @example
   * ```js
   * import { ApolloClient, InMemoryCache } from '@apollo/client';
   *
   * const cache = new InMemoryCache();
   *
   * const client = new ApolloClient({
   *   // Provide required constructor fields
   *   cache: cache,
   *   uri: 'http://localhost:4000/',
   *
   *   // Provide some optional constructor fields
   *   name: 'react-web-client',
   *   version: '1.3',
   *   queryDeduplication: false,
   *   defaultOptions: {
   *     watchQuery: {
   *       fetchPolicy: 'cache-and-network',
   *     },
   *   },
   * });
   * ```
   */
  function ApolloClient(options) {
    var _this = this;
    this.resetStoreCallbacks = [];
    this.clearStoreCallbacks = [];
    if (!options.cache) {
      throw (0, _index.newInvariantError)(15);
    }
    var uri = options.uri,
      credentials = options.credentials,
      headers = options.headers,
      cache = options.cache,
      documentTransform = options.documentTransform,
      _a = options.ssrMode,
      ssrMode = _a === void 0 ? false : _a,
      _b = options.ssrForceFetchDelay,
      ssrForceFetchDelay = _b === void 0 ? 0 : _b,
      // Expose the client instance as window.__APOLLO_CLIENT__ and call
      // onBroadcast in queryManager.broadcastQueries to enable browser
      // devtools, but disable them by default in production.
      _c = options.connectToDevTools,
      // Expose the client instance as window.__APOLLO_CLIENT__ and call
      // onBroadcast in queryManager.broadcastQueries to enable browser
      // devtools, but disable them by default in production.
      connectToDevTools = _c === void 0 ? typeof window === "object" && !window.__APOLLO_CLIENT__ && globalThis.__DEV__ !== false : _c,
      _d = options.queryDeduplication,
      queryDeduplication = _d === void 0 ? true : _d,
      defaultOptions = options.defaultOptions,
      _e = options.assumeImmutableResults,
      assumeImmutableResults = _e === void 0 ? cache.assumeImmutableResults : _e,
      resolvers = options.resolvers,
      typeDefs = options.typeDefs,
      fragmentMatcher = options.fragmentMatcher,
      clientAwarenessName = options.name,
      clientAwarenessVersion = options.version;
    var link = options.link;
    if (!link) {
      link = uri ? new _index3.HttpLink({
        uri: uri,
        credentials: credentials,
        headers: headers
      }) : _index2.ApolloLink.empty();
    }
    this.link = link;
    this.cache = cache;
    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;
    this.queryDeduplication = queryDeduplication;
    this.defaultOptions = defaultOptions || Object.create(null);
    this.typeDefs = typeDefs;
    if (ssrForceFetchDelay) {
      setTimeout(function () {
        return _this.disableNetworkFetches = false;
      }, ssrForceFetchDelay);
    }
    this.watchQuery = this.watchQuery.bind(this);
    this.query = this.query.bind(this);
    this.mutate = this.mutate.bind(this);
    this.resetStore = this.resetStore.bind(this);
    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);
    this.version = _version.version;
    this.localState = new _LocalState.LocalState({
      cache: cache,
      client: this,
      resolvers: resolvers,
      fragmentMatcher: fragmentMatcher
    });
    this.queryManager = new _QueryManager.QueryManager({
      cache: this.cache,
      link: this.link,
      defaultOptions: this.defaultOptions,
      documentTransform: documentTransform,
      queryDeduplication: queryDeduplication,
      ssrMode: ssrMode,
      clientAwareness: {
        name: clientAwarenessName,
        version: clientAwarenessVersion
      },
      localState: this.localState,
      assumeImmutableResults: assumeImmutableResults,
      onBroadcast: connectToDevTools ? function () {
        if (_this.devToolsHookCb) {
          _this.devToolsHookCb({
            action: {},
            state: {
              queries: _this.queryManager.getQueryStore(),
              mutations: _this.queryManager.mutationStore || {}
            },
            dataWithOptimisticResults: _this.cache.extract(true)
          });
        }
      } : void 0
    });
    if (connectToDevTools) this.connectToDevTools();
  }
  ApolloClient.prototype.connectToDevTools = function () {
    if (typeof window === "object") {
      var windowWithDevTools = window;
      var devtoolsSymbol = Symbol.for("apollo.devtools");
      (windowWithDevTools[devtoolsSymbol] = windowWithDevTools[devtoolsSymbol] || []).push(this);
      windowWithDevTools.__APOLLO_CLIENT__ = this;
    }
    /**
     * Suggest installing the devtools for developers who don't have them
     */
    if (!hasSuggestedDevtools && globalThis.__DEV__ !== false) {
      hasSuggestedDevtools = true;
      setTimeout(function () {
        if (typeof window !== "undefined" && window.document && window.top === window.self && !window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__) {
          var nav = window.navigator;
          var ua = nav && nav.userAgent;
          var url = void 0;
          if (typeof ua === "string") {
            if (ua.indexOf("Chrome/") > -1) {
              url = "https://chrome.google.com/webstore/detail/" + "apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm";
            } else if (ua.indexOf("Firefox/") > -1) {
              url = "https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/";
            }
          }
          if (url) {
            globalThis.__DEV__ !== false && _index.invariant.log("Download the Apollo DevTools for a better development " + "experience: %s", url);
          }
        }
      }, 10000);
    }
  };
  Object.defineProperty(ApolloClient.prototype, "documentTransform", {
    /**
     * The `DocumentTransform` used to modify GraphQL documents before a request
     * is made. If a custom `DocumentTransform` is not provided, this will be the
     * default document transform.
     */
    get: function () {
      return this.queryManager.documentTransform;
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Call this method to terminate any active client processes, making it safe
   * to dispose of this `ApolloClient` instance.
   */
  ApolloClient.prototype.stop = function () {
    this.queryManager.stop();
  };
  /**
   * This watches the cache store of the query according to the options specified and
   * returns an {@link ObservableQuery}. We can subscribe to this {@link ObservableQuery} and
   * receive updated results through a GraphQL observer when the cache store changes.
   *
   * Note that this method is not an implementation of GraphQL subscriptions. Rather,
   * it uses Apollo's store in order to reactively deliver updates to your query results.
   *
   * For example, suppose you call watchQuery on a GraphQL query that fetches a person's
   * first and last name and this person has a particular object identifier, provided by
   * dataIdFromObject. Later, a different query fetches that same person's
   * first and last name and the first name has now changed. Then, any observers associated
   * with the results of the first query will be updated with a new result object.
   *
   * Note that if the cache does not change, the subscriber will *not* be notified.
   *
   * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for
   * a description of store reactivity.
   */
  ApolloClient.prototype.watchQuery = function (options) {
    if (this.defaultOptions.watchQuery) {
      options = (0, _index4.mergeOptions)(this.defaultOptions.watchQuery, options);
    }
    // XXX Overwriting options is probably not the best way to do this long term...
    if (this.disableNetworkFetches && (options.fetchPolicy === "network-only" || options.fetchPolicy === "cache-and-network")) {
      options = (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
        fetchPolicy: "cache-first"
      });
    }
    return this.queryManager.watchQuery(options);
  };
  /**
   * This resolves a single query according to the options specified and
   * returns a `Promise` which is either resolved with the resulting data
   * or rejected with an error.
   *
   * @param options - An object of type {@link QueryOptions} that allows us to
   * describe how this query should be treated e.g. whether it should hit the
   * server at all or just resolve from the cache, etc.
   */
  ApolloClient.prototype.query = function (options) {
    if (this.defaultOptions.query) {
      options = (0, _index4.mergeOptions)(this.defaultOptions.query, options);
    }
    (0, _index.invariant)(options.fetchPolicy !== "cache-and-network", 16);
    if (this.disableNetworkFetches && options.fetchPolicy === "network-only") {
      options = (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
        fetchPolicy: "cache-first"
      });
    }
    return this.queryManager.query(options);
  };
  /**
   * This resolves a single mutation according to the options specified and returns a
   * Promise which is either resolved with the resulting data or rejected with an
   * error.
   *
   * It takes options as an object with the following keys and values:
   */
  ApolloClient.prototype.mutate = function (options) {
    if (this.defaultOptions.mutate) {
      options = (0, _index4.mergeOptions)(this.defaultOptions.mutate, options);
    }
    return this.queryManager.mutate(options);
  };
  /**
   * This subscribes to a graphql subscription according to the options specified and returns an
   * {@link Observable} which either emits received data or an error.
   */
  ApolloClient.prototype.subscribe = function (options) {
    return this.queryManager.startGraphQLSubscription(options);
  };
  /**
   * Tries to read some data from the store in the shape of the provided
   * GraphQL query without making a network request. This method will start at
   * the root query. To start at a specific id returned by `dataIdFromObject`
   * use `readFragment`.
   *
   * @param optimistic - Set to `true` to allow `readQuery` to return
   * optimistic results. Is `false` by default.
   */
  ApolloClient.prototype.readQuery = function (options, optimistic) {
    if (optimistic === void 0) {
      optimistic = false;
    }
    return this.cache.readQuery(options, optimistic);
  };
  /**
   * Tries to read some data from the store in the shape of the provided
   * GraphQL fragment without making a network request. This method will read a
   * GraphQL fragment from any arbitrary id that is currently cached, unlike
   * `readQuery` which will only read from the root query.
   *
   * You must pass in a GraphQL document with a single fragment or a document
   * with multiple fragments that represent what you are reading. If you pass
   * in a document with multiple fragments then you must also specify a
   * `fragmentName`.
   *
   * @param optimistic - Set to `true` to allow `readFragment` to return
   * optimistic results. Is `false` by default.
   */
  ApolloClient.prototype.readFragment = function (options, optimistic) {
    if (optimistic === void 0) {
      optimistic = false;
    }
    return this.cache.readFragment(options, optimistic);
  };
  /**
   * Writes some data in the shape of the provided GraphQL query directly to
   * the store. This method will start at the root query. To start at a
   * specific id returned by `dataIdFromObject` then use `writeFragment`.
   */
  ApolloClient.prototype.writeQuery = function (options) {
    var ref = this.cache.writeQuery(options);
    if (options.broadcast !== false) {
      this.queryManager.broadcastQueries();
    }
    return ref;
  };
  /**
   * Writes some data in the shape of the provided GraphQL fragment directly to
   * the store. This method will write to a GraphQL fragment from any arbitrary
   * id that is currently cached, unlike `writeQuery` which will only write
   * from the root query.
   *
   * You must pass in a GraphQL document with a single fragment or a document
   * with multiple fragments that represent what you are writing. If you pass
   * in a document with multiple fragments then you must also specify a
   * `fragmentName`.
   */
  ApolloClient.prototype.writeFragment = function (options) {
    var ref = this.cache.writeFragment(options);
    if (options.broadcast !== false) {
      this.queryManager.broadcastQueries();
    }
    return ref;
  };
  ApolloClient.prototype.__actionHookForDevTools = function (cb) {
    this.devToolsHookCb = cb;
  };
  ApolloClient.prototype.__requestRaw = function (payload) {
    return (0, _index2.execute)(this.link, payload);
  };
  /**
   * Resets your entire store by clearing out your cache and then re-executing
   * all of your active queries. This makes it so that you may guarantee that
   * there is no data left in your store from a time before you called this
   * method.
   *
   * `resetStore()` is useful when your user just logged out. You’ve removed the
   * user session, and you now want to make sure that any references to data you
   * might have fetched while the user session was active is gone.
   *
   * It is important to remember that `resetStore()` *will* refetch any active
   * queries. This means that any components that might be mounted will execute
   * their queries again using your network interface. If you do not want to
   * re-execute any queries then you should make sure to stop watching any
   * active queries.
   */
  ApolloClient.prototype.resetStore = function () {
    var _this = this;
    return Promise.resolve().then(function () {
      return _this.queryManager.clearStore({
        discardWatches: false
      });
    }).then(function () {
      return Promise.all(_this.resetStoreCallbacks.map(function (fn) {
        return fn();
      }));
    }).then(function () {
      return _this.reFetchObservableQueries();
    });
  };
  /**
   * Remove all data from the store. Unlike `resetStore`, `clearStore` will
   * not refetch any active queries.
   */
  ApolloClient.prototype.clearStore = function () {
    var _this = this;
    return Promise.resolve().then(function () {
      return _this.queryManager.clearStore({
        discardWatches: true
      });
    }).then(function () {
      return Promise.all(_this.clearStoreCallbacks.map(function (fn) {
        return fn();
      }));
    });
  };
  /**
   * Allows callbacks to be registered that are executed when the store is
   * reset. `onResetStore` returns an unsubscribe function that can be used
   * to remove registered callbacks.
   */
  ApolloClient.prototype.onResetStore = function (cb) {
    var _this = this;
    this.resetStoreCallbacks.push(cb);
    return function () {
      _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) {
        return c !== cb;
      });
    };
  };
  /**
   * Allows callbacks to be registered that are executed when the store is
   * cleared. `onClearStore` returns an unsubscribe function that can be used
   * to remove registered callbacks.
   */
  ApolloClient.prototype.onClearStore = function (cb) {
    var _this = this;
    this.clearStoreCallbacks.push(cb);
    return function () {
      _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) {
        return c !== cb;
      });
    };
  };
  /**
   * Refetches all of your active queries.
   *
   * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage
   *
   * It is important to remember that `reFetchObservableQueries()` *will* refetch any active
   * queries. This means that any components that might be mounted will execute
   * their queries again using your network interface. If you do not want to
   * re-execute any queries then you should make sure to stop watching any
   * active queries.
   * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.
   */
  ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {
    return this.queryManager.reFetchObservableQueries(includeStandby);
  };
  /**
   * Refetches specified active queries. Similar to "reFetchObservableQueries()" but with a specific list of queries.
   *
   * `refetchQueries()` is useful for use cases to imperatively refresh a selection of queries.
   *
   * It is important to remember that `refetchQueries()` *will* refetch specified active
   * queries. This means that any components that might be mounted will execute
   * their queries again using your network interface. If you do not want to
   * re-execute any queries then you should make sure to stop watching any
   * active queries.
   */
  ApolloClient.prototype.refetchQueries = function (options) {
    var map = this.queryManager.refetchQueries(options);
    var queries = [];
    var results = [];
    map.forEach(function (result, obsQuery) {
      queries.push(obsQuery);
      results.push(result);
    });
    var result = Promise.all(results);
    // In case you need the raw results immediately, without awaiting
    // Promise.all(results):
    result.queries = queries;
    result.results = results;
    // If you decide to ignore the result Promise because you're using
    // result.queries and result.results instead, you shouldn't have to worry
    // about preventing uncaught rejections for the Promise.all result.
    result.catch(function (error) {
      globalThis.__DEV__ !== false && _index.invariant.debug(17, error);
    });
    return result;
  };
  /**
   * Get all currently active `ObservableQuery` objects, in a `Map` keyed by
   * query ID strings.
   *
   * An "active" query is one that has observers and a `fetchPolicy` other than
   * "standby" or "cache-only".
   *
   * You can include all `ObservableQuery` objects (including the inactive ones)
   * by passing "all" instead of "active", or you can include just a subset of
   * active queries by passing an array of query names or DocumentNode objects.
   */
  ApolloClient.prototype.getObservableQueries = function (include) {
    if (include === void 0) {
      include = "active";
    }
    return this.queryManager.getObservableQueries(include);
  };
  /**
   * Exposes the cache's complete state, in a serializable format for later restoration.
   */
  ApolloClient.prototype.extract = function (optimistic) {
    return this.cache.extract(optimistic);
  };
  /**
   * Replaces existing state in the cache (if any) with the values expressed by
   * `serializedState`.
   *
   * Called when hydrating a cache (server side rendering, or offline storage),
   * and also (potentially) during hot reloads.
   */
  ApolloClient.prototype.restore = function (serializedState) {
    return this.cache.restore(serializedState);
  };
  /**
   * Add additional local resolvers.
   */
  ApolloClient.prototype.addResolvers = function (resolvers) {
    this.localState.addResolvers(resolvers);
  };
  /**
   * Set (override existing) local resolvers.
   */
  ApolloClient.prototype.setResolvers = function (resolvers) {
    this.localState.setResolvers(resolvers);
  };
  /**
   * Get all registered local resolvers.
   */
  ApolloClient.prototype.getResolvers = function () {
    return this.localState.getResolvers();
  };
  /**
   * Set a custom local state fragment matcher.
   */
  ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {
    this.localState.setFragmentMatcher(fragmentMatcher);
  };
  /**
   * Define a new ApolloLink (or link chain) that Apollo Client will use.
   */
  ApolloClient.prototype.setLink = function (newLink) {
    this.link = this.queryManager.link = newLink;
  };
  return ApolloClient;
}();
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","../link/core/index.js":"../node_modules/@apollo/client/link/core/index.js","../version.js":"../node_modules/@apollo/client/version.js","../link/http/index.js":"../node_modules/@apollo/client/link/http/index.js","./QueryManager.js":"../node_modules/@apollo/client/core/QueryManager.js","./LocalState.js":"../node_modules/@apollo/client/core/LocalState.js","../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js"}],"../node_modules/@apollo/client/core/types.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"../node_modules/graphql-tag/node_modules/tslib/tslib.es6.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__addDisposableResource = __addDisposableResource;
exports.__assign = void 0;
exports.__asyncDelegator = __asyncDelegator;
exports.__asyncGenerator = __asyncGenerator;
exports.__asyncValues = __asyncValues;
exports.__await = __await;
exports.__awaiter = __awaiter;
exports.__classPrivateFieldGet = __classPrivateFieldGet;
exports.__classPrivateFieldIn = __classPrivateFieldIn;
exports.__classPrivateFieldSet = __classPrivateFieldSet;
exports.__createBinding = void 0;
exports.__decorate = __decorate;
exports.__disposeResources = __disposeResources;
exports.__esDecorate = __esDecorate;
exports.__exportStar = __exportStar;
exports.__extends = __extends;
exports.__generator = __generator;
exports.__importDefault = __importDefault;
exports.__importStar = __importStar;
exports.__makeTemplateObject = __makeTemplateObject;
exports.__metadata = __metadata;
exports.__param = __param;
exports.__propKey = __propKey;
exports.__read = __read;
exports.__rest = __rest;
exports.__runInitializers = __runInitializers;
exports.__setFunctionName = __setFunctionName;
exports.__spread = __spread;
exports.__spreadArray = __spreadArray;
exports.__spreadArrays = __spreadArrays;
exports.__values = __values;
exports.default = void 0;
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */

var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function () {
  exports.__assign = __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
exports.__assign = __assign;
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
    return f;
  }
  var kind = contextIn.kind,
    key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _,
    done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access) context.access[p] = contextIn.access[p];
    context.addInitializer = function (f) {
      if (done) throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? {
      get: descriptor.get,
      set: descriptor.set
    } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0) continue;
      if (result === null || typeof result !== "object") throw new TypeError("Object expected");
      if (_ = accept(result.get)) descriptor.get = _;
      if (_ = accept(result.set)) descriptor.set = _;
      if (_ = accept(result.init)) initializers.unshift(_);
    } else if (_ = accept(result)) {
      if (kind === "field") initializers.unshift(_);else descriptor[key] = _;
    }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
;
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
;
function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
}
;
function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", {
    configurable: true,
    value: prefix ? "".concat(prefix, " ", name) : name
  });
}
;
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
    f,
    y,
    t,
    g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;
  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}
var __createBinding = exports.__createBinding = Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function () {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
};
function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
    m = s && o[s],
    i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
    r,
    ar = [],
    e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
}

/** @deprecated */
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
  return ar;
}

/** @deprecated */
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
    i,
    q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;
  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: false
      } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
    i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
;
var __setModuleDefault = Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
};
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    default: mod
  };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose;
    if (async) {
      if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    env.stack.push({
      value: value,
      dispose: dispose,
      async: async
    });
  } else if (async) {
    env.stack.push({
      async: true
    });
  }
  return value;
}
var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};
function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  function next() {
    while (env.stack.length) {
      var rec = env.stack.pop();
      try {
        var result = rec.dispose && rec.dispose.call(rec.value);
        if (rec.async) return Promise.resolve(result).then(next, function (e) {
          fail(e);
          return next();
        });
      } catch (e) {
        fail(e);
      }
    }
    if (env.hasError) throw env.error;
  }
  return next();
}
var _default = exports.default = {
  __extends: __extends,
  __assign: __assign,
  __rest: __rest,
  __decorate: __decorate,
  __param: __param,
  __metadata: __metadata,
  __awaiter: __awaiter,
  __generator: __generator,
  __createBinding: __createBinding,
  __exportStar: __exportStar,
  __values: __values,
  __read: __read,
  __spread: __spread,
  __spreadArrays: __spreadArrays,
  __spreadArray: __spreadArray,
  __await: __await,
  __asyncGenerator: __asyncGenerator,
  __asyncDelegator: __asyncDelegator,
  __asyncValues: __asyncValues,
  __makeTemplateObject: __makeTemplateObject,
  __importStar: __importStar,
  __importDefault: __importDefault,
  __classPrivateFieldGet: __classPrivateFieldGet,
  __classPrivateFieldSet: __classPrivateFieldSet,
  __classPrivateFieldIn: __classPrivateFieldIn,
  __addDisposableResource: __addDisposableResource,
  __disposeResources: __disposeResources
};
},{}],"../node_modules/graphql-tag/lib/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.disableExperimentalFragmentVariables = disableExperimentalFragmentVariables;
exports.disableFragmentWarnings = disableFragmentWarnings;
exports.enableExperimentalFragmentVariables = enableExperimentalFragmentVariables;
exports.gql = gql;
exports.resetCaches = resetCaches;
var _tslib = require("tslib");
var _graphql = require("graphql");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var docCache = new Map();
var fragmentSourceMap = new Map();
var printFragmentWarnings = true;
var experimentalFragmentVariables = false;
function normalize(string) {
  return string.replace(/[\s,]+/g, ' ').trim();
}
function cacheKeyFromLoc(loc) {
  return normalize(loc.source.body.substring(loc.start, loc.end));
}
function processFragments(ast) {
  var seenKeys = new Set();
  var definitions = [];
  ast.definitions.forEach(function (fragmentDefinition) {
    if (fragmentDefinition.kind === 'FragmentDefinition') {
      var fragmentName = fragmentDefinition.name.value;
      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);
      var sourceKeySet = fragmentSourceMap.get(fragmentName);
      if (sourceKeySet && !sourceKeySet.has(sourceKey)) {
        if (printFragmentWarnings) {
          console.warn("Warning: fragment with name " + fragmentName + " already exists.\n" + "graphql-tag enforces all fragment names across your application to be unique; read more about\n" + "this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names");
        }
      } else if (!sourceKeySet) {
        fragmentSourceMap.set(fragmentName, sourceKeySet = new Set());
      }
      sourceKeySet.add(sourceKey);
      if (!seenKeys.has(sourceKey)) {
        seenKeys.add(sourceKey);
        definitions.push(fragmentDefinition);
      }
    } else {
      definitions.push(fragmentDefinition);
    }
  });
  return (0, _tslib.__assign)((0, _tslib.__assign)({}, ast), {
    definitions: definitions
  });
}
function stripLoc(doc) {
  var workSet = new Set(doc.definitions);
  workSet.forEach(function (node) {
    if (node.loc) delete node.loc;
    Object.keys(node).forEach(function (key) {
      var value = node[key];
      if (value && _typeof(value) === 'object') {
        workSet.add(value);
      }
    });
  });
  var loc = doc.loc;
  if (loc) {
    delete loc.startToken;
    delete loc.endToken;
  }
  return doc;
}
function parseDocument(source) {
  var cacheKey = normalize(source);
  if (!docCache.has(cacheKey)) {
    var parsed = (0, _graphql.parse)(source, {
      experimentalFragmentVariables: experimentalFragmentVariables,
      allowLegacyFragmentVariables: experimentalFragmentVariables
    });
    if (!parsed || parsed.kind !== 'Document') {
      throw new Error('Not a valid GraphQL document.');
    }
    docCache.set(cacheKey, stripLoc(processFragments(parsed)));
  }
  return docCache.get(cacheKey);
}
function gql(literals) {
  var args = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    args[_i - 1] = arguments[_i];
  }
  if (typeof literals === 'string') {
    literals = [literals];
  }
  var result = literals[0];
  args.forEach(function (arg, i) {
    if (arg && arg.kind === 'Document') {
      result += arg.loc.source.body;
    } else {
      result += arg;
    }
    result += literals[i + 1];
  });
  return parseDocument(result);
}
function resetCaches() {
  docCache.clear();
  fragmentSourceMap.clear();
}
function disableFragmentWarnings() {
  printFragmentWarnings = false;
}
function enableExperimentalFragmentVariables() {
  experimentalFragmentVariables = true;
}
function disableExperimentalFragmentVariables() {
  experimentalFragmentVariables = false;
}
var extras = {
  gql: gql,
  resetCaches: resetCaches,
  disableFragmentWarnings: disableFragmentWarnings,
  enableExperimentalFragmentVariables: enableExperimentalFragmentVariables,
  disableExperimentalFragmentVariables: disableExperimentalFragmentVariables
};
(function (gql_1) {
  gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;
})(gql || (exports.gql = gql = {}));
gql["default"] = gql;
var _default = exports.default = gql;
},{"tslib":"../node_modules/graphql-tag/node_modules/tslib/tslib.es6.js","graphql":"../node_modules/graphql/index.mjs"}],"../node_modules/@apollo/client/core/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  ApolloClient: true,
  mergeOptions: true,
  ObservableQuery: true,
  NetworkStatus: true,
  isNetworkRequestSettled: true,
  isApolloError: true,
  ApolloError: true,
  Cache: true,
  ApolloCache: true,
  InMemoryCache: true,
  MissingFieldError: true,
  defaultDataIdFromObject: true,
  makeVar: true,
  fromError: true,
  toPromise: true,
  fromPromise: true,
  throwServerError: true,
  DocumentTransform: true,
  Observable: true,
  isReference: true,
  makeReference: true,
  setLogVerbosity: true,
  gql: true,
  resetCaches: true,
  disableFragmentWarnings: true,
  enableExperimentalFragmentVariables: true,
  disableExperimentalFragmentVariables: true
};
Object.defineProperty(exports, "ApolloCache", {
  enumerable: true,
  get: function () {
    return _index2.ApolloCache;
  }
});
Object.defineProperty(exports, "ApolloClient", {
  enumerable: true,
  get: function () {
    return _ApolloClient.ApolloClient;
  }
});
Object.defineProperty(exports, "ApolloError", {
  enumerable: true,
  get: function () {
    return _index.ApolloError;
  }
});
Object.defineProperty(exports, "Cache", {
  enumerable: true,
  get: function () {
    return _index2.Cache;
  }
});
Object.defineProperty(exports, "DocumentTransform", {
  enumerable: true,
  get: function () {
    return _index6.DocumentTransform;
  }
});
Object.defineProperty(exports, "InMemoryCache", {
  enumerable: true,
  get: function () {
    return _index2.InMemoryCache;
  }
});
Object.defineProperty(exports, "MissingFieldError", {
  enumerable: true,
  get: function () {
    return _index2.MissingFieldError;
  }
});
Object.defineProperty(exports, "NetworkStatus", {
  enumerable: true,
  get: function () {
    return _networkStatus.NetworkStatus;
  }
});
Object.defineProperty(exports, "Observable", {
  enumerable: true,
  get: function () {
    return _index6.Observable;
  }
});
Object.defineProperty(exports, "ObservableQuery", {
  enumerable: true,
  get: function () {
    return _ObservableQuery.ObservableQuery;
  }
});
Object.defineProperty(exports, "defaultDataIdFromObject", {
  enumerable: true,
  get: function () {
    return _index2.defaultDataIdFromObject;
  }
});
Object.defineProperty(exports, "disableExperimentalFragmentVariables", {
  enumerable: true,
  get: function () {
    return _graphqlTag.disableExperimentalFragmentVariables;
  }
});
Object.defineProperty(exports, "disableFragmentWarnings", {
  enumerable: true,
  get: function () {
    return _graphqlTag.disableFragmentWarnings;
  }
});
Object.defineProperty(exports, "enableExperimentalFragmentVariables", {
  enumerable: true,
  get: function () {
    return _graphqlTag.enableExperimentalFragmentVariables;
  }
});
Object.defineProperty(exports, "fromError", {
  enumerable: true,
  get: function () {
    return _index5.fromError;
  }
});
Object.defineProperty(exports, "fromPromise", {
  enumerable: true,
  get: function () {
    return _index5.fromPromise;
  }
});
Object.defineProperty(exports, "gql", {
  enumerable: true,
  get: function () {
    return _graphqlTag.gql;
  }
});
Object.defineProperty(exports, "isApolloError", {
  enumerable: true,
  get: function () {
    return _index.isApolloError;
  }
});
Object.defineProperty(exports, "isNetworkRequestSettled", {
  enumerable: true,
  get: function () {
    return _networkStatus.isNetworkRequestSettled;
  }
});
Object.defineProperty(exports, "isReference", {
  enumerable: true,
  get: function () {
    return _index6.isReference;
  }
});
Object.defineProperty(exports, "makeReference", {
  enumerable: true,
  get: function () {
    return _index6.makeReference;
  }
});
Object.defineProperty(exports, "makeVar", {
  enumerable: true,
  get: function () {
    return _index2.makeVar;
  }
});
Object.defineProperty(exports, "mergeOptions", {
  enumerable: true,
  get: function () {
    return _ApolloClient.mergeOptions;
  }
});
Object.defineProperty(exports, "resetCaches", {
  enumerable: true,
  get: function () {
    return _graphqlTag.resetCaches;
  }
});
Object.defineProperty(exports, "setLogVerbosity", {
  enumerable: true,
  get: function () {
    return _tsInvariant.setVerbosity;
  }
});
Object.defineProperty(exports, "throwServerError", {
  enumerable: true,
  get: function () {
    return _index5.throwServerError;
  }
});
Object.defineProperty(exports, "toPromise", {
  enumerable: true,
  get: function () {
    return _index5.toPromise;
  }
});
var _ApolloClient = require("./ApolloClient.js");
var _ObservableQuery = require("./ObservableQuery.js");
var _networkStatus = require("./networkStatus.js");
var _types = require("./types.js");
Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _types[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types[key];
    }
  });
});
var _index = require("../errors/index.js");
var _index2 = require("../cache/index.js");
var _types2 = require("../cache/inmemory/types.js");
Object.keys(_types2).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _types2[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types2[key];
    }
  });
});
var _index3 = require("../link/core/index.js");
Object.keys(_index3).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index3[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index3[key];
    }
  });
});
var _index4 = require("../link/http/index.js");
Object.keys(_index4).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index4[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index4[key];
    }
  });
});
var _index5 = require("../link/utils/index.js");
var _index6 = require("../utilities/index.js");
var _tsInvariant = require("ts-invariant");
var _graphqlTag = require("graphql-tag");
/* Core */

/* Link */

/* Supporting */
// The verbosity of invariant.{log,warn,error} can be controlled globally
// (for anyone using the same ts-invariant package) by passing "log",
// "warn", "error", or "silent" to setVerbosity ("log" is the default).
// Note that all invariant.* logging is hidden in production.

(0, _tsInvariant.setVerbosity)(globalThis.__DEV__ !== false ? "log" : "silent");
// Note that importing `gql` by itself, then destructuring
// additional properties separately before exporting, is intentional.
// Due to the way the `graphql-tag` library is setup, certain bundlers
// can't find the properties added to the exported `gql` function without
// additional guidance (e.g. Rollup - see
// https://rollupjs.org/guide/en/#error-name-is-not-exported-by-module).
// Instead of having people that are using bundlers with `@apollo/client` add
// extra bundler config to help `graphql-tag` exports be found (which would be
// awkward since they aren't importing `graphql-tag` themselves), this
// workaround of pulling the extra properties off the `gql` function,
// then re-exporting them separately, helps keeps bundlers happy without any
// additional config changes.
},{"./ApolloClient.js":"../node_modules/@apollo/client/core/ApolloClient.js","./ObservableQuery.js":"../node_modules/@apollo/client/core/ObservableQuery.js","./networkStatus.js":"../node_modules/@apollo/client/core/networkStatus.js","./types.js":"../node_modules/@apollo/client/core/types.js","../errors/index.js":"../node_modules/@apollo/client/errors/index.js","../cache/index.js":"../node_modules/@apollo/client/cache/index.js","../cache/inmemory/types.js":"../node_modules/@apollo/client/cache/inmemory/types.js","../link/core/index.js":"../node_modules/@apollo/client/link/core/index.js","../link/http/index.js":"../node_modules/@apollo/client/link/http/index.js","../link/utils/index.js":"../node_modules/@apollo/client/link/utils/index.js","../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js","ts-invariant":"../node_modules/@apollo/client/node_modules/ts-invariant/lib/invariant.js","graphql-tag":"../node_modules/graphql-tag/lib/index.js"}],"../node_modules/react/cjs/react.development.js":[function(require,module,exports) {
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

if ("development" !== "production") {
  (function () {
    'use strict';

    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    }
    var ReactVersion = '18.2.0';

    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol.for('react.element');
    var REACT_PORTAL_TYPE = Symbol.for('react.portal');
    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
    var REACT_CONTEXT_TYPE = Symbol.for('react.context');
    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
    var REACT_MEMO_TYPE = Symbol.for('react.memo');
    var REACT_LAZY_TYPE = Symbol.for('react.lazy');
    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== 'object') {
        return null;
      }
      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
      if (typeof maybeIterator === 'function') {
        return maybeIterator;
      }
      return null;
    }

    /**
     * Keeps track of the current dispatcher.
     */
    var ReactCurrentDispatcher = {
      /**
       * @internal
       * @type {ReactComponent}
       */
      current: null
    };

    /**
     * Keeps track of the current batch's configuration such as how long an update
     * should suspend for if it needs to.
     */
    var ReactCurrentBatchConfig = {
      transition: null
    };
    var ReactCurrentActQueue = {
      current: null,
      // Used to reproduce behavior of `batchedUpdates` in legacy mode.
      isBatchingLegacy: false,
      didScheduleLegacyUpdate: false
    };

    /**
     * Keeps track of the current owner.
     *
     * The current owner is the component who should own any components that are
     * currently being constructed.
     */
    var ReactCurrentOwner = {
      /**
       * @internal
       * @type {ReactComponent}
       */
      current: null
    };
    var ReactDebugCurrentFrame = {};
    var currentExtraStackFrame = null;
    function setExtraStackFrame(stack) {
      {
        currentExtraStackFrame = stack;
      }
    }
    {
      ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
        {
          currentExtraStackFrame = stack;
        }
      }; // Stack implementation injected by the current renderer.

      ReactDebugCurrentFrame.getCurrentStack = null;
      ReactDebugCurrentFrame.getStackAddendum = function () {
        var stack = ''; // Add an extra top frame while an element is being validated

        if (currentExtraStackFrame) {
          stack += currentExtraStackFrame;
        } // Delegate to the injected renderer-specific implementation

        var impl = ReactDebugCurrentFrame.getCurrentStack;
        if (impl) {
          stack += impl() || '';
        }
        return stack;
      };
    }

    // -----------------------------------------------------------------------------

    var enableScopeAPI = false; // Experimental Create Event Handle API.
    var enableCacheElement = false;
    var enableTransitionTracing = false; // No known bugs, but needs performance testing

    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    // stuff. Intended to enable React core members to more easily debug scheduling
    // issues in DEV builds.

    var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

    var ReactSharedInternals = {
      ReactCurrentDispatcher: ReactCurrentDispatcher,
      ReactCurrentBatchConfig: ReactCurrentBatchConfig,
      ReactCurrentOwner: ReactCurrentOwner
    };
    {
      ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
      ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
    }

    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.

    function warn(format) {
      {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          printWarning('warn', format, args);
        }
      }
    }
    function error(format) {
      {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          printWarning('error', format, args);
        }
      }
    }
    function printWarning(level, format, args) {
      // When changing this logic, you might want to also
      // update consoleWithStackDev.www.js as well.
      {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
          format += '%s';
          args = args.concat([stack]);
        } // eslint-disable-next-line react-internal/safe-string-coercion

        var argsWithFormat = args.map(function (item) {
          return String(item);
        }); // Careful: RN currently depends on this prefix

        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging

        Function.prototype.apply.call(console[level], console, argsWithFormat);
      }
    }
    var didWarnStateUpdateForUnmountedComponent = {};
    function warnNoop(publicInstance, callerName) {
      {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + "." + callerName;
        if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
          return;
        }
        error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
      }
    }
    /**
     * This is the abstract API for an update queue.
     */

    var ReactNoopUpdateQueue = {
      /**
       * Checks whether or not this composite component is mounted.
       * @param {ReactClass} publicInstance The instance we want to test.
       * @return {boolean} True if mounted, false otherwise.
       * @protected
       * @final
       */
      isMounted: function (publicInstance) {
        return false;
      },
      /**
       * Forces an update. This should only be invoked when it is known with
       * certainty that we are **not** in a DOM transaction.
       *
       * You may want to call this when you know that some deeper aspect of the
       * component's state has changed but `setState` was not called.
       *
       * This will not invoke `shouldComponentUpdate`, but it will invoke
       * `componentWillUpdate` and `componentDidUpdate`.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
      enqueueForceUpdate: function (publicInstance, callback, callerName) {
        warnNoop(publicInstance, 'forceUpdate');
      },
      /**
       * Replaces all of the state. Always use this or `setState` to mutate state.
       * You should treat `this.state` as immutable.
       *
       * There is no guarantee that `this.state` will be immediately updated, so
       * accessing `this.state` after calling this method may return the old value.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} completeState Next state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
      enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
        warnNoop(publicInstance, 'replaceState');
      },
      /**
       * Sets a subset of the state. This only exists because _pendingState is
       * internal. This provides a merging strategy that is not available to deep
       * properties which is confusing. TODO: Expose pendingState or don't use it
       * during the merge.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} partialState Next partial state to be merged with state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} Name of the calling function in the public API.
       * @internal
       */
      enqueueSetState: function (publicInstance, partialState, callback, callerName) {
        warnNoop(publicInstance, 'setState');
      }
    };
    var assign = Object.assign;
    var emptyObject = {};
    {
      Object.freeze(emptyObject);
    }
    /**
     * Base class helpers for the updating state of a component.
     */

    function Component(props, context, updater) {
      this.props = props;
      this.context = context; // If a component has string refs, we will assign a different object later.

      this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
      // renderer.

      this.updater = updater || ReactNoopUpdateQueue;
    }
    Component.prototype.isReactComponent = {};
    /**
     * Sets a subset of the state. Always use this to mutate
     * state. You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * There is no guarantee that calls to `setState` will run synchronously,
     * as they may eventually be batched together.  You can provide an optional
     * callback that will be executed when the call to setState is actually
     * completed.
     *
     * When a function is provided to setState, it will be called at some point in
     * the future (not synchronously). It will be called with the up to date
     * component arguments (state, props, context). These values can be different
     * from this.* because your function may be called after receiveProps but before
     * shouldComponentUpdate, and this new state, props, and context will not yet be
     * assigned to this.
     *
     * @param {object|function} partialState Next partial state or function to
     *        produce next partial state to be merged with current state.
     * @param {?function} callback Called after state is updated.
     * @final
     * @protected
     */

    Component.prototype.setState = function (partialState, callback) {
      if (typeof partialState !== 'object' && typeof partialState !== 'function' && partialState != null) {
        throw new Error('setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.');
      }
      this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldComponentUpdate`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {?function} callback Called after update is complete.
     * @final
     * @protected
     */

    Component.prototype.forceUpdate = function (callback) {
      this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    /**
     * Deprecated APIs. These APIs used to exist on classic React classes but since
     * we would like to deprecate them, we're not going to move them over to this
     * modern base class. Instead, we define a getter that warns if it's accessed.
     */

    {
      var deprecatedAPIs = {
        isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
        replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
      };
      var defineDeprecationWarning = function (methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
          get: function () {
            warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
            return undefined;
          }
        });
      };
      for (var fnName in deprecatedAPIs) {
        if (deprecatedAPIs.hasOwnProperty(fnName)) {
          defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
        }
      }
    }
    function ComponentDummy() {}
    ComponentDummy.prototype = Component.prototype;
    /**
     * Convenience component with default shallow equality check for sCU.
     */

    function PureComponent(props, context, updater) {
      this.props = props;
      this.context = context; // If a component has string refs, we will assign a different object later.

      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

    assign(pureComponentPrototype, Component.prototype);
    pureComponentPrototype.isPureReactComponent = true;

    // an immutable object with a single mutable value
    function createRef() {
      var refObject = {
        current: null
      };
      {
        Object.seal(refObject);
      }
      return refObject;
    }
    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

    function isArray(a) {
      return isArrayImpl(a);
    }

    /*
     * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
     * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
     *
     * The functions in this module will throw an easier-to-understand,
     * easier-to-debug exception with a clear errors message message explaining the
     * problem. (Instead of a confusing exception thrown inside the implementation
     * of the `value` object).
     */
    // $FlowFixMe only called in DEV, so void return is not possible.
    function typeName(value) {
      {
        // toStringTag is needed for namespaced types like Temporal.Instant
        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
        return type;
      }
    } // $FlowFixMe only called in DEV, so void return is not possible.

    function willCoercionThrow(value) {
      {
        try {
          testStringCoercion(value);
          return false;
        } catch (e) {
          return true;
        }
      }
    }
    function testStringCoercion(value) {
      // If you ended up here by following an exception call stack, here's what's
      // happened: you supplied an object or symbol value to React (as a prop, key,
      // DOM attribute, CSS property, string ref, etc.) and when React tried to
      // coerce it to a string using `'' + value`, an exception was thrown.
      //
      // The most common types that will cause this exception are `Symbol` instances
      // and Temporal objects like `Temporal.Instant`. But any object that has a
      // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
      // exception. (Library authors do this to prevent users from using built-in
      // numeric operators like `+` or comparison operators like `>=` because custom
      // methods are needed to perform accurate arithmetic or comparison.)
      //
      // To fix the problem, coerce this object or symbol value to a string before
      // passing it to React. The most reliable way is usually `String(value)`.
      //
      // To find which value is throwing, check the browser or debugger console.
      // Before this exception was thrown, there should be `console.error` output
      // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
      // problem and how that type was used: key, atrribute, input value prop, etc.
      // In most cases, this console output also shows the component and its
      // ancestor components where the exception happened.
      //
      // eslint-disable-next-line react-internal/safe-string-coercion
      return '' + value;
    }
    function checkKeyStringCoercion(value) {
      {
        if (willCoercionThrow(value)) {
          error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));
          return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
      }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
      var displayName = outerType.displayName;
      if (displayName) {
        return displayName;
      }
      var functionName = innerType.displayName || innerType.name || '';
      return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
    } // Keep in sync with react-reconciler/getComponentNameFromFiber

    function getContextName(type) {
      return type.displayName || 'Context';
    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.

    function getComponentNameFromType(type) {
      if (type == null) {
        // Host root, text node or just invalid type.
        return null;
      }
      {
        if (typeof type.tag === 'number') {
          error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
        }
      }
      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }
      if (typeof type === 'string') {
        return type;
      }
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return 'Fragment';
        case REACT_PORTAL_TYPE:
          return 'Portal';
        case REACT_PROFILER_TYPE:
          return 'Profiler';
        case REACT_STRICT_MODE_TYPE:
          return 'StrictMode';
        case REACT_SUSPENSE_TYPE:
          return 'Suspense';
        case REACT_SUSPENSE_LIST_TYPE:
          return 'SuspenseList';
      }
      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            var context = type;
            return getContextName(context) + '.Consumer';
          case REACT_PROVIDER_TYPE:
            var provider = type;
            return getContextName(provider._context) + '.Provider';
          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, 'ForwardRef');
          case REACT_MEMO_TYPE:
            var outerName = type.displayName || null;
            if (outerName !== null) {
              return outerName;
            }
            return getComponentNameFromType(type.type) || 'Memo';
          case REACT_LAZY_TYPE:
            {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch (x) {
                return null;
              }
            }

          // eslint-disable-next-line no-fallthrough
        }
      }
      return null;
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };
    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
    {
      didWarnAboutStringRefs = {};
    }
    function hasValidRef(config) {
      {
        if (hasOwnProperty.call(config, 'ref')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.ref !== undefined;
    }
    function hasValidKey(config) {
      {
        if (hasOwnProperty.call(config, 'key')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
      var warnAboutAccessingKey = function () {
        {
          if (!specialPropKeyWarningShown) {
            specialPropKeyWarningShown = true;
            error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
          }
        }
      };
      warnAboutAccessingKey.isReactWarning = true;
      Object.defineProperty(props, 'key', {
        get: warnAboutAccessingKey,
        configurable: true
      });
    }
    function defineRefPropWarningGetter(props, displayName) {
      var warnAboutAccessingRef = function () {
        {
          if (!specialPropRefWarningShown) {
            specialPropRefWarningShown = true;
            error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
          }
        }
      };
      warnAboutAccessingRef.isReactWarning = true;
      Object.defineProperty(props, 'ref', {
        get: warnAboutAccessingRef,
        configurable: true
      });
    }
    function warnIfStringRefCannotBeAutoConverted(config) {
      {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
          if (!didWarnAboutStringRefs[componentName]) {
            error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
            didWarnAboutStringRefs[componentName] = true;
          }
        }
      }
    }
    /**
     * Factory method to create a new React element. This no longer adheres to
     * the class pattern, so do not use new to call it. Also, instanceof check
     * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
     * if something is a React Element.
     *
     * @param {*} type
     * @param {*} props
     * @param {*} key
     * @param {string|object} ref
     * @param {*} owner
     * @param {*} self A *temporary* helper to detect places where `this` is
     * different from the `owner` when React.createElement is called, so that we
     * can warn. We want to get rid of owner and replace string `ref`s with arrow
     * functions, and as long as `this` and owner are the same, there will be no
     * change in behavior.
     * @param {*} source An annotation object (added by a transpiler or otherwise)
     * indicating filename, line number, and/or other information.
     * @internal
     */

    var ReactElement = function (type, key, ref, self, source, owner, props) {
      var element = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: REACT_ELEMENT_TYPE,
        // Built-in properties that belong on the element
        type: type,
        key: key,
        ref: ref,
        props: props,
        // Record the component responsible for creating this element.
        _owner: owner
      };
      {
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.

        Object.defineProperty(element._store, 'validated', {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        }); // self and source are DEV only properties.

        Object.defineProperty(element, '_self', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.

        Object.defineProperty(element, '_source', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });
        if (Object.freeze) {
          Object.freeze(element.props);
          Object.freeze(element);
        }
      }
      return element;
    };
    /**
     * Create and return a new ReactElement of the given type.
     * See https://reactjs.org/docs/react-api.html#createelement
     */

    function createElement(type, config, children) {
      var propName; // Reserved names are extracted

      var props = {};
      var key = null;
      var ref = null;
      var self = null;
      var source = null;
      if (config != null) {
        if (hasValidRef(config)) {
          ref = config.ref;
          {
            warnIfStringRefCannotBeAutoConverted(config);
          }
        }
        if (hasValidKey(config)) {
          {
            checkKeyStringCoercion(config.key);
          }
          key = '' + config.key;
        }
        self = config.__self === undefined ? null : config.__self;
        source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            props[propName] = config[propName];
          }
        }
      } // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.

      var childrenLength = arguments.length - 2;
      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);
        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }
        {
          if (Object.freeze) {
            Object.freeze(childArray);
          }
        }
        props.children = childArray;
      } // Resolve default props

      if (type && type.defaultProps) {
        var defaultProps = type.defaultProps;
        for (propName in defaultProps) {
          if (props[propName] === undefined) {
            props[propName] = defaultProps[propName];
          }
        }
      }
      {
        if (key || ref) {
          var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
          if (key) {
            defineKeyPropWarningGetter(props, displayName);
          }
          if (ref) {
            defineRefPropWarningGetter(props, displayName);
          }
        }
      }
      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    function cloneAndReplaceKey(oldElement, newKey) {
      var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
      return newElement;
    }
    /**
     * Clone and return a new ReactElement using element as the starting point.
     * See https://reactjs.org/docs/react-api.html#cloneelement
     */

    function cloneElement(element, config, children) {
      if (element === null || element === undefined) {
        throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
      }
      var propName; // Original props are copied

      var props = assign({}, element.props); // Reserved names are extracted

      var key = element.key;
      var ref = element.ref; // Self is preserved since the owner is preserved.

      var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
      // transpiler, and the original source is probably a better indicator of the
      // true owner.

      var source = element._source; // Owner will be preserved, unless ref is overridden

      var owner = element._owner;
      if (config != null) {
        if (hasValidRef(config)) {
          // Silently steal the ref from the parent.
          ref = config.ref;
          owner = ReactCurrentOwner.current;
        }
        if (hasValidKey(config)) {
          {
            checkKeyStringCoercion(config.key);
          }
          key = '' + config.key;
        } // Remaining properties override existing props

        var defaultProps;
        if (element.type && element.type.defaultProps) {
          defaultProps = element.type.defaultProps;
        }
        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            if (config[propName] === undefined && defaultProps !== undefined) {
              // Resolve default props
              props[propName] = defaultProps[propName];
            } else {
              props[propName] = config[propName];
            }
          }
        }
      } // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.

      var childrenLength = arguments.length - 2;
      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);
        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }
        props.children = childArray;
      }
      return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
     * Verifies the object is a ReactElement.
     * See https://reactjs.org/docs/react-api.html#isvalidelement
     * @param {?object} object
     * @return {boolean} True if `object` is a ReactElement.
     * @final
     */

    function isValidElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    /**
     * Escape and wrap key so it is safe to use as a reactid
     *
     * @param {string} key to be escaped.
     * @return {string} the escaped key.
     */

    function escape(key) {
      var escapeRegex = /[=:]/g;
      var escaperLookup = {
        '=': '=0',
        ':': '=2'
      };
      var escapedString = key.replace(escapeRegex, function (match) {
        return escaperLookup[match];
      });
      return '$' + escapedString;
    }
    /**
     * TODO: Test that a single child and an array with one item have the same key
     * pattern.
     */

    var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
      return text.replace(userProvidedKeyEscapeRegex, '$&/');
    }
    /**
     * Generate a key string that identifies a element within a set.
     *
     * @param {*} element A element that could contain a manual key.
     * @param {number} index Index that is used if a manual key is not provided.
     * @return {string}
     */

    function getElementKey(element, index) {
      // Do some typechecking here since we call this blindly. We want to ensure
      // that we don't block potential future ES APIs.
      if (typeof element === 'object' && element !== null && element.key != null) {
        // Explicit key
        {
          checkKeyStringCoercion(element.key);
        }
        return escape('' + element.key);
      } // Implicit key determined by the index in the set

      return index.toString(36);
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
      var type = typeof children;
      if (type === 'undefined' || type === 'boolean') {
        // All of the above are perceived as null.
        children = null;
      }
      var invokeCallback = false;
      if (children === null) {
        invokeCallback = true;
      } else {
        switch (type) {
          case 'string':
          case 'number':
            invokeCallback = true;
            break;
          case 'object':
            switch (children.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                invokeCallback = true;
            }
        }
      }
      if (invokeCallback) {
        var _child = children;
        var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
        // so that it's consistent if the number of children grows:

        var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
        if (isArray(mappedChild)) {
          var escapedChildKey = '';
          if (childKey != null) {
            escapedChildKey = escapeUserProvidedKey(childKey) + '/';
          }
          mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {
            return c;
          });
        } else if (mappedChild != null) {
          if (isValidElement(mappedChild)) {
            {
              // The `if` statement here prevents auto-disabling of the safe
              // coercion ESLint rule, so we must manually disable it below.
              // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
              if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                checkKeyStringCoercion(mappedChild.key);
              }
            }
            mappedChild = cloneAndReplaceKey(mappedChild,
            // Keep both the (mapped) and old keys if they differ, just as
            // traverseAllChildren used to do for objects as children
            escapedPrefix + (
            // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
            mappedChild.key && (!_child || _child.key !== mappedChild.key) ?
            // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
            // eslint-disable-next-line react-internal/safe-string-coercion
            escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
          }
          array.push(mappedChild);
        }
        return 1;
      }
      var child;
      var nextName;
      var subtreeCount = 0; // Count of children found in the current subtree.

      var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
      if (isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          child = children[i];
          nextName = nextNamePrefix + getElementKey(child, i);
          subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
        }
      } else {
        var iteratorFn = getIteratorFn(children);
        if (typeof iteratorFn === 'function') {
          var iterableChildren = children;
          {
            // Warn about using Maps as children
            if (iteratorFn === iterableChildren.entries) {
              if (!didWarnAboutMaps) {
                warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
              }
              didWarnAboutMaps = true;
            }
          }
          var iterator = iteratorFn.call(iterableChildren);
          var step;
          var ii = 0;
          while (!(step = iterator.next()).done) {
            child = step.value;
            nextName = nextNamePrefix + getElementKey(child, ii++);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
          }
        } else if (type === 'object') {
          // eslint-disable-next-line react-internal/safe-string-coercion
          var childrenString = String(children);
          throw new Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
        }
      }
      return subtreeCount;
    }

    /**
     * Maps children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenmap
     *
     * The provided mapFunction(child, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} func The map function.
     * @param {*} context Context for mapFunction.
     * @return {object} Object containing the ordered map of results.
     */
    function mapChildren(children, func, context) {
      if (children == null) {
        return children;
      }
      var result = [];
      var count = 0;
      mapIntoArray(children, result, '', '', function (child) {
        return func.call(context, child, count++);
      });
      return result;
    }
    /**
     * Count the number of children that are typically specified as
     * `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrencount
     *
     * @param {?*} children Children tree container.
     * @return {number} The number of children.
     */

    function countChildren(children) {
      var n = 0;
      mapChildren(children, function () {
        n++; // Don't return anything
      });
      return n;
    }

    /**
     * Iterates through children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
     *
     * The provided forEachFunc(child, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} forEachFunc
     * @param {*} forEachContext Context for forEachContext.
     */
    function forEachChildren(children, forEachFunc, forEachContext) {
      mapChildren(children, function () {
        forEachFunc.apply(this, arguments); // Don't return anything.
      }, forEachContext);
    }
    /**
     * Flatten a children object (typically specified as `props.children`) and
     * return an array with appropriately re-keyed children.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
     */

    function toArray(children) {
      return mapChildren(children, function (child) {
        return child;
      }) || [];
    }
    /**
     * Returns the first child in a collection of children and verifies that there
     * is only one child in the collection.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenonly
     *
     * The current implementation of this function assumes that a single child gets
     * passed without a wrapper, but the purpose of this helper function is to
     * abstract away the particular structure of children.
     *
     * @param {?object} children Child collection structure.
     * @return {ReactElement} The first and only `ReactElement` contained in the
     * structure.
     */

    function onlyChild(children) {
      if (!isValidElement(children)) {
        throw new Error('React.Children.only expected to receive a single React element child.');
      }
      return children;
    }
    function createContext(defaultValue) {
      // TODO: Second argument used to be an optional `calculateChangedBits`
      // function. Warn to reserve for future use?
      var context = {
        $$typeof: REACT_CONTEXT_TYPE,
        // As a workaround to support multiple concurrent renderers, we categorize
        // some renderers as primary and others as secondary. We only expect
        // there to be two concurrent renderers at most: React Native (primary) and
        // Fabric (secondary); React DOM (primary) and React ART (secondary).
        // Secondary renderers store their context values on separate fields.
        _currentValue: defaultValue,
        _currentValue2: defaultValue,
        // Used to track how many concurrent renderers this context currently
        // supports within in a single renderer. Such as parallel server rendering.
        _threadCount: 0,
        // These are circular
        Provider: null,
        Consumer: null,
        // Add these to use same hidden class in VM as ServerContext
        _defaultValue: null,
        _globalName: null
      };
      context.Provider = {
        $$typeof: REACT_PROVIDER_TYPE,
        _context: context
      };
      var hasWarnedAboutUsingNestedContextConsumers = false;
      var hasWarnedAboutUsingConsumerProvider = false;
      var hasWarnedAboutDisplayNameOnConsumer = false;
      {
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
          $$typeof: REACT_CONTEXT_TYPE,
          _context: context
        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

        Object.defineProperties(Consumer, {
          Provider: {
            get: function () {
              if (!hasWarnedAboutUsingConsumerProvider) {
                hasWarnedAboutUsingConsumerProvider = true;
                error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
              }
              return context.Provider;
            },
            set: function (_Provider) {
              context.Provider = _Provider;
            }
          },
          _currentValue: {
            get: function () {
              return context._currentValue;
            },
            set: function (_currentValue) {
              context._currentValue = _currentValue;
            }
          },
          _currentValue2: {
            get: function () {
              return context._currentValue2;
            },
            set: function (_currentValue2) {
              context._currentValue2 = _currentValue2;
            }
          },
          _threadCount: {
            get: function () {
              return context._threadCount;
            },
            set: function (_threadCount) {
              context._threadCount = _threadCount;
            }
          },
          Consumer: {
            get: function () {
              if (!hasWarnedAboutUsingNestedContextConsumers) {
                hasWarnedAboutUsingNestedContextConsumers = true;
                error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
              }
              return context.Consumer;
            }
          },
          displayName: {
            get: function () {
              return context.displayName;
            },
            set: function (displayName) {
              if (!hasWarnedAboutDisplayNameOnConsumer) {
                warn('Setting `displayName` on Context.Consumer has no effect. ' + "You should set it directly on the context with Context.displayName = '%s'.", displayName);
                hasWarnedAboutDisplayNameOnConsumer = true;
              }
            }
          }
        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

        context.Consumer = Consumer;
      }
      {
        context._currentRenderer = null;
        context._currentRenderer2 = null;
      }
      return context;
    }
    var Uninitialized = -1;
    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;
    function lazyInitializer(payload) {
      if (payload._status === Uninitialized) {
        var ctor = payload._result;
        var thenable = ctor(); // Transition to the next state.
        // This might throw either because it's missing or throws. If so, we treat it
        // as still uninitialized and try again next time. Which is the same as what
        // happens if the ctor or any wrappers processing the ctor throws. This might
        // end up fixing it if the resolution was a concurrency bug.

        thenable.then(function (moduleObject) {
          if (payload._status === Pending || payload._status === Uninitialized) {
            // Transition to the next state.
            var resolved = payload;
            resolved._status = Resolved;
            resolved._result = moduleObject;
          }
        }, function (error) {
          if (payload._status === Pending || payload._status === Uninitialized) {
            // Transition to the next state.
            var rejected = payload;
            rejected._status = Rejected;
            rejected._result = error;
          }
        });
        if (payload._status === Uninitialized) {
          // In case, we're still uninitialized, then we're waiting for the thenable
          // to resolve. Set it as pending in the meantime.
          var pending = payload;
          pending._status = Pending;
          pending._result = thenable;
        }
      }
      if (payload._status === Resolved) {
        var moduleObject = payload._result;
        {
          if (moduleObject === undefined) {
            error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' +
            // Break up imports to avoid accidentally parsing them as dependencies.
            'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))\n\n" + 'Did you accidentally put curly braces around the import?', moduleObject);
          }
        }
        {
          if (!('default' in moduleObject)) {
            error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' +
            // Break up imports to avoid accidentally parsing them as dependencies.
            'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))", moduleObject);
          }
        }
        return moduleObject.default;
      } else {
        throw payload._result;
      }
    }
    function lazy(ctor) {
      var payload = {
        // We use these fields to store the result.
        _status: Uninitialized,
        _result: ctor
      };
      var lazyType = {
        $$typeof: REACT_LAZY_TYPE,
        _payload: payload,
        _init: lazyInitializer
      };
      {
        // In production, this would just set it on the object.
        var defaultProps;
        var propTypes; // $FlowFixMe

        Object.defineProperties(lazyType, {
          defaultProps: {
            configurable: true,
            get: function () {
              return defaultProps;
            },
            set: function (newDefaultProps) {
              error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
              defaultProps = newDefaultProps; // Match production behavior more closely:
              // $FlowFixMe

              Object.defineProperty(lazyType, 'defaultProps', {
                enumerable: true
              });
            }
          },
          propTypes: {
            configurable: true,
            get: function () {
              return propTypes;
            },
            set: function (newPropTypes) {
              error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
              propTypes = newPropTypes; // Match production behavior more closely:
              // $FlowFixMe

              Object.defineProperty(lazyType, 'propTypes', {
                enumerable: true
              });
            }
          }
        });
      }
      return lazyType;
    }
    function forwardRef(render) {
      {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
          error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
        } else if (typeof render !== 'function') {
          error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
        } else {
          if (render.length !== 0 && render.length !== 2) {
            error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
          }
        }
        if (render != null) {
          if (render.defaultProps != null || render.propTypes != null) {
            error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
          }
        }
      }
      var elementType = {
        $$typeof: REACT_FORWARD_REF_TYPE,
        render: render
      };
      {
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
          enumerable: false,
          configurable: true,
          get: function () {
            return ownName;
          },
          set: function (name) {
            ownName = name; // The inner component shouldn't inherit this display name in most cases,
            // because the component may be used elsewhere.
            // But it's nice for anonymous functions to inherit the name,
            // so that our component-stack generation logic will display their frames.
            // An anonymous function generally suggests a pattern like:
            //   React.forwardRef((props, ref) => {...});
            // This kind of inner function is not used elsewhere so the side effect is okay.

            if (!render.name && !render.displayName) {
              render.displayName = name;
            }
          }
        });
      }
      return elementType;
    }
    var REACT_MODULE_REFERENCE;
    {
      REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
    }
    function isValidElementType(type) {
      if (typeof type === 'string' || typeof type === 'function') {
        return true;
      } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).

      if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
        return true;
      }
      if (typeof type === 'object' && type !== null) {
        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE ||
        // This needs to include all possible module reference object
        // types supported by any Flight configuration anywhere since
        // we don't know which Flight build this will end up being used
        // with.
        type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
          return true;
        }
      }
      return false;
    }
    function memo(type, compare) {
      {
        if (!isValidElementType(type)) {
          error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
        }
      }
      var elementType = {
        $$typeof: REACT_MEMO_TYPE,
        type: type,
        compare: compare === undefined ? null : compare
      };
      {
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
          enumerable: false,
          configurable: true,
          get: function () {
            return ownName;
          },
          set: function (name) {
            ownName = name; // The inner component shouldn't inherit this display name in most cases,
            // because the component may be used elsewhere.
            // But it's nice for anonymous functions to inherit the name,
            // so that our component-stack generation logic will display their frames.
            // An anonymous function generally suggests a pattern like:
            //   React.memo((props) => {...});
            // This kind of inner function is not used elsewhere so the side effect is okay.

            if (!type.name && !type.displayName) {
              type.displayName = name;
            }
          }
        });
      }
      return elementType;
    }
    function resolveDispatcher() {
      var dispatcher = ReactCurrentDispatcher.current;
      {
        if (dispatcher === null) {
          error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\n' + '2. You might be breaking the Rules of Hooks\n' + '3. You might have more than one copy of React in the same app\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');
        }
      } // Will result in a null access error if accessed outside render phase. We
      // intentionally don't throw our own error because this is in a hot path.
      // Also helps ensure this is inlined.

      return dispatcher;
    }
    function useContext(Context) {
      var dispatcher = resolveDispatcher();
      {
        // TODO: add a more generic warning for invalid values.
        if (Context._context !== undefined) {
          var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
          // and nobody should be using this in existing code.

          if (realContext.Consumer === Context) {
            error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
          } else if (realContext.Provider === Context) {
            error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
          }
        }
      }
      return dispatcher.useContext(Context);
    }
    function useState(initialState) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useState(initialState);
    }
    function useReducer(reducer, initialArg, init) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useReducer(reducer, initialArg, init);
    }
    function useRef(initialValue) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useRef(initialValue);
    }
    function useEffect(create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useEffect(create, deps);
    }
    function useInsertionEffect(create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useInsertionEffect(create, deps);
    }
    function useLayoutEffect(create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useLayoutEffect(create, deps);
    }
    function useCallback(callback, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useCallback(callback, deps);
    }
    function useMemo(create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useMemo(create, deps);
    }
    function useImperativeHandle(ref, create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useImperativeHandle(ref, create, deps);
    }
    function useDebugValue(value, formatterFn) {
      {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
      }
    }
    function useTransition() {
      var dispatcher = resolveDispatcher();
      return dispatcher.useTransition();
    }
    function useDeferredValue(value) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useDeferredValue(value);
    }
    function useId() {
      var dispatcher = resolveDispatcher();
      return dispatcher.useId();
    }
    function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    }

    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
      {
        if (disabledDepth === 0) {
          /* eslint-disable react-internal/no-production-logging */
          prevLog = console.log;
          prevInfo = console.info;
          prevWarn = console.warn;
          prevError = console.error;
          prevGroup = console.group;
          prevGroupCollapsed = console.groupCollapsed;
          prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

          var props = {
            configurable: true,
            enumerable: true,
            value: disabledLog,
            writable: true
          }; // $FlowFixMe Flow thinks console is immutable.

          Object.defineProperties(console, {
            info: props,
            log: props,
            warn: props,
            error: props,
            group: props,
            groupCollapsed: props,
            groupEnd: props
          });
          /* eslint-enable react-internal/no-production-logging */
        }
        disabledDepth++;
      }
    }
    function reenableLogs() {
      {
        disabledDepth--;
        if (disabledDepth === 0) {
          /* eslint-disable react-internal/no-production-logging */
          var props = {
            configurable: true,
            enumerable: true,
            writable: true
          }; // $FlowFixMe Flow thinks console is immutable.

          Object.defineProperties(console, {
            log: assign({}, props, {
              value: prevLog
            }),
            info: assign({}, props, {
              value: prevInfo
            }),
            warn: assign({}, props, {
              value: prevWarn
            }),
            error: assign({}, props, {
              value: prevError
            }),
            group: assign({}, props, {
              value: prevGroup
            }),
            groupCollapsed: assign({}, props, {
              value: prevGroupCollapsed
            }),
            groupEnd: assign({}, props, {
              value: prevGroupEnd
            })
          });
          /* eslint-enable react-internal/no-production-logging */
        }
        if (disabledDepth < 0) {
          error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
        }
      }
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
      {
        if (prefix === undefined) {
          // Extract the VM specific prefix used by each line.
          try {
            throw Error();
          } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
          }
        } // We use the prefix to ensure our stacks line up with native stack frames.

        return '\n' + prefix + name;
      }
    }
    var reentry = false;
    var componentFrameCache;
    {
      var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
      componentFrameCache = new PossiblyWeakMap();
    }
    function describeNativeComponentFrame(fn, construct) {
      // If something asked for a stack inside a fake render, it should get ignored.
      if (!fn || reentry) {
        return '';
      }
      {
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) {
          return frame;
        }
      }
      var control;
      reentry = true;
      var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

      Error.prepareStackTrace = undefined;
      var previousDispatcher;
      {
        previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.

        ReactCurrentDispatcher$1.current = null;
        disableLogs();
      }
      try {
        // This should throw.
        if (construct) {
          // Something should be setting the props in the constructor.
          var Fake = function () {
            throw Error();
          }; // $FlowFixMe

          Object.defineProperty(Fake.prototype, 'props', {
            set: function () {
              // We use a throwing setter instead of frozen or non-writable props
              // because that won't throw in a non-strict mode function.
              throw Error();
            }
          });
          if (typeof Reflect === 'object' && Reflect.construct) {
            // We construct a different control for this case to include any extra
            // frames added by the construct call.
            try {
              Reflect.construct(Fake, []);
            } catch (x) {
              control = x;
            }
            Reflect.construct(fn, [], Fake);
          } else {
            try {
              Fake.call();
            } catch (x) {
              control = x;
            }
            fn.call(Fake.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (x) {
            control = x;
          }
          fn();
        }
      } catch (sample) {
        // This is inlined manually because closure doesn't do it for us.
        if (sample && control && typeof sample.stack === 'string') {
          // This extracts the first frame from the sample that isn't also in the control.
          // Skipping one frame that we assume is the frame that calls the two.
          var sampleLines = sample.stack.split('\n');
          var controlLines = control.stack.split('\n');
          var s = sampleLines.length - 1;
          var c = controlLines.length - 1;
          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
            // We expect at least one stack frame to be shared.
            // Typically this will be the root most one. However, stack frames may be
            // cut off due to maximum stack limits. In this case, one maybe cut off
            // earlier than the other. We assume that the sample is longer or the same
            // and there for cut off earlier. So we should find the root most frame in
            // the sample somewhere in the control.
            c--;
          }
          for (; s >= 1 && c >= 0; s--, c--) {
            // Next we find the first one that isn't the same which should be the
            // frame that called our sample function and the control.
            if (sampleLines[s] !== controlLines[c]) {
              // In V8, the first line is describing the message but other VMs don't.
              // If we're about to return the first line, and the control is also on the same
              // line, that's a pretty good indicator that our sample threw at same line as
              // the control. I.e. before we entered the sample frame. So we ignore this result.
              // This can happen if you passed a class to function component, or non-function.
              if (s !== 1 || c !== 1) {
                do {
                  s--;
                  c--; // We may still have similar intermediate frames from the construct call.
                  // The next one that isn't the same should be our match though.

                  if (c < 0 || sampleLines[s] !== controlLines[c]) {
                    // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                    var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
                    // but we have a user-provided "displayName"
                    // splice it in to make the stack more readable.

                    if (fn.displayName && _frame.includes('<anonymous>')) {
                      _frame = _frame.replace('<anonymous>', fn.displayName);
                    }
                    {
                      if (typeof fn === 'function') {
                        componentFrameCache.set(fn, _frame);
                      }
                    } // Return the line we found.

                    return _frame;
                  }
                } while (s >= 1 && c >= 0);
              }
              break;
            }
          }
        }
      } finally {
        reentry = false;
        {
          ReactCurrentDispatcher$1.current = previousDispatcher;
          reenableLogs();
        }
        Error.prepareStackTrace = previousPrepareStackTrace;
      } // Fallback to just using the name if we couldn't make it throw.

      var name = fn ? fn.displayName || fn.name : '';
      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
      {
        if (typeof fn === 'function') {
          componentFrameCache.set(fn, syntheticFrame);
        }
      }
      return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
      {
        return describeNativeComponentFrame(fn, false);
      }
    }
    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
      if (type == null) {
        return '';
      }
      if (typeof type === 'function') {
        {
          return describeNativeComponentFrame(type, shouldConstruct(type));
        }
      }
      if (typeof type === 'string') {
        return describeBuiltInComponentFrame(type);
      }
      switch (type) {
        case REACT_SUSPENSE_TYPE:
          return describeBuiltInComponentFrame('Suspense');
        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame('SuspenseList');
      }
      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return describeFunctionComponentFrame(type.render);
          case REACT_MEMO_TYPE:
            // Memo may contain any component type so we recursively resolve it.
            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
          case REACT_LAZY_TYPE:
            {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                // Lazy may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x) {}
            }
        }
      }
      return '';
    }
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
        }
      }
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
      {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(hasOwnProperty);
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.

            try {
              // This is intentionally an invariant that gets caught. It's the same
              // behavior as without this statement except with a better message.
              if (typeof typeSpecs[typeSpecName] !== 'function') {
                // eslint-disable-next-line react-internal/prod-error-codes
                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                err.name = 'Invariant Violation';
                throw err;
              }
              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
              error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
              setCurrentlyValidatingElement(element);
              error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);
              setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
              // Only monitor this failure once because there tends to be a lot of the
              // same error.
              loggedTypeFailures[error$1.message] = true;
              setCurrentlyValidatingElement(element);
              error('Failed %s type: %s', location, error$1.message);
              setCurrentlyValidatingElement(null);
            }
          }
        }
      }
    }
    function setCurrentlyValidatingElement$1(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          setExtraStackFrame(stack);
        } else {
          setExtraStackFrame(null);
        }
      }
    }
    var propTypesMisspellWarningShown;
    {
      propTypesMisspellWarningShown = false;
    }
    function getDeclarationErrorAddendum() {
      if (ReactCurrentOwner.current) {
        var name = getComponentNameFromType(ReactCurrentOwner.current.type);
        if (name) {
          return '\n\nCheck the render method of `' + name + '`.';
        }
      }
      return '';
    }
    function getSourceInfoErrorAddendum(source) {
      if (source !== undefined) {
        var fileName = source.fileName.replace(/^.*[\\\/]/, '');
        var lineNumber = source.lineNumber;
        return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
      }
      return '';
    }
    function getSourceInfoErrorAddendumForProps(elementProps) {
      if (elementProps !== null && elementProps !== undefined) {
        return getSourceInfoErrorAddendum(elementProps.__source);
      }
      return '';
    }
    /**
     * Warn if there's no key explicitly set on dynamic arrays of children or
     * object keys are not valid. This allows us to keep track of children between
     * updates.
     */

    var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
      var info = getDeclarationErrorAddendum();
      if (!info) {
        var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
        if (parentName) {
          info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
      }
      return info;
    }
    /**
     * Warn if the element doesn't have an explicit key assigned to it.
     * This element is in an array. The array could grow and shrink or be
     * reordered. All children that haven't already been validated are required to
     * have a "key" property assigned to it. Error statuses are cached so a warning
     * will only be shown once.
     *
     * @internal
     * @param {ReactElement} element Element that requires a key.
     * @param {*} parentType element's parent's type.
     */

    function validateExplicitKey(element, parentType) {
      if (!element._store || element._store.validated || element.key != null) {
        return;
      }
      element._store.validated = true;
      var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
      if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
        return;
      }
      ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
      // property, it may be the creator of the child that's responsible for
      // assigning it a key.

      var childOwner = '';
      if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
        // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
      }
      {
        setCurrentlyValidatingElement$1(element);
        error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
      }
    }
    /**
     * Ensure that every element either is passed in a static location, in an
     * array with an explicit keys property defined, or in an object literal
     * with valid key property.
     *
     * @internal
     * @param {ReactNode} node Statically passed child of any type.
     * @param {*} parentType node's parent's type.
     */

    function validateChildKeys(node, parentType) {
      if (typeof node !== 'object') {
        return;
      }
      if (isArray(node)) {
        for (var i = 0; i < node.length; i++) {
          var child = node[i];
          if (isValidElement(child)) {
            validateExplicitKey(child, parentType);
          }
        }
      } else if (isValidElement(node)) {
        // This element was passed in a valid location.
        if (node._store) {
          node._store.validated = true;
        }
      } else if (node) {
        var iteratorFn = getIteratorFn(node);
        if (typeof iteratorFn === 'function') {
          // Entry iterators used to provide implicit keys,
          // but now we print a separate warning for them later.
          if (iteratorFn !== node.entries) {
            var iterator = iteratorFn.call(node);
            var step;
            while (!(step = iterator.next()).done) {
              if (isValidElement(step.value)) {
                validateExplicitKey(step.value, parentType);
              }
            }
          }
        }
      }
    }
    /**
     * Given an element, validate that its props follow the propTypes definition,
     * provided by the type.
     *
     * @param {ReactElement} element
     */

    function validatePropTypes(element) {
      {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') {
          return;
        }
        var propTypes;
        if (typeof type === 'function') {
          propTypes = type.propTypes;
        } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE ||
        // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) {
          propTypes = type.propTypes;
        } else {
          return;
        }
        if (propTypes) {
          // Intentionally inside to avoid triggering lazy initializers:
          var name = getComponentNameFromType(type);
          checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
          propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

          var _name = getComponentNameFromType(type);
          error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
          error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
        }
      }
    }
    /**
     * Given a fragment, validate that it can only be provided with fragment props
     * @param {ReactElement} fragment
     */

    function validateFragmentProps(fragment) {
      {
        var keys = Object.keys(fragment.props);
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          if (key !== 'children' && key !== 'key') {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
            setCurrentlyValidatingElement$1(null);
            break;
          }
        }
        if (fragment.ref !== null) {
          setCurrentlyValidatingElement$1(fragment);
          error('Invalid attribute `ref` supplied to `React.Fragment`.');
          setCurrentlyValidatingElement$1(null);
        }
      }
    }
    function createElementWithValidation(type, props, children) {
      var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
      // succeed and there will likely be errors in render.

      if (!validType) {
        var info = '';
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
        }
        var sourceInfo = getSourceInfoErrorAddendumForProps(props);
        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }
        var typeString;
        if (type === null) {
          typeString = 'null';
        } else if (isArray(type)) {
          typeString = 'array';
        } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
          typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
          info = ' Did you accidentally export a JSX literal instead of a component?';
        } else {
          typeString = typeof type;
        }
        {
          error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
        }
      }
      var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
      // TODO: Drop this when these are no longer allowed as the type argument.

      if (element == null) {
        return element;
      } // Skip key warning if the type isn't valid since our key validation logic
      // doesn't expect a non-string/function type and can throw confusing errors.
      // We don't want exception behavior to differ between dev and prod.
      // (Rendering will throw with a helpful message and as soon as the type is
      // fixed, the key warnings will appear.)

      if (validType) {
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], type);
        }
      }
      if (type === REACT_FRAGMENT_TYPE) {
        validateFragmentProps(element);
      } else {
        validatePropTypes(element);
      }
      return element;
    }
    var didWarnAboutDeprecatedCreateFactory = false;
    function createFactoryWithValidation(type) {
      var validatedFactory = createElementWithValidation.bind(null, type);
      validatedFactory.type = type;
      {
        if (!didWarnAboutDeprecatedCreateFactory) {
          didWarnAboutDeprecatedCreateFactory = true;
          warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
        } // Legacy hook: remove it

        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
      return validatedFactory;
    }
    function cloneElementWithValidation(element, props, children) {
      var newElement = cloneElement.apply(this, arguments);
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], newElement.type);
      }
      validatePropTypes(newElement);
      return newElement;
    }
    function startTransition(scope, options) {
      var prevTransition = ReactCurrentBatchConfig.transition;
      ReactCurrentBatchConfig.transition = {};
      var currentTransition = ReactCurrentBatchConfig.transition;
      {
        ReactCurrentBatchConfig.transition._updatedFibers = new Set();
      }
      try {
        scope();
      } finally {
        ReactCurrentBatchConfig.transition = prevTransition;
        {
          if (prevTransition === null && currentTransition._updatedFibers) {
            var updatedFibersCount = currentTransition._updatedFibers.size;
            if (updatedFibersCount > 10) {
              warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');
            }
            currentTransition._updatedFibers.clear();
          }
        }
      }
    }
    var didWarnAboutMessageChannel = false;
    var enqueueTaskImpl = null;
    function enqueueTask(task) {
      if (enqueueTaskImpl === null) {
        try {
          // read require off the module object to get around the bundlers.
          // we don't want them to detect a require and bundle a Node polyfill.
          var requireString = ('require' + Math.random()).slice(0, 7);
          var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's
          // version of setImmediate, bypassing fake timers if any.

          enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;
        } catch (_err) {
          // we're in a browser
          // we can't use regular timers because they may still be faked
          // so we try MessageChannel+postMessage instead
          enqueueTaskImpl = function (callback) {
            {
              if (didWarnAboutMessageChannel === false) {
                didWarnAboutMessageChannel = true;
                if (typeof MessageChannel === 'undefined') {
                  error('This browser does not have a MessageChannel implementation, ' + 'so enqueuing tasks via await act(async () => ...) will fail. ' + 'Please file an issue at https://github.com/facebook/react/issues ' + 'if you encounter this warning.');
                }
              }
            }
            var channel = new MessageChannel();
            channel.port1.onmessage = callback;
            channel.port2.postMessage(undefined);
          };
        }
      }
      return enqueueTaskImpl(task);
    }
    var actScopeDepth = 0;
    var didWarnNoAwaitAct = false;
    function act(callback) {
      {
        // `act` calls can be nested, so we track the depth. This represents the
        // number of `act` scopes on the stack.
        var prevActScopeDepth = actScopeDepth;
        actScopeDepth++;
        if (ReactCurrentActQueue.current === null) {
          // This is the outermost `act` scope. Initialize the queue. The reconciler
          // will detect the queue and use it instead of Scheduler.
          ReactCurrentActQueue.current = [];
        }
        var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
        var result;
        try {
          // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only
          // set to `true` while the given callback is executed, not for updates
          // triggered during an async event, because this is how the legacy
          // implementation of `act` behaved.
          ReactCurrentActQueue.isBatchingLegacy = true;
          result = callback(); // Replicate behavior of original `act` implementation in legacy mode,
          // which flushed updates immediately after the scope function exits, even
          // if it's an async function.

          if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
            var queue = ReactCurrentActQueue.current;
            if (queue !== null) {
              ReactCurrentActQueue.didScheduleLegacyUpdate = false;
              flushActQueue(queue);
            }
          }
        } catch (error) {
          popActScope(prevActScopeDepth);
          throw error;
        } finally {
          ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
        }
        if (result !== null && typeof result === 'object' && typeof result.then === 'function') {
          var thenableResult = result; // The callback is an async function (i.e. returned a promise). Wait
          // for it to resolve before exiting the current scope.

          var wasAwaited = false;
          var thenable = {
            then: function (resolve, reject) {
              wasAwaited = true;
              thenableResult.then(function (returnValue) {
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  // We've exited the outermost act scope. Recursively flush the
                  // queue until there's no remaining work.
                  recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                } else {
                  resolve(returnValue);
                }
              }, function (error) {
                // The callback threw an error.
                popActScope(prevActScopeDepth);
                reject(error);
              });
            }
          };
          {
            if (!didWarnNoAwaitAct && typeof Promise !== 'undefined') {
              // eslint-disable-next-line no-undef
              Promise.resolve().then(function () {}).then(function () {
                if (!wasAwaited) {
                  didWarnNoAwaitAct = true;
                  error('You called act(async () => ...) without await. ' + 'This could lead to unexpected testing behaviour, ' + 'interleaving multiple act calls and mixing their ' + 'scopes. ' + 'You should - await act(async () => ...);');
                }
              });
            }
          }
          return thenable;
        } else {
          var returnValue = result; // The callback is not an async function. Exit the current scope
          // immediately, without awaiting.

          popActScope(prevActScopeDepth);
          if (actScopeDepth === 0) {
            // Exiting the outermost act scope. Flush the queue.
            var _queue = ReactCurrentActQueue.current;
            if (_queue !== null) {
              flushActQueue(_queue);
              ReactCurrentActQueue.current = null;
            } // Return a thenable. If the user awaits it, we'll flush again in
            // case additional work was scheduled by a microtask.

            var _thenable = {
              then: function (resolve, reject) {
                // Confirm we haven't re-entered another `act` scope, in case
                // the user does something weird like await the thenable
                // multiple times.
                if (ReactCurrentActQueue.current === null) {
                  // Recursively flush the queue until there's no remaining work.
                  ReactCurrentActQueue.current = [];
                  recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                } else {
                  resolve(returnValue);
                }
              }
            };
            return _thenable;
          } else {
            // Since we're inside a nested `act` scope, the returned thenable
            // immediately resolves. The outer scope will flush the queue.
            var _thenable2 = {
              then: function (resolve, reject) {
                resolve(returnValue);
              }
            };
            return _thenable2;
          }
        }
      }
    }
    function popActScope(prevActScopeDepth) {
      {
        if (prevActScopeDepth !== actScopeDepth - 1) {
          error('You seem to have overlapping act() calls, this is not supported. ' + 'Be sure to await previous act() calls before making a new one. ');
        }
        actScopeDepth = prevActScopeDepth;
      }
    }
    function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
      {
        var queue = ReactCurrentActQueue.current;
        if (queue !== null) {
          try {
            flushActQueue(queue);
            enqueueTask(function () {
              if (queue.length === 0) {
                // No additional work was scheduled. Finish.
                ReactCurrentActQueue.current = null;
                resolve(returnValue);
              } else {
                // Keep flushing work until there's none left.
                recursivelyFlushAsyncActWork(returnValue, resolve, reject);
              }
            });
          } catch (error) {
            reject(error);
          }
        } else {
          resolve(returnValue);
        }
      }
    }
    var isFlushing = false;
    function flushActQueue(queue) {
      {
        if (!isFlushing) {
          // Prevent re-entrance.
          isFlushing = true;
          var i = 0;
          try {
            for (; i < queue.length; i++) {
              var callback = queue[i];
              do {
                callback = callback(true);
              } while (callback !== null);
            }
            queue.length = 0;
          } catch (error) {
            // If something throws, leave the remaining callbacks on the queue.
            queue = queue.slice(i + 1);
            throw error;
          } finally {
            isFlushing = false;
          }
        }
      }
    }
    var createElement$1 = createElementWithValidation;
    var cloneElement$1 = cloneElementWithValidation;
    var createFactory = createFactoryWithValidation;
    var Children = {
      map: mapChildren,
      forEach: forEachChildren,
      count: countChildren,
      toArray: toArray,
      only: onlyChild
    };
    exports.Children = Children;
    exports.Component = Component;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.Profiler = REACT_PROFILER_TYPE;
    exports.PureComponent = PureComponent;
    exports.StrictMode = REACT_STRICT_MODE_TYPE;
    exports.Suspense = REACT_SUSPENSE_TYPE;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
    exports.cloneElement = cloneElement$1;
    exports.createContext = createContext;
    exports.createElement = createElement$1;
    exports.createFactory = createFactory;
    exports.createRef = createRef;
    exports.forwardRef = forwardRef;
    exports.isValidElement = isValidElement;
    exports.lazy = lazy;
    exports.memo = memo;
    exports.startTransition = startTransition;
    exports.unstable_act = act;
    exports.useCallback = useCallback;
    exports.useContext = useContext;
    exports.useDebugValue = useDebugValue;
    exports.useDeferredValue = useDeferredValue;
    exports.useEffect = useEffect;
    exports.useId = useId;
    exports.useImperativeHandle = useImperativeHandle;
    exports.useInsertionEffect = useInsertionEffect;
    exports.useLayoutEffect = useLayoutEffect;
    exports.useMemo = useMemo;
    exports.useReducer = useReducer;
    exports.useRef = useRef;
    exports.useState = useState;
    exports.useSyncExternalStore = useSyncExternalStore;
    exports.useTransition = useTransition;
    exports.version = ReactVersion;
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    }
  })();
}
},{}],"../node_modules/react/index.js":[function(require,module,exports) {
'use strict';

if ("development" === 'production') {
  module.exports = require('./cjs/react.production.min.js');
} else {
  module.exports = require('./cjs/react.development.js');
}
},{"./cjs/react.development.js":"../node_modules/react/cjs/react.development.js"}],"../node_modules/@apollo/client/react/context/ApolloContext.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getApolloContext = getApolloContext;
exports.resetApolloContext = void 0;
var React = _interopRequireWildcard(require("react"));
var _index = require("../../utilities/index.js");
var _index2 = require("../../utilities/globals/index.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// To make sure Apollo Client doesn't create more than one React context
// (which can lead to problems like having an Apollo Client instance added
// in one context, then attempting to retrieve it from another different
// context), a single Apollo context is created and tracked in global state.
var contextKey = _index.canUseSymbol ? Symbol.for("__APOLLO_CONTEXT__") : "__APOLLO_CONTEXT__";
function getApolloContext() {
  (0, _index2.invariant)("createContext" in React, 45);
  var context = React.createContext[contextKey];
  if (!context) {
    Object.defineProperty(React.createContext, contextKey, {
      value: context = React.createContext({}),
      enumerable: false,
      writable: false,
      configurable: true
    });
    context.displayName = "ApolloContext";
  }
  return context;
}
/**
 * @deprecated This function has no "resetting" effect since Apollo Client 3.4.12,
 * and will be removed in the next major version of Apollo Client.
 * If you want to get the Apollo Context, use `getApolloContext` instead.
 */
var resetApolloContext = exports.resetApolloContext = getApolloContext;
},{"react":"../node_modules/react/index.js","../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js","../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js"}],"../node_modules/@apollo/client/react/context/ApolloConsumer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApolloConsumer = void 0;
var _index = require("../../utilities/globals/index.js");
var React = _interopRequireWildcard(require("react"));
var _ApolloContext = require("./ApolloContext.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var ApolloConsumer = function (props) {
  var ApolloContext = (0, _ApolloContext.getApolloContext)();
  return React.createElement(ApolloContext.Consumer, null, function (context) {
    (0, _index.invariant)(context && context.client, 44);
    return props.children(context.client);
  });
};
exports.ApolloConsumer = ApolloConsumer;
},{"../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","react":"../node_modules/react/index.js","./ApolloContext.js":"../node_modules/@apollo/client/react/context/ApolloContext.js"}],"../node_modules/@apollo/client/react/context/ApolloProvider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApolloProvider = void 0;
var _tslib = require("tslib");
var _index = require("../../utilities/globals/index.js");
var React = _interopRequireWildcard(require("react"));
var _ApolloContext = require("./ApolloContext.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var ApolloProvider = function (_a) {
  var client = _a.client,
    children = _a.children;
  var ApolloContext = (0, _ApolloContext.getApolloContext)();
  var parentContext = React.useContext(ApolloContext);
  var context = React.useMemo(function () {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, parentContext), {
      client: client || parentContext.client
    });
  }, [parentContext, client]);
  (0, _index.invariant)(context.client, 46);
  return React.createElement(ApolloContext.Provider, {
    value: context
  }, children);
};
exports.ApolloProvider = ApolloProvider;
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","react":"../node_modules/react/index.js","./ApolloContext.js":"../node_modules/@apollo/client/react/context/ApolloContext.js"}],"../node_modules/@apollo/client/react/context/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ApolloConsumer", {
  enumerable: true,
  get: function () {
    return _ApolloConsumer.ApolloConsumer;
  }
});
Object.defineProperty(exports, "ApolloProvider", {
  enumerable: true,
  get: function () {
    return _ApolloProvider.ApolloProvider;
  }
});
Object.defineProperty(exports, "getApolloContext", {
  enumerable: true,
  get: function () {
    return _ApolloContext.getApolloContext;
  }
});
Object.defineProperty(exports, "resetApolloContext", {
  enumerable: true,
  get: function () {
    return _ApolloContext.resetApolloContext;
  }
});
require("../../utilities/globals/index.js");
var _ApolloConsumer = require("./ApolloConsumer.js");
var _ApolloContext = require("./ApolloContext.js");
var _ApolloProvider = require("./ApolloProvider.js");
},{"../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","./ApolloConsumer.js":"../node_modules/@apollo/client/react/context/ApolloConsumer.js","./ApolloContext.js":"../node_modules/@apollo/client/react/context/ApolloContext.js","./ApolloProvider.js":"../node_modules/@apollo/client/react/context/ApolloProvider.js"}],"../node_modules/@apollo/client/react/hooks/useApolloClient.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useApolloClient = useApolloClient;
var _index = require("../../utilities/globals/index.js");
var React = _interopRequireWildcard(require("react"));
var _index2 = require("../context/index.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useApolloClient(override) {
  var context = React.useContext((0, _index2.getApolloContext)());
  var client = override || context.client;
  (0, _index.invariant)(!!client, 49);
  return client;
}
},{"../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","react":"../node_modules/react/index.js","../context/index.js":"../node_modules/@apollo/client/react/context/index.js"}],"../node_modules/@apollo/client/react/hooks/useSyncExternalStore.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSyncExternalStore = void 0;
var _index = require("../../utilities/globals/index.js");
var React = _interopRequireWildcard(require("react"));
var _index2 = require("../../utilities/index.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var didWarnUncachedGetSnapshot = false;
// Prevent webpack from complaining about our feature detection of the
// useSyncExternalStore property of the React namespace, which is expected not
// to exist when using React 17 and earlier, and that's fine.
var uSESKey = "useSyncExternalStore";
var realHook = React[uSESKey];
// Adapted from https://www.npmjs.com/package/use-sync-external-store, with
// Apollo Client deviations called out by "// DEVIATION ..." comments.
// When/if React.useSyncExternalStore is defined, delegate fully to it.
var useSyncExternalStore = exports.useSyncExternalStore = realHook || function (subscribe, getSnapshot, getServerSnapshot) {
  // Read the current snapshot from the store on every render. Again, this
  // breaks the rules of React, and only works here because of specific
  // implementation details, most importantly that updates are
  // always synchronous.
  var value = getSnapshot();
  if (
  // DEVIATION: Using __DEV__
  globalThis.__DEV__ !== false && !didWarnUncachedGetSnapshot &&
  // DEVIATION: Not using Object.is because we know our snapshots will never
  // be exotic primitive values like NaN, which is !== itself.
  value !== getSnapshot()) {
    didWarnUncachedGetSnapshot = true;
    // DEVIATION: Using invariant.error instead of console.error directly.
    globalThis.__DEV__ !== false && _index.invariant.error(58);
  }
  // Because updates are synchronous, we don't queue them. Instead we force a
  // re-render whenever the subscribed state changes by updating an some
  // arbitrary useState hook. Then, during render, we call getSnapshot to read
  // the current value.
  //
  // Because we don't actually use the state returned by the useState hook, we
  // can save a bit of memory by storing other stuff in that slot.
  //
  // To implement the early bailout, we need to track some things on a mutable
  // object. Usually, we would put that in a useRef hook, but we can stash it in
  // our useState hook instead.
  //
  // To force a re-render, we call forceUpdate({inst}). That works because the
  // new object always fails an equality check.
  var _a = React.useState({
      inst: {
        value: value,
        getSnapshot: getSnapshot
      }
    }),
    inst = _a[0].inst,
    forceUpdate = _a[1];
  // Track the latest getSnapshot function with a ref. This needs to be updated
  // in the layout phase so we can access it during the tearing check that
  // happens on subscribe.
  if (_index2.canUseLayoutEffect) {
    // DEVIATION: We avoid calling useLayoutEffect when !canUseLayoutEffect,
    // which may seem like a conditional hook, but this code ends up behaving
    // unconditionally (one way or the other) because canUseLayoutEffect is
    // constant.
    React.useLayoutEffect(function () {
      Object.assign(inst, {
        value: value,
        getSnapshot: getSnapshot
      });
      // Whenever getSnapshot or subscribe changes, we need to check in the
      // commit phase if there was an interleaved mutation. In concurrent mode
      // this can happen all the time, but even in synchronous mode, an earlier
      // effect may have mutated the store.
      if (checkIfSnapshotChanged(inst)) {
        // Force a re-render.
        forceUpdate({
          inst: inst
        });
      }
    }, [subscribe, value, getSnapshot]);
  } else {
    Object.assign(inst, {
      value: value,
      getSnapshot: getSnapshot
    });
  }
  React.useEffect(function () {
    // Check for changes right before subscribing. Subsequent changes will be
    // detected in the subscription handler.
    if (checkIfSnapshotChanged(inst)) {
      // Force a re-render.
      forceUpdate({
        inst: inst
      });
    }
    // Subscribe to the store and return a clean-up function.
    return subscribe(function handleStoreChange() {
      // TODO: Because there is no cross-renderer API for batching updates, it's
      // up to the consumer of this library to wrap their subscription event
      // with unstable_batchedUpdates. Should we try to detect when this isn't
      // the case and print a warning in development?
      // The store changed. Check if the snapshot changed since the last time we
      // read from the store.
      if (checkIfSnapshotChanged(inst)) {
        // Force a re-render.
        forceUpdate({
          inst: inst
        });
      }
    });
  }, [subscribe]);
  return value;
};
function checkIfSnapshotChanged(_a) {
  var value = _a.value,
    getSnapshot = _a.getSnapshot;
  try {
    return value !== getSnapshot();
  } catch (_b) {
    return true;
  }
}
},{"../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","react":"../node_modules/react/index.js","../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js"}],"../node_modules/@apollo/client/react/parser/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentType = void 0;
exports.operationName = operationName;
exports.parser = parser;
exports.verifyDocumentType = verifyDocumentType;
var _index = require("../../utilities/globals/index.js");
var DocumentType;
(function (DocumentType) {
  DocumentType[DocumentType["Query"] = 0] = "Query";
  DocumentType[DocumentType["Mutation"] = 1] = "Mutation";
  DocumentType[DocumentType["Subscription"] = 2] = "Subscription";
})(DocumentType || (exports.DocumentType = DocumentType = {}));
var cache = new Map();
function operationName(type) {
  var name;
  switch (type) {
    case DocumentType.Query:
      name = "Query";
      break;
    case DocumentType.Mutation:
      name = "Mutation";
      break;
    case DocumentType.Subscription:
      name = "Subscription";
      break;
  }
  return name;
}
// This parser is mostly used to safety check incoming documents.
function parser(document) {
  var cached = cache.get(document);
  if (cached) return cached;
  var variables, type, name;
  (0, _index.invariant)(!!document && !!document.kind, 59, document);
  var fragments = [];
  var queries = [];
  var mutations = [];
  var subscriptions = [];
  for (var _i = 0, _a = document.definitions; _i < _a.length; _i++) {
    var x = _a[_i];
    if (x.kind === "FragmentDefinition") {
      fragments.push(x);
      continue;
    }
    if (x.kind === "OperationDefinition") {
      switch (x.operation) {
        case "query":
          queries.push(x);
          break;
        case "mutation":
          mutations.push(x);
          break;
        case "subscription":
          subscriptions.push(x);
          break;
      }
    }
  }
  (0, _index.invariant)(!fragments.length || queries.length || mutations.length || subscriptions.length, 60);
  (0, _index.invariant)(queries.length + mutations.length + subscriptions.length <= 1, 61, document, queries.length, subscriptions.length, mutations.length);
  type = queries.length ? DocumentType.Query : DocumentType.Mutation;
  if (!queries.length && !mutations.length) type = DocumentType.Subscription;
  var definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;
  (0, _index.invariant)(definitions.length === 1, 62, document, definitions.length);
  var definition = definitions[0];
  variables = definition.variableDefinitions || [];
  if (definition.name && definition.name.kind === "Name") {
    name = definition.name.value;
  } else {
    name = "data"; // fallback to using data if no name
  }
  var payload = {
    name: name,
    type: type,
    variables: variables
  };
  cache.set(document, payload);
  return payload;
}
function verifyDocumentType(document, type) {
  var operation = parser(document);
  var requiredOperationName = operationName(type);
  var usedOperationName = operationName(operation.type);
  (0, _index.invariant)(operation.type === type, 63, requiredOperationName, requiredOperationName, usedOperationName);
}
},{"../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js"}],"../node_modules/@apollo/client/react/hooks/useQuery.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useInternalState = useInternalState;
exports.useQuery = useQuery;
var _tslib = require("tslib");
var _index = require("../../utilities/globals/index.js");
var React = _interopRequireWildcard(require("react"));
var _useSyncExternalStore = require("./useSyncExternalStore.js");
var _equality = require("@wry/equality");
var _index2 = require("../../utilities/index.js");
var _index3 = require("../context/index.js");
var _index4 = require("../../errors/index.js");
var _index5 = require("../../core/index.js");
var _index6 = require("../parser/index.js");
var _useApolloClient = require("./useApolloClient.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var hasOwnProperty = Object.prototype.hasOwnProperty;
function useQuery(query, options) {
  if (options === void 0) {
    options = Object.create(null);
  }
  return useInternalState((0, _useApolloClient.useApolloClient)(options.client), query).useQuery(options);
}
function useInternalState(client, query) {
  var stateRef = React.useRef();
  if (!stateRef.current || client !== stateRef.current.client || query !== stateRef.current.query) {
    stateRef.current = new InternalState(client, query, stateRef.current);
  }
  var state = stateRef.current;
  // By default, InternalState.prototype.forceUpdate is an empty function, but
  // we replace it here (before anyone has had a chance to see this state yet)
  // with a function that unconditionally forces an update, using the latest
  // setTick function. Updating this state by calling state.forceUpdate is the
  // only way we trigger React component updates (no other useState calls within
  // the InternalState class).
  state.forceUpdateState = React.useReducer(function (tick) {
    return tick + 1;
  }, 0)[1];
  return state;
}
var InternalState = /** @class */function () {
  function InternalState(client, query, previous) {
    var _this = this;
    this.client = client;
    this.query = query;
    /**
     * Will be overwritten by the `useSyncExternalStore` "force update" method
     * whenever it is available and reset to `forceUpdateState` when it isn't.
     */
    this.forceUpdate = function () {
      return _this.forceUpdateState();
    };
    this.ssrDisabledResult = (0, _index2.maybeDeepFreeze)({
      loading: true,
      data: void 0,
      error: void 0,
      networkStatus: _index5.NetworkStatus.loading
    });
    this.skipStandbyResult = (0, _index2.maybeDeepFreeze)({
      loading: false,
      data: void 0,
      error: void 0,
      networkStatus: _index5.NetworkStatus.ready
    });
    // This cache allows the referential stability of this.result (as returned by
    // getCurrentResult) to translate into referential stability of the resulting
    // QueryResult object returned by toQueryResult.
    this.toQueryResultCache = new (_index2.canUseWeakMap ? WeakMap : Map)();
    (0, _index6.verifyDocumentType)(query, _index6.DocumentType.Query);
    // Reuse previousData from previous InternalState (if any) to provide
    // continuity of previousData even if/when the query or client changes.
    var previousResult = previous && previous.result;
    var previousData = previousResult && previousResult.data;
    if (previousData) {
      this.previousData = previousData;
    }
  }
  /**
   * Forces an update using local component state.
   * As this is not batched with `useSyncExternalStore` updates,
   * this is only used as a fallback if the `useSyncExternalStore` "force update"
   * method is not registered at the moment.
   * See https://github.com/facebook/react/issues/25191
   *  */
  InternalState.prototype.forceUpdateState = function () {
    // Replaced (in useInternalState) with a method that triggers an update.
    globalThis.__DEV__ !== false && _index.invariant.warn(50);
  };
  InternalState.prototype.executeQuery = function (options) {
    var _this = this;
    var _a;
    if (options.query) {
      Object.assign(this, {
        query: options.query
      });
    }
    this.watchQueryOptions = this.createWatchQueryOptions(this.queryHookOptions = options);
    var concast = this.observable.reobserveAsConcast(this.getObsQueryOptions());
    // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,
    // but save the current data as this.previousData, just like setResult
    // usually does.
    this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;
    this.result = void 0;
    this.forceUpdate();
    return new Promise(function (resolve) {
      var result;
      // Subscribe to the concast independently of the ObservableQuery in case
      // the component gets unmounted before the promise resolves. This prevents
      // the concast from terminating early and resolving with `undefined` when
      // there are no more subscribers for the concast.
      concast.subscribe({
        next: function (value) {
          result = value;
        },
        error: function () {
          resolve(_this.toQueryResult(_this.observable.getCurrentResult()));
        },
        complete: function () {
          resolve(_this.toQueryResult(result));
        }
      });
    });
  };
  // Methods beginning with use- should be called according to the standard
  // rules of React hooks: only at the top level of the calling function, and
  // without any dynamic conditional logic.
  InternalState.prototype.useQuery = function (options) {
    var _this = this;
    // The renderPromises field gets initialized here in the useQuery method, at
    // the beginning of everything (for a given component rendering, at least),
    // so we can safely use this.renderPromises in other/later InternalState
    // methods without worrying it might be uninitialized. Even after
    // initialization, this.renderPromises is usually undefined (unless SSR is
    // happening), but that's fine as long as it has been initialized that way,
    // rather than left uninitialized.
    this.renderPromises = React.useContext((0, _index3.getApolloContext)()).renderPromises;
    this.useOptions(options);
    var obsQuery = this.useObservableQuery();
    var result = (0, _useSyncExternalStore.useSyncExternalStore)(React.useCallback(function (handleStoreChange) {
      if (_this.renderPromises) {
        return function () {};
      }
      _this.forceUpdate = handleStoreChange;
      var onNext = function () {
        var previousResult = _this.result;
        // We use `getCurrentResult()` instead of the onNext argument because
        // the values differ slightly. Specifically, loading results will have
        // an empty object for data instead of `undefined` for some reason.
        var result = obsQuery.getCurrentResult();
        // Make sure we're not attempting to re-render similar results
        if (previousResult && previousResult.loading === result.loading && previousResult.networkStatus === result.networkStatus && (0, _equality.equal)(previousResult.data, result.data)) {
          return;
        }
        _this.setResult(result);
      };
      var onError = function (error) {
        subscription.unsubscribe();
        subscription = obsQuery.resubscribeAfterError(onNext, onError);
        if (!hasOwnProperty.call(error, "graphQLErrors")) {
          // The error is not a GraphQL error
          throw error;
        }
        var previousResult = _this.result;
        if (!previousResult || previousResult && previousResult.loading || !(0, _equality.equal)(error, previousResult.error)) {
          _this.setResult({
            data: previousResult && previousResult.data,
            error: error,
            loading: false,
            networkStatus: _index5.NetworkStatus.error
          });
        }
      };
      var subscription = obsQuery.subscribe(onNext, onError);
      // Do the "unsubscribe" with a short delay.
      // This way, an existing subscription can be reused without an additional
      // request if "unsubscribe"  and "resubscribe" to the same ObservableQuery
      // happen in very fast succession.
      return function () {
        setTimeout(function () {
          return subscription.unsubscribe();
        });
        _this.forceUpdate = function () {
          return _this.forceUpdateState();
        };
      };
    }, [
    // We memoize the subscribe function using useCallback and the following
    // dependency keys, because the subscribe function reference is all that
    // useSyncExternalStore uses internally as a dependency key for the
    // useEffect ultimately responsible for the subscription, so we are
    // effectively passing this dependency array to that useEffect buried
    // inside useSyncExternalStore, as desired.
    obsQuery, this.renderPromises, this.client.disableNetworkFetches]), function () {
      return _this.getCurrentResult();
    }, function () {
      return _this.getCurrentResult();
    });
    // TODO Remove this method when we remove support for options.partialRefetch.
    this.unsafeHandlePartialRefetch(result);
    return this.toQueryResult(result);
  };
  InternalState.prototype.useOptions = function (options) {
    var _a;
    var watchQueryOptions = this.createWatchQueryOptions(this.queryHookOptions = options);
    // Update this.watchQueryOptions, but only when they have changed, which
    // allows us to depend on the referential stability of
    // this.watchQueryOptions elsewhere.
    var currentWatchQueryOptions = this.watchQueryOptions;
    if (!(0, _equality.equal)(watchQueryOptions, currentWatchQueryOptions)) {
      this.watchQueryOptions = watchQueryOptions;
      if (currentWatchQueryOptions && this.observable) {
        // Though it might be tempting to postpone this reobserve call to the
        // useEffect block, we need getCurrentResult to return an appropriate
        // loading:true result synchronously (later within the same call to
        // useQuery). Since we already have this.observable here (not true for
        // the very first call to useQuery), we are not initiating any new
        // subscriptions, though it does feel less than ideal that reobserve
        // (potentially) kicks off a network request (for example, when the
        // variables have changed), which is technically a side-effect.
        this.observable.reobserve(this.getObsQueryOptions());
        // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,
        // but save the current data as this.previousData, just like setResult
        // usually does.
        this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;
        this.result = void 0;
      }
    }
    // Make sure state.onCompleted and state.onError always reflect the latest
    // options.onCompleted and options.onError callbacks provided to useQuery,
    // since those functions are often recreated every time useQuery is called.
    // Like the forceUpdate method, the versions of these methods inherited from
    // InternalState.prototype are empty no-ops, but we can override them on the
    // base state object (without modifying the prototype).
    this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;
    this.onError = options.onError || InternalState.prototype.onError;
    if ((this.renderPromises || this.client.disableNetworkFetches) && this.queryHookOptions.ssr === false && !this.queryHookOptions.skip) {
      // If SSR has been explicitly disabled, and this function has been called
      // on the server side, return the default loading state.
      this.result = this.ssrDisabledResult;
    } else if (this.queryHookOptions.skip || this.watchQueryOptions.fetchPolicy === "standby") {
      // When skipping a query (ie. we're not querying for data but still want to
      // render children), make sure the `data` is cleared out and `loading` is
      // set to `false` (since we aren't loading anything).
      //
      // NOTE: We no longer think this is the correct behavior. Skipping should
      // not automatically set `data` to `undefined`, but instead leave the
      // previous data in place. In other words, skipping should not mandate that
      // previously received data is all of a sudden removed. Unfortunately,
      // changing this is breaking, so we'll have to wait until Apollo Client 4.0
      // to address this.
      this.result = this.skipStandbyResult;
    } else if (this.result === this.ssrDisabledResult || this.result === this.skipStandbyResult) {
      this.result = void 0;
    }
  };
  InternalState.prototype.getObsQueryOptions = function () {
    var toMerge = [];
    var globalDefaults = this.client.defaultOptions.watchQuery;
    if (globalDefaults) toMerge.push(globalDefaults);
    if (this.queryHookOptions.defaultOptions) {
      toMerge.push(this.queryHookOptions.defaultOptions);
    }
    // We use compact rather than mergeOptions for this part of the merge,
    // because we want watchQueryOptions.variables (if defined) to replace
    // this.observable.options.variables whole. This replacement allows
    // removing variables by removing them from the variables input to
    // useQuery. If the variables were always merged together (rather than
    // replaced), there would be no way to remove existing variables.
    // However, the variables from options.defaultOptions and globalDefaults
    // (if provided) should be merged, to ensure individual defaulted
    // variables always have values, if not otherwise defined in
    // observable.options or watchQueryOptions.
    toMerge.push((0, _index2.compact)(this.observable && this.observable.options, this.watchQueryOptions));
    return toMerge.reduce(_index2.mergeOptions);
  };
  // A function to massage options before passing them to ObservableQuery.
  InternalState.prototype.createWatchQueryOptions = function (_a) {
    var _b;
    if (_a === void 0) {
      _a = {};
    }
    var skip = _a.skip,
      ssr = _a.ssr,
      onCompleted = _a.onCompleted,
      onError = _a.onError,
      defaultOptions = _a.defaultOptions,
      // The above options are useQuery-specific, so this ...otherOptions spread
      // makes otherOptions almost a WatchQueryOptions object, except for the
      // query property that we add below.
      otherOptions = (0, _tslib.__rest)(_a, ["skip", "ssr", "onCompleted", "onError", "defaultOptions"]);
    // This Object.assign is safe because otherOptions is a fresh ...rest object
    // that did not exist until just now, so modifications are still allowed.
    var watchQueryOptions = Object.assign(otherOptions, {
      query: this.query
    });
    if (this.renderPromises && (watchQueryOptions.fetchPolicy === "network-only" || watchQueryOptions.fetchPolicy === "cache-and-network")) {
      // this behavior was added to react-apollo without explanation in this PR
      // https://github.com/apollographql/react-apollo/pull/1579
      watchQueryOptions.fetchPolicy = "cache-first";
    }
    if (!watchQueryOptions.variables) {
      watchQueryOptions.variables = {};
    }
    if (skip) {
      var _c = watchQueryOptions.fetchPolicy,
        fetchPolicy = _c === void 0 ? this.getDefaultFetchPolicy() : _c,
        _d = watchQueryOptions.initialFetchPolicy,
        initialFetchPolicy = _d === void 0 ? fetchPolicy : _d;
      // When skipping, we set watchQueryOptions.fetchPolicy initially to
      // "standby", but we also need/want to preserve the initial non-standby
      // fetchPolicy that would have been used if not skipping.
      Object.assign(watchQueryOptions, {
        initialFetchPolicy: initialFetchPolicy,
        fetchPolicy: "standby"
      });
    } else if (!watchQueryOptions.fetchPolicy) {
      watchQueryOptions.fetchPolicy = ((_b = this.observable) === null || _b === void 0 ? void 0 : _b.options.initialFetchPolicy) || this.getDefaultFetchPolicy();
    }
    return watchQueryOptions;
  };
  InternalState.prototype.getDefaultFetchPolicy = function () {
    var _a, _b;
    return ((_a = this.queryHookOptions.defaultOptions) === null || _a === void 0 ? void 0 : _a.fetchPolicy) || ((_b = this.client.defaultOptions.watchQuery) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || "cache-first";
  };
  // Defining these methods as no-ops on the prototype allows us to call
  // state.onCompleted and/or state.onError without worrying about whether a
  // callback was provided.
  InternalState.prototype.onCompleted = function (data) {};
  InternalState.prototype.onError = function (error) {};
  InternalState.prototype.useObservableQuery = function () {
    // See if there is an existing observable that was used to fetch the same
    // data and if so, use it instead since it will contain the proper queryId
    // to fetch the result set. This is used during SSR.
    var obsQuery = this.observable = this.renderPromises && this.renderPromises.getSSRObservable(this.watchQueryOptions) || this.observable ||
    // Reuse this.observable if possible (and not SSR)
    this.client.watchQuery(this.getObsQueryOptions());
    this.obsQueryFields = React.useMemo(function () {
      return {
        refetch: obsQuery.refetch.bind(obsQuery),
        reobserve: obsQuery.reobserve.bind(obsQuery),
        fetchMore: obsQuery.fetchMore.bind(obsQuery),
        updateQuery: obsQuery.updateQuery.bind(obsQuery),
        startPolling: obsQuery.startPolling.bind(obsQuery),
        stopPolling: obsQuery.stopPolling.bind(obsQuery),
        subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery)
      };
    }, [obsQuery]);
    var ssrAllowed = !(this.queryHookOptions.ssr === false || this.queryHookOptions.skip);
    if (this.renderPromises && ssrAllowed) {
      this.renderPromises.registerSSRObservable(obsQuery);
      if (obsQuery.getCurrentResult().loading) {
        // TODO: This is a legacy API which could probably be cleaned up
        this.renderPromises.addObservableQueryPromise(obsQuery);
      }
    }
    return obsQuery;
  };
  InternalState.prototype.setResult = function (nextResult) {
    var previousResult = this.result;
    if (previousResult && previousResult.data) {
      this.previousData = previousResult.data;
    }
    this.result = nextResult;
    // Calling state.setResult always triggers an update, though some call sites
    // perform additional equality checks before committing to an update.
    this.forceUpdate();
    this.handleErrorOrCompleted(nextResult, previousResult);
  };
  InternalState.prototype.handleErrorOrCompleted = function (result, previousResult) {
    var _this = this;
    if (!result.loading) {
      var error_1 = this.toApolloError(result);
      // wait a tick in case we are in the middle of rendering a component
      Promise.resolve().then(function () {
        if (error_1) {
          _this.onError(error_1);
        } else if (result.data && (previousResult === null || previousResult === void 0 ? void 0 : previousResult.networkStatus) !== result.networkStatus && result.networkStatus === _index5.NetworkStatus.ready) {
          _this.onCompleted(result.data);
        }
      }).catch(function (error) {
        globalThis.__DEV__ !== false && _index.invariant.warn(error);
      });
    }
  };
  InternalState.prototype.toApolloError = function (result) {
    return (0, _index2.isNonEmptyArray)(result.errors) ? new _index4.ApolloError({
      graphQLErrors: result.errors
    }) : result.error;
  };
  InternalState.prototype.getCurrentResult = function () {
    // Using this.result as a cache ensures getCurrentResult continues returning
    // the same (===) result object, unless state.setResult has been called, or
    // we're doing server rendering and therefore override the result below.
    if (!this.result) {
      this.handleErrorOrCompleted(this.result = this.observable.getCurrentResult());
    }
    return this.result;
  };
  InternalState.prototype.toQueryResult = function (result) {
    var queryResult = this.toQueryResultCache.get(result);
    if (queryResult) return queryResult;
    var data = result.data,
      partial = result.partial,
      resultWithoutPartial = (0, _tslib.__rest)(result, ["data", "partial"]);
    this.toQueryResultCache.set(result, queryResult = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({
      data: data
    }, resultWithoutPartial), this.obsQueryFields), {
      client: this.client,
      observable: this.observable,
      variables: this.observable.variables,
      called: !this.queryHookOptions.skip,
      previousData: this.previousData
    }));
    if (!queryResult.error && (0, _index2.isNonEmptyArray)(result.errors)) {
      // Until a set naming convention for networkError and graphQLErrors is
      // decided upon, we map errors (graphQLErrors) to the error options.
      // TODO: Is it possible for both result.error and result.errors to be
      // defined here?
      queryResult.error = new _index4.ApolloError({
        graphQLErrors: result.errors
      });
    }
    return queryResult;
  };
  InternalState.prototype.unsafeHandlePartialRefetch = function (result) {
    // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION
    //
    // TODO: This code should be removed when the partialRefetch option is
    // removed. I was unable to get this hook to behave reasonably in certain
    // edge cases when this block was put in an effect.
    if (result.partial && this.queryHookOptions.partialRefetch && !result.loading && (!result.data || Object.keys(result.data).length === 0) && this.observable.options.fetchPolicy !== "cache-only") {
      Object.assign(result, {
        loading: true,
        networkStatus: _index5.NetworkStatus.refetch
      });
      this.observable.refetch();
    }
  };
  return InternalState;
}();
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","react":"../node_modules/react/index.js","./useSyncExternalStore.js":"../node_modules/@apollo/client/react/hooks/useSyncExternalStore.js","@wry/equality":"../node_modules/@wry/equality/lib/index.js","../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js","../context/index.js":"../node_modules/@apollo/client/react/context/index.js","../../errors/index.js":"../node_modules/@apollo/client/errors/index.js","../../core/index.js":"../node_modules/@apollo/client/core/index.js","../parser/index.js":"../node_modules/@apollo/client/react/parser/index.js","./useApolloClient.js":"../node_modules/@apollo/client/react/hooks/useApolloClient.js"}],"../node_modules/@apollo/client/react/hooks/useLazyQuery.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useLazyQuery = useLazyQuery;
var _tslib = require("tslib");
var React = _interopRequireWildcard(require("react"));
var _index = require("../../utilities/index.js");
var _useQuery = require("./useQuery.js");
var _useApolloClient = require("./useApolloClient.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// The following methods, when called will execute the query, regardless of
// whether the useLazyQuery execute function was called before.
var EAGER_METHODS = ["refetch", "reobserve", "fetchMore", "updateQuery", "startPolling", "subscribeToMore"];
function useLazyQuery(query, options) {
  var _a;
  var execOptionsRef = React.useRef();
  var optionsRef = React.useRef();
  var queryRef = React.useRef();
  var merged = (0, _index.mergeOptions)(options, execOptionsRef.current || {});
  var document = (_a = merged === null || merged === void 0 ? void 0 : merged.query) !== null && _a !== void 0 ? _a : query;
  // Use refs to track options and the used query to ensure the `execute`
  // function remains referentially stable between renders.
  optionsRef.current = merged;
  queryRef.current = document;
  var internalState = (0, _useQuery.useInternalState)((0, _useApolloClient.useApolloClient)(options && options.client), document);
  var useQueryResult = internalState.useQuery((0, _tslib.__assign)((0, _tslib.__assign)({}, merged), {
    skip: !execOptionsRef.current
  }));
  var initialFetchPolicy = useQueryResult.observable.options.initialFetchPolicy || internalState.getDefaultFetchPolicy();
  var result = Object.assign(useQueryResult, {
    called: !!execOptionsRef.current
  });
  // We use useMemo here to make sure the eager methods have a stable identity.
  var eagerMethods = React.useMemo(function () {
    var eagerMethods = {};
    var _loop_1 = function (key) {
      var method = result[key];
      eagerMethods[key] = function () {
        if (!execOptionsRef.current) {
          execOptionsRef.current = Object.create(null);
          // Only the first time populating execOptionsRef.current matters here.
          internalState.forceUpdateState();
        }
        // @ts-expect-error this is just too generic to type
        return method.apply(this, arguments);
      };
    };
    for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {
      var key = EAGER_METHODS_1[_i];
      _loop_1(key);
    }
    return eagerMethods;
  }, []);
  Object.assign(result, eagerMethods);
  var execute = React.useCallback(function (executeOptions) {
    execOptionsRef.current = executeOptions ? (0, _tslib.__assign)((0, _tslib.__assign)({}, executeOptions), {
      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy
    }) : {
      fetchPolicy: initialFetchPolicy
    };
    var options = (0, _index.mergeOptions)(optionsRef.current, (0, _tslib.__assign)({
      query: queryRef.current
    }, execOptionsRef.current));
    var promise = internalState.executeQuery((0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
      skip: false
    })).then(function (queryResult) {
      return Object.assign(queryResult, eagerMethods);
    });
    // Because the return value of `useLazyQuery` is usually floated, we need
    // to catch the promise to prevent unhandled rejections.
    promise.catch(function () {});
    return promise;
  }, []);
  return [execute, result];
}
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","react":"../node_modules/react/index.js","../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js","./useQuery.js":"../node_modules/@apollo/client/react/hooks/useQuery.js","./useApolloClient.js":"../node_modules/@apollo/client/react/hooks/useApolloClient.js"}],"../node_modules/@apollo/client/react/hooks/useMutation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMutation = useMutation;
var _tslib = require("tslib");
var React = _interopRequireWildcard(require("react"));
var _index = require("../../utilities/index.js");
var _equality = require("@wry/equality");
var _index2 = require("../parser/index.js");
var _index3 = require("../../errors/index.js");
var _useApolloClient = require("./useApolloClient.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useMutation(mutation, options) {
  var client = (0, _useApolloClient.useApolloClient)(options === null || options === void 0 ? void 0 : options.client);
  (0, _index2.verifyDocumentType)(mutation, _index2.DocumentType.Mutation);
  var _a = React.useState({
      called: false,
      loading: false,
      client: client
    }),
    result = _a[0],
    setResult = _a[1];
  var ref = React.useRef({
    result: result,
    mutationId: 0,
    isMounted: true,
    client: client,
    mutation: mutation,
    options: options
  });
  // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks
  // higher-order components.
  {
    Object.assign(ref.current, {
      client: client,
      options: options,
      mutation: mutation
    });
  }
  var execute = React.useCallback(function (executeOptions) {
    if (executeOptions === void 0) {
      executeOptions = {};
    }
    var _a = ref.current,
      options = _a.options,
      mutation = _a.mutation;
    var baseOptions = (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
      mutation: mutation
    });
    var client = executeOptions.client || ref.current.client;
    if (!ref.current.result.loading && !baseOptions.ignoreResults && ref.current.isMounted) {
      setResult(ref.current.result = {
        loading: true,
        error: void 0,
        data: void 0,
        called: true,
        client: client
      });
    }
    var mutationId = ++ref.current.mutationId;
    var clientOptions = (0, _index.mergeOptions)(baseOptions, executeOptions);
    return client.mutate(clientOptions).then(function (response) {
      var _a, _b;
      var data = response.data,
        errors = response.errors;
      var error = errors && errors.length > 0 ? new _index3.ApolloError({
        graphQLErrors: errors
      }) : void 0;
      var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);
      if (error && onError) {
        onError(error, clientOptions);
      }
      if (mutationId === ref.current.mutationId && !clientOptions.ignoreResults) {
        var result_1 = {
          called: true,
          loading: false,
          data: data,
          error: error,
          client: client
        };
        if (ref.current.isMounted && !(0, _equality.equal)(ref.current.result, result_1)) {
          setResult(ref.current.result = result_1);
        }
      }
      var onCompleted = executeOptions.onCompleted || ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onCompleted);
      if (!error) {
        onCompleted === null || onCompleted === void 0 ? void 0 : onCompleted(response.data, clientOptions);
      }
      return response;
    }).catch(function (error) {
      var _a;
      if (mutationId === ref.current.mutationId && ref.current.isMounted) {
        var result_2 = {
          loading: false,
          error: error,
          data: void 0,
          called: true,
          client: client
        };
        if (!(0, _equality.equal)(ref.current.result, result_2)) {
          setResult(ref.current.result = result_2);
        }
      }
      var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);
      if (onError) {
        onError(error, clientOptions);
        // TODO(brian): why are we returning this here???
        return {
          data: void 0,
          errors: error
        };
      }
      throw error;
    });
  }, []);
  var reset = React.useCallback(function () {
    if (ref.current.isMounted) {
      var result_3 = {
        called: false,
        loading: false,
        client: client
      };
      Object.assign(ref.current, {
        mutationId: 0,
        result: result_3
      });
      setResult(result_3);
    }
  }, []);
  React.useEffect(function () {
    ref.current.isMounted = true;
    return function () {
      ref.current.isMounted = false;
    };
  }, []);
  return [execute, (0, _tslib.__assign)({
    reset: reset
  }, result)];
}
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","react":"../node_modules/react/index.js","../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js","@wry/equality":"../node_modules/@wry/equality/lib/index.js","../parser/index.js":"../node_modules/@apollo/client/react/parser/index.js","../../errors/index.js":"../node_modules/@apollo/client/errors/index.js","./useApolloClient.js":"../node_modules/@apollo/client/react/hooks/useApolloClient.js"}],"../node_modules/@apollo/client/react/hooks/useSubscription.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSubscription = useSubscription;
var _index = require("../../utilities/globals/index.js");
var React = _interopRequireWildcard(require("react"));
var _equality = require("@wry/equality");
var _index2 = require("../parser/index.js");
var _useApolloClient = require("./useApolloClient.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useSubscription(subscription, options) {
  var hasIssuedDeprecationWarningRef = React.useRef(false);
  var client = (0, _useApolloClient.useApolloClient)(options === null || options === void 0 ? void 0 : options.client);
  (0, _index2.verifyDocumentType)(subscription, _index2.DocumentType.Subscription);
  var _a = React.useState({
      loading: !(options === null || options === void 0 ? void 0 : options.skip),
      error: void 0,
      data: void 0,
      variables: options === null || options === void 0 ? void 0 : options.variables
    }),
    result = _a[0],
    setResult = _a[1];
  if (!hasIssuedDeprecationWarningRef.current) {
    hasIssuedDeprecationWarningRef.current = true;
    if (options === null || options === void 0 ? void 0 : options.onSubscriptionData) {
      globalThis.__DEV__ !== false && _index.invariant.warn(options.onData ? 52 : 53);
    }
    if (options === null || options === void 0 ? void 0 : options.onSubscriptionComplete) {
      globalThis.__DEV__ !== false && _index.invariant.warn(options.onComplete ? 54 : 55);
    }
  }
  var _b = React.useState(function () {
      if (options === null || options === void 0 ? void 0 : options.skip) {
        return null;
      }
      return client.subscribe({
        query: subscription,
        variables: options === null || options === void 0 ? void 0 : options.variables,
        fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,
        context: options === null || options === void 0 ? void 0 : options.context
      });
    }),
    observable = _b[0],
    setObservable = _b[1];
  var canResetObservableRef = React.useRef(false);
  React.useEffect(function () {
    return function () {
      canResetObservableRef.current = true;
    };
  }, []);
  var ref = React.useRef({
    client: client,
    subscription: subscription,
    options: options
  });
  React.useEffect(function () {
    var _a, _b, _c, _d;
    var shouldResubscribe = options === null || options === void 0 ? void 0 : options.shouldResubscribe;
    if (typeof shouldResubscribe === "function") {
      shouldResubscribe = !!shouldResubscribe(options);
    }
    if (options === null || options === void 0 ? void 0 : options.skip) {
      if (!(options === null || options === void 0 ? void 0 : options.skip) !== !((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.skip) || canResetObservableRef.current) {
        setResult({
          loading: false,
          data: void 0,
          error: void 0,
          variables: options === null || options === void 0 ? void 0 : options.variables
        });
        setObservable(null);
        canResetObservableRef.current = false;
      }
    } else if (shouldResubscribe !== false && (client !== ref.current.client || subscription !== ref.current.subscription || (options === null || options === void 0 ? void 0 : options.fetchPolicy) !== ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || !(options === null || options === void 0 ? void 0 : options.skip) !== !((_c = ref.current.options) === null || _c === void 0 ? void 0 : _c.skip) || !(0, _equality.equal)(options === null || options === void 0 ? void 0 : options.variables, (_d = ref.current.options) === null || _d === void 0 ? void 0 : _d.variables)) || canResetObservableRef.current) {
      setResult({
        loading: true,
        data: void 0,
        error: void 0,
        variables: options === null || options === void 0 ? void 0 : options.variables
      });
      setObservable(client.subscribe({
        query: subscription,
        variables: options === null || options === void 0 ? void 0 : options.variables,
        fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,
        context: options === null || options === void 0 ? void 0 : options.context
      }));
      canResetObservableRef.current = false;
    }
    Object.assign(ref.current, {
      client: client,
      subscription: subscription,
      options: options
    });
  }, [client, subscription, options, canResetObservableRef.current]);
  React.useEffect(function () {
    if (!observable) {
      return;
    }
    var subscriptionStopped = false;
    var subscription = observable.subscribe({
      next: function (fetchResult) {
        var _a, _b;
        if (subscriptionStopped) {
          return;
        }
        var result = {
          loading: false,
          // TODO: fetchResult.data can be null but SubscriptionResult.data
          // expects TData | undefined only
          data: fetchResult.data,
          error: void 0,
          variables: options === null || options === void 0 ? void 0 : options.variables
        };
        setResult(result);
        if ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onData) {
          ref.current.options.onData({
            client: client,
            data: result
          });
        } else if ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onSubscriptionData) {
          ref.current.options.onSubscriptionData({
            client: client,
            subscriptionData: result
          });
        }
      },
      error: function (error) {
        var _a, _b;
        if (!subscriptionStopped) {
          setResult({
            loading: false,
            data: void 0,
            error: error,
            variables: options === null || options === void 0 ? void 0 : options.variables
          });
          (_b = (_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError) === null || _b === void 0 ? void 0 : _b.call(_a, error);
        }
      },
      complete: function () {
        var _a, _b;
        if (!subscriptionStopped) {
          if ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onComplete) {
            ref.current.options.onComplete();
          } else if ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onSubscriptionComplete) {
            ref.current.options.onSubscriptionComplete();
          }
        }
      }
    });
    return function () {
      // immediately stop receiving subscription values, but do not unsubscribe
      // until after a short delay in case another useSubscription hook is
      // reusing the same underlying observable and is about to subscribe
      subscriptionStopped = true;
      setTimeout(function () {
        subscription.unsubscribe();
      });
    };
  }, [observable]);
  return result;
}
},{"../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","react":"../node_modules/react/index.js","@wry/equality":"../node_modules/@wry/equality/lib/index.js","../parser/index.js":"../node_modules/@apollo/client/react/parser/index.js","./useApolloClient.js":"../node_modules/@apollo/client/react/hooks/useApolloClient.js"}],"../node_modules/@apollo/client/react/hooks/useReactiveVar.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useReactiveVar = useReactiveVar;
var React = _interopRequireWildcard(require("react"));
var _useSyncExternalStore = require("./useSyncExternalStore.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useReactiveVar(rv) {
  return (0, _useSyncExternalStore.useSyncExternalStore)(React.useCallback(function (update) {
    // By reusing the same onNext function in the nested call to
    // rv.onNextChange(onNext), we can keep using the initial clean-up function
    // returned by rv.onNextChange(function onNext(v){...}), without having to
    // register the new clean-up function (returned by the nested
    // rv.onNextChange(onNext)) with yet another callback.
    return rv.onNextChange(function onNext() {
      update();
      rv.onNextChange(onNext);
    });
  }, [rv]), rv, rv);
}
},{"react":"../node_modules/react/index.js","./useSyncExternalStore.js":"../node_modules/@apollo/client/react/hooks/useSyncExternalStore.js"}],"../node_modules/@apollo/client/react/hooks/useFragment.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFragment = useFragment;
var _tslib = require("tslib");
var React = _interopRequireWildcard(require("react"));
var _equality = require("@wry/equality");
var _index = require("../../utilities/index.js");
var _useApolloClient = require("./useApolloClient.js");
var _useSyncExternalStore = require("./useSyncExternalStore.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useFragment(options) {
  var cache = (0, _useApolloClient.useApolloClient)().cache;
  var fragment = options.fragment,
    fragmentName = options.fragmentName,
    from = options.from,
    _a = options.optimistic,
    optimistic = _a === void 0 ? true : _a,
    rest = (0, _tslib.__rest)(options, ["fragment", "fragmentName", "from", "optimistic"]);
  var diffOptions = (0, _tslib.__assign)((0, _tslib.__assign)({}, rest), {
    returnPartialData: true,
    id: typeof from === "string" ? from : cache.identify(from),
    query: cache["getFragmentDoc"](fragment, fragmentName),
    optimistic: optimistic
  });
  var resultRef = React.useRef();
  var latestDiff = cache.diff(diffOptions);
  // Used for both getSnapshot and getServerSnapshot
  var getSnapshot = function () {
    var latestDiffToResult = diffToResult(latestDiff);
    return resultRef.current && (0, _equality.equal)(resultRef.current.data, latestDiffToResult.data) ? resultRef.current : resultRef.current = latestDiffToResult;
  };
  return (0, _useSyncExternalStore.useSyncExternalStore)(function (forceUpdate) {
    var lastTimeout = 0;
    var unsubcribe = cache.watch((0, _tslib.__assign)((0, _tslib.__assign)({}, diffOptions), {
      immediate: true,
      callback: function (diff) {
        if (!(0, _equality.equal)(diff, latestDiff)) {
          resultRef.current = diffToResult(latestDiff = diff);
          lastTimeout = setTimeout(forceUpdate);
        }
      }
    }));
    return function () {
      unsubcribe();
      clearTimeout(lastTimeout);
    };
  }, getSnapshot, getSnapshot);
}
function diffToResult(diff) {
  var result = {
    data: diff.result,
    complete: !!diff.complete
  };
  if (diff.missing) {
    result.missing = (0, _index.mergeDeepArray)(diff.missing.map(function (error) {
      return error.missing;
    }));
  }
  return result;
}
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","react":"../node_modules/react/index.js","@wry/equality":"../node_modules/@wry/equality/lib/index.js","../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js","./useApolloClient.js":"../node_modules/@apollo/client/react/hooks/useApolloClient.js","./useSyncExternalStore.js":"../node_modules/@apollo/client/react/hooks/useSyncExternalStore.js"}],"../node_modules/@apollo/client/react/hooks/internal/useDeepMemo.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDeepMemo = useDeepMemo;
var React = _interopRequireWildcard(require("react"));
var _equality = require("@wry/equality");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useDeepMemo(memoFn, deps) {
  var ref = React.useRef();
  if (!ref.current || !(0, _equality.equal)(ref.current.deps, deps)) {
    ref.current = {
      value: memoFn(),
      deps: deps
    };
  }
  return ref.current.value;
}
},{"react":"../node_modules/react/index.js","@wry/equality":"../node_modules/@wry/equality/lib/index.js"}],"../node_modules/@apollo/client/react/hooks/internal/useIsomorphicLayoutEffect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useIsomorphicLayoutEffect = void 0;
var React = _interopRequireWildcard(require("react"));
var _index = require("../../../utilities/index.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// use canUseDOM here instead of canUseLayoutEffect because we want to be able
// to use useLayoutEffect in our jest tests. useLayoutEffect seems to work fine
// in useSuspenseQuery tests, but to honor the original comment about the
// warnings for useSyncExternalStore implementation, canUseLayoutEffect is left
// alone.
var useIsomorphicLayoutEffect = exports.useIsomorphicLayoutEffect = _index.canUseDOM ? React.useLayoutEffect : React.useEffect;
},{"react":"../node_modules/react/index.js","../../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js"}],"../node_modules/@apollo/client/react/hooks/internal/__use.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__use = void 0;
var _index = require("../../../utilities/index.js");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Prevent webpack from complaining about our feature detection of the
// use property of the React namespace, which is expected not
// to exist when using current stable versions, and that's fine.
var useKey = "use";
var realHook = React[useKey];
// This is named with two underscores to allow this hook to evade typical rules of
// hooks (i.e. it can be used conditionally)
var __use = exports.__use = realHook || function __use(promise) {
  var statefulPromise = (0, _index.wrapPromiseWithState)(promise);
  switch (statefulPromise.status) {
    case "pending":
      throw statefulPromise;
    case "rejected":
      throw statefulPromise.reason;
    case "fulfilled":
      return statefulPromise.value;
  }
};
},{"../../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js","react":"../node_modules/react/index.js"}],"../node_modules/@apollo/client/react/hooks/internal/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "__use", {
  enumerable: true,
  get: function () {
    return _use.__use;
  }
});
Object.defineProperty(exports, "useDeepMemo", {
  enumerable: true,
  get: function () {
    return _useDeepMemo.useDeepMemo;
  }
});
Object.defineProperty(exports, "useIsomorphicLayoutEffect", {
  enumerable: true,
  get: function () {
    return _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect;
  }
});
var _useDeepMemo = require("./useDeepMemo.js");
var _useIsomorphicLayoutEffect = require("./useIsomorphicLayoutEffect.js");
var _use = require("./__use.js");
},{"./useDeepMemo.js":"../node_modules/@apollo/client/react/hooks/internal/useDeepMemo.js","./useIsomorphicLayoutEffect.js":"../node_modules/@apollo/client/react/hooks/internal/useIsomorphicLayoutEffect.js","./__use.js":"../node_modules/@apollo/client/react/hooks/internal/__use.js"}],"../node_modules/@apollo/client/react/cache/QueryReference.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InternalQueryReference = void 0;
exports.unwrapQueryRef = unwrapQueryRef;
exports.wrapQueryRef = wrapQueryRef;
var _tslib = require("tslib");
var _equality = require("@wry/equality");
var _index = require("../../core/index.js");
var _index2 = require("../../utilities/index.js");
var QUERY_REFERENCE_SYMBOL = Symbol();
function wrapQueryRef(internalQueryRef) {
  var _a;
  return _a = {}, _a[QUERY_REFERENCE_SYMBOL] = internalQueryRef, _a;
}
function unwrapQueryRef(queryRef) {
  return queryRef[QUERY_REFERENCE_SYMBOL];
}
var OBSERVED_CHANGED_OPTIONS = ["canonizeResults", "context", "errorPolicy", "fetchPolicy", "refetchWritePolicy", "returnPartialData"];
var InternalQueryReference = exports.InternalQueryReference = /** @class */function () {
  function InternalQueryReference(observable, options) {
    var _this = this;
    this.listeners = new Set();
    this.status = "loading";
    this.references = 0;
    this.handleNext = this.handleNext.bind(this);
    this.handleError = this.handleError.bind(this);
    this.dispose = this.dispose.bind(this);
    this.observable = observable;
    // Don't save this result as last result to prevent delivery of last result
    // when first subscribing
    this.result = observable.getCurrentResult(false);
    this.key = options.key;
    if (options.onDispose) {
      this.onDispose = options.onDispose;
    }
    if ((0, _index.isNetworkRequestSettled)(this.result.networkStatus) || this.result.data && (!this.result.partial || this.watchQueryOptions.returnPartialData)) {
      this.promise = (0, _index2.createFulfilledPromise)(this.result);
      this.status = "idle";
    } else {
      this.promise = new Promise(function (resolve, reject) {
        _this.resolve = resolve;
        _this.reject = reject;
      });
    }
    this.subscription = observable.filter(function (_a) {
      var data = _a.data;
      return !(0, _equality.equal)(data, {});
    }).subscribe({
      next: this.handleNext,
      error: this.handleError
    });
    // Start a timer that will automatically dispose of the query if the
    // suspended resource does not use this queryRef in the given time. This
    // helps prevent memory leaks when a component has unmounted before the
    // query has finished loading.
    var startDisposeTimer = function () {
      var _a;
      if (!_this.references) {
        _this.autoDisposeTimeoutId = setTimeout(_this.dispose, (_a = options.autoDisposeTimeoutMs) !== null && _a !== void 0 ? _a : 30000);
      }
    };
    // We wait until the request has settled to ensure we don't dispose of the
    // query ref before the request finishes, otherwise we would leave the
    // promise in a pending state rendering the suspense boundary indefinitely.
    this.promise.then(startDisposeTimer, startDisposeTimer);
  }
  Object.defineProperty(InternalQueryReference.prototype, "watchQueryOptions", {
    get: function () {
      return this.observable.options;
    },
    enumerable: false,
    configurable: true
  });
  InternalQueryReference.prototype.retain = function () {
    var _this = this;
    this.references++;
    clearTimeout(this.autoDisposeTimeoutId);
    var disposed = false;
    return function () {
      if (disposed) {
        return;
      }
      disposed = true;
      _this.references--;
      // Wait before fully disposing in case the app is running in strict mode.
      setTimeout(function () {
        if (!_this.references) {
          _this.dispose();
        }
      });
    };
  };
  InternalQueryReference.prototype.didChangeOptions = function (watchQueryOptions) {
    var _this = this;
    return OBSERVED_CHANGED_OPTIONS.some(function (option) {
      return !(0, _equality.equal)(_this.watchQueryOptions[option], watchQueryOptions[option]);
    });
  };
  InternalQueryReference.prototype.applyOptions = function (watchQueryOptions) {
    var _a = this.watchQueryOptions,
      currentFetchPolicy = _a.fetchPolicy,
      currentCanonizeResults = _a.canonizeResults;
    // "standby" is used when `skip` is set to `true`. Detect when we've
    // enabled the query (i.e. `skip` is `false`) to execute a network request.
    if (currentFetchPolicy === "standby" && currentFetchPolicy !== watchQueryOptions.fetchPolicy) {
      this.initiateFetch(this.observable.reobserve(watchQueryOptions));
    } else {
      this.observable.silentSetOptions(watchQueryOptions);
      if (currentCanonizeResults !== watchQueryOptions.canonizeResults) {
        this.result = (0, _tslib.__assign)((0, _tslib.__assign)({}, this.result), this.observable.getCurrentResult());
        this.promise = (0, _index2.createFulfilledPromise)(this.result);
      }
    }
    return this.promise;
  };
  InternalQueryReference.prototype.listen = function (listener) {
    var _this = this;
    this.listeners.add(listener);
    return function () {
      _this.listeners.delete(listener);
    };
  };
  InternalQueryReference.prototype.refetch = function (variables) {
    return this.initiateFetch(this.observable.refetch(variables));
  };
  InternalQueryReference.prototype.fetchMore = function (options) {
    return this.initiateFetch(this.observable.fetchMore(options));
  };
  InternalQueryReference.prototype.dispose = function () {
    this.subscription.unsubscribe();
    this.onDispose();
  };
  InternalQueryReference.prototype.onDispose = function () {
    // noop. overridable by options
  };
  InternalQueryReference.prototype.handleNext = function (result) {
    var _a;
    switch (this.status) {
      case "loading":
        {
          // Maintain the last successful `data` value if the next result does not
          // have one.
          if (result.data === void 0) {
            result.data = this.result.data;
          }
          this.status = "idle";
          this.result = result;
          (_a = this.resolve) === null || _a === void 0 ? void 0 : _a.call(this, result);
          break;
        }
      case "idle":
        {
          // This occurs when switching to a result that is fully cached when this
          // class is instantiated. ObservableQuery will run reobserve when
          // subscribing, which delivers a result from the cache.
          if (result.data === this.result.data) {
            return;
          }
          // Maintain the last successful `data` value if the next result does not
          // have one.
          if (result.data === void 0) {
            result.data = this.result.data;
          }
          this.result = result;
          this.promise = (0, _index2.createFulfilledPromise)(result);
          this.deliver(this.promise);
          break;
        }
    }
  };
  InternalQueryReference.prototype.handleError = function (error) {
    var _a;
    this.subscription.unsubscribe();
    this.subscription = this.observable.resubscribeAfterError(this.handleNext, this.handleError);
    switch (this.status) {
      case "loading":
        {
          this.status = "idle";
          (_a = this.reject) === null || _a === void 0 ? void 0 : _a.call(this, error);
          break;
        }
      case "idle":
        {
          this.promise = (0, _index2.createRejectedPromise)(error);
          this.deliver(this.promise);
        }
    }
  };
  InternalQueryReference.prototype.deliver = function (promise) {
    this.listeners.forEach(function (listener) {
      return listener(promise);
    });
  };
  InternalQueryReference.prototype.initiateFetch = function (returnedPromise) {
    var _this = this;
    this.status = "loading";
    this.promise = new Promise(function (resolve, reject) {
      _this.resolve = resolve;
      _this.reject = reject;
    });
    this.promise.catch(function () {});
    // If the data returned from the fetch is deeply equal to the data already
    // in the cache, `handleNext` will not be triggered leaving the promise we
    // created in a pending state forever. To avoid this situtation, we attempt
    // to resolve the promise if `handleNext` hasn't been run to ensure the
    // promise is resolved correctly.
    returnedPromise.then(function (result) {
      var _a;
      if (_this.status === "loading") {
        _this.status = "idle";
        _this.result = result;
        (_a = _this.resolve) === null || _a === void 0 ? void 0 : _a.call(_this, result);
      }
    }).catch(function () {});
    return returnedPromise;
  };
  return InternalQueryReference;
}();
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","@wry/equality":"../node_modules/@wry/equality/lib/index.js","../../core/index.js":"../node_modules/@apollo/client/core/index.js","../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js"}],"../node_modules/@apollo/client/react/cache/SuspenseCache.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SuspenseCache = void 0;
var _trie = require("@wry/trie");
var _index = require("../../utilities/index.js");
var _QueryReference = require("./QueryReference.js");
var SuspenseCache = exports.SuspenseCache = /** @class */function () {
  function SuspenseCache(options) {
    if (options === void 0) {
      options = Object.create(null);
    }
    this.queryRefs = new _trie.Trie(_index.canUseWeakMap);
    this.options = options;
  }
  SuspenseCache.prototype.getQueryRef = function (cacheKey, createObservable) {
    var ref = this.queryRefs.lookupArray(cacheKey);
    if (!ref.current) {
      ref.current = new _QueryReference.InternalQueryReference(createObservable(), {
        key: cacheKey,
        autoDisposeTimeoutMs: this.options.autoDisposeTimeoutMs,
        onDispose: function () {
          delete ref.current;
        }
      });
    }
    return ref.current;
  };
  return SuspenseCache;
}();
},{"@wry/trie":"../node_modules/@wry/trie/lib/index.js","../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js","./QueryReference.js":"../node_modules/@apollo/client/react/cache/QueryReference.js"}],"../node_modules/@apollo/client/react/cache/getSuspenseCache.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSuspenseCache = getSuspenseCache;
var _SuspenseCache = require("./SuspenseCache.js");
var suspenseCacheSymbol = Symbol.for("apollo.suspenseCache");
function getSuspenseCache(client) {
  var _a;
  if (!client[suspenseCacheSymbol]) {
    client[suspenseCacheSymbol] = new _SuspenseCache.SuspenseCache((_a = client.defaultOptions.react) === null || _a === void 0 ? void 0 : _a.suspense);
  }
  return client[suspenseCacheSymbol];
}
},{"./SuspenseCache.js":"../node_modules/@apollo/client/react/cache/SuspenseCache.js"}],"../node_modules/@apollo/client/react/cache/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "getSuspenseCache", {
  enumerable: true,
  get: function () {
    return _getSuspenseCache.getSuspenseCache;
  }
});
var _getSuspenseCache = require("./getSuspenseCache.js");
},{"./getSuspenseCache.js":"../node_modules/@apollo/client/react/cache/getSuspenseCache.js"}],"../node_modules/@apollo/client/react/hooks/constants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.skipToken = void 0;
var skipToken = exports.skipToken = Symbol.for("apollo.skipToken");
},{}],"../node_modules/@apollo/client/react/hooks/useSuspenseQuery.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toApolloError = toApolloError;
exports.useSuspenseQuery = useSuspenseQuery;
exports.useWatchQueryOptions = useWatchQueryOptions;
var _tslib = require("tslib");
var React = _interopRequireWildcard(require("react"));
var _index = require("../../utilities/globals/index.js");
var _index2 = require("../../core/index.js");
var _index3 = require("../../utilities/index.js");
var _useApolloClient = require("./useApolloClient.js");
var _index4 = require("../parser/index.js");
var _index5 = require("./internal/index.js");
var _index6 = require("../cache/index.js");
var _index7 = require("../../cache/index.js");
var _constants = require("./constants.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useSuspenseQuery(query, options) {
  if (options === void 0) {
    options = Object.create(null);
  }
  var client = (0, _useApolloClient.useApolloClient)(options.client);
  var suspenseCache = (0, _index6.getSuspenseCache)(client);
  var watchQueryOptions = useWatchQueryOptions({
    client: client,
    query: query,
    options: options
  });
  var fetchPolicy = watchQueryOptions.fetchPolicy,
    variables = watchQueryOptions.variables;
  var _a = options.queryKey,
    queryKey = _a === void 0 ? [] : _a;
  var cacheKey = (0, _tslib.__spreadArray)([query, (0, _index7.canonicalStringify)(variables)], [].concat(queryKey), true);
  var queryRef = suspenseCache.getQueryRef(cacheKey, function () {
    return client.watchQuery(watchQueryOptions);
  });
  var _b = React.useState(function () {
      return new Map([[queryRef.key, queryRef.promise]]);
    }),
    promiseCache = _b[0],
    setPromiseCache = _b[1];
  var promise = promiseCache.get(queryRef.key);
  if (queryRef.didChangeOptions(watchQueryOptions)) {
    promise = queryRef.applyOptions(watchQueryOptions);
    promiseCache.set(queryRef.key, promise);
  }
  if (!promise) {
    promise = queryRef.promise;
    promiseCache.set(queryRef.key, promise);
  }
  React.useEffect(function () {
    var dispose = queryRef.retain();
    var removeListener = queryRef.listen(function (promise) {
      setPromiseCache(function (promiseCache) {
        return new Map(promiseCache).set(queryRef.key, promise);
      });
    });
    return function () {
      removeListener();
      dispose();
    };
  }, [queryRef]);
  var skipResult = React.useMemo(function () {
    var error = toApolloError(queryRef.result);
    return {
      loading: false,
      data: queryRef.result.data,
      networkStatus: error ? _index2.NetworkStatus.error : _index2.NetworkStatus.ready,
      error: error
    };
  }, [queryRef.result]);
  var result = fetchPolicy === "standby" ? skipResult : (0, _index5.__use)(promise);
  var fetchMore = React.useCallback(function (options) {
    var promise = queryRef.fetchMore(options);
    setPromiseCache(function (previousPromiseCache) {
      return new Map(previousPromiseCache).set(queryRef.key, queryRef.promise);
    });
    return promise;
  }, [queryRef]);
  var refetch = React.useCallback(function (variables) {
    var promise = queryRef.refetch(variables);
    setPromiseCache(function (previousPromiseCache) {
      return new Map(previousPromiseCache).set(queryRef.key, queryRef.promise);
    });
    return promise;
  }, [queryRef]);
  var subscribeToMore = React.useCallback(function (options) {
    return queryRef.observable.subscribeToMore(options);
  }, [queryRef]);
  return React.useMemo(function () {
    return {
      client: client,
      data: result.data,
      error: toApolloError(result),
      networkStatus: result.networkStatus,
      fetchMore: fetchMore,
      refetch: refetch,
      subscribeToMore: subscribeToMore
    };
  }, [client, fetchMore, refetch, result, subscribeToMore]);
}
function validateOptions(options) {
  var query = options.query,
    fetchPolicy = options.fetchPolicy,
    returnPartialData = options.returnPartialData;
  (0, _index4.verifyDocumentType)(query, _index4.DocumentType.Query);
  validateFetchPolicy(fetchPolicy);
  validatePartialDataReturn(fetchPolicy, returnPartialData);
}
function validateFetchPolicy(fetchPolicy) {
  if (fetchPolicy === void 0) {
    fetchPolicy = "cache-first";
  }
  var supportedFetchPolicies = ["cache-first", "network-only", "no-cache", "cache-and-network"];
  (0, _index.invariant)(supportedFetchPolicies.includes(fetchPolicy), 56, fetchPolicy);
}
function validatePartialDataReturn(fetchPolicy, returnPartialData) {
  if (fetchPolicy === "no-cache" && returnPartialData) {
    globalThis.__DEV__ !== false && _index.invariant.warn(57);
  }
}
function toApolloError(result) {
  return (0, _index3.isNonEmptyArray)(result.errors) ? new _index2.ApolloError({
    graphQLErrors: result.errors
  }) : result.error;
}
function useWatchQueryOptions(_a) {
  var client = _a.client,
    query = _a.query,
    options = _a.options;
  return (0, _index5.useDeepMemo)(function () {
    var _a;
    if (options === _constants.skipToken) {
      return {
        query: query,
        fetchPolicy: "standby"
      };
    }
    var fetchPolicy = options.fetchPolicy || ((_a = client.defaultOptions.watchQuery) === null || _a === void 0 ? void 0 : _a.fetchPolicy) || "cache-first";
    var watchQueryOptions = (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
      fetchPolicy: fetchPolicy,
      query: query,
      notifyOnNetworkStatusChange: false,
      nextFetchPolicy: void 0
    });
    if (globalThis.__DEV__ !== false) {
      validateOptions(watchQueryOptions);
    }
    // Assign the updated fetch policy after our validation since `standby` is
    // not a supported fetch policy on its own without the use of `skip`.
    if (options.skip) {
      watchQueryOptions.fetchPolicy = "standby";
    }
    return watchQueryOptions;
  }, [client, options, query]);
}
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","react":"../node_modules/react/index.js","../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","../../core/index.js":"../node_modules/@apollo/client/core/index.js","../../utilities/index.js":"../node_modules/@apollo/client/utilities/index.js","./useApolloClient.js":"../node_modules/@apollo/client/react/hooks/useApolloClient.js","../parser/index.js":"../node_modules/@apollo/client/react/parser/index.js","./internal/index.js":"../node_modules/@apollo/client/react/hooks/internal/index.js","../cache/index.js":"../node_modules/@apollo/client/react/cache/index.js","../../cache/index.js":"../node_modules/@apollo/client/cache/index.js","./constants.js":"../node_modules/@apollo/client/react/hooks/constants.js"}],"../node_modules/@apollo/client/react/hooks/useBackgroundQuery.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useBackgroundQuery = useBackgroundQuery;
var _tslib = require("tslib");
var React = _interopRequireWildcard(require("react"));
var _useApolloClient = require("./useApolloClient.js");
var _QueryReference = require("../cache/QueryReference.js");
var _index = require("../cache/index.js");
var _useSuspenseQuery = require("./useSuspenseQuery.js");
var _index2 = require("../../cache/index.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useBackgroundQuery(query, options) {
  if (options === void 0) {
    options = Object.create(null);
  }
  var client = (0, _useApolloClient.useApolloClient)(options.client);
  var suspenseCache = (0, _index.getSuspenseCache)(client);
  var watchQueryOptions = (0, _useSuspenseQuery.useWatchQueryOptions)({
    client: client,
    query: query,
    options: options
  });
  var fetchPolicy = watchQueryOptions.fetchPolicy,
    variables = watchQueryOptions.variables;
  var _a = options.queryKey,
    queryKey = _a === void 0 ? [] : _a;
  // This ref tracks the first time query execution is enabled to determine
  // whether to return a query ref or `undefined`. When initialized
  // in a skipped state (either via `skip: true` or `skipToken`) we return
  // `undefined` for the `queryRef` until the query has been enabled. Once
  // enabled, a query ref is always returned regardless of whether the query is
  // skipped again later.
  var didFetchResult = React.useRef(fetchPolicy !== "standby");
  didFetchResult.current || (didFetchResult.current = fetchPolicy !== "standby");
  var cacheKey = (0, _tslib.__spreadArray)([query, (0, _index2.canonicalStringify)(variables)], [].concat(queryKey), true);
  var queryRef = suspenseCache.getQueryRef(cacheKey, function () {
    return client.watchQuery(watchQueryOptions);
  });
  var _b = React.useState(function () {
      return new Map([[queryRef.key, queryRef.promise]]);
    }),
    promiseCache = _b[0],
    setPromiseCache = _b[1];
  if (queryRef.didChangeOptions(watchQueryOptions)) {
    var promise = queryRef.applyOptions(watchQueryOptions);
    promiseCache.set(queryRef.key, promise);
  }
  React.useEffect(function () {
    return queryRef.retain();
  }, [queryRef]);
  var fetchMore = React.useCallback(function (options) {
    var promise = queryRef.fetchMore(options);
    setPromiseCache(function (promiseCache) {
      return new Map(promiseCache).set(queryRef.key, queryRef.promise);
    });
    return promise;
  }, [queryRef]);
  var refetch = React.useCallback(function (variables) {
    var promise = queryRef.refetch(variables);
    setPromiseCache(function (promiseCache) {
      return new Map(promiseCache).set(queryRef.key, queryRef.promise);
    });
    return promise;
  }, [queryRef]);
  queryRef.promiseCache = promiseCache;
  var wrappedQueryRef = React.useMemo(function () {
    return (0, _QueryReference.wrapQueryRef)(queryRef);
  }, [queryRef]);
  return [didFetchResult.current ? wrappedQueryRef : void 0, {
    fetchMore: fetchMore,
    refetch: refetch
  }];
}
},{"tslib":"../node_modules/@apollo/client/node_modules/tslib/tslib.es6.js","react":"../node_modules/react/index.js","./useApolloClient.js":"../node_modules/@apollo/client/react/hooks/useApolloClient.js","../cache/QueryReference.js":"../node_modules/@apollo/client/react/cache/QueryReference.js","../cache/index.js":"../node_modules/@apollo/client/react/cache/index.js","./useSuspenseQuery.js":"../node_modules/@apollo/client/react/hooks/useSuspenseQuery.js","../../cache/index.js":"../node_modules/@apollo/client/cache/index.js"}],"../node_modules/@apollo/client/react/hooks/useReadQuery.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useReadQuery = useReadQuery;
var React = _interopRequireWildcard(require("react"));
var _QueryReference = require("../cache/QueryReference.js");
var _index = require("./internal/index.js");
var _useSuspenseQuery = require("./useSuspenseQuery.js");
var _index2 = require("../../utilities/globals/index.js");
var _useSyncExternalStore = require("./useSyncExternalStore.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useReadQuery(queryRef) {
  var internalQueryRef = (0, _QueryReference.unwrapQueryRef)(queryRef);
  (0, _index2.invariant)(internalQueryRef.promiseCache, 51);
  var promiseCache = internalQueryRef.promiseCache,
    key = internalQueryRef.key;
  if (!promiseCache.has(key)) {
    promiseCache.set(key, internalQueryRef.promise);
  }
  var promise = (0, _useSyncExternalStore.useSyncExternalStore)(React.useCallback(function (forceUpdate) {
    return internalQueryRef.listen(function (promise) {
      internalQueryRef.promiseCache.set(internalQueryRef.key, promise);
      forceUpdate();
    });
  }, [internalQueryRef]), function () {
    return promiseCache.get(key);
  }, function () {
    return promiseCache.get(key);
  });
  var result = (0, _index.__use)(promise);
  return React.useMemo(function () {
    return {
      data: result.data,
      networkStatus: result.networkStatus,
      error: (0, _useSuspenseQuery.toApolloError)(result)
    };
  }, [result]);
}
},{"react":"../node_modules/react/index.js","../cache/QueryReference.js":"../node_modules/@apollo/client/react/cache/QueryReference.js","./internal/index.js":"../node_modules/@apollo/client/react/hooks/internal/index.js","./useSuspenseQuery.js":"../node_modules/@apollo/client/react/hooks/useSuspenseQuery.js","../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","./useSyncExternalStore.js":"../node_modules/@apollo/client/react/hooks/useSyncExternalStore.js"}],"../node_modules/@apollo/client/react/hooks/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  useQuery: true,
  useSuspenseQuery: true,
  useBackgroundQuery: true,
  useReadQuery: true,
  skipToken: true
};
Object.defineProperty(exports, "skipToken", {
  enumerable: true,
  get: function () {
    return _constants.skipToken;
  }
});
Object.defineProperty(exports, "useBackgroundQuery", {
  enumerable: true,
  get: function () {
    return _useBackgroundQuery.useBackgroundQuery;
  }
});
Object.defineProperty(exports, "useQuery", {
  enumerable: true,
  get: function () {
    return _useQuery.useQuery;
  }
});
Object.defineProperty(exports, "useReadQuery", {
  enumerable: true,
  get: function () {
    return _useReadQuery.useReadQuery;
  }
});
Object.defineProperty(exports, "useSuspenseQuery", {
  enumerable: true,
  get: function () {
    return _useSuspenseQuery.useSuspenseQuery;
  }
});
require("../../utilities/globals/index.js");
var _useApolloClient = require("./useApolloClient.js");
Object.keys(_useApolloClient).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _useApolloClient[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _useApolloClient[key];
    }
  });
});
var _useLazyQuery = require("./useLazyQuery.js");
Object.keys(_useLazyQuery).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _useLazyQuery[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _useLazyQuery[key];
    }
  });
});
var _useMutation = require("./useMutation.js");
Object.keys(_useMutation).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _useMutation[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _useMutation[key];
    }
  });
});
var _useQuery = require("./useQuery.js");
var _useSubscription = require("./useSubscription.js");
Object.keys(_useSubscription).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _useSubscription[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _useSubscription[key];
    }
  });
});
var _useReactiveVar = require("./useReactiveVar.js");
Object.keys(_useReactiveVar).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _useReactiveVar[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _useReactiveVar[key];
    }
  });
});
var _useFragment = require("./useFragment.js");
Object.keys(_useFragment).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _useFragment[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _useFragment[key];
    }
  });
});
var _useSuspenseQuery = require("./useSuspenseQuery.js");
var _useBackgroundQuery = require("./useBackgroundQuery.js");
var _useReadQuery = require("./useReadQuery.js");
var _constants = require("./constants.js");
},{"../../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","./useApolloClient.js":"../node_modules/@apollo/client/react/hooks/useApolloClient.js","./useLazyQuery.js":"../node_modules/@apollo/client/react/hooks/useLazyQuery.js","./useMutation.js":"../node_modules/@apollo/client/react/hooks/useMutation.js","./useQuery.js":"../node_modules/@apollo/client/react/hooks/useQuery.js","./useSubscription.js":"../node_modules/@apollo/client/react/hooks/useSubscription.js","./useReactiveVar.js":"../node_modules/@apollo/client/react/hooks/useReactiveVar.js","./useFragment.js":"../node_modules/@apollo/client/react/hooks/useFragment.js","./useSuspenseQuery.js":"../node_modules/@apollo/client/react/hooks/useSuspenseQuery.js","./useBackgroundQuery.js":"../node_modules/@apollo/client/react/hooks/useBackgroundQuery.js","./useReadQuery.js":"../node_modules/@apollo/client/react/hooks/useReadQuery.js","./constants.js":"../node_modules/@apollo/client/react/hooks/constants.js"}],"../node_modules/@apollo/client/react/types/types.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"../node_modules/@apollo/client/react/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  ApolloProvider: true,
  ApolloConsumer: true,
  getApolloContext: true,
  resetApolloContext: true,
  DocumentType: true,
  operationName: true,
  parser: true
};
Object.defineProperty(exports, "ApolloConsumer", {
  enumerable: true,
  get: function () {
    return _index2.ApolloConsumer;
  }
});
Object.defineProperty(exports, "ApolloProvider", {
  enumerable: true,
  get: function () {
    return _index2.ApolloProvider;
  }
});
Object.defineProperty(exports, "DocumentType", {
  enumerable: true,
  get: function () {
    return _index4.DocumentType;
  }
});
Object.defineProperty(exports, "getApolloContext", {
  enumerable: true,
  get: function () {
    return _index2.getApolloContext;
  }
});
Object.defineProperty(exports, "operationName", {
  enumerable: true,
  get: function () {
    return _index4.operationName;
  }
});
Object.defineProperty(exports, "parser", {
  enumerable: true,
  get: function () {
    return _index4.parser;
  }
});
Object.defineProperty(exports, "resetApolloContext", {
  enumerable: true,
  get: function () {
    return _index2.resetApolloContext;
  }
});
require("../utilities/globals/index.js");
var _index2 = require("./context/index.js");
var _index3 = require("./hooks/index.js");
Object.keys(_index3).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index3[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index3[key];
    }
  });
});
var _index4 = require("./parser/index.js");
var _types = require("./types/types.js");
Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _types[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types[key];
    }
  });
});
},{"../utilities/globals/index.js":"../node_modules/@apollo/client/utilities/globals/index.js","./context/index.js":"../node_modules/@apollo/client/react/context/index.js","./hooks/index.js":"../node_modules/@apollo/client/react/hooks/index.js","./parser/index.js":"../node_modules/@apollo/client/react/parser/index.js","./types/types.js":"../node_modules/@apollo/client/react/types/types.js"}],"../node_modules/@apollo/client/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _index = require("./core/index.js");
Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index[key];
    }
  });
});
var _index2 = require("./react/index.js");
Object.keys(_index2).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index2[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index2[key];
    }
  });
});
},{"./core/index.js":"../node_modules/@apollo/client/core/index.js","./react/index.js":"../node_modules/@apollo/client/react/index.js"}],"index.js":[function(require,module,exports) {
"use strict";

var _client = require("@apollo/client");
var _templateObject;
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
var client = new _client.ApolloClient({
  uri: "http://localhost:4000/graphql",
  cache: new _client.InMemoryCache()
});
var getUsers = (0, _client.gql)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  query {\n    users {\n      id\n      name\n    }\n  }\n"])));
client.query({
  query: getUsers
}).then(function (response) {
  var html = "";
  response.data.users.forEach(function (user) {
    html += "\n            <div>\n                <h3>".concat(user.name, "</h3>\n            </div>\n        ");
  });
  document.getElementById("users").innerHTML = html;
});
},{"@apollo/client":"../node_modules/@apollo/client/index.js"}],"../node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}
module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "50161" + '/');
  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);
    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);
          if (didAccept) {
            handled = true;
          }
        }
      });

      // Enable HMR for CSS by default.
      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });
      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }
    if (data.type === 'reload') {
      ws.close();
      ws.onclose = function () {
        location.reload();
      };
    }
    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }
    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}
function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);
  if (overlay) {
    overlay.remove();
  }
}
function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID;

  // html encode message and stack trace
  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}
function getParents(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return [];
  }
  var parents = [];
  var k, d, dep;
  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];
      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }
  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }
  return parents;
}
function hmrApply(bundle, asset) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}
function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }
  if (checkedAssets[id]) {
    return;
  }
  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }
  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}
function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};
  if (cached) {
    cached.hot.data = bundle.hotData;
  }
  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }
  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });
    return true;
  }
}
},{}]},{},["../node_modules/parcel-bundler/src/builtins/hmr-runtime.js","index.js"], null)
//# sourceMappingURL=/src.e31bb0bc.js.map